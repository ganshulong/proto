// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jdddzpk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "jdddzpk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProJDDDZGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* JDDDZMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JDDDZMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* JDDDZScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JDDDZScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* JDDDZAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JDDDZAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* JDDDZWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JDDDZWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* JDDDZWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JDDDZWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallScoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserCallScoreResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallScoreResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserCallScoreRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallScoreRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameCallNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameCallNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameCallNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameQiangNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameQiangNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameQiangNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallLandlordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserCallLandlordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallLandlordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallLandlordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserCallLandlordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallLandlordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserQinagLandlordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserQinagLandlordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserQinagLandlordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserQiangLandlordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserQiangLandlordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserQiangLandlordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameSendLastCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameSendLastCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendLastCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserMingPaiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserMingPaiRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserMingPaiRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameUserMingPaiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameUserMingPaiResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserMingPaiResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameMingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameMingNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameMingNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProJDDDZGameStartAgain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProJDDDZGameStartAgain_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProJDDDZGameStartAgain_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JDDDZGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JDDDZSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JDDDZKIGN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JDDDZBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JDDDZBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JDDDZBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_jdddzpk_2eproto() {
  protobuf_AddDesc_jdddzpk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "jdddzpk.proto");
  GOOGLE_CHECK(file != NULL);
  ProJDDDZGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProJDDDZGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStatusResponse, status_),
  };
  ProJDDDZGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameStatusResponse_descriptor_,
      ProJDDDZGameStatusResponse::default_instance_,
      ProJDDDZGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameStatusResponse));
  ProJDDDZGameStatusResponse_MSGID_descriptor_ = ProJDDDZGameStatusResponse_descriptor_->enum_type(0);
  ProJDDDZGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProJDDDZGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDeskInfoResponse, cellscore_),
  };
  ProJDDDZGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameDeskInfoResponse_descriptor_,
      ProJDDDZGameDeskInfoResponse::default_instance_,
      ProJDDDZGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameDeskInfoResponse));
  ProJDDDZGameDeskInfoResponse_MSGID_descriptor_ = ProJDDDZGameDeskInfoResponse_descriptor_->enum_type(0);
  ProJDDDZGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProJDDDZGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyNotify, time_),
  };
  ProJDDDZGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameReadyNotify_descriptor_,
      ProJDDDZGameReadyNotify::default_instance_,
      ProJDDDZGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameReadyNotify));
  ProJDDDZGameReadyNotify_MSGID_descriptor_ = ProJDDDZGameReadyNotify_descriptor_->enum_type(0);
  ProJDDDZGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProJDDDZGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyRequest, seat_),
  };
  ProJDDDZGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameReadyRequest_descriptor_,
      ProJDDDZGameReadyRequest::default_instance_,
      ProJDDDZGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameReadyRequest));
  ProJDDDZGameReadyRequest_MSGID_descriptor_ = ProJDDDZGameReadyRequest_descriptor_->enum_type(0);
  ProJDDDZGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProJDDDZGameReadyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyResponse, ismingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyResponse, mingpaitag_),
  };
  ProJDDDZGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameReadyResponse_descriptor_,
      ProJDDDZGameReadyResponse::default_instance_,
      ProJDDDZGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameReadyResponse));
  ProJDDDZGameReadyResponse_MSGID_descriptor_ = ProJDDDZGameReadyResponse_descriptor_->enum_type(0);
  ProJDDDZGameStart_descriptor_ = file->message_type(5);
  static const int ProJDDDZGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStart, outcardtimes_),
  };
  ProJDDDZGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameStart_descriptor_,
      ProJDDDZGameStart::default_instance_,
      ProJDDDZGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameStart));
  ProJDDDZGameStart_MSGID_descriptor_ = ProJDDDZGameStart_descriptor_->enum_type(0);
  ProJDDDZGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProJDDDZGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceNotify, dicecount_),
  };
  ProJDDDZGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameDiceNotify_descriptor_,
      ProJDDDZGameDiceNotify::default_instance_,
      ProJDDDZGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameDiceNotify));
  ProJDDDZGameDiceNotify_MSGID_descriptor_ = ProJDDDZGameDiceNotify_descriptor_->enum_type(0);
  ProJDDDZGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProJDDDZGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceRequest, dicecount_),
  };
  ProJDDDZGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameDiceRequest_descriptor_,
      ProJDDDZGameDiceRequest::default_instance_,
      ProJDDDZGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameDiceRequest));
  ProJDDDZGameDiceRequest_MSGID_descriptor_ = ProJDDDZGameDiceRequest_descriptor_->enum_type(0);
  ProJDDDZGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProJDDDZGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceResult, dicecount_),
  };
  ProJDDDZGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameDiceResult_descriptor_,
      ProJDDDZGameDiceResult::default_instance_,
      ProJDDDZGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameDiceResult));
  ProJDDDZGameDiceResult_MSGID_descriptor_ = ProJDDDZGameDiceResult_descriptor_->enum_type(0);
  ProJDDDZGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProJDDDZGameSendMahs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, cbleftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, offlinetag_),
  };
  ProJDDDZGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameSendMahs_descriptor_,
      ProJDDDZGameSendMahs::default_instance_,
      ProJDDDZGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameSendMahs));
  ProJDDDZGameSendMahs_MSGID_descriptor_ = ProJDDDZGameSendMahs_descriptor_->enum_type(0);
  ProJDDDZGameKingData_descriptor_ = file->message_type(10);
  static const int ProJDDDZGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, cbbawangking_),
  };
  ProJDDDZGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameKingData_descriptor_,
      ProJDDDZGameKingData::default_instance_,
      ProJDDDZGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameKingData));
  ProJDDDZGameKingData_MSGID_descriptor_ = ProJDDDZGameKingData_descriptor_->enum_type(0);
  ProJDDDZGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProJDDDZGameOutMahsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, nochangemahs_),
  };
  ProJDDDZGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameOutMahsResponse_descriptor_,
      ProJDDDZGameOutMahsResponse::default_instance_,
      ProJDDDZGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameOutMahsResponse));
  ProJDDDZGameOutMahsResponse_MSGID_descriptor_ = ProJDDDZGameOutMahsResponse_descriptor_->enum_type(0);
  ProJDDDZGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProJDDDZGameTimerPower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, outcardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, lastcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, lastpoint_),
  };
  ProJDDDZGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameTimerPower_descriptor_,
      ProJDDDZGameTimerPower::default_instance_,
      ProJDDDZGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameTimerPower));
  ProJDDDZGameTimerPower_MSGID_descriptor_ = ProJDDDZGameTimerPower_descriptor_->enum_type(0);
  ProJDDDZGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProJDDDZGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, operateseat_),
  };
  ProJDDDZGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameOperateNotify_descriptor_,
      ProJDDDZGameOperateNotify::default_instance_,
      ProJDDDZGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameOperateNotify));
  ProJDDDZGameOperateNotify_MSGID_descriptor_ = ProJDDDZGameOperateNotify_descriptor_->enum_type(0);
  ProJDDDZGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProJDDDZGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, handcount_),
  };
  ProJDDDZGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameOperateResult_descriptor_,
      ProJDDDZGameOperateResult::default_instance_,
      ProJDDDZGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameOperateResult));
  ProJDDDZGameOperateResult_MSGID_descriptor_ = ProJDDDZGameOperateResult_descriptor_->enum_type(0);
  ProJDDDZGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProJDDDZGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateRequest, cboperatecard_),
  };
  ProJDDDZGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameOperateRequest_descriptor_,
      ProJDDDZGameOperateRequest::default_instance_,
      ProJDDDZGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameOperateRequest));
  ProJDDDZGameOperateRequest_MSGID_descriptor_ = ProJDDDZGameOperateRequest_descriptor_->enum_type(0);
  ProJDDDZGameTrust_descriptor_ = file->message_type(16);
  static const int ProJDDDZGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTrust, istrust_),
  };
  ProJDDDZGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameTrust_descriptor_,
      ProJDDDZGameTrust::default_instance_,
      ProJDDDZGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameTrust));
  ProJDDDZGameTrust_MSGID_descriptor_ = ProJDDDZGameTrust_descriptor_->enum_type(0);
  ProJDDDZGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProJDDDZGameOutMahRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahRequest, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahRequest, nochangemahs_),
  };
  ProJDDDZGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameOutMahRequest_descriptor_,
      ProJDDDZGameOutMahRequest::default_instance_,
      ProJDDDZGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameOutMahRequest));
  ProJDDDZGameOutMahRequest_MSGID_descriptor_ = ProJDDDZGameOutMahRequest_descriptor_->enum_type(0);
  ProJDDDZGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProJDDDZGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, cbleftcount_),
  };
  ProJDDDZGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameCatchCard_descriptor_,
      ProJDDDZGameCatchCard::default_instance_,
      ProJDDDZGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameCatchCard));
  ProJDDDZGameCatchCard_MSGID_descriptor_ = ProJDDDZGameCatchCard_descriptor_->enum_type(0);
  JDDDZMahList_descriptor_ = file->message_type(19);
  static const int JDDDZMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZMahList, mahs_),
  };
  JDDDZMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JDDDZMahList_descriptor_,
      JDDDZMahList::default_instance_,
      JDDDZMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JDDDZMahList));
  JDDDZScoreList_descriptor_ = file->message_type(20);
  static const int JDDDZScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZScoreList, roundscore_),
  };
  JDDDZScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JDDDZScoreList_descriptor_,
      JDDDZScoreList::default_instance_,
      JDDDZScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JDDDZScoreList));
  JDDDZAwardList_descriptor_ = file->message_type(21);
  static const int JDDDZAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZAwardList, awardscore_),
  };
  JDDDZAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JDDDZAwardList_descriptor_,
      JDDDZAwardList::default_instance_,
      JDDDZAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JDDDZAwardList));
  ProJDDDZGameEnd_descriptor_ = file->message_type(22);
  static const int ProJDDDZGameEnd_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, detailedscores_),
  };
  ProJDDDZGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameEnd_descriptor_,
      ProJDDDZGameEnd::default_instance_,
      ProJDDDZGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameEnd));
  ProJDDDZGameEnd_MSGID_descriptor_ = ProJDDDZGameEnd_descriptor_->enum_type(0);
  ProJDDDZGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProJDDDZGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundRequest, text_),
  };
  ProJDDDZGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameQuickSoundRequest_descriptor_,
      ProJDDDZGameQuickSoundRequest::default_instance_,
      ProJDDDZGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameQuickSoundRequest));
  ProJDDDZGameQuickSoundRequest_MSGID_descriptor_ = ProJDDDZGameQuickSoundRequest_descriptor_->enum_type(0);
  ProJDDDZGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProJDDDZGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundResponse, text_),
  };
  ProJDDDZGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameQuickSoundResponse_descriptor_,
      ProJDDDZGameQuickSoundResponse::default_instance_,
      ProJDDDZGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameQuickSoundResponse));
  ProJDDDZGameQuickSoundResponse_MSGID_descriptor_ = ProJDDDZGameQuickSoundResponse_descriptor_->enum_type(0);
  ProJDDDZGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProJDDDZGameSendDiscardMahs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendDiscardMahs, deskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendDiscardMahs, outcardcount_),
  };
  ProJDDDZGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameSendDiscardMahs_descriptor_,
      ProJDDDZGameSendDiscardMahs::default_instance_,
      ProJDDDZGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameSendDiscardMahs));
  ProJDDDZGameSendDiscardMahs_MSGID_descriptor_ = ProJDDDZGameSendDiscardMahs_descriptor_->enum_type(0);
  JDDDZWeaveItem_descriptor_ = file->message_type(26);
  static const int JDDDZWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItem, cardsize_),
  };
  JDDDZWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JDDDZWeaveItem_descriptor_,
      JDDDZWeaveItem::default_instance_,
      JDDDZWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JDDDZWeaveItem));
  JDDDZWeaveItems_descriptor_ = file->message_type(27);
  static const int JDDDZWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItems, items_),
  };
  JDDDZWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JDDDZWeaveItems_descriptor_,
      JDDDZWeaveItems::default_instance_,
      JDDDZWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JDDDZWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JDDDZWeaveItems));
  ProJDDDZGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProJDDDZGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendActionMahs, weaves_),
  };
  ProJDDDZGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameSendActionMahs_descriptor_,
      ProJDDDZGameSendActionMahs::default_instance_,
      ProJDDDZGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameSendActionMahs));
  ProJDDDZGameSendActionMahs_MSGID_descriptor_ = ProJDDDZGameSendActionMahs_descriptor_->enum_type(0);
  ProJDDDZGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProJDDDZGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenRequest, time_),
  };
  ProJDDDZGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameBrokenRequest_descriptor_,
      ProJDDDZGameBrokenRequest::default_instance_,
      ProJDDDZGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameBrokenRequest));
  ProJDDDZGameBrokenRequest_MSGID_descriptor_ = ProJDDDZGameBrokenRequest_descriptor_->enum_type(0);
  ProJDDDZGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProJDDDZGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenOperate, result_),
  };
  ProJDDDZGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameBrokenOperate_descriptor_,
      ProJDDDZGameBrokenOperate::default_instance_,
      ProJDDDZGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameBrokenOperate));
  ProJDDDZGameBrokenOperate_MSGID_descriptor_ = ProJDDDZGameBrokenOperate_descriptor_->enum_type(0);
  ProJDDDZGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProJDDDZGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenNotify, operate_code_),
  };
  ProJDDDZGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameBrokenNotify_descriptor_,
      ProJDDDZGameBrokenNotify::default_instance_,
      ProJDDDZGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameBrokenNotify));
  ProJDDDZGameBrokenNotify_MSGID_descriptor_ = ProJDDDZGameBrokenNotify_descriptor_->enum_type(0);
  ProJDDDZGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProJDDDZGameRuleConfig_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, have_bottom_king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, have_mai_lei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, hava_hui_tou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, bbawangfanbei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, splaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, nselfseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, bjingdian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, bmagiccard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, bmasterthebe_),
  };
  ProJDDDZGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameRuleConfig_descriptor_,
      ProJDDDZGameRuleConfig::default_instance_,
      ProJDDDZGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameRuleConfig));
  ProJDDDZGameRuleConfig_MSGID_descriptor_ = ProJDDDZGameRuleConfig_descriptor_->enum_type(0);
  ProJDDDZGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProJDDDZGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenStatus, left_time_),
  };
  ProJDDDZGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameBrokenStatus_descriptor_,
      ProJDDDZGameBrokenStatus::default_instance_,
      ProJDDDZGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameBrokenStatus));
  ProJDDDZGameBrokenStatus_MSGID_descriptor_ = ProJDDDZGameBrokenStatus_descriptor_->enum_type(0);
  ProJDDDZGameDataResp_descriptor_ = file->message_type(34);
  static const int ProJDDDZGameDataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDataResp, type_),
  };
  ProJDDDZGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameDataResp_descriptor_,
      ProJDDDZGameDataResp::default_instance_,
      ProJDDDZGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameDataResp));
  ProJDDDZGameDataResp_MSGID_descriptor_ = ProJDDDZGameDataResp_descriptor_->enum_type(0);
  ProJDDDZGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProJDDDZGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordRequest, url_),
  };
  ProJDDDZGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameRecordRequest_descriptor_,
      ProJDDDZGameRecordRequest::default_instance_,
      ProJDDDZGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameRecordRequest));
  ProJDDDZGameRecordRequest_MSGID_descriptor_ = ProJDDDZGameRecordRequest_descriptor_->enum_type(0);
  ProJDDDZGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProJDDDZGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordResponse, url_),
  };
  ProJDDDZGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameRecordResponse_descriptor_,
      ProJDDDZGameRecordResponse::default_instance_,
      ProJDDDZGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameRecordResponse));
  ProJDDDZGameRecordResponse_MSGID_descriptor_ = ProJDDDZGameRecordResponse_descriptor_->enum_type(0);
  ProJDDDZGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProJDDDZGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, strstreetname_),
  };
  ProJDDDZGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserLocationRequest_descriptor_,
      ProJDDDZGameUserLocationRequest::default_instance_,
      ProJDDDZGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserLocationRequest));
  ProJDDDZGameUserLocationRequest_MSGID_descriptor_ = ProJDDDZGameUserLocationRequest_descriptor_->enum_type(0);
  ProJDDDZGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProJDDDZGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSyncCardResponse, handmahs_),
  };
  ProJDDDZGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameSyncCardResponse_descriptor_,
      ProJDDDZGameSyncCardResponse::default_instance_,
      ProJDDDZGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameSyncCardResponse));
  ProJDDDZGameSyncCardResponse_MSGID_descriptor_ = ProJDDDZGameSyncCardResponse_descriptor_->enum_type(0);
  ProJDDDZGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProJDDDZGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserPhoneStatusRequest, userstatus_),
  };
  ProJDDDZGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserPhoneStatusRequest_descriptor_,
      ProJDDDZGameUserPhoneStatusRequest::default_instance_,
      ProJDDDZGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserPhoneStatusRequest));
  ProJDDDZGameUserPhoneStatusRequest_MSGID_descriptor_ = ProJDDDZGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProJDDDZGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProJDDDZGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserGiveUpRequest, seat_id_),
  };
  ProJDDDZGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserGiveUpRequest_descriptor_,
      ProJDDDZGameUserGiveUpRequest::default_instance_,
      ProJDDDZGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserGiveUpRequest));
  ProJDDDZGameUserGiveUpRequest_MSGID_descriptor_ = ProJDDDZGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProJDDDZGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProJDDDZGameUserHintRequest_offsets_[1] = {
  };
  ProJDDDZGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserHintRequest_descriptor_,
      ProJDDDZGameUserHintRequest::default_instance_,
      ProJDDDZGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserHintRequest));
  ProJDDDZGameUserHintRequest_MSGID_descriptor_ = ProJDDDZGameUserHintRequest_descriptor_->enum_type(0);
  ProJDDDZGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProJDDDZGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserHintResponse, outmahs_),
  };
  ProJDDDZGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserHintResponse_descriptor_,
      ProJDDDZGameUserHintResponse::default_instance_,
      ProJDDDZGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserHintResponse));
  ProJDDDZGameUserHintResponse_MSGID_descriptor_ = ProJDDDZGameUserHintResponse_descriptor_->enum_type(0);
  ProJDDDZGameUserCallScoreResponse_descriptor_ = file->message_type(43);
  static const int ProJDDDZGameUserCallScoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreResponse, usercallscore_),
  };
  ProJDDDZGameUserCallScoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserCallScoreResponse_descriptor_,
      ProJDDDZGameUserCallScoreResponse::default_instance_,
      ProJDDDZGameUserCallScoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserCallScoreResponse));
  ProJDDDZGameUserCallScoreResponse_MSGID_descriptor_ = ProJDDDZGameUserCallScoreResponse_descriptor_->enum_type(0);
  ProJDDDZGameUserCallScoreRequest_descriptor_ = file->message_type(44);
  static const int ProJDDDZGameUserCallScoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreRequest, usercallscore_),
  };
  ProJDDDZGameUserCallScoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserCallScoreRequest_descriptor_,
      ProJDDDZGameUserCallScoreRequest::default_instance_,
      ProJDDDZGameUserCallScoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallScoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserCallScoreRequest));
  ProJDDDZGameUserCallScoreRequest_MSGID_descriptor_ = ProJDDDZGameUserCallScoreRequest_descriptor_->enum_type(0);
  ProJDDDZGameCallNotify_descriptor_ = file->message_type(45);
  static const int ProJDDDZGameCallNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCallNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCallNotify, maxcallscore_),
  };
  ProJDDDZGameCallNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameCallNotify_descriptor_,
      ProJDDDZGameCallNotify::default_instance_,
      ProJDDDZGameCallNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCallNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameCallNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameCallNotify));
  ProJDDDZGameCallNotify_MSGID_descriptor_ = ProJDDDZGameCallNotify_descriptor_->enum_type(0);
  ProJDDDZGameQiangNotify_descriptor_ = file->message_type(46);
  static const int ProJDDDZGameQiangNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQiangNotify, seat_),
  };
  ProJDDDZGameQiangNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameQiangNotify_descriptor_,
      ProJDDDZGameQiangNotify::default_instance_,
      ProJDDDZGameQiangNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQiangNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameQiangNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameQiangNotify));
  ProJDDDZGameQiangNotify_MSGID_descriptor_ = ProJDDDZGameQiangNotify_descriptor_->enum_type(0);
  ProJDDDZGameUserCallLandlordResponse_descriptor_ = file->message_type(47);
  static const int ProJDDDZGameUserCallLandlordResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, iscallandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, landlordseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, issoundcall_),
  };
  ProJDDDZGameUserCallLandlordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserCallLandlordResponse_descriptor_,
      ProJDDDZGameUserCallLandlordResponse::default_instance_,
      ProJDDDZGameUserCallLandlordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserCallLandlordResponse));
  ProJDDDZGameUserCallLandlordResponse_MSGID_descriptor_ = ProJDDDZGameUserCallLandlordResponse_descriptor_->enum_type(0);
  ProJDDDZGameUserCallLandlordRequest_descriptor_ = file->message_type(48);
  static const int ProJDDDZGameUserCallLandlordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordRequest, iscallandlord_),
  };
  ProJDDDZGameUserCallLandlordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserCallLandlordRequest_descriptor_,
      ProJDDDZGameUserCallLandlordRequest::default_instance_,
      ProJDDDZGameUserCallLandlordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserCallLandlordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserCallLandlordRequest));
  ProJDDDZGameUserCallLandlordRequest_MSGID_descriptor_ = ProJDDDZGameUserCallLandlordRequest_descriptor_->enum_type(0);
  ProJDDDZGameUserQinagLandlordResponse_descriptor_ = file->message_type(49);
  static const int ProJDDDZGameUserQinagLandlordResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQinagLandlordResponse, isqianglandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQinagLandlordResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQinagLandlordResponse, landlordseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQinagLandlordResponse, seat_),
  };
  ProJDDDZGameUserQinagLandlordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserQinagLandlordResponse_descriptor_,
      ProJDDDZGameUserQinagLandlordResponse::default_instance_,
      ProJDDDZGameUserQinagLandlordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQinagLandlordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQinagLandlordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserQinagLandlordResponse));
  ProJDDDZGameUserQinagLandlordResponse_MSGID_descriptor_ = ProJDDDZGameUserQinagLandlordResponse_descriptor_->enum_type(0);
  ProJDDDZGameUserQiangLandlordRequest_descriptor_ = file->message_type(50);
  static const int ProJDDDZGameUserQiangLandlordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQiangLandlordRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQiangLandlordRequest, isqianglandlord_),
  };
  ProJDDDZGameUserQiangLandlordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserQiangLandlordRequest_descriptor_,
      ProJDDDZGameUserQiangLandlordRequest::default_instance_,
      ProJDDDZGameUserQiangLandlordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQiangLandlordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserQiangLandlordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserQiangLandlordRequest));
  ProJDDDZGameUserQiangLandlordRequest_MSGID_descriptor_ = ProJDDDZGameUserQiangLandlordRequest_descriptor_->enum_type(0);
  ProJDDDZGameSendLastCard_descriptor_ = file->message_type(51);
  static const int ProJDDDZGameSendLastCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, lastmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, laizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, isrecome_),
  };
  ProJDDDZGameSendLastCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameSendLastCard_descriptor_,
      ProJDDDZGameSendLastCard::default_instance_,
      ProJDDDZGameSendLastCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameSendLastCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameSendLastCard));
  ProJDDDZGameSendLastCard_MSGID_descriptor_ = ProJDDDZGameSendLastCard_descriptor_->enum_type(0);
  ProJDDDZGameUserMingPaiRequest_descriptor_ = file->message_type(52);
  static const int ProJDDDZGameUserMingPaiRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiRequest, ismingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiRequest, beilv_),
  };
  ProJDDDZGameUserMingPaiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserMingPaiRequest_descriptor_,
      ProJDDDZGameUserMingPaiRequest::default_instance_,
      ProJDDDZGameUserMingPaiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserMingPaiRequest));
  ProJDDDZGameUserMingPaiRequest_MSGID_descriptor_ = ProJDDDZGameUserMingPaiRequest_descriptor_->enum_type(0);
  ProJDDDZGameUserMingPaiResponse_descriptor_ = file->message_type(53);
  static const int ProJDDDZGameUserMingPaiResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiResponse, ismingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiResponse, mingtag_),
  };
  ProJDDDZGameUserMingPaiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameUserMingPaiResponse_descriptor_,
      ProJDDDZGameUserMingPaiResponse::default_instance_,
      ProJDDDZGameUserMingPaiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameUserMingPaiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameUserMingPaiResponse));
  ProJDDDZGameUserMingPaiResponse_MSGID_descriptor_ = ProJDDDZGameUserMingPaiResponse_descriptor_->enum_type(0);
  ProJDDDZGameMingNotify_descriptor_ = file->message_type(54);
  static const int ProJDDDZGameMingNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameMingNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameMingNotify, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameMingNotify, time_),
  };
  ProJDDDZGameMingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameMingNotify_descriptor_,
      ProJDDDZGameMingNotify::default_instance_,
      ProJDDDZGameMingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameMingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameMingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameMingNotify));
  ProJDDDZGameMingNotify_MSGID_descriptor_ = ProJDDDZGameMingNotify_descriptor_->enum_type(0);
  ProJDDDZGameStartAgain_descriptor_ = file->message_type(55);
  static const int ProJDDDZGameStartAgain_offsets_[1] = {
  };
  ProJDDDZGameStartAgain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProJDDDZGameStartAgain_descriptor_,
      ProJDDDZGameStartAgain::default_instance_,
      ProJDDDZGameStartAgain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStartAgain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProJDDDZGameStartAgain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProJDDDZGameStartAgain));
  ProJDDDZGameStartAgain_MSGID_descriptor_ = ProJDDDZGameStartAgain_descriptor_->enum_type(0);
  JDDDZGameState_descriptor_ = file->enum_type(0);
  JDDDZSEND_TYPE_descriptor_ = file->enum_type(1);
  JDDDZKIGN_TYPE_descriptor_ = file->enum_type(2);
  JDDDZBROKEN_TYPE_descriptor_ = file->enum_type(3);
  JDDDZBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  JDDDZBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_jdddzpk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameStatusResponse_descriptor_, &ProJDDDZGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameDeskInfoResponse_descriptor_, &ProJDDDZGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameReadyNotify_descriptor_, &ProJDDDZGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameReadyRequest_descriptor_, &ProJDDDZGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameReadyResponse_descriptor_, &ProJDDDZGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameStart_descriptor_, &ProJDDDZGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameDiceNotify_descriptor_, &ProJDDDZGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameDiceRequest_descriptor_, &ProJDDDZGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameDiceResult_descriptor_, &ProJDDDZGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameSendMahs_descriptor_, &ProJDDDZGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameKingData_descriptor_, &ProJDDDZGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameOutMahsResponse_descriptor_, &ProJDDDZGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameTimerPower_descriptor_, &ProJDDDZGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameOperateNotify_descriptor_, &ProJDDDZGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameOperateResult_descriptor_, &ProJDDDZGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameOperateRequest_descriptor_, &ProJDDDZGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameTrust_descriptor_, &ProJDDDZGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameOutMahRequest_descriptor_, &ProJDDDZGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameCatchCard_descriptor_, &ProJDDDZGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JDDDZMahList_descriptor_, &JDDDZMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JDDDZScoreList_descriptor_, &JDDDZScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JDDDZAwardList_descriptor_, &JDDDZAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameEnd_descriptor_, &ProJDDDZGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameQuickSoundRequest_descriptor_, &ProJDDDZGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameQuickSoundResponse_descriptor_, &ProJDDDZGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameSendDiscardMahs_descriptor_, &ProJDDDZGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JDDDZWeaveItem_descriptor_, &JDDDZWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JDDDZWeaveItems_descriptor_, &JDDDZWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameSendActionMahs_descriptor_, &ProJDDDZGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameBrokenRequest_descriptor_, &ProJDDDZGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameBrokenOperate_descriptor_, &ProJDDDZGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameBrokenNotify_descriptor_, &ProJDDDZGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameRuleConfig_descriptor_, &ProJDDDZGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameBrokenStatus_descriptor_, &ProJDDDZGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameDataResp_descriptor_, &ProJDDDZGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameRecordRequest_descriptor_, &ProJDDDZGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameRecordResponse_descriptor_, &ProJDDDZGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserLocationRequest_descriptor_, &ProJDDDZGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameSyncCardResponse_descriptor_, &ProJDDDZGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserPhoneStatusRequest_descriptor_, &ProJDDDZGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserGiveUpRequest_descriptor_, &ProJDDDZGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserHintRequest_descriptor_, &ProJDDDZGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserHintResponse_descriptor_, &ProJDDDZGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserCallScoreResponse_descriptor_, &ProJDDDZGameUserCallScoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserCallScoreRequest_descriptor_, &ProJDDDZGameUserCallScoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameCallNotify_descriptor_, &ProJDDDZGameCallNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameQiangNotify_descriptor_, &ProJDDDZGameQiangNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserCallLandlordResponse_descriptor_, &ProJDDDZGameUserCallLandlordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserCallLandlordRequest_descriptor_, &ProJDDDZGameUserCallLandlordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserQinagLandlordResponse_descriptor_, &ProJDDDZGameUserQinagLandlordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserQiangLandlordRequest_descriptor_, &ProJDDDZGameUserQiangLandlordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameSendLastCard_descriptor_, &ProJDDDZGameSendLastCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserMingPaiRequest_descriptor_, &ProJDDDZGameUserMingPaiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameUserMingPaiResponse_descriptor_, &ProJDDDZGameUserMingPaiResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameMingNotify_descriptor_, &ProJDDDZGameMingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProJDDDZGameStartAgain_descriptor_, &ProJDDDZGameStartAgain::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_jdddzpk_2eproto() {
  delete ProJDDDZGameStatusResponse::default_instance_;
  delete ProJDDDZGameStatusResponse_reflection_;
  delete ProJDDDZGameDeskInfoResponse::default_instance_;
  delete ProJDDDZGameDeskInfoResponse_reflection_;
  delete ProJDDDZGameReadyNotify::default_instance_;
  delete ProJDDDZGameReadyNotify_reflection_;
  delete ProJDDDZGameReadyRequest::default_instance_;
  delete ProJDDDZGameReadyRequest_reflection_;
  delete ProJDDDZGameReadyResponse::default_instance_;
  delete ProJDDDZGameReadyResponse_reflection_;
  delete ProJDDDZGameStart::default_instance_;
  delete ProJDDDZGameStart_reflection_;
  delete ProJDDDZGameDiceNotify::default_instance_;
  delete ProJDDDZGameDiceNotify_reflection_;
  delete ProJDDDZGameDiceRequest::default_instance_;
  delete ProJDDDZGameDiceRequest_reflection_;
  delete ProJDDDZGameDiceResult::default_instance_;
  delete ProJDDDZGameDiceResult_reflection_;
  delete ProJDDDZGameSendMahs::default_instance_;
  delete ProJDDDZGameSendMahs_reflection_;
  delete ProJDDDZGameKingData::default_instance_;
  delete ProJDDDZGameKingData_reflection_;
  delete ProJDDDZGameOutMahsResponse::default_instance_;
  delete ProJDDDZGameOutMahsResponse_reflection_;
  delete ProJDDDZGameTimerPower::default_instance_;
  delete ProJDDDZGameTimerPower_reflection_;
  delete ProJDDDZGameOperateNotify::default_instance_;
  delete ProJDDDZGameOperateNotify_reflection_;
  delete ProJDDDZGameOperateResult::default_instance_;
  delete ProJDDDZGameOperateResult_reflection_;
  delete ProJDDDZGameOperateRequest::default_instance_;
  delete ProJDDDZGameOperateRequest_reflection_;
  delete ProJDDDZGameTrust::default_instance_;
  delete ProJDDDZGameTrust_reflection_;
  delete ProJDDDZGameOutMahRequest::default_instance_;
  delete ProJDDDZGameOutMahRequest_reflection_;
  delete ProJDDDZGameCatchCard::default_instance_;
  delete ProJDDDZGameCatchCard_reflection_;
  delete JDDDZMahList::default_instance_;
  delete JDDDZMahList_reflection_;
  delete JDDDZScoreList::default_instance_;
  delete JDDDZScoreList_reflection_;
  delete JDDDZAwardList::default_instance_;
  delete JDDDZAwardList_reflection_;
  delete ProJDDDZGameEnd::default_instance_;
  delete ProJDDDZGameEnd_reflection_;
  delete ProJDDDZGameQuickSoundRequest::default_instance_;
  delete ProJDDDZGameQuickSoundRequest_reflection_;
  delete ProJDDDZGameQuickSoundResponse::default_instance_;
  delete ProJDDDZGameQuickSoundResponse_reflection_;
  delete ProJDDDZGameSendDiscardMahs::default_instance_;
  delete ProJDDDZGameSendDiscardMahs_reflection_;
  delete JDDDZWeaveItem::default_instance_;
  delete JDDDZWeaveItem_reflection_;
  delete JDDDZWeaveItems::default_instance_;
  delete JDDDZWeaveItems_reflection_;
  delete ProJDDDZGameSendActionMahs::default_instance_;
  delete ProJDDDZGameSendActionMahs_reflection_;
  delete ProJDDDZGameBrokenRequest::default_instance_;
  delete ProJDDDZGameBrokenRequest_reflection_;
  delete ProJDDDZGameBrokenOperate::default_instance_;
  delete ProJDDDZGameBrokenOperate_reflection_;
  delete ProJDDDZGameBrokenNotify::default_instance_;
  delete ProJDDDZGameBrokenNotify_reflection_;
  delete ProJDDDZGameRuleConfig::default_instance_;
  delete ProJDDDZGameRuleConfig_reflection_;
  delete ProJDDDZGameBrokenStatus::default_instance_;
  delete ProJDDDZGameBrokenStatus_reflection_;
  delete ProJDDDZGameDataResp::default_instance_;
  delete ProJDDDZGameDataResp_reflection_;
  delete ProJDDDZGameRecordRequest::default_instance_;
  delete ProJDDDZGameRecordRequest_reflection_;
  delete ProJDDDZGameRecordResponse::default_instance_;
  delete ProJDDDZGameRecordResponse_reflection_;
  delete ProJDDDZGameUserLocationRequest::default_instance_;
  delete ProJDDDZGameUserLocationRequest_reflection_;
  delete ProJDDDZGameSyncCardResponse::default_instance_;
  delete ProJDDDZGameSyncCardResponse_reflection_;
  delete ProJDDDZGameUserPhoneStatusRequest::default_instance_;
  delete ProJDDDZGameUserPhoneStatusRequest_reflection_;
  delete ProJDDDZGameUserGiveUpRequest::default_instance_;
  delete ProJDDDZGameUserGiveUpRequest_reflection_;
  delete ProJDDDZGameUserHintRequest::default_instance_;
  delete ProJDDDZGameUserHintRequest_reflection_;
  delete ProJDDDZGameUserHintResponse::default_instance_;
  delete ProJDDDZGameUserHintResponse_reflection_;
  delete ProJDDDZGameUserCallScoreResponse::default_instance_;
  delete ProJDDDZGameUserCallScoreResponse_reflection_;
  delete ProJDDDZGameUserCallScoreRequest::default_instance_;
  delete ProJDDDZGameUserCallScoreRequest_reflection_;
  delete ProJDDDZGameCallNotify::default_instance_;
  delete ProJDDDZGameCallNotify_reflection_;
  delete ProJDDDZGameQiangNotify::default_instance_;
  delete ProJDDDZGameQiangNotify_reflection_;
  delete ProJDDDZGameUserCallLandlordResponse::default_instance_;
  delete ProJDDDZGameUserCallLandlordResponse_reflection_;
  delete ProJDDDZGameUserCallLandlordRequest::default_instance_;
  delete ProJDDDZGameUserCallLandlordRequest_reflection_;
  delete ProJDDDZGameUserQinagLandlordResponse::default_instance_;
  delete ProJDDDZGameUserQinagLandlordResponse_reflection_;
  delete ProJDDDZGameUserQiangLandlordRequest::default_instance_;
  delete ProJDDDZGameUserQiangLandlordRequest_reflection_;
  delete ProJDDDZGameSendLastCard::default_instance_;
  delete ProJDDDZGameSendLastCard_reflection_;
  delete ProJDDDZGameUserMingPaiRequest::default_instance_;
  delete ProJDDDZGameUserMingPaiRequest_reflection_;
  delete ProJDDDZGameUserMingPaiResponse::default_instance_;
  delete ProJDDDZGameUserMingPaiResponse_reflection_;
  delete ProJDDDZGameMingNotify::default_instance_;
  delete ProJDDDZGameMingNotify_reflection_;
  delete ProJDDDZGameStartAgain::default_instance_;
  delete ProJDDDZGameStartAgain_reflection_;
}

void protobuf_AddDesc_jdddzpk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rjdddzpk.proto\032\nbase.proto\"O\n\032ProJDDDZG"
    "ameStatusResponse\022\037\n\006status\030\002 \001(\0162\017.JDDD"
    "ZGameState\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"C\n\034ProJDDDZ"
    "GameDeskInfoResponse\022\021\n\tCellScore\030\002 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\231\021\"G\n\027ProJDDDZGameReadyNo"
    "tify\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\232\021\":\n\030ProJDDDZGameReadyRequest\022\014"
    "\n\004seat\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\233\021\"b\n\031ProJDD"
    "DZGameReadyResponse\022\014\n\004seat\030\002 \001(\005\022\021\n\tisM"
    "ingPai\030\003 \001(\010\022\022\n\nMingPaiTag\030\004 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\234\021\"b\n\021ProJDDDZGameStart\022\022\n\nbanke"
    "rseat\030\002 \001(\005\022\021\n\tgamecount\030\003 \001(\005\022\024\n\014outCar"
    "dtimes\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\235\021\"Y\n\026ProJDD"
    "DZGameDiceNotify\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003"
    " \001(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\236"
    "\021\"L\n\027ProJDDDZGameDiceRequest\022\014\n\004seat\030\002 \001"
    "(\005\022\021\n\tdicecount\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\237\021\""
    "[\n\026ProJDDDZGameDiceResult\022\014\n\004seat\030\002 \001(\005\022"
    "\016\n\006result\030\003 \003(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n\005MS"
    "GID\022\007\n\002ID\020\240\021\"\231\001\n\024ProJDDDZGameSendMahs\022\014\n"
    "\004seat\030\002 \001(\005\022%\n\016cbHandCardData\030\003 \003(\0132\r.JD"
    "DDZMahList\022\021\n\tmahscount\030\004 \003(\005\022\023\n\013cbLeftC"
    "ount\030\005 \001(\005\022\022\n\nofflineTag\030\006 \001(\005\"\020\n\005MSGID\022"
    "\007\n\002ID\020\241\021\"\230\002\n\024ProJDDDZGameKingData\022\014\n\004sea"
    "t\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\025\n\rdownKingScore\030\004"
    " \003(\005\022\021\n\tkingcount\030\005 \003(\005\022\020\n\010viceking\030\006 \003("
    "\005\0227\n\013notify_type\030\007 \001(\0162\017.JDDDZSEND_TYPE:"
    "\021JDDDZ_NORMAL_SEND\0221\n\tking_type\030\010 \001(\0162\017."
    "JDDDZKIGN_TYPE:\rJDDDZ_KING_UP\022\024\n\014cbChong"
    "Guang\030\t \003(\005\022\024\n\014cbBaWangKing\030\n \003(\005\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\242\021\"\233\001\n\033ProJDDDZGameOutMahsRespo"
    "nse\022\014\n\004seat\030\002 \001(\005\022\017\n\007outMahs\030\003 \003(\005\022\020\n\010ha"
    "ndmahs\030\004 \003(\005\022\021\n\tcardCount\030\005 \001(\005\022\020\n\010cardT"
    "ype\030\006 \001(\005\022\024\n\014noChangeMahs\030\007 \003(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\243\021\"\204\001\n\026ProJDDDZGameTimerPower\022\014\n\004"
    "seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\023\n\013outcardTime\030"
    "\004 \001(\005\022\024\n\014lastCardType\030\005 \001(\005\022\021\n\tlastPoint"
    "\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\244\021\"\214\001\n\031ProJDDDZGam"
    "eOperateNotify\022\022\n\nresumeSeat\030\002 \001(\005\022\022\n\nAc"
    "tionMask\030\003 \001(\005\022\022\n\nActionCard\030\004 \001(\005\022\014\n\004ti"
    "me\030\005 \001(\005\022\023\n\013operateseat\030\006 \001(\005\"\020\n\005MSGID\022\007"
    "\n\002ID\020\245\021\"\253\001\n\031ProJDDDZGameOperateResult\022\024\n"
    "\014wOperateUser\030\002 \001(\005\022\024\n\014wProvideUser\030\003 \001("
    "\005\022\024\n\014wOperateCode\030\004 \001(\005\022\025\n\rcbOperateCard"
    "\030\005 \001(\005\022\020\n\010handmahs\030\006 \003(\005\022\021\n\thandcount\030\007 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\246\021\"i\n\032ProJDDDZGameOpe"
    "rateRequest\022\014\n\004seat\030\002 \001(\005\022\024\n\014wOperateCod"
    "e\030\003 \001(\005\022\025\n\rcbOperateCard\030\004 \001(\005\"\020\n\005MSGID\022"
    "\007\n\002ID\020\247\021\"D\n\021ProJDDDZGameTrust\022\014\n\004seat\030\002 "
    "\001(\005\022\017\n\007isTrust\030\003 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\250\021\"b"
    "\n\031ProJDDDZGameOutMahRequest\022\014\n\004seat\030\002 \001("
    "\005\022\017\n\007outMahs\030\003 \003(\005\022\024\n\014noChangeMahs\030\004 \003(\005"
    "\"\020\n\005MSGID\022\007\n\002ID\020\251\021\"\212\001\n\025ProJDDDZGameCatch"
    "Card\022\014\n\004seat\030\002 \001(\005\022\022\n\ncbCardData\030\003 \001(\005\022\023"
    "\n\013wActionMask\030\004 \001(\005\022\023\n\013cbIsNotGang\030\005 \001(\010"
    "\022\023\n\013cbLeftCount\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\252\021\""
    "\034\n\014JDDDZMahList\022\014\n\004Mahs\030\001 \003(\005\"$\n\016JDDDZSc"
    "oreList\022\022\n\nroundScore\030\001 \003(\005\"E\n\016JDDDZAwar"
    "dList\022\014\n\004seat\030\001 \001(\005\022\021\n\tCardsData\030\002 \003(\005\022\022"
    "\n\nawardScore\030\003 \001(\005\"\207\004\n\017ProJDDDZGameEnd\022\020"
    "\n\010lGameTax\030\002 \001(\005\022\024\n\014cbChongGuang\030\003 \003(\005\022\024"
    "\n\014cbBaWangKing\030\004 \003(\005\022\024\n\014wProvideUser\030\005 \001"
    "(\005\022\023\n\013cbChiHuCard\030\006 \001(\005\022\023\n\013dwChiHuKind\030\007"
    " \003(\005\022\024\n\014dwChiHuRight\030\010 \003(\005\022\030\n\020lTotaslGam"
    "eScore\030\t \003(\005\022\031\n\021lCurrentGameScore\030\n \003(\005\022"
    "\032\n\022lCurrentPointScore\030\013 \003(\005\022\024\n\014lAttachSc"
    "ore\030\014 \003(\005\022%\n\016cbHandCardData\030\r \003(\0132\r.JDDD"
    "ZMahList\022(\n\017cbAwardCardData\030\016 \003(\0132\017.JDDD"
    "ZAwardList\022\025\n\rlOnlyWinScore\030\017 \003(\005\022\021\n\tbRo"
    "undEnd\030\020 \001(\010\022\024\n\014lHuiTouScore\030\021 \003(\005\022\022\n\nbZ"
    "huangWin\030\022 \001(\010\022\031\n\021cbJiangMaCardData\030\023 \003("
    "\005\022\'\n\016detailedScores\030\024 \003(\0132\017.JDDDZScoreLi"
    "st\"\020\n\005MSGID\022\007\n\002ID\020\253\021\"s\n\035ProJDDDZGameQuic"
    "kSoundRequest\022\017\n\007desk_id\030\002 \001(\005\022\017\n\007seat_i"
    "d\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004text\030\005 \001(\014\""
    "\020\n\005MSGID\022\007\n\002ID\020\254\021\"t\n\036ProJDDDZGameQuickSo"
    "undResponse\022\017\n\007desk_id\030\002 \001(\005\022\017\n\007seat_id\030"
    "\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004text\030\005 \001(\014\"\020\n"
    "\005MSGID\022\007\n\002ID\020\255\021\"\214\001\n\033ProJDDDZGameSendDisc"
    "ardMahs\022\017\n\007seat_id\030\002 \001(\005\022!\n\ncbCardData\030\003"
    " \003(\0132\r.JDDDZMahList\022\021\n\tdeskCount\030\004 \001(\005\022\024"
    "\n\014outCardCount\030\005 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\256\021\"^"
    "\n\016JDDDZWeaveItem\022\021\n\tweaveKind\030\001 \001(\005\022\022\n\nc"
    "entercard\030\002 \001(\005\022\023\n\013provideUser\030\003 \001(\005\022\020\n\010"
    "cardsize\030\004 \001(\005\"1\n\017JDDDZWeaveItems\022\036\n\005ite"
    "ms\030\001 \003(\0132\017.JDDDZWeaveItem\"a\n\032ProJDDDZGam"
    "eSendActionMahs\022\017\n\007seat_id\030\002 \001(\005\022 \n\006weav"
    "es\030\003 \003(\0132\020.JDDDZWeaveItems\"\020\n\005MSGID\022\007\n\002I"
    "D\020\257\021\"m\n\031ProJDDDZGameBrokenRequest\022\017\n\007sea"
    "t_id\030\002 \001(\005\022\037\n\004type\030\003 \001(\0162\021.JDDDZBROKEN_T"
    "YPE\022\014\n\004time\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\260\021\"w\n\031P"
    "roJDDDZGameBrokenOperate\022\017\n\007seat_id\030\002 \001("
    "\005\0227\n\006result\030\003 \001(\0162\024.JDDDZBROKEN_OPERATE:"
    "\021JDDDZ_BO_DISAGREE\"\020\n\005MSGID\022\007\n\002ID\020\261\021\"x\n\030"
    "ProJDDDZGameBrokenNotify\022\017\n\007seat_id\030\002 \001("
    "\005\0229\n\014operate_code\030\003 \001(\0162\021.JDDDZBROKEN_CO"
    "DE:\020JDDDZ_BC_SUCCESS\"\020\n\005MSGID\022\007\n\002ID\020\262\021\"\224"
    "\003\n\026ProJDDDZGameRuleConfig\022\022\n\ngame_round\030"
    "\001 \001(\005\022\021\n\tneed_card\030\002 \001(\005\022\030\n\020have_bottom_"
    "king\030\003 \001(\010\022\024\n\014have_mai_lei\030\004 \001(\010\022\024\n\014hava"
    "_hui_tou\030\005 \001(\010\022\023\n\013nMasterSeat\030\006 \001(\005\022\032\n\022c"
    "urrent_game_count\030\007 \001(\005\022\023\n\013have_jianma\030\010"
    " \001(\010\022\025\n\rnChongguanNum\030\t \001(\005\022\025\n\rbbawangfa"
    "nbei\030\n \001(\010\022\022\n\nnPlayerNum\030\013 \001(\005\022\020\n\010sRoomN"
    "um\030\014 \001(\014\022\021\n\tsPlayTime\030\r \001(\014\022\021\n\tnselfSeat"
    "\030\016 \001(\005\022\021\n\tbJingDian\030\017 \001(\010\022\022\n\nbMagicCard\030"
    "\020 \001(\010\022\024\n\014bMasterThebe\030\021 \001(\010\"\020\n\005MSGID\022\007\n\002"
    "ID\020\263\021\"k\n\030ProJDDDZGameBrokenStatus\022\023\n\013bro"
    "ken_seat\030\001 \001(\005\022\025\n\rbroken_status\030\002 \003(\010\022\021\n"
    "\tleft_time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\264\021\"K\n\024Pr"
    "oJDDDZGameDataResp\022\023\n\013total_score\030\001 \003(\005\022"
    "\014\n\004type\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\265\021\"K\n\031ProJD"
    "DDZGameRecordRequest\022\017\n\007seat_id\030\001 \001(\005\022\013\n"
    "\003url\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\266\021\"L\n\032ProJDDDZ"
    "GameRecordResponse\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003u"
    "rl\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\267\021\"\231\001\n\037ProJDDDZG"
    "ameUserLocationRequest\022\017\n\007seat_id\030\001 \001(\005\022"
    "\023\n\013dwlongitude\030\002 \001(\001\022\022\n\ndwlatitude\030\003 \001(\001"
    "\022\023\n\013strDistrict\030\004 \001(\014\022\025\n\rstrStreetName\030\005"
    " \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\270\021\"P\n\034ProJDDDZGameSy"
    "ncCardResponse\022\014\n\004seat\030\002 \001(\005\022\020\n\010handmahs"
    "\030\003 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\271\021\"[\n\"ProJDDDZGame"
    "UserPhoneStatusRequest\022\017\n\007seat_id\030\001 \001(\005\022"
    "\022\n\nuserstatus\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\272\021\"B\n"
    "\035ProJDDDZGameUserGiveUpRequest\022\017\n\007seat_i"
    "d\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\273\021\"/\n\033ProJDDDZGam"
    "eUserHintRequest\"\020\n\005MSGID\022\007\n\002ID\020\274\021\"P\n\034Pr"
    "oJDDDZGameUserHintResponse\022\r\n\005lenth\030\001 \001("
    "\005\022\017\n\007outMahs\030\002 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\275\021\"Z\n!"
    "ProJDDDZGameUserCallScoreResponse\022\014\n\004sea"
    "t\030\001 \001(\005\022\025\n\rusercallscore\030\002 \001(\005\"\020\n\005MSGID\022"
    "\007\n\002ID\020\276\021\"Y\n ProJDDDZGameUserCallScoreReq"
    "uest\022\014\n\004seat\030\001 \001(\005\022\025\n\rusercallscore\030\002 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\277\021\"N\n\026ProJDDDZGameCallN"
    "otify\022\014\n\004seat\030\001 \001(\005\022\024\n\014maxCallScore\030\002 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\304\021\"9\n\027ProJDDDZGameQiang"
    "Notify\022\014\n\004seat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\305\021\"\227"
    "\001\n$ProJDDDZGameUserCallLandlordResponse\022"
    "\025\n\riscallandlord\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\024\n"
    "\014landlordSeat\030\003 \001(\005\022\014\n\004seat\030\004 \001(\005\022\023\n\013isS"
    "oundCall\030\005 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\300\021\"\\\n#ProJ"
    "DDDZGameUserCallLandlordRequest\022\014\n\004seat\030"
    "\001 \001(\005\022\025\n\riscallandlord\030\002 \001(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\301\021\"\205\001\n%ProJDDDZGameUserQinagLandlord"
    "Response\022\027\n\017isQiangLandlord\030\001 \001(\005\022\r\n\005sco"
    "re\030\002 \001(\005\022\024\n\014landlordSeat\030\003 \001(\005\022\014\n\004seat\030\004"
    " \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\302\021\"_\n$ProJDDDZGameUs"
    "erQiangLandlordRequest\022\014\n\004seat\030\001 \001(\005\022\027\n\017"
    "isQiangLandlord\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\303\021\""
    "\224\001\n\030ProJDDDZGameSendLastCard\022\014\n\004seat\030\001 \001"
    "(\005\022%\n\016cbHandCardData\030\002 \003(\0132\r.JDDDZMahLis"
    "t\022\020\n\010lastmahs\030\003 \003(\005\022\r\n\005laizi\030\004 \001(\005\022\020\n\010is"
    "ReCome\030\005 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\306\021\"b\n\036ProJDD"
    "DZGameUserMingPaiRequest\022\014\n\004seat\030\001 \001(\005\022\021"
    "\n\tisMingPai\030\002 \001(\010\022\r\n\005beilv\030\003 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\307\021\"t\n\037ProJDDDZGameUserMingPaiRes"
    "ponse\022\014\n\004seat\030\001 \001(\005\022\021\n\tisMingPai\030\002 \001(\010\022\r"
    "\n\005score\030\003 \001(\005\022\017\n\007mingtag\030\004 \001(\005\"\020\n\005MSGID\022"
    "\007\n\002ID\020\310\021\"S\n\026ProJDDDZGameMingNotify\022\014\n\004se"
    "at\030\001 \001(\005\022\013\n\003tag\030\002 \001(\005\022\014\n\004time\030\003 \001(\002\"\020\n\005M"
    "SGID\022\007\n\002ID\020\311\021\"*\n\026ProJDDDZGameStartAgain\""
    "\020\n\005MSGID\022\007\n\002ID\020\312\021*\302\001\n\016JDDDZGameState\022\023\n\017"
    "JDDDZ_GAME_IDLE\020\001\022\030\n\024JDDDZ_GAME_DICE_BAN"
    "K\020\002\022\023\n\017JDDDZ_GAME_SEND\020\003\022\030\n\024JDDDZ_GAME_D"
    "ICE_KING\020\004\022\023\n\017JDDDZ_GAME_CALL\020\005\022\024\n\020JDDDZ"
    "_GAME_QIANG\020\006\022\023\n\017JDDDZ_GAME_PLAY\020\007\022\022\n\016JD"
    "DDZ_GAME_END\020\010*>\n\016JDDDZSEND_TYPE\022\025\n\021JDDD"
    "Z_NORMAL_SEND\020\001\022\025\n\021JDDDZ_RECOME_SEND\020\002*Q"
    "\n\016JDDDZKIGN_TYPE\022\021\n\rJDDDZ_KING_UP\020\001\022\025\n\021J"
    "DDDZ_KING_HUITOU\020\002\022\025\n\021JDDDZ_KING_MAILEI\020"
    "\003*Y\n\020JDDDZBROKEN_TYPE\022\030\n\024JDDDZ_BT_MASTER"
    "_QUIT\020\000\022\026\n\022JDDDZ_BT_USER_QUIT\020\001\022\023\n\017JDDDZ"
    "_BT_BROKEN\020\002*@\n\023JDDDZBROKEN_OPERATE\022\025\n\021J"
    "DDDZ_BO_DISAGREE\020\000\022\022\n\016JDDDZ_BO_AGREE\020\001*r"
    "\n\020JDDDZBROKEN_CODE\022\024\n\020JDDDZ_BC_SUCCESS\020\000"
    "\022\025\n\021JDDDZ_BC_DISAGREE\020\001\022\031\n\025JDDDZ_BC_QUIT"
    "_SUCCESS\020\002\022\026\n\022JDDDZ_BC_EXCEPTION\020\003", 7074);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "jdddzpk.proto", &protobuf_RegisterTypes);
  ProJDDDZGameStatusResponse::default_instance_ = new ProJDDDZGameStatusResponse();
  ProJDDDZGameDeskInfoResponse::default_instance_ = new ProJDDDZGameDeskInfoResponse();
  ProJDDDZGameReadyNotify::default_instance_ = new ProJDDDZGameReadyNotify();
  ProJDDDZGameReadyRequest::default_instance_ = new ProJDDDZGameReadyRequest();
  ProJDDDZGameReadyResponse::default_instance_ = new ProJDDDZGameReadyResponse();
  ProJDDDZGameStart::default_instance_ = new ProJDDDZGameStart();
  ProJDDDZGameDiceNotify::default_instance_ = new ProJDDDZGameDiceNotify();
  ProJDDDZGameDiceRequest::default_instance_ = new ProJDDDZGameDiceRequest();
  ProJDDDZGameDiceResult::default_instance_ = new ProJDDDZGameDiceResult();
  ProJDDDZGameSendMahs::default_instance_ = new ProJDDDZGameSendMahs();
  ProJDDDZGameKingData::default_instance_ = new ProJDDDZGameKingData();
  ProJDDDZGameOutMahsResponse::default_instance_ = new ProJDDDZGameOutMahsResponse();
  ProJDDDZGameTimerPower::default_instance_ = new ProJDDDZGameTimerPower();
  ProJDDDZGameOperateNotify::default_instance_ = new ProJDDDZGameOperateNotify();
  ProJDDDZGameOperateResult::default_instance_ = new ProJDDDZGameOperateResult();
  ProJDDDZGameOperateRequest::default_instance_ = new ProJDDDZGameOperateRequest();
  ProJDDDZGameTrust::default_instance_ = new ProJDDDZGameTrust();
  ProJDDDZGameOutMahRequest::default_instance_ = new ProJDDDZGameOutMahRequest();
  ProJDDDZGameCatchCard::default_instance_ = new ProJDDDZGameCatchCard();
  JDDDZMahList::default_instance_ = new JDDDZMahList();
  JDDDZScoreList::default_instance_ = new JDDDZScoreList();
  JDDDZAwardList::default_instance_ = new JDDDZAwardList();
  ProJDDDZGameEnd::default_instance_ = new ProJDDDZGameEnd();
  ProJDDDZGameQuickSoundRequest::default_instance_ = new ProJDDDZGameQuickSoundRequest();
  ProJDDDZGameQuickSoundResponse::default_instance_ = new ProJDDDZGameQuickSoundResponse();
  ProJDDDZGameSendDiscardMahs::default_instance_ = new ProJDDDZGameSendDiscardMahs();
  JDDDZWeaveItem::default_instance_ = new JDDDZWeaveItem();
  JDDDZWeaveItems::default_instance_ = new JDDDZWeaveItems();
  ProJDDDZGameSendActionMahs::default_instance_ = new ProJDDDZGameSendActionMahs();
  ProJDDDZGameBrokenRequest::default_instance_ = new ProJDDDZGameBrokenRequest();
  ProJDDDZGameBrokenOperate::default_instance_ = new ProJDDDZGameBrokenOperate();
  ProJDDDZGameBrokenNotify::default_instance_ = new ProJDDDZGameBrokenNotify();
  ProJDDDZGameRuleConfig::default_instance_ = new ProJDDDZGameRuleConfig();
  ProJDDDZGameBrokenStatus::default_instance_ = new ProJDDDZGameBrokenStatus();
  ProJDDDZGameDataResp::default_instance_ = new ProJDDDZGameDataResp();
  ProJDDDZGameRecordRequest::default_instance_ = new ProJDDDZGameRecordRequest();
  ProJDDDZGameRecordResponse::default_instance_ = new ProJDDDZGameRecordResponse();
  ProJDDDZGameUserLocationRequest::default_instance_ = new ProJDDDZGameUserLocationRequest();
  ProJDDDZGameSyncCardResponse::default_instance_ = new ProJDDDZGameSyncCardResponse();
  ProJDDDZGameUserPhoneStatusRequest::default_instance_ = new ProJDDDZGameUserPhoneStatusRequest();
  ProJDDDZGameUserGiveUpRequest::default_instance_ = new ProJDDDZGameUserGiveUpRequest();
  ProJDDDZGameUserHintRequest::default_instance_ = new ProJDDDZGameUserHintRequest();
  ProJDDDZGameUserHintResponse::default_instance_ = new ProJDDDZGameUserHintResponse();
  ProJDDDZGameUserCallScoreResponse::default_instance_ = new ProJDDDZGameUserCallScoreResponse();
  ProJDDDZGameUserCallScoreRequest::default_instance_ = new ProJDDDZGameUserCallScoreRequest();
  ProJDDDZGameCallNotify::default_instance_ = new ProJDDDZGameCallNotify();
  ProJDDDZGameQiangNotify::default_instance_ = new ProJDDDZGameQiangNotify();
  ProJDDDZGameUserCallLandlordResponse::default_instance_ = new ProJDDDZGameUserCallLandlordResponse();
  ProJDDDZGameUserCallLandlordRequest::default_instance_ = new ProJDDDZGameUserCallLandlordRequest();
  ProJDDDZGameUserQinagLandlordResponse::default_instance_ = new ProJDDDZGameUserQinagLandlordResponse();
  ProJDDDZGameUserQiangLandlordRequest::default_instance_ = new ProJDDDZGameUserQiangLandlordRequest();
  ProJDDDZGameSendLastCard::default_instance_ = new ProJDDDZGameSendLastCard();
  ProJDDDZGameUserMingPaiRequest::default_instance_ = new ProJDDDZGameUserMingPaiRequest();
  ProJDDDZGameUserMingPaiResponse::default_instance_ = new ProJDDDZGameUserMingPaiResponse();
  ProJDDDZGameMingNotify::default_instance_ = new ProJDDDZGameMingNotify();
  ProJDDDZGameStartAgain::default_instance_ = new ProJDDDZGameStartAgain();
  ProJDDDZGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameStart::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameKingData::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameTrust::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameCatchCard::default_instance_->InitAsDefaultInstance();
  JDDDZMahList::default_instance_->InitAsDefaultInstance();
  JDDDZScoreList::default_instance_->InitAsDefaultInstance();
  JDDDZAwardList::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameEnd::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  JDDDZWeaveItem::default_instance_->InitAsDefaultInstance();
  JDDDZWeaveItems::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameDataResp::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserCallScoreResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserCallScoreRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameCallNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameQiangNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserCallLandlordResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserCallLandlordRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserQinagLandlordResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserQiangLandlordRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameSendLastCard::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserMingPaiRequest::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameUserMingPaiResponse::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameMingNotify::default_instance_->InitAsDefaultInstance();
  ProJDDDZGameStartAgain::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_jdddzpk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_jdddzpk_2eproto {
  StaticDescriptorInitializer_jdddzpk_2eproto() {
    protobuf_AddDesc_jdddzpk_2eproto();
  }
} static_descriptor_initializer_jdddzpk_2eproto_;
const ::google::protobuf::EnumDescriptor* JDDDZGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZGameState_descriptor_;
}
bool JDDDZGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JDDDZSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZSEND_TYPE_descriptor_;
}
bool JDDDZSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JDDDZKIGN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZKIGN_TYPE_descriptor_;
}
bool JDDDZKIGN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JDDDZBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZBROKEN_TYPE_descriptor_;
}
bool JDDDZBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JDDDZBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZBROKEN_OPERATE_descriptor_;
}
bool JDDDZBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JDDDZBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZBROKEN_CODE_descriptor_;
}
bool JDDDZBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameStatusResponse_MSGID_descriptor_;
}
bool ProJDDDZGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameStatusResponse_MSGID ProJDDDZGameStatusResponse::ID;
const ProJDDDZGameStatusResponse_MSGID ProJDDDZGameStatusResponse::MSGID_MIN;
const ProJDDDZGameStatusResponse_MSGID ProJDDDZGameStatusResponse::MSGID_MAX;
const int ProJDDDZGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameStatusResponse::ProJDDDZGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameStatusResponse::InitAsDefaultInstance() {
}

ProJDDDZGameStatusResponse::ProJDDDZGameStatusResponse(const ProJDDDZGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameStatusResponse::~ProJDDDZGameStatusResponse() {
  SharedDtor();
}

void ProJDDDZGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameStatusResponse_descriptor_;
}

const ProJDDDZGameStatusResponse& ProJDDDZGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameStatusResponse* ProJDDDZGameStatusResponse::default_instance_ = NULL;

ProJDDDZGameStatusResponse* ProJDDDZGameStatusResponse::New() const {
  return new ProJDDDZGameStatusResponse;
}

void ProJDDDZGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .JDDDZGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JDDDZGameState_IsValid(value)) {
            set_status(static_cast< ::JDDDZGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .JDDDZGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .JDDDZGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .JDDDZGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameStatusResponse::MergeFrom(const ProJDDDZGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameStatusResponse::CopyFrom(const ProJDDDZGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameStatusResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameStatusResponse::Swap(ProJDDDZGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameStatusResponse_descriptor_;
  metadata.reflection = ProJDDDZGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProJDDDZGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameDeskInfoResponse_MSGID ProJDDDZGameDeskInfoResponse::ID;
const ProJDDDZGameDeskInfoResponse_MSGID ProJDDDZGameDeskInfoResponse::MSGID_MIN;
const ProJDDDZGameDeskInfoResponse_MSGID ProJDDDZGameDeskInfoResponse::MSGID_MAX;
const int ProJDDDZGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameDeskInfoResponse::ProJDDDZGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProJDDDZGameDeskInfoResponse::ProJDDDZGameDeskInfoResponse(const ProJDDDZGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameDeskInfoResponse::~ProJDDDZGameDeskInfoResponse() {
  SharedDtor();
}

void ProJDDDZGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDeskInfoResponse_descriptor_;
}

const ProJDDDZGameDeskInfoResponse& ProJDDDZGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameDeskInfoResponse* ProJDDDZGameDeskInfoResponse::default_instance_ = NULL;

ProJDDDZGameDeskInfoResponse* ProJDDDZGameDeskInfoResponse::New() const {
  return new ProJDDDZGameDeskInfoResponse;
}

void ProJDDDZGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameDeskInfoResponse::MergeFrom(const ProJDDDZGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameDeskInfoResponse::CopyFrom(const ProJDDDZGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameDeskInfoResponse::Swap(ProJDDDZGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProJDDDZGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameReadyNotify_MSGID_descriptor_;
}
bool ProJDDDZGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameReadyNotify_MSGID ProJDDDZGameReadyNotify::ID;
const ProJDDDZGameReadyNotify_MSGID ProJDDDZGameReadyNotify::MSGID_MIN;
const ProJDDDZGameReadyNotify_MSGID ProJDDDZGameReadyNotify::MSGID_MAX;
const int ProJDDDZGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameReadyNotify::kSeatFieldNumber;
const int ProJDDDZGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameReadyNotify::ProJDDDZGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameReadyNotify::InitAsDefaultInstance() {
}

ProJDDDZGameReadyNotify::ProJDDDZGameReadyNotify(const ProJDDDZGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameReadyNotify::~ProJDDDZGameReadyNotify() {
  SharedDtor();
}

void ProJDDDZGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameReadyNotify_descriptor_;
}

const ProJDDDZGameReadyNotify& ProJDDDZGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameReadyNotify* ProJDDDZGameReadyNotify::default_instance_ = NULL;

ProJDDDZGameReadyNotify* ProJDDDZGameReadyNotify::New() const {
  return new ProJDDDZGameReadyNotify;
}

void ProJDDDZGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameReadyNotify::MergeFrom(const ProJDDDZGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameReadyNotify::CopyFrom(const ProJDDDZGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameReadyNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameReadyNotify::Swap(ProJDDDZGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameReadyNotify_descriptor_;
  metadata.reflection = ProJDDDZGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameReadyRequest_MSGID_descriptor_;
}
bool ProJDDDZGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameReadyRequest_MSGID ProJDDDZGameReadyRequest::ID;
const ProJDDDZGameReadyRequest_MSGID ProJDDDZGameReadyRequest::MSGID_MIN;
const ProJDDDZGameReadyRequest_MSGID ProJDDDZGameReadyRequest::MSGID_MAX;
const int ProJDDDZGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameReadyRequest::ProJDDDZGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameReadyRequest::InitAsDefaultInstance() {
}

ProJDDDZGameReadyRequest::ProJDDDZGameReadyRequest(const ProJDDDZGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameReadyRequest::~ProJDDDZGameReadyRequest() {
  SharedDtor();
}

void ProJDDDZGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameReadyRequest_descriptor_;
}

const ProJDDDZGameReadyRequest& ProJDDDZGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameReadyRequest* ProJDDDZGameReadyRequest::default_instance_ = NULL;

ProJDDDZGameReadyRequest* ProJDDDZGameReadyRequest::New() const {
  return new ProJDDDZGameReadyRequest;
}

void ProJDDDZGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameReadyRequest::MergeFrom(const ProJDDDZGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameReadyRequest::CopyFrom(const ProJDDDZGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameReadyRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameReadyRequest::Swap(ProJDDDZGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameReadyRequest_descriptor_;
  metadata.reflection = ProJDDDZGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameReadyResponse_MSGID_descriptor_;
}
bool ProJDDDZGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameReadyResponse_MSGID ProJDDDZGameReadyResponse::ID;
const ProJDDDZGameReadyResponse_MSGID ProJDDDZGameReadyResponse::MSGID_MIN;
const ProJDDDZGameReadyResponse_MSGID ProJDDDZGameReadyResponse::MSGID_MAX;
const int ProJDDDZGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameReadyResponse::kSeatFieldNumber;
const int ProJDDDZGameReadyResponse::kIsMingPaiFieldNumber;
const int ProJDDDZGameReadyResponse::kMingPaiTagFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameReadyResponse::ProJDDDZGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameReadyResponse::InitAsDefaultInstance() {
}

ProJDDDZGameReadyResponse::ProJDDDZGameReadyResponse(const ProJDDDZGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ismingpai_ = false;
  mingpaitag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameReadyResponse::~ProJDDDZGameReadyResponse() {
  SharedDtor();
}

void ProJDDDZGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameReadyResponse_descriptor_;
}

const ProJDDDZGameReadyResponse& ProJDDDZGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameReadyResponse* ProJDDDZGameReadyResponse::default_instance_ = NULL;

ProJDDDZGameReadyResponse* ProJDDDZGameReadyResponse::New() const {
  return new ProJDDDZGameReadyResponse;
}

void ProJDDDZGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    ismingpai_ = false;
    mingpaitag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isMingPai;
        break;
      }

      // optional bool isMingPai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMingPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismingpai_)));
          set_has_ismingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MingPaiTag;
        break;
      }

      // optional int32 MingPaiTag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MingPaiTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingpaitag_)));
          set_has_mingpaitag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isMingPai = 3;
  if (has_ismingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ismingpai(), output);
  }

  // optional int32 MingPaiTag = 4;
  if (has_mingpaitag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mingpaitag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isMingPai = 3;
  if (has_ismingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ismingpai(), target);
  }

  // optional int32 MingPaiTag = 4;
  if (has_mingpaitag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mingpaitag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isMingPai = 3;
    if (has_ismingpai()) {
      total_size += 1 + 1;
    }

    // optional int32 MingPaiTag = 4;
    if (has_mingpaitag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingpaitag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameReadyResponse::MergeFrom(const ProJDDDZGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_ismingpai()) {
      set_ismingpai(from.ismingpai());
    }
    if (from.has_mingpaitag()) {
      set_mingpaitag(from.mingpaitag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameReadyResponse::CopyFrom(const ProJDDDZGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameReadyResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameReadyResponse::Swap(ProJDDDZGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(ismingpai_, other->ismingpai_);
    std::swap(mingpaitag_, other->mingpaitag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameReadyResponse_descriptor_;
  metadata.reflection = ProJDDDZGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameStart_MSGID_descriptor_;
}
bool ProJDDDZGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameStart_MSGID ProJDDDZGameStart::ID;
const ProJDDDZGameStart_MSGID ProJDDDZGameStart::MSGID_MIN;
const ProJDDDZGameStart_MSGID ProJDDDZGameStart::MSGID_MAX;
const int ProJDDDZGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameStart::kBankerseatFieldNumber;
const int ProJDDDZGameStart::kGamecountFieldNumber;
const int ProJDDDZGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameStart::ProJDDDZGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameStart::InitAsDefaultInstance() {
}

ProJDDDZGameStart::ProJDDDZGameStart(const ProJDDDZGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameStart::~ProJDDDZGameStart() {
  SharedDtor();
}

void ProJDDDZGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameStart_descriptor_;
}

const ProJDDDZGameStart& ProJDDDZGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameStart* ProJDDDZGameStart::default_instance_ = NULL;

ProJDDDZGameStart* ProJDDDZGameStart::New() const {
  return new ProJDDDZGameStart;
}

void ProJDDDZGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameStart::MergeFrom(const ProJDDDZGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameStart::CopyFrom(const ProJDDDZGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameStart::IsInitialized() const {

  return true;
}

void ProJDDDZGameStart::Swap(ProJDDDZGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameStart_descriptor_;
  metadata.reflection = ProJDDDZGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDiceNotify_MSGID_descriptor_;
}
bool ProJDDDZGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameDiceNotify_MSGID ProJDDDZGameDiceNotify::ID;
const ProJDDDZGameDiceNotify_MSGID ProJDDDZGameDiceNotify::MSGID_MIN;
const ProJDDDZGameDiceNotify_MSGID ProJDDDZGameDiceNotify::MSGID_MAX;
const int ProJDDDZGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameDiceNotify::kSeatFieldNumber;
const int ProJDDDZGameDiceNotify::kTimeFieldNumber;
const int ProJDDDZGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameDiceNotify::ProJDDDZGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameDiceNotify::InitAsDefaultInstance() {
}

ProJDDDZGameDiceNotify::ProJDDDZGameDiceNotify(const ProJDDDZGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameDiceNotify::~ProJDDDZGameDiceNotify() {
  SharedDtor();
}

void ProJDDDZGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDiceNotify_descriptor_;
}

const ProJDDDZGameDiceNotify& ProJDDDZGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameDiceNotify* ProJDDDZGameDiceNotify::default_instance_ = NULL;

ProJDDDZGameDiceNotify* ProJDDDZGameDiceNotify::New() const {
  return new ProJDDDZGameDiceNotify;
}

void ProJDDDZGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameDiceNotify::MergeFrom(const ProJDDDZGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameDiceNotify::CopyFrom(const ProJDDDZGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameDiceNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameDiceNotify::Swap(ProJDDDZGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameDiceNotify_descriptor_;
  metadata.reflection = ProJDDDZGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDiceRequest_MSGID_descriptor_;
}
bool ProJDDDZGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameDiceRequest_MSGID ProJDDDZGameDiceRequest::ID;
const ProJDDDZGameDiceRequest_MSGID ProJDDDZGameDiceRequest::MSGID_MIN;
const ProJDDDZGameDiceRequest_MSGID ProJDDDZGameDiceRequest::MSGID_MAX;
const int ProJDDDZGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameDiceRequest::kSeatFieldNumber;
const int ProJDDDZGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameDiceRequest::ProJDDDZGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameDiceRequest::InitAsDefaultInstance() {
}

ProJDDDZGameDiceRequest::ProJDDDZGameDiceRequest(const ProJDDDZGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameDiceRequest::~ProJDDDZGameDiceRequest() {
  SharedDtor();
}

void ProJDDDZGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDiceRequest_descriptor_;
}

const ProJDDDZGameDiceRequest& ProJDDDZGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameDiceRequest* ProJDDDZGameDiceRequest::default_instance_ = NULL;

ProJDDDZGameDiceRequest* ProJDDDZGameDiceRequest::New() const {
  return new ProJDDDZGameDiceRequest;
}

void ProJDDDZGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameDiceRequest::MergeFrom(const ProJDDDZGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameDiceRequest::CopyFrom(const ProJDDDZGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameDiceRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameDiceRequest::Swap(ProJDDDZGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameDiceRequest_descriptor_;
  metadata.reflection = ProJDDDZGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDiceResult_MSGID_descriptor_;
}
bool ProJDDDZGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameDiceResult_MSGID ProJDDDZGameDiceResult::ID;
const ProJDDDZGameDiceResult_MSGID ProJDDDZGameDiceResult::MSGID_MIN;
const ProJDDDZGameDiceResult_MSGID ProJDDDZGameDiceResult::MSGID_MAX;
const int ProJDDDZGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameDiceResult::kSeatFieldNumber;
const int ProJDDDZGameDiceResult::kResultFieldNumber;
const int ProJDDDZGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameDiceResult::ProJDDDZGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameDiceResult::InitAsDefaultInstance() {
}

ProJDDDZGameDiceResult::ProJDDDZGameDiceResult(const ProJDDDZGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameDiceResult::~ProJDDDZGameDiceResult() {
  SharedDtor();
}

void ProJDDDZGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDiceResult_descriptor_;
}

const ProJDDDZGameDiceResult& ProJDDDZGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameDiceResult* ProJDDDZGameDiceResult::default_instance_ = NULL;

ProJDDDZGameDiceResult* ProJDDDZGameDiceResult::New() const {
  return new ProJDDDZGameDiceResult;
}

void ProJDDDZGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameDiceResult::MergeFrom(const ProJDDDZGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameDiceResult::CopyFrom(const ProJDDDZGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameDiceResult::IsInitialized() const {

  return true;
}

void ProJDDDZGameDiceResult::Swap(ProJDDDZGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameDiceResult_descriptor_;
  metadata.reflection = ProJDDDZGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendMahs_MSGID_descriptor_;
}
bool ProJDDDZGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameSendMahs_MSGID ProJDDDZGameSendMahs::ID;
const ProJDDDZGameSendMahs_MSGID ProJDDDZGameSendMahs::MSGID_MIN;
const ProJDDDZGameSendMahs_MSGID ProJDDDZGameSendMahs::MSGID_MAX;
const int ProJDDDZGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameSendMahs::kSeatFieldNumber;
const int ProJDDDZGameSendMahs::kCbHandCardDataFieldNumber;
const int ProJDDDZGameSendMahs::kMahscountFieldNumber;
const int ProJDDDZGameSendMahs::kCbLeftCountFieldNumber;
const int ProJDDDZGameSendMahs::kOfflineTagFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameSendMahs::ProJDDDZGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameSendMahs::InitAsDefaultInstance() {
}

ProJDDDZGameSendMahs::ProJDDDZGameSendMahs(const ProJDDDZGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  offlinetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameSendMahs::~ProJDDDZGameSendMahs() {
  SharedDtor();
}

void ProJDDDZGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendMahs_descriptor_;
}

const ProJDDDZGameSendMahs& ProJDDDZGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameSendMahs* ProJDDDZGameSendMahs::default_instance_ = NULL;

ProJDDDZGameSendMahs* ProJDDDZGameSendMahs::New() const {
  return new ProJDDDZGameSendMahs;
}

void ProJDDDZGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
    offlinetag_ = 0;
  }
  cbhandcarddata_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbHandCardData;
        break;
      }

      // repeated .JDDDZMahList cbHandCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbHandCardData;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offlineTag;
        break;
      }

      // optional int32 offlineTag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offlinetag_)));
          set_has_offlinetag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated .JDDDZMahList cbHandCardData = 3;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbhandcarddata(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  // optional int32 offlineTag = 6;
  if (has_offlinetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->offlinetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated .JDDDZMahList cbHandCardData = 3;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbhandcarddata(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  // optional int32 offlineTag = 6;
  if (has_offlinetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->offlinetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

    // optional int32 offlineTag = 6;
    if (has_offlinetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offlinetag());
    }

  }
  // repeated .JDDDZMahList cbHandCardData = 3;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameSendMahs::MergeFrom(const ProJDDDZGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
    if (from.has_offlinetag()) {
      set_offlinetag(from.offlinetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameSendMahs::CopyFrom(const ProJDDDZGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameSendMahs::IsInitialized() const {

  return true;
}

void ProJDDDZGameSendMahs::Swap(ProJDDDZGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(offlinetag_, other->offlinetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameSendMahs_descriptor_;
  metadata.reflection = ProJDDDZGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameKingData_MSGID_descriptor_;
}
bool ProJDDDZGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameKingData_MSGID ProJDDDZGameKingData::ID;
const ProJDDDZGameKingData_MSGID ProJDDDZGameKingData::MSGID_MIN;
const ProJDDDZGameKingData_MSGID ProJDDDZGameKingData::MSGID_MAX;
const int ProJDDDZGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameKingData::kSeatFieldNumber;
const int ProJDDDZGameKingData::kMahsFieldNumber;
const int ProJDDDZGameKingData::kDownKingScoreFieldNumber;
const int ProJDDDZGameKingData::kKingcountFieldNumber;
const int ProJDDDZGameKingData::kVicekingFieldNumber;
const int ProJDDDZGameKingData::kNotifyTypeFieldNumber;
const int ProJDDDZGameKingData::kKingTypeFieldNumber;
const int ProJDDDZGameKingData::kCbChongGuangFieldNumber;
const int ProJDDDZGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameKingData::ProJDDDZGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameKingData::InitAsDefaultInstance() {
}

ProJDDDZGameKingData::ProJDDDZGameKingData(const ProJDDDZGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameKingData::~ProJDDDZGameKingData() {
  SharedDtor();
}

void ProJDDDZGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameKingData_descriptor_;
}

const ProJDDDZGameKingData& ProJDDDZGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameKingData* ProJDDDZGameKingData::default_instance_ = NULL;

ProJDDDZGameKingData* ProJDDDZGameKingData::New() const {
  return new ProJDDDZGameKingData;
}

void ProJDDDZGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .JDDDZSEND_TYPE notify_type = 7 [default = JDDDZ_NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JDDDZSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::JDDDZSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .JDDDZKIGN_TYPE king_type = 8 [default = JDDDZ_KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JDDDZKIGN_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::JDDDZKIGN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .JDDDZSEND_TYPE notify_type = 7 [default = JDDDZ_NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .JDDDZKIGN_TYPE king_type = 8 [default = JDDDZ_KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .JDDDZSEND_TYPE notify_type = 7 [default = JDDDZ_NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .JDDDZKIGN_TYPE king_type = 8 [default = JDDDZ_KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .JDDDZSEND_TYPE notify_type = 7 [default = JDDDZ_NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .JDDDZKIGN_TYPE king_type = 8 [default = JDDDZ_KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameKingData::MergeFrom(const ProJDDDZGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameKingData::CopyFrom(const ProJDDDZGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameKingData::IsInitialized() const {

  return true;
}

void ProJDDDZGameKingData::Swap(ProJDDDZGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameKingData_descriptor_;
  metadata.reflection = ProJDDDZGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOutMahsResponse_MSGID_descriptor_;
}
bool ProJDDDZGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameOutMahsResponse_MSGID ProJDDDZGameOutMahsResponse::ID;
const ProJDDDZGameOutMahsResponse_MSGID ProJDDDZGameOutMahsResponse::MSGID_MIN;
const ProJDDDZGameOutMahsResponse_MSGID ProJDDDZGameOutMahsResponse::MSGID_MAX;
const int ProJDDDZGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameOutMahsResponse::kSeatFieldNumber;
const int ProJDDDZGameOutMahsResponse::kOutMahsFieldNumber;
const int ProJDDDZGameOutMahsResponse::kHandmahsFieldNumber;
const int ProJDDDZGameOutMahsResponse::kCardCountFieldNumber;
const int ProJDDDZGameOutMahsResponse::kCardTypeFieldNumber;
const int ProJDDDZGameOutMahsResponse::kNoChangeMahsFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameOutMahsResponse::ProJDDDZGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameOutMahsResponse::InitAsDefaultInstance() {
}

ProJDDDZGameOutMahsResponse::ProJDDDZGameOutMahsResponse(const ProJDDDZGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameOutMahsResponse::~ProJDDDZGameOutMahsResponse() {
  SharedDtor();
}

void ProJDDDZGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOutMahsResponse_descriptor_;
}

const ProJDDDZGameOutMahsResponse& ProJDDDZGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameOutMahsResponse* ProJDDDZGameOutMahsResponse::default_instance_ = NULL;

ProJDDDZGameOutMahsResponse* ProJDDDZGameOutMahsResponse::New() const {
  return new ProJDDDZGameOutMahsResponse;
}

void ProJDDDZGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_noChangeMahs;
        break;
      }

      // repeated int32 noChangeMahs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noChangeMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_noChangeMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // repeated int32 noChangeMahs = 7;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->nochangemahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // repeated int32 noChangeMahs = 7;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->nochangemahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  // repeated int32 noChangeMahs = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameOutMahsResponse::MergeFrom(const ProJDDDZGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameOutMahsResponse::CopyFrom(const ProJDDDZGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameOutMahsResponse::Swap(ProJDDDZGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameOutMahsResponse_descriptor_;
  metadata.reflection = ProJDDDZGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameTimerPower_MSGID_descriptor_;
}
bool ProJDDDZGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameTimerPower_MSGID ProJDDDZGameTimerPower::ID;
const ProJDDDZGameTimerPower_MSGID ProJDDDZGameTimerPower::MSGID_MIN;
const ProJDDDZGameTimerPower_MSGID ProJDDDZGameTimerPower::MSGID_MAX;
const int ProJDDDZGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameTimerPower::kSeatFieldNumber;
const int ProJDDDZGameTimerPower::kTimeFieldNumber;
const int ProJDDDZGameTimerPower::kOutcardTimeFieldNumber;
const int ProJDDDZGameTimerPower::kLastCardTypeFieldNumber;
const int ProJDDDZGameTimerPower::kLastPointFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameTimerPower::ProJDDDZGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameTimerPower::InitAsDefaultInstance() {
}

ProJDDDZGameTimerPower::ProJDDDZGameTimerPower(const ProJDDDZGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  lastcardtype_ = 0;
  lastpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameTimerPower::~ProJDDDZGameTimerPower() {
  SharedDtor();
}

void ProJDDDZGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameTimerPower_descriptor_;
}

const ProJDDDZGameTimerPower& ProJDDDZGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameTimerPower* ProJDDDZGameTimerPower::default_instance_ = NULL;

ProJDDDZGameTimerPower* ProJDDDZGameTimerPower::New() const {
  return new ProJDDDZGameTimerPower;
}

void ProJDDDZGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
    lastcardtype_ = 0;
    lastpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastCardType;
        break;
      }

      // optional int32 lastCardType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcardtype_)));
          set_has_lastcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastPoint;
        break;
      }

      // optional int32 lastPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastpoint_)));
          set_has_lastpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  // optional int32 lastCardType = 5;
  if (has_lastcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastcardtype(), output);
  }

  // optional int32 lastPoint = 6;
  if (has_lastpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  // optional int32 lastCardType = 5;
  if (has_lastcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastcardtype(), target);
  }

  // optional int32 lastPoint = 6;
  if (has_lastpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

    // optional int32 lastCardType = 5;
    if (has_lastcardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcardtype());
    }

    // optional int32 lastPoint = 6;
    if (has_lastpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameTimerPower::MergeFrom(const ProJDDDZGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
    if (from.has_lastcardtype()) {
      set_lastcardtype(from.lastcardtype());
    }
    if (from.has_lastpoint()) {
      set_lastpoint(from.lastpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameTimerPower::CopyFrom(const ProJDDDZGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameTimerPower::IsInitialized() const {

  return true;
}

void ProJDDDZGameTimerPower::Swap(ProJDDDZGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(lastcardtype_, other->lastcardtype_);
    std::swap(lastpoint_, other->lastpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameTimerPower_descriptor_;
  metadata.reflection = ProJDDDZGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOperateNotify_MSGID_descriptor_;
}
bool ProJDDDZGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameOperateNotify_MSGID ProJDDDZGameOperateNotify::ID;
const ProJDDDZGameOperateNotify_MSGID ProJDDDZGameOperateNotify::MSGID_MIN;
const ProJDDDZGameOperateNotify_MSGID ProJDDDZGameOperateNotify::MSGID_MAX;
const int ProJDDDZGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameOperateNotify::kResumeSeatFieldNumber;
const int ProJDDDZGameOperateNotify::kActionMaskFieldNumber;
const int ProJDDDZGameOperateNotify::kActionCardFieldNumber;
const int ProJDDDZGameOperateNotify::kTimeFieldNumber;
const int ProJDDDZGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameOperateNotify::ProJDDDZGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameOperateNotify::InitAsDefaultInstance() {
}

ProJDDDZGameOperateNotify::ProJDDDZGameOperateNotify(const ProJDDDZGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameOperateNotify::~ProJDDDZGameOperateNotify() {
  SharedDtor();
}

void ProJDDDZGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOperateNotify_descriptor_;
}

const ProJDDDZGameOperateNotify& ProJDDDZGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameOperateNotify* ProJDDDZGameOperateNotify::default_instance_ = NULL;

ProJDDDZGameOperateNotify* ProJDDDZGameOperateNotify::New() const {
  return new ProJDDDZGameOperateNotify;
}

void ProJDDDZGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameOperateNotify::MergeFrom(const ProJDDDZGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameOperateNotify::CopyFrom(const ProJDDDZGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameOperateNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameOperateNotify::Swap(ProJDDDZGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameOperateNotify_descriptor_;
  metadata.reflection = ProJDDDZGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOperateResult_MSGID_descriptor_;
}
bool ProJDDDZGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameOperateResult_MSGID ProJDDDZGameOperateResult::ID;
const ProJDDDZGameOperateResult_MSGID ProJDDDZGameOperateResult::MSGID_MIN;
const ProJDDDZGameOperateResult_MSGID ProJDDDZGameOperateResult::MSGID_MAX;
const int ProJDDDZGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameOperateResult::kWOperateUserFieldNumber;
const int ProJDDDZGameOperateResult::kWProvideUserFieldNumber;
const int ProJDDDZGameOperateResult::kWOperateCodeFieldNumber;
const int ProJDDDZGameOperateResult::kCbOperateCardFieldNumber;
const int ProJDDDZGameOperateResult::kHandmahsFieldNumber;
const int ProJDDDZGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameOperateResult::ProJDDDZGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameOperateResult::InitAsDefaultInstance() {
}

ProJDDDZGameOperateResult::ProJDDDZGameOperateResult(const ProJDDDZGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameOperateResult::~ProJDDDZGameOperateResult() {
  SharedDtor();
}

void ProJDDDZGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOperateResult_descriptor_;
}

const ProJDDDZGameOperateResult& ProJDDDZGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameOperateResult* ProJDDDZGameOperateResult::default_instance_ = NULL;

ProJDDDZGameOperateResult* ProJDDDZGameOperateResult::New() const {
  return new ProJDDDZGameOperateResult;
}

void ProJDDDZGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameOperateResult::MergeFrom(const ProJDDDZGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameOperateResult::CopyFrom(const ProJDDDZGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameOperateResult::IsInitialized() const {

  return true;
}

void ProJDDDZGameOperateResult::Swap(ProJDDDZGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameOperateResult_descriptor_;
  metadata.reflection = ProJDDDZGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOperateRequest_MSGID_descriptor_;
}
bool ProJDDDZGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameOperateRequest_MSGID ProJDDDZGameOperateRequest::ID;
const ProJDDDZGameOperateRequest_MSGID ProJDDDZGameOperateRequest::MSGID_MIN;
const ProJDDDZGameOperateRequest_MSGID ProJDDDZGameOperateRequest::MSGID_MAX;
const int ProJDDDZGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameOperateRequest::kSeatFieldNumber;
const int ProJDDDZGameOperateRequest::kWOperateCodeFieldNumber;
const int ProJDDDZGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameOperateRequest::ProJDDDZGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameOperateRequest::InitAsDefaultInstance() {
}

ProJDDDZGameOperateRequest::ProJDDDZGameOperateRequest(const ProJDDDZGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameOperateRequest::~ProJDDDZGameOperateRequest() {
  SharedDtor();
}

void ProJDDDZGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOperateRequest_descriptor_;
}

const ProJDDDZGameOperateRequest& ProJDDDZGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameOperateRequest* ProJDDDZGameOperateRequest::default_instance_ = NULL;

ProJDDDZGameOperateRequest* ProJDDDZGameOperateRequest::New() const {
  return new ProJDDDZGameOperateRequest;
}

void ProJDDDZGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameOperateRequest::MergeFrom(const ProJDDDZGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameOperateRequest::CopyFrom(const ProJDDDZGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameOperateRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameOperateRequest::Swap(ProJDDDZGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameOperateRequest_descriptor_;
  metadata.reflection = ProJDDDZGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameTrust_MSGID_descriptor_;
}
bool ProJDDDZGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameTrust_MSGID ProJDDDZGameTrust::ID;
const ProJDDDZGameTrust_MSGID ProJDDDZGameTrust::MSGID_MIN;
const ProJDDDZGameTrust_MSGID ProJDDDZGameTrust::MSGID_MAX;
const int ProJDDDZGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameTrust::kSeatFieldNumber;
const int ProJDDDZGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameTrust::ProJDDDZGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameTrust::InitAsDefaultInstance() {
}

ProJDDDZGameTrust::ProJDDDZGameTrust(const ProJDDDZGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameTrust::~ProJDDDZGameTrust() {
  SharedDtor();
}

void ProJDDDZGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameTrust_descriptor_;
}

const ProJDDDZGameTrust& ProJDDDZGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameTrust* ProJDDDZGameTrust::default_instance_ = NULL;

ProJDDDZGameTrust* ProJDDDZGameTrust::New() const {
  return new ProJDDDZGameTrust;
}

void ProJDDDZGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameTrust::MergeFrom(const ProJDDDZGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameTrust::CopyFrom(const ProJDDDZGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameTrust::IsInitialized() const {

  return true;
}

void ProJDDDZGameTrust::Swap(ProJDDDZGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameTrust_descriptor_;
  metadata.reflection = ProJDDDZGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOutMahRequest_MSGID_descriptor_;
}
bool ProJDDDZGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameOutMahRequest_MSGID ProJDDDZGameOutMahRequest::ID;
const ProJDDDZGameOutMahRequest_MSGID ProJDDDZGameOutMahRequest::MSGID_MIN;
const ProJDDDZGameOutMahRequest_MSGID ProJDDDZGameOutMahRequest::MSGID_MAX;
const int ProJDDDZGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameOutMahRequest::kSeatFieldNumber;
const int ProJDDDZGameOutMahRequest::kOutMahsFieldNumber;
const int ProJDDDZGameOutMahRequest::kNoChangeMahsFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameOutMahRequest::ProJDDDZGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameOutMahRequest::InitAsDefaultInstance() {
}

ProJDDDZGameOutMahRequest::ProJDDDZGameOutMahRequest(const ProJDDDZGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameOutMahRequest::~ProJDDDZGameOutMahRequest() {
  SharedDtor();
}

void ProJDDDZGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameOutMahRequest_descriptor_;
}

const ProJDDDZGameOutMahRequest& ProJDDDZGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameOutMahRequest* ProJDDDZGameOutMahRequest::default_instance_ = NULL;

ProJDDDZGameOutMahRequest* ProJDDDZGameOutMahRequest::New() const {
  return new ProJDDDZGameOutMahRequest;
}

void ProJDDDZGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  outmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_noChangeMahs;
        break;
      }

      // repeated int32 noChangeMahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noChangeMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_noChangeMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 noChangeMahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->nochangemahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 noChangeMahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->nochangemahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 noChangeMahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameOutMahRequest::MergeFrom(const ProJDDDZGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameOutMahRequest::CopyFrom(const ProJDDDZGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameOutMahRequest::Swap(ProJDDDZGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameOutMahRequest_descriptor_;
  metadata.reflection = ProJDDDZGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameCatchCard_MSGID_descriptor_;
}
bool ProJDDDZGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameCatchCard_MSGID ProJDDDZGameCatchCard::ID;
const ProJDDDZGameCatchCard_MSGID ProJDDDZGameCatchCard::MSGID_MIN;
const ProJDDDZGameCatchCard_MSGID ProJDDDZGameCatchCard::MSGID_MAX;
const int ProJDDDZGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameCatchCard::kSeatFieldNumber;
const int ProJDDDZGameCatchCard::kCbCardDataFieldNumber;
const int ProJDDDZGameCatchCard::kWActionMaskFieldNumber;
const int ProJDDDZGameCatchCard::kCbIsNotGangFieldNumber;
const int ProJDDDZGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameCatchCard::ProJDDDZGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameCatchCard::InitAsDefaultInstance() {
}

ProJDDDZGameCatchCard::ProJDDDZGameCatchCard(const ProJDDDZGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameCatchCard::~ProJDDDZGameCatchCard() {
  SharedDtor();
}

void ProJDDDZGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameCatchCard_descriptor_;
}

const ProJDDDZGameCatchCard& ProJDDDZGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameCatchCard* ProJDDDZGameCatchCard::default_instance_ = NULL;

ProJDDDZGameCatchCard* ProJDDDZGameCatchCard::New() const {
  return new ProJDDDZGameCatchCard;
}

void ProJDDDZGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameCatchCard::MergeFrom(const ProJDDDZGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameCatchCard::CopyFrom(const ProJDDDZGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameCatchCard::IsInitialized() const {

  return true;
}

void ProJDDDZGameCatchCard::Swap(ProJDDDZGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameCatchCard_descriptor_;
  metadata.reflection = ProJDDDZGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JDDDZMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

JDDDZMahList::JDDDZMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JDDDZMahList::InitAsDefaultInstance() {
}

JDDDZMahList::JDDDZMahList(const JDDDZMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JDDDZMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JDDDZMahList::~JDDDZMahList() {
  SharedDtor();
}

void JDDDZMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JDDDZMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JDDDZMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZMahList_descriptor_;
}

const JDDDZMahList& JDDDZMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

JDDDZMahList* JDDDZMahList::default_instance_ = NULL;

JDDDZMahList* JDDDZMahList::New() const {
  return new JDDDZMahList;
}

void JDDDZMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JDDDZMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JDDDZMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JDDDZMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JDDDZMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JDDDZMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JDDDZMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JDDDZMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JDDDZMahList::MergeFrom(const JDDDZMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JDDDZMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JDDDZMahList::CopyFrom(const JDDDZMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JDDDZMahList::IsInitialized() const {

  return true;
}

void JDDDZMahList::Swap(JDDDZMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JDDDZMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JDDDZMahList_descriptor_;
  metadata.reflection = JDDDZMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JDDDZScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

JDDDZScoreList::JDDDZScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JDDDZScoreList::InitAsDefaultInstance() {
}

JDDDZScoreList::JDDDZScoreList(const JDDDZScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JDDDZScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JDDDZScoreList::~JDDDZScoreList() {
  SharedDtor();
}

void JDDDZScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JDDDZScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JDDDZScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZScoreList_descriptor_;
}

const JDDDZScoreList& JDDDZScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

JDDDZScoreList* JDDDZScoreList::default_instance_ = NULL;

JDDDZScoreList* JDDDZScoreList::New() const {
  return new JDDDZScoreList;
}

void JDDDZScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JDDDZScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JDDDZScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JDDDZScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JDDDZScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JDDDZScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JDDDZScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JDDDZScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JDDDZScoreList::MergeFrom(const JDDDZScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JDDDZScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JDDDZScoreList::CopyFrom(const JDDDZScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JDDDZScoreList::IsInitialized() const {

  return true;
}

void JDDDZScoreList::Swap(JDDDZScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JDDDZScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JDDDZScoreList_descriptor_;
  metadata.reflection = JDDDZScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JDDDZAwardList::kSeatFieldNumber;
const int JDDDZAwardList::kCardsDataFieldNumber;
const int JDDDZAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

JDDDZAwardList::JDDDZAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JDDDZAwardList::InitAsDefaultInstance() {
}

JDDDZAwardList::JDDDZAwardList(const JDDDZAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JDDDZAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JDDDZAwardList::~JDDDZAwardList() {
  SharedDtor();
}

void JDDDZAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JDDDZAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JDDDZAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZAwardList_descriptor_;
}

const JDDDZAwardList& JDDDZAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

JDDDZAwardList* JDDDZAwardList::default_instance_ = NULL;

JDDDZAwardList* JDDDZAwardList::New() const {
  return new JDDDZAwardList;
}

void JDDDZAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JDDDZAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JDDDZAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JDDDZAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JDDDZAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JDDDZAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JDDDZAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JDDDZAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JDDDZAwardList::MergeFrom(const JDDDZAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JDDDZAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JDDDZAwardList::CopyFrom(const JDDDZAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JDDDZAwardList::IsInitialized() const {

  return true;
}

void JDDDZAwardList::Swap(JDDDZAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JDDDZAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JDDDZAwardList_descriptor_;
  metadata.reflection = JDDDZAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameEnd_MSGID_descriptor_;
}
bool ProJDDDZGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameEnd_MSGID ProJDDDZGameEnd::ID;
const ProJDDDZGameEnd_MSGID ProJDDDZGameEnd::MSGID_MIN;
const ProJDDDZGameEnd_MSGID ProJDDDZGameEnd::MSGID_MAX;
const int ProJDDDZGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameEnd::kLGameTaxFieldNumber;
const int ProJDDDZGameEnd::kCbChongGuangFieldNumber;
const int ProJDDDZGameEnd::kCbBaWangKingFieldNumber;
const int ProJDDDZGameEnd::kWProvideUserFieldNumber;
const int ProJDDDZGameEnd::kCbChiHuCardFieldNumber;
const int ProJDDDZGameEnd::kDwChiHuKindFieldNumber;
const int ProJDDDZGameEnd::kDwChiHuRightFieldNumber;
const int ProJDDDZGameEnd::kLTotaslGameScoreFieldNumber;
const int ProJDDDZGameEnd::kLCurrentGameScoreFieldNumber;
const int ProJDDDZGameEnd::kLCurrentPointScoreFieldNumber;
const int ProJDDDZGameEnd::kLAttachScoreFieldNumber;
const int ProJDDDZGameEnd::kCbHandCardDataFieldNumber;
const int ProJDDDZGameEnd::kCbAwardCardDataFieldNumber;
const int ProJDDDZGameEnd::kLOnlyWinScoreFieldNumber;
const int ProJDDDZGameEnd::kBRoundEndFieldNumber;
const int ProJDDDZGameEnd::kLHuiTouScoreFieldNumber;
const int ProJDDDZGameEnd::kBZhuangWinFieldNumber;
const int ProJDDDZGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProJDDDZGameEnd::kDetailedScoresFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameEnd::ProJDDDZGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameEnd::InitAsDefaultInstance() {
}

ProJDDDZGameEnd::ProJDDDZGameEnd(const ProJDDDZGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameEnd::~ProJDDDZGameEnd() {
  SharedDtor();
}

void ProJDDDZGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameEnd_descriptor_;
}

const ProJDDDZGameEnd& ProJDDDZGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameEnd* ProJDDDZGameEnd::default_instance_ = NULL;

ProJDDDZGameEnd* ProJDDDZGameEnd::New() const {
  return new ProJDDDZGameEnd;
}

void ProJDDDZGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .JDDDZMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .JDDDZAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .JDDDZScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .JDDDZMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .JDDDZAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .JDDDZScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .JDDDZMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .JDDDZAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .JDDDZScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .JDDDZMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .JDDDZAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .JDDDZScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameEnd::MergeFrom(const ProJDDDZGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameEnd::CopyFrom(const ProJDDDZGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameEnd::IsInitialized() const {

  return true;
}

void ProJDDDZGameEnd::Swap(ProJDDDZGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameEnd_descriptor_;
  metadata.reflection = ProJDDDZGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProJDDDZGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameQuickSoundRequest_MSGID ProJDDDZGameQuickSoundRequest::ID;
const ProJDDDZGameQuickSoundRequest_MSGID ProJDDDZGameQuickSoundRequest::MSGID_MIN;
const ProJDDDZGameQuickSoundRequest_MSGID ProJDDDZGameQuickSoundRequest::MSGID_MAX;
const int ProJDDDZGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProJDDDZGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProJDDDZGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProJDDDZGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameQuickSoundRequest::ProJDDDZGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProJDDDZGameQuickSoundRequest::ProJDDDZGameQuickSoundRequest(const ProJDDDZGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameQuickSoundRequest::~ProJDDDZGameQuickSoundRequest() {
  SharedDtor();
}

void ProJDDDZGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProJDDDZGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameQuickSoundRequest_descriptor_;
}

const ProJDDDZGameQuickSoundRequest& ProJDDDZGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameQuickSoundRequest* ProJDDDZGameQuickSoundRequest::default_instance_ = NULL;

ProJDDDZGameQuickSoundRequest* ProJDDDZGameQuickSoundRequest::New() const {
  return new ProJDDDZGameQuickSoundRequest;
}

void ProJDDDZGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameQuickSoundRequest::MergeFrom(const ProJDDDZGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameQuickSoundRequest::CopyFrom(const ProJDDDZGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameQuickSoundRequest::Swap(ProJDDDZGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProJDDDZGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProJDDDZGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameQuickSoundResponse_MSGID ProJDDDZGameQuickSoundResponse::ID;
const ProJDDDZGameQuickSoundResponse_MSGID ProJDDDZGameQuickSoundResponse::MSGID_MIN;
const ProJDDDZGameQuickSoundResponse_MSGID ProJDDDZGameQuickSoundResponse::MSGID_MAX;
const int ProJDDDZGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProJDDDZGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProJDDDZGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProJDDDZGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameQuickSoundResponse::ProJDDDZGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProJDDDZGameQuickSoundResponse::ProJDDDZGameQuickSoundResponse(const ProJDDDZGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameQuickSoundResponse::~ProJDDDZGameQuickSoundResponse() {
  SharedDtor();
}

void ProJDDDZGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProJDDDZGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameQuickSoundResponse_descriptor_;
}

const ProJDDDZGameQuickSoundResponse& ProJDDDZGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameQuickSoundResponse* ProJDDDZGameQuickSoundResponse::default_instance_ = NULL;

ProJDDDZGameQuickSoundResponse* ProJDDDZGameQuickSoundResponse::New() const {
  return new ProJDDDZGameQuickSoundResponse;
}

void ProJDDDZGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameQuickSoundResponse::MergeFrom(const ProJDDDZGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameQuickSoundResponse::CopyFrom(const ProJDDDZGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameQuickSoundResponse::Swap(ProJDDDZGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProJDDDZGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProJDDDZGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameSendDiscardMahs_MSGID ProJDDDZGameSendDiscardMahs::ID;
const ProJDDDZGameSendDiscardMahs_MSGID ProJDDDZGameSendDiscardMahs::MSGID_MIN;
const ProJDDDZGameSendDiscardMahs_MSGID ProJDDDZGameSendDiscardMahs::MSGID_MAX;
const int ProJDDDZGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProJDDDZGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProJDDDZGameSendDiscardMahs::kDeskCountFieldNumber;
const int ProJDDDZGameSendDiscardMahs::kOutCardCountFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameSendDiscardMahs::ProJDDDZGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProJDDDZGameSendDiscardMahs::ProJDDDZGameSendDiscardMahs(const ProJDDDZGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameSendDiscardMahs::~ProJDDDZGameSendDiscardMahs() {
  SharedDtor();
}

void ProJDDDZGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendDiscardMahs_descriptor_;
}

const ProJDDDZGameSendDiscardMahs& ProJDDDZGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameSendDiscardMahs* ProJDDDZGameSendDiscardMahs::default_instance_ = NULL;

ProJDDDZGameSendDiscardMahs* ProJDDDZGameSendDiscardMahs::New() const {
  return new ProJDDDZGameSendDiscardMahs;
}

void ProJDDDZGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  outcardcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .JDDDZMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(32)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outCardCount;
        break;
      }

      // repeated int32 outCardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_outcardcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcardcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outCardCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .JDDDZMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deskcount(), output);
  }

  // repeated int32 outCardCount = 5;
  for (int i = 0; i < this->outcardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->outcardcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .JDDDZMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deskcount(), target);
  }

  // repeated int32 outCardCount = 5;
  for (int i = 0; i < this->outcardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->outcardcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 4;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .JDDDZMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  // repeated int32 outCardCount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcardcount(i));
    }
    total_size += 1 * this->outcardcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameSendDiscardMahs::MergeFrom(const ProJDDDZGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  outcardcount_.MergeFrom(from.outcardcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameSendDiscardMahs::CopyFrom(const ProJDDDZGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProJDDDZGameSendDiscardMahs::Swap(ProJDDDZGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    std::swap(deskcount_, other->deskcount_);
    outcardcount_.Swap(&other->outcardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProJDDDZGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JDDDZWeaveItem::kWeaveKindFieldNumber;
const int JDDDZWeaveItem::kCentercardFieldNumber;
const int JDDDZWeaveItem::kProvideUserFieldNumber;
const int JDDDZWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

JDDDZWeaveItem::JDDDZWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JDDDZWeaveItem::InitAsDefaultInstance() {
}

JDDDZWeaveItem::JDDDZWeaveItem(const JDDDZWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JDDDZWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JDDDZWeaveItem::~JDDDZWeaveItem() {
  SharedDtor();
}

void JDDDZWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JDDDZWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JDDDZWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZWeaveItem_descriptor_;
}

const JDDDZWeaveItem& JDDDZWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

JDDDZWeaveItem* JDDDZWeaveItem::default_instance_ = NULL;

JDDDZWeaveItem* JDDDZWeaveItem::New() const {
  return new JDDDZWeaveItem;
}

void JDDDZWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JDDDZWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JDDDZWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JDDDZWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JDDDZWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JDDDZWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JDDDZWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JDDDZWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JDDDZWeaveItem::MergeFrom(const JDDDZWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JDDDZWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JDDDZWeaveItem::CopyFrom(const JDDDZWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JDDDZWeaveItem::IsInitialized() const {

  return true;
}

void JDDDZWeaveItem::Swap(JDDDZWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JDDDZWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JDDDZWeaveItem_descriptor_;
  metadata.reflection = JDDDZWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JDDDZWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

JDDDZWeaveItems::JDDDZWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JDDDZWeaveItems::InitAsDefaultInstance() {
}

JDDDZWeaveItems::JDDDZWeaveItems(const JDDDZWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JDDDZWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JDDDZWeaveItems::~JDDDZWeaveItems() {
  SharedDtor();
}

void JDDDZWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JDDDZWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JDDDZWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JDDDZWeaveItems_descriptor_;
}

const JDDDZWeaveItems& JDDDZWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

JDDDZWeaveItems* JDDDZWeaveItems::default_instance_ = NULL;

JDDDZWeaveItems* JDDDZWeaveItems::New() const {
  return new JDDDZWeaveItems;
}

void JDDDZWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JDDDZWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .JDDDZWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JDDDZWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .JDDDZWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JDDDZWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .JDDDZWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JDDDZWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .JDDDZWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JDDDZWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JDDDZWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JDDDZWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JDDDZWeaveItems::MergeFrom(const JDDDZWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JDDDZWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JDDDZWeaveItems::CopyFrom(const JDDDZWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JDDDZWeaveItems::IsInitialized() const {

  return true;
}

void JDDDZWeaveItems::Swap(JDDDZWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JDDDZWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JDDDZWeaveItems_descriptor_;
  metadata.reflection = JDDDZWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendActionMahs_MSGID_descriptor_;
}
bool ProJDDDZGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameSendActionMahs_MSGID ProJDDDZGameSendActionMahs::ID;
const ProJDDDZGameSendActionMahs_MSGID ProJDDDZGameSendActionMahs::MSGID_MIN;
const ProJDDDZGameSendActionMahs_MSGID ProJDDDZGameSendActionMahs::MSGID_MAX;
const int ProJDDDZGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameSendActionMahs::kSeatIdFieldNumber;
const int ProJDDDZGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameSendActionMahs::ProJDDDZGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameSendActionMahs::InitAsDefaultInstance() {
}

ProJDDDZGameSendActionMahs::ProJDDDZGameSendActionMahs(const ProJDDDZGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameSendActionMahs::~ProJDDDZGameSendActionMahs() {
  SharedDtor();
}

void ProJDDDZGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendActionMahs_descriptor_;
}

const ProJDDDZGameSendActionMahs& ProJDDDZGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameSendActionMahs* ProJDDDZGameSendActionMahs::default_instance_ = NULL;

ProJDDDZGameSendActionMahs* ProJDDDZGameSendActionMahs::New() const {
  return new ProJDDDZGameSendActionMahs;
}

void ProJDDDZGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .JDDDZWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .JDDDZWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .JDDDZWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .JDDDZWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameSendActionMahs::MergeFrom(const ProJDDDZGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameSendActionMahs::CopyFrom(const ProJDDDZGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProJDDDZGameSendActionMahs::Swap(ProJDDDZGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameSendActionMahs_descriptor_;
  metadata.reflection = ProJDDDZGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenRequest_MSGID_descriptor_;
}
bool ProJDDDZGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameBrokenRequest_MSGID ProJDDDZGameBrokenRequest::ID;
const ProJDDDZGameBrokenRequest_MSGID ProJDDDZGameBrokenRequest::MSGID_MIN;
const ProJDDDZGameBrokenRequest_MSGID ProJDDDZGameBrokenRequest::MSGID_MAX;
const int ProJDDDZGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameBrokenRequest::kSeatIdFieldNumber;
const int ProJDDDZGameBrokenRequest::kTypeFieldNumber;
const int ProJDDDZGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameBrokenRequest::ProJDDDZGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameBrokenRequest::InitAsDefaultInstance() {
}

ProJDDDZGameBrokenRequest::ProJDDDZGameBrokenRequest(const ProJDDDZGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameBrokenRequest::~ProJDDDZGameBrokenRequest() {
  SharedDtor();
}

void ProJDDDZGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenRequest_descriptor_;
}

const ProJDDDZGameBrokenRequest& ProJDDDZGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameBrokenRequest* ProJDDDZGameBrokenRequest::default_instance_ = NULL;

ProJDDDZGameBrokenRequest* ProJDDDZGameBrokenRequest::New() const {
  return new ProJDDDZGameBrokenRequest;
}

void ProJDDDZGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .JDDDZBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JDDDZBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::JDDDZBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .JDDDZBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .JDDDZBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .JDDDZBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameBrokenRequest::MergeFrom(const ProJDDDZGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameBrokenRequest::CopyFrom(const ProJDDDZGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameBrokenRequest::Swap(ProJDDDZGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameBrokenRequest_descriptor_;
  metadata.reflection = ProJDDDZGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenOperate_MSGID_descriptor_;
}
bool ProJDDDZGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameBrokenOperate_MSGID ProJDDDZGameBrokenOperate::ID;
const ProJDDDZGameBrokenOperate_MSGID ProJDDDZGameBrokenOperate::MSGID_MIN;
const ProJDDDZGameBrokenOperate_MSGID ProJDDDZGameBrokenOperate::MSGID_MAX;
const int ProJDDDZGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameBrokenOperate::kSeatIdFieldNumber;
const int ProJDDDZGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameBrokenOperate::ProJDDDZGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameBrokenOperate::InitAsDefaultInstance() {
}

ProJDDDZGameBrokenOperate::ProJDDDZGameBrokenOperate(const ProJDDDZGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameBrokenOperate::~ProJDDDZGameBrokenOperate() {
  SharedDtor();
}

void ProJDDDZGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenOperate_descriptor_;
}

const ProJDDDZGameBrokenOperate& ProJDDDZGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameBrokenOperate* ProJDDDZGameBrokenOperate::default_instance_ = NULL;

ProJDDDZGameBrokenOperate* ProJDDDZGameBrokenOperate::New() const {
  return new ProJDDDZGameBrokenOperate;
}

void ProJDDDZGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .JDDDZBROKEN_OPERATE result = 3 [default = JDDDZ_BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JDDDZBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::JDDDZBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .JDDDZBROKEN_OPERATE result = 3 [default = JDDDZ_BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .JDDDZBROKEN_OPERATE result = 3 [default = JDDDZ_BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .JDDDZBROKEN_OPERATE result = 3 [default = JDDDZ_BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameBrokenOperate::MergeFrom(const ProJDDDZGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameBrokenOperate::CopyFrom(const ProJDDDZGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProJDDDZGameBrokenOperate::Swap(ProJDDDZGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameBrokenOperate_descriptor_;
  metadata.reflection = ProJDDDZGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenNotify_MSGID_descriptor_;
}
bool ProJDDDZGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameBrokenNotify_MSGID ProJDDDZGameBrokenNotify::ID;
const ProJDDDZGameBrokenNotify_MSGID ProJDDDZGameBrokenNotify::MSGID_MIN;
const ProJDDDZGameBrokenNotify_MSGID ProJDDDZGameBrokenNotify::MSGID_MAX;
const int ProJDDDZGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameBrokenNotify::kSeatIdFieldNumber;
const int ProJDDDZGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameBrokenNotify::ProJDDDZGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameBrokenNotify::InitAsDefaultInstance() {
}

ProJDDDZGameBrokenNotify::ProJDDDZGameBrokenNotify(const ProJDDDZGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameBrokenNotify::~ProJDDDZGameBrokenNotify() {
  SharedDtor();
}

void ProJDDDZGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenNotify_descriptor_;
}

const ProJDDDZGameBrokenNotify& ProJDDDZGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameBrokenNotify* ProJDDDZGameBrokenNotify::default_instance_ = NULL;

ProJDDDZGameBrokenNotify* ProJDDDZGameBrokenNotify::New() const {
  return new ProJDDDZGameBrokenNotify;
}

void ProJDDDZGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .JDDDZBROKEN_CODE operate_code = 3 [default = JDDDZ_BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::JDDDZBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::JDDDZBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .JDDDZBROKEN_CODE operate_code = 3 [default = JDDDZ_BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .JDDDZBROKEN_CODE operate_code = 3 [default = JDDDZ_BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .JDDDZBROKEN_CODE operate_code = 3 [default = JDDDZ_BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameBrokenNotify::MergeFrom(const ProJDDDZGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameBrokenNotify::CopyFrom(const ProJDDDZGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameBrokenNotify::Swap(ProJDDDZGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameBrokenNotify_descriptor_;
  metadata.reflection = ProJDDDZGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameRuleConfig_MSGID_descriptor_;
}
bool ProJDDDZGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameRuleConfig_MSGID ProJDDDZGameRuleConfig::ID;
const ProJDDDZGameRuleConfig_MSGID ProJDDDZGameRuleConfig::MSGID_MIN;
const ProJDDDZGameRuleConfig_MSGID ProJDDDZGameRuleConfig::MSGID_MAX;
const int ProJDDDZGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameRuleConfig::kGameRoundFieldNumber;
const int ProJDDDZGameRuleConfig::kNeedCardFieldNumber;
const int ProJDDDZGameRuleConfig::kHaveBottomKingFieldNumber;
const int ProJDDDZGameRuleConfig::kHaveMaiLeiFieldNumber;
const int ProJDDDZGameRuleConfig::kHavaHuiTouFieldNumber;
const int ProJDDDZGameRuleConfig::kNMasterSeatFieldNumber;
const int ProJDDDZGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProJDDDZGameRuleConfig::kHaveJianmaFieldNumber;
const int ProJDDDZGameRuleConfig::kNChongguanNumFieldNumber;
const int ProJDDDZGameRuleConfig::kBbawangfanbeiFieldNumber;
const int ProJDDDZGameRuleConfig::kNPlayerNumFieldNumber;
const int ProJDDDZGameRuleConfig::kSRoomNumFieldNumber;
const int ProJDDDZGameRuleConfig::kSPlayTimeFieldNumber;
const int ProJDDDZGameRuleConfig::kNselfSeatFieldNumber;
const int ProJDDDZGameRuleConfig::kBJingDianFieldNumber;
const int ProJDDDZGameRuleConfig::kBMagicCardFieldNumber;
const int ProJDDDZGameRuleConfig::kBMasterThebeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameRuleConfig::ProJDDDZGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameRuleConfig::InitAsDefaultInstance() {
}

ProJDDDZGameRuleConfig::ProJDDDZGameRuleConfig(const ProJDDDZGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_bottom_king_ = false;
  have_mai_lei_ = false;
  hava_hui_tou_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  bbawangfanbei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nselfseat_ = 0;
  bjingdian_ = false;
  bmagiccard_ = false;
  bmasterthebe_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameRuleConfig::~ProJDDDZGameRuleConfig() {
  SharedDtor();
}

void ProJDDDZGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProJDDDZGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameRuleConfig_descriptor_;
}

const ProJDDDZGameRuleConfig& ProJDDDZGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameRuleConfig* ProJDDDZGameRuleConfig::default_instance_ = NULL;

ProJDDDZGameRuleConfig* ProJDDDZGameRuleConfig::New() const {
  return new ProJDDDZGameRuleConfig;
}

void ProJDDDZGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_bottom_king_ = false;
    have_mai_lei_ = false;
    hava_hui_tou_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    bbawangfanbei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
    nselfseat_ = 0;
    bjingdian_ = false;
    bmagiccard_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bmasterthebe_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_bottom_king;
        break;
      }

      // optional bool have_bottom_king = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_bottom_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_bottom_king_)));
          set_has_have_bottom_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_mai_lei;
        break;
      }

      // optional bool have_mai_lei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_mai_lei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_mai_lei_)));
          set_has_have_mai_lei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_hui_tou;
        break;
      }

      // optional bool hava_hui_tou = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_hui_tou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_hui_tou_)));
          set_has_hava_hui_tou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bbawangfanbei;
        break;
      }

      // optional bool bbawangfanbei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbawangfanbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbawangfanbei_)));
          set_has_bbawangfanbei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nselfSeat;
        break;
      }

      // optional int32 nselfSeat = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nselfSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nselfseat_)));
          set_has_nselfseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bJingDian;
        break;
      }

      // optional bool bJingDian = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bJingDian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bjingdian_)));
          set_has_bjingdian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bMagicCard;
        break;
      }

      // optional bool bMagicCard = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bMagicCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmagiccard_)));
          set_has_bmagiccard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bMasterThebe;
        break;
      }

      // optional bool bMasterThebe = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bMasterThebe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bmasterthebe_)));
          set_has_bmasterthebe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_bottom_king(), output);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_mai_lei(), output);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_hui_tou(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbawangfanbei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  // optional int32 nselfSeat = 14;
  if (has_nselfseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nselfseat(), output);
  }

  // optional bool bJingDian = 15;
  if (has_bjingdian()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->bjingdian(), output);
  }

  // optional bool bMagicCard = 16;
  if (has_bmagiccard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->bmagiccard(), output);
  }

  // optional bool bMasterThebe = 17;
  if (has_bmasterthebe()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->bmasterthebe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_bottom_king(), target);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_mai_lei(), target);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_hui_tou(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbawangfanbei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  // optional int32 nselfSeat = 14;
  if (has_nselfseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nselfseat(), target);
  }

  // optional bool bJingDian = 15;
  if (has_bjingdian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->bjingdian(), target);
  }

  // optional bool bMagicCard = 16;
  if (has_bmagiccard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->bmagiccard(), target);
  }

  // optional bool bMasterThebe = 17;
  if (has_bmasterthebe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->bmasterthebe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_bottom_king = 3;
    if (has_have_bottom_king()) {
      total_size += 1 + 1;
    }

    // optional bool have_mai_lei = 4;
    if (has_have_mai_lei()) {
      total_size += 1 + 1;
    }

    // optional bool hava_hui_tou = 5;
    if (has_hava_hui_tou()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool bbawangfanbei = 10;
    if (has_bbawangfanbei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

    // optional int32 nselfSeat = 14;
    if (has_nselfseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nselfseat());
    }

    // optional bool bJingDian = 15;
    if (has_bjingdian()) {
      total_size += 1 + 1;
    }

    // optional bool bMagicCard = 16;
    if (has_bmagiccard()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bMasterThebe = 17;
    if (has_bmasterthebe()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameRuleConfig::MergeFrom(const ProJDDDZGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_bottom_king()) {
      set_have_bottom_king(from.have_bottom_king());
    }
    if (from.has_have_mai_lei()) {
      set_have_mai_lei(from.have_mai_lei());
    }
    if (from.has_hava_hui_tou()) {
      set_hava_hui_tou(from.hava_hui_tou());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_bbawangfanbei()) {
      set_bbawangfanbei(from.bbawangfanbei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
    if (from.has_nselfseat()) {
      set_nselfseat(from.nselfseat());
    }
    if (from.has_bjingdian()) {
      set_bjingdian(from.bjingdian());
    }
    if (from.has_bmagiccard()) {
      set_bmagiccard(from.bmagiccard());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bmasterthebe()) {
      set_bmasterthebe(from.bmasterthebe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameRuleConfig::CopyFrom(const ProJDDDZGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameRuleConfig::IsInitialized() const {

  return true;
}

void ProJDDDZGameRuleConfig::Swap(ProJDDDZGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_bottom_king_, other->have_bottom_king_);
    std::swap(have_mai_lei_, other->have_mai_lei_);
    std::swap(hava_hui_tou_, other->hava_hui_tou_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(bbawangfanbei_, other->bbawangfanbei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(nselfseat_, other->nselfseat_);
    std::swap(bjingdian_, other->bjingdian_);
    std::swap(bmagiccard_, other->bmagiccard_);
    std::swap(bmasterthebe_, other->bmasterthebe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameRuleConfig_descriptor_;
  metadata.reflection = ProJDDDZGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenStatus_MSGID_descriptor_;
}
bool ProJDDDZGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameBrokenStatus_MSGID ProJDDDZGameBrokenStatus::ID;
const ProJDDDZGameBrokenStatus_MSGID ProJDDDZGameBrokenStatus::MSGID_MIN;
const ProJDDDZGameBrokenStatus_MSGID ProJDDDZGameBrokenStatus::MSGID_MAX;
const int ProJDDDZGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProJDDDZGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProJDDDZGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameBrokenStatus::ProJDDDZGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameBrokenStatus::InitAsDefaultInstance() {
}

ProJDDDZGameBrokenStatus::ProJDDDZGameBrokenStatus(const ProJDDDZGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameBrokenStatus::~ProJDDDZGameBrokenStatus() {
  SharedDtor();
}

void ProJDDDZGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameBrokenStatus_descriptor_;
}

const ProJDDDZGameBrokenStatus& ProJDDDZGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameBrokenStatus* ProJDDDZGameBrokenStatus::default_instance_ = NULL;

ProJDDDZGameBrokenStatus* ProJDDDZGameBrokenStatus::New() const {
  return new ProJDDDZGameBrokenStatus;
}

void ProJDDDZGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameBrokenStatus::MergeFrom(const ProJDDDZGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameBrokenStatus::CopyFrom(const ProJDDDZGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProJDDDZGameBrokenStatus::Swap(ProJDDDZGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameBrokenStatus_descriptor_;
  metadata.reflection = ProJDDDZGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDataResp_MSGID_descriptor_;
}
bool ProJDDDZGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameDataResp_MSGID ProJDDDZGameDataResp::ID;
const ProJDDDZGameDataResp_MSGID ProJDDDZGameDataResp::MSGID_MIN;
const ProJDDDZGameDataResp_MSGID ProJDDDZGameDataResp::MSGID_MAX;
const int ProJDDDZGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameDataResp::kTotalScoreFieldNumber;
const int ProJDDDZGameDataResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameDataResp::ProJDDDZGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameDataResp::InitAsDefaultInstance() {
}

ProJDDDZGameDataResp::ProJDDDZGameDataResp(const ProJDDDZGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameDataResp::~ProJDDDZGameDataResp() {
  SharedDtor();
}

void ProJDDDZGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameDataResp_descriptor_;
}

const ProJDDDZGameDataResp& ProJDDDZGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameDataResp* ProJDDDZGameDataResp::default_instance_ = NULL;

ProJDDDZGameDataResp* ProJDDDZGameDataResp::New() const {
  return new ProJDDDZGameDataResp;
}

void ProJDDDZGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameDataResp::MergeFrom(const ProJDDDZGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameDataResp::CopyFrom(const ProJDDDZGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameDataResp::IsInitialized() const {

  return true;
}

void ProJDDDZGameDataResp::Swap(ProJDDDZGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameDataResp_descriptor_;
  metadata.reflection = ProJDDDZGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameRecordRequest_MSGID_descriptor_;
}
bool ProJDDDZGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameRecordRequest_MSGID ProJDDDZGameRecordRequest::ID;
const ProJDDDZGameRecordRequest_MSGID ProJDDDZGameRecordRequest::MSGID_MIN;
const ProJDDDZGameRecordRequest_MSGID ProJDDDZGameRecordRequest::MSGID_MAX;
const int ProJDDDZGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameRecordRequest::kSeatIdFieldNumber;
const int ProJDDDZGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameRecordRequest::ProJDDDZGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameRecordRequest::InitAsDefaultInstance() {
}

ProJDDDZGameRecordRequest::ProJDDDZGameRecordRequest(const ProJDDDZGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameRecordRequest::~ProJDDDZGameRecordRequest() {
  SharedDtor();
}

void ProJDDDZGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProJDDDZGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameRecordRequest_descriptor_;
}

const ProJDDDZGameRecordRequest& ProJDDDZGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameRecordRequest* ProJDDDZGameRecordRequest::default_instance_ = NULL;

ProJDDDZGameRecordRequest* ProJDDDZGameRecordRequest::New() const {
  return new ProJDDDZGameRecordRequest;
}

void ProJDDDZGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameRecordRequest::MergeFrom(const ProJDDDZGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameRecordRequest::CopyFrom(const ProJDDDZGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameRecordRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameRecordRequest::Swap(ProJDDDZGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameRecordRequest_descriptor_;
  metadata.reflection = ProJDDDZGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameRecordResponse_MSGID_descriptor_;
}
bool ProJDDDZGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameRecordResponse_MSGID ProJDDDZGameRecordResponse::ID;
const ProJDDDZGameRecordResponse_MSGID ProJDDDZGameRecordResponse::MSGID_MIN;
const ProJDDDZGameRecordResponse_MSGID ProJDDDZGameRecordResponse::MSGID_MAX;
const int ProJDDDZGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameRecordResponse::kSeatIdFieldNumber;
const int ProJDDDZGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameRecordResponse::ProJDDDZGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameRecordResponse::InitAsDefaultInstance() {
}

ProJDDDZGameRecordResponse::ProJDDDZGameRecordResponse(const ProJDDDZGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameRecordResponse::~ProJDDDZGameRecordResponse() {
  SharedDtor();
}

void ProJDDDZGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProJDDDZGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameRecordResponse_descriptor_;
}

const ProJDDDZGameRecordResponse& ProJDDDZGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameRecordResponse* ProJDDDZGameRecordResponse::default_instance_ = NULL;

ProJDDDZGameRecordResponse* ProJDDDZGameRecordResponse::New() const {
  return new ProJDDDZGameRecordResponse;
}

void ProJDDDZGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameRecordResponse::MergeFrom(const ProJDDDZGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameRecordResponse::CopyFrom(const ProJDDDZGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameRecordResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameRecordResponse::Swap(ProJDDDZGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameRecordResponse_descriptor_;
  metadata.reflection = ProJDDDZGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserLocationRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserLocationRequest_MSGID ProJDDDZGameUserLocationRequest::ID;
const ProJDDDZGameUserLocationRequest_MSGID ProJDDDZGameUserLocationRequest::MSGID_MIN;
const ProJDDDZGameUserLocationRequest_MSGID ProJDDDZGameUserLocationRequest::MSGID_MAX;
const int ProJDDDZGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserLocationRequest::kSeatIdFieldNumber;
const int ProJDDDZGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProJDDDZGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProJDDDZGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProJDDDZGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserLocationRequest::ProJDDDZGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserLocationRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserLocationRequest::ProJDDDZGameUserLocationRequest(const ProJDDDZGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserLocationRequest::~ProJDDDZGameUserLocationRequest() {
  SharedDtor();
}

void ProJDDDZGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserLocationRequest_descriptor_;
}

const ProJDDDZGameUserLocationRequest& ProJDDDZGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserLocationRequest* ProJDDDZGameUserLocationRequest::default_instance_ = NULL;

ProJDDDZGameUserLocationRequest* ProJDDDZGameUserLocationRequest::New() const {
  return new ProJDDDZGameUserLocationRequest;
}

void ProJDDDZGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserLocationRequest::MergeFrom(const ProJDDDZGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserLocationRequest::CopyFrom(const ProJDDDZGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserLocationRequest::Swap(ProJDDDZGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserLocationRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSyncCardResponse_MSGID_descriptor_;
}
bool ProJDDDZGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameSyncCardResponse_MSGID ProJDDDZGameSyncCardResponse::ID;
const ProJDDDZGameSyncCardResponse_MSGID ProJDDDZGameSyncCardResponse::MSGID_MIN;
const ProJDDDZGameSyncCardResponse_MSGID ProJDDDZGameSyncCardResponse::MSGID_MAX;
const int ProJDDDZGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameSyncCardResponse::kSeatFieldNumber;
const int ProJDDDZGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameSyncCardResponse::ProJDDDZGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameSyncCardResponse::InitAsDefaultInstance() {
}

ProJDDDZGameSyncCardResponse::ProJDDDZGameSyncCardResponse(const ProJDDDZGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameSyncCardResponse::~ProJDDDZGameSyncCardResponse() {
  SharedDtor();
}

void ProJDDDZGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSyncCardResponse_descriptor_;
}

const ProJDDDZGameSyncCardResponse& ProJDDDZGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameSyncCardResponse* ProJDDDZGameSyncCardResponse::default_instance_ = NULL;

ProJDDDZGameSyncCardResponse* ProJDDDZGameSyncCardResponse::New() const {
  return new ProJDDDZGameSyncCardResponse;
}

void ProJDDDZGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameSyncCardResponse::MergeFrom(const ProJDDDZGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameSyncCardResponse::CopyFrom(const ProJDDDZGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameSyncCardResponse::Swap(ProJDDDZGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameSyncCardResponse_descriptor_;
  metadata.reflection = ProJDDDZGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserPhoneStatusRequest_MSGID ProJDDDZGameUserPhoneStatusRequest::ID;
const ProJDDDZGameUserPhoneStatusRequest_MSGID ProJDDDZGameUserPhoneStatusRequest::MSGID_MIN;
const ProJDDDZGameUserPhoneStatusRequest_MSGID ProJDDDZGameUserPhoneStatusRequest::MSGID_MAX;
const int ProJDDDZGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProJDDDZGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserPhoneStatusRequest::ProJDDDZGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserPhoneStatusRequest::ProJDDDZGameUserPhoneStatusRequest(const ProJDDDZGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserPhoneStatusRequest::~ProJDDDZGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProJDDDZGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserPhoneStatusRequest_descriptor_;
}

const ProJDDDZGameUserPhoneStatusRequest& ProJDDDZGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserPhoneStatusRequest* ProJDDDZGameUserPhoneStatusRequest::default_instance_ = NULL;

ProJDDDZGameUserPhoneStatusRequest* ProJDDDZGameUserPhoneStatusRequest::New() const {
  return new ProJDDDZGameUserPhoneStatusRequest;
}

void ProJDDDZGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserPhoneStatusRequest::MergeFrom(const ProJDDDZGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserPhoneStatusRequest::CopyFrom(const ProJDDDZGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserPhoneStatusRequest::Swap(ProJDDDZGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserGiveUpRequest_MSGID ProJDDDZGameUserGiveUpRequest::ID;
const ProJDDDZGameUserGiveUpRequest_MSGID ProJDDDZGameUserGiveUpRequest::MSGID_MIN;
const ProJDDDZGameUserGiveUpRequest_MSGID ProJDDDZGameUserGiveUpRequest::MSGID_MAX;
const int ProJDDDZGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserGiveUpRequest::ProJDDDZGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserGiveUpRequest::ProJDDDZGameUserGiveUpRequest(const ProJDDDZGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserGiveUpRequest::~ProJDDDZGameUserGiveUpRequest() {
  SharedDtor();
}

void ProJDDDZGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserGiveUpRequest_descriptor_;
}

const ProJDDDZGameUserGiveUpRequest& ProJDDDZGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserGiveUpRequest* ProJDDDZGameUserGiveUpRequest::default_instance_ = NULL;

ProJDDDZGameUserGiveUpRequest* ProJDDDZGameUserGiveUpRequest::New() const {
  return new ProJDDDZGameUserGiveUpRequest;
}

void ProJDDDZGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserGiveUpRequest::MergeFrom(const ProJDDDZGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserGiveUpRequest::CopyFrom(const ProJDDDZGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserGiveUpRequest::Swap(ProJDDDZGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserHintRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserHintRequest_MSGID ProJDDDZGameUserHintRequest::ID;
const ProJDDDZGameUserHintRequest_MSGID ProJDDDZGameUserHintRequest::MSGID_MIN;
const ProJDDDZGameUserHintRequest_MSGID ProJDDDZGameUserHintRequest::MSGID_MAX;
const int ProJDDDZGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProJDDDZGameUserHintRequest::ProJDDDZGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserHintRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserHintRequest::ProJDDDZGameUserHintRequest(const ProJDDDZGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserHintRequest::~ProJDDDZGameUserHintRequest() {
  SharedDtor();
}

void ProJDDDZGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserHintRequest_descriptor_;
}

const ProJDDDZGameUserHintRequest& ProJDDDZGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserHintRequest* ProJDDDZGameUserHintRequest::default_instance_ = NULL;

ProJDDDZGameUserHintRequest* ProJDDDZGameUserHintRequest::New() const {
  return new ProJDDDZGameUserHintRequest;
}

void ProJDDDZGameUserHintRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserHintRequest::MergeFrom(const ProJDDDZGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserHintRequest::CopyFrom(const ProJDDDZGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserHintRequest::Swap(ProJDDDZGameUserHintRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserHintRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserHintResponse_MSGID_descriptor_;
}
bool ProJDDDZGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserHintResponse_MSGID ProJDDDZGameUserHintResponse::ID;
const ProJDDDZGameUserHintResponse_MSGID ProJDDDZGameUserHintResponse::MSGID_MIN;
const ProJDDDZGameUserHintResponse_MSGID ProJDDDZGameUserHintResponse::MSGID_MAX;
const int ProJDDDZGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserHintResponse::kLenthFieldNumber;
const int ProJDDDZGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserHintResponse::ProJDDDZGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserHintResponse::InitAsDefaultInstance() {
}

ProJDDDZGameUserHintResponse::ProJDDDZGameUserHintResponse(const ProJDDDZGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserHintResponse::~ProJDDDZGameUserHintResponse() {
  SharedDtor();
}

void ProJDDDZGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserHintResponse_descriptor_;
}

const ProJDDDZGameUserHintResponse& ProJDDDZGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserHintResponse* ProJDDDZGameUserHintResponse::default_instance_ = NULL;

ProJDDDZGameUserHintResponse* ProJDDDZGameUserHintResponse::New() const {
  return new ProJDDDZGameUserHintResponse;
}

void ProJDDDZGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserHintResponse::MergeFrom(const ProJDDDZGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserHintResponse::CopyFrom(const ProJDDDZGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserHintResponse::Swap(ProJDDDZGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserHintResponse_descriptor_;
  metadata.reflection = ProJDDDZGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallScoreResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallScoreResponse_MSGID_descriptor_;
}
bool ProJDDDZGameUserCallScoreResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserCallScoreResponse_MSGID ProJDDDZGameUserCallScoreResponse::ID;
const ProJDDDZGameUserCallScoreResponse_MSGID ProJDDDZGameUserCallScoreResponse::MSGID_MIN;
const ProJDDDZGameUserCallScoreResponse_MSGID ProJDDDZGameUserCallScoreResponse::MSGID_MAX;
const int ProJDDDZGameUserCallScoreResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserCallScoreResponse::kSeatFieldNumber;
const int ProJDDDZGameUserCallScoreResponse::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserCallScoreResponse::ProJDDDZGameUserCallScoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserCallScoreResponse::InitAsDefaultInstance() {
}

ProJDDDZGameUserCallScoreResponse::ProJDDDZGameUserCallScoreResponse(const ProJDDDZGameUserCallScoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserCallScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserCallScoreResponse::~ProJDDDZGameUserCallScoreResponse() {
  SharedDtor();
}

void ProJDDDZGameUserCallScoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserCallScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallScoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallScoreResponse_descriptor_;
}

const ProJDDDZGameUserCallScoreResponse& ProJDDDZGameUserCallScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserCallScoreResponse* ProJDDDZGameUserCallScoreResponse::default_instance_ = NULL;

ProJDDDZGameUserCallScoreResponse* ProJDDDZGameUserCallScoreResponse::New() const {
  return new ProJDDDZGameUserCallScoreResponse;
}

void ProJDDDZGameUserCallScoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserCallScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserCallScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserCallScoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserCallScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserCallScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserCallScoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserCallScoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserCallScoreResponse::MergeFrom(const ProJDDDZGameUserCallScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserCallScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserCallScoreResponse::CopyFrom(const ProJDDDZGameUserCallScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserCallScoreResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserCallScoreResponse::Swap(ProJDDDZGameUserCallScoreResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserCallScoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserCallScoreResponse_descriptor_;
  metadata.reflection = ProJDDDZGameUserCallScoreResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallScoreRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallScoreRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserCallScoreRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserCallScoreRequest_MSGID ProJDDDZGameUserCallScoreRequest::ID;
const ProJDDDZGameUserCallScoreRequest_MSGID ProJDDDZGameUserCallScoreRequest::MSGID_MIN;
const ProJDDDZGameUserCallScoreRequest_MSGID ProJDDDZGameUserCallScoreRequest::MSGID_MAX;
const int ProJDDDZGameUserCallScoreRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserCallScoreRequest::kSeatFieldNumber;
const int ProJDDDZGameUserCallScoreRequest::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserCallScoreRequest::ProJDDDZGameUserCallScoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserCallScoreRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserCallScoreRequest::ProJDDDZGameUserCallScoreRequest(const ProJDDDZGameUserCallScoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserCallScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserCallScoreRequest::~ProJDDDZGameUserCallScoreRequest() {
  SharedDtor();
}

void ProJDDDZGameUserCallScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserCallScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallScoreRequest_descriptor_;
}

const ProJDDDZGameUserCallScoreRequest& ProJDDDZGameUserCallScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserCallScoreRequest* ProJDDDZGameUserCallScoreRequest::default_instance_ = NULL;

ProJDDDZGameUserCallScoreRequest* ProJDDDZGameUserCallScoreRequest::New() const {
  return new ProJDDDZGameUserCallScoreRequest;
}

void ProJDDDZGameUserCallScoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserCallScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserCallScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserCallScoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserCallScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserCallScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserCallScoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserCallScoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserCallScoreRequest::MergeFrom(const ProJDDDZGameUserCallScoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserCallScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserCallScoreRequest::CopyFrom(const ProJDDDZGameUserCallScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserCallScoreRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserCallScoreRequest::Swap(ProJDDDZGameUserCallScoreRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserCallScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserCallScoreRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserCallScoreRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameCallNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameCallNotify_MSGID_descriptor_;
}
bool ProJDDDZGameCallNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameCallNotify_MSGID ProJDDDZGameCallNotify::ID;
const ProJDDDZGameCallNotify_MSGID ProJDDDZGameCallNotify::MSGID_MIN;
const ProJDDDZGameCallNotify_MSGID ProJDDDZGameCallNotify::MSGID_MAX;
const int ProJDDDZGameCallNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameCallNotify::kSeatFieldNumber;
const int ProJDDDZGameCallNotify::kMaxCallScoreFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameCallNotify::ProJDDDZGameCallNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameCallNotify::InitAsDefaultInstance() {
}

ProJDDDZGameCallNotify::ProJDDDZGameCallNotify(const ProJDDDZGameCallNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameCallNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  maxcallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameCallNotify::~ProJDDDZGameCallNotify() {
  SharedDtor();
}

void ProJDDDZGameCallNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameCallNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameCallNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameCallNotify_descriptor_;
}

const ProJDDDZGameCallNotify& ProJDDDZGameCallNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameCallNotify* ProJDDDZGameCallNotify::default_instance_ = NULL;

ProJDDDZGameCallNotify* ProJDDDZGameCallNotify::New() const {
  return new ProJDDDZGameCallNotify;
}

void ProJDDDZGameCallNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    maxcallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameCallNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxCallScore;
        break;
      }

      // optional int32 maxCallScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCallScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcallscore_)));
          set_has_maxcallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameCallNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 maxCallScore = 2;
  if (has_maxcallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxcallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameCallNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 maxCallScore = 2;
  if (has_maxcallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxcallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameCallNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 maxCallScore = 2;
    if (has_maxcallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameCallNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameCallNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameCallNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameCallNotify::MergeFrom(const ProJDDDZGameCallNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_maxcallscore()) {
      set_maxcallscore(from.maxcallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameCallNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameCallNotify::CopyFrom(const ProJDDDZGameCallNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameCallNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameCallNotify::Swap(ProJDDDZGameCallNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(maxcallscore_, other->maxcallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameCallNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameCallNotify_descriptor_;
  metadata.reflection = ProJDDDZGameCallNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameQiangNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameQiangNotify_MSGID_descriptor_;
}
bool ProJDDDZGameQiangNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameQiangNotify_MSGID ProJDDDZGameQiangNotify::ID;
const ProJDDDZGameQiangNotify_MSGID ProJDDDZGameQiangNotify::MSGID_MIN;
const ProJDDDZGameQiangNotify_MSGID ProJDDDZGameQiangNotify::MSGID_MAX;
const int ProJDDDZGameQiangNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameQiangNotify::kSeatFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameQiangNotify::ProJDDDZGameQiangNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameQiangNotify::InitAsDefaultInstance() {
}

ProJDDDZGameQiangNotify::ProJDDDZGameQiangNotify(const ProJDDDZGameQiangNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameQiangNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameQiangNotify::~ProJDDDZGameQiangNotify() {
  SharedDtor();
}

void ProJDDDZGameQiangNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameQiangNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameQiangNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameQiangNotify_descriptor_;
}

const ProJDDDZGameQiangNotify& ProJDDDZGameQiangNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameQiangNotify* ProJDDDZGameQiangNotify::default_instance_ = NULL;

ProJDDDZGameQiangNotify* ProJDDDZGameQiangNotify::New() const {
  return new ProJDDDZGameQiangNotify;
}

void ProJDDDZGameQiangNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameQiangNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameQiangNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameQiangNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameQiangNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameQiangNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameQiangNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameQiangNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameQiangNotify::MergeFrom(const ProJDDDZGameQiangNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameQiangNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameQiangNotify::CopyFrom(const ProJDDDZGameQiangNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameQiangNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameQiangNotify::Swap(ProJDDDZGameQiangNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameQiangNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameQiangNotify_descriptor_;
  metadata.reflection = ProJDDDZGameQiangNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallLandlordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallLandlordResponse_MSGID_descriptor_;
}
bool ProJDDDZGameUserCallLandlordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserCallLandlordResponse_MSGID ProJDDDZGameUserCallLandlordResponse::ID;
const ProJDDDZGameUserCallLandlordResponse_MSGID ProJDDDZGameUserCallLandlordResponse::MSGID_MIN;
const ProJDDDZGameUserCallLandlordResponse_MSGID ProJDDDZGameUserCallLandlordResponse::MSGID_MAX;
const int ProJDDDZGameUserCallLandlordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserCallLandlordResponse::kIscallandlordFieldNumber;
const int ProJDDDZGameUserCallLandlordResponse::kScoreFieldNumber;
const int ProJDDDZGameUserCallLandlordResponse::kLandlordSeatFieldNumber;
const int ProJDDDZGameUserCallLandlordResponse::kSeatFieldNumber;
const int ProJDDDZGameUserCallLandlordResponse::kIsSoundCallFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserCallLandlordResponse::ProJDDDZGameUserCallLandlordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserCallLandlordResponse::InitAsDefaultInstance() {
}

ProJDDDZGameUserCallLandlordResponse::ProJDDDZGameUserCallLandlordResponse(const ProJDDDZGameUserCallLandlordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserCallLandlordResponse::SharedCtor() {
  _cached_size_ = 0;
  iscallandlord_ = 0;
  score_ = 0;
  landlordseat_ = 0;
  seat_ = 0;
  issoundcall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserCallLandlordResponse::~ProJDDDZGameUserCallLandlordResponse() {
  SharedDtor();
}

void ProJDDDZGameUserCallLandlordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserCallLandlordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallLandlordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallLandlordResponse_descriptor_;
}

const ProJDDDZGameUserCallLandlordResponse& ProJDDDZGameUserCallLandlordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserCallLandlordResponse* ProJDDDZGameUserCallLandlordResponse::default_instance_ = NULL;

ProJDDDZGameUserCallLandlordResponse* ProJDDDZGameUserCallLandlordResponse::New() const {
  return new ProJDDDZGameUserCallLandlordResponse;
}

void ProJDDDZGameUserCallLandlordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iscallandlord_ = 0;
    score_ = 0;
    landlordseat_ = 0;
    seat_ = 0;
    issoundcall_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserCallLandlordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iscallandlord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscallandlord_)));
          set_has_iscallandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landlordSeat;
        break;
      }

      // optional int32 landlordSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordseat_)));
          set_has_landlordseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seat;
        break;
      }

      // optional int32 seat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isSoundCall;
        break;
      }

      // optional bool isSoundCall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSoundCall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issoundcall_)));
          set_has_issoundcall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserCallLandlordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iscallandlord = 1;
  if (has_iscallandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iscallandlord(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->landlordseat(), output);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seat(), output);
  }

  // optional bool isSoundCall = 5;
  if (has_issoundcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->issoundcall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserCallLandlordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iscallandlord = 1;
  if (has_iscallandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iscallandlord(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->landlordseat(), target);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seat(), target);
  }

  // optional bool isSoundCall = 5;
  if (has_issoundcall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->issoundcall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserCallLandlordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iscallandlord = 1;
    if (has_iscallandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscallandlord());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 landlordSeat = 3;
    if (has_landlordseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordseat());
    }

    // optional int32 seat = 4;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isSoundCall = 5;
    if (has_issoundcall()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserCallLandlordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserCallLandlordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserCallLandlordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserCallLandlordResponse::MergeFrom(const ProJDDDZGameUserCallLandlordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscallandlord()) {
      set_iscallandlord(from.iscallandlord());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_landlordseat()) {
      set_landlordseat(from.landlordseat());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_issoundcall()) {
      set_issoundcall(from.issoundcall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserCallLandlordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserCallLandlordResponse::CopyFrom(const ProJDDDZGameUserCallLandlordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserCallLandlordResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserCallLandlordResponse::Swap(ProJDDDZGameUserCallLandlordResponse* other) {
  if (other != this) {
    std::swap(iscallandlord_, other->iscallandlord_);
    std::swap(score_, other->score_);
    std::swap(landlordseat_, other->landlordseat_);
    std::swap(seat_, other->seat_);
    std::swap(issoundcall_, other->issoundcall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserCallLandlordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserCallLandlordResponse_descriptor_;
  metadata.reflection = ProJDDDZGameUserCallLandlordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserCallLandlordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallLandlordRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserCallLandlordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserCallLandlordRequest_MSGID ProJDDDZGameUserCallLandlordRequest::ID;
const ProJDDDZGameUserCallLandlordRequest_MSGID ProJDDDZGameUserCallLandlordRequest::MSGID_MIN;
const ProJDDDZGameUserCallLandlordRequest_MSGID ProJDDDZGameUserCallLandlordRequest::MSGID_MAX;
const int ProJDDDZGameUserCallLandlordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserCallLandlordRequest::kSeatFieldNumber;
const int ProJDDDZGameUserCallLandlordRequest::kIscallandlordFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserCallLandlordRequest::ProJDDDZGameUserCallLandlordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserCallLandlordRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserCallLandlordRequest::ProJDDDZGameUserCallLandlordRequest(const ProJDDDZGameUserCallLandlordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserCallLandlordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  iscallandlord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserCallLandlordRequest::~ProJDDDZGameUserCallLandlordRequest() {
  SharedDtor();
}

void ProJDDDZGameUserCallLandlordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserCallLandlordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserCallLandlordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserCallLandlordRequest_descriptor_;
}

const ProJDDDZGameUserCallLandlordRequest& ProJDDDZGameUserCallLandlordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserCallLandlordRequest* ProJDDDZGameUserCallLandlordRequest::default_instance_ = NULL;

ProJDDDZGameUserCallLandlordRequest* ProJDDDZGameUserCallLandlordRequest::New() const {
  return new ProJDDDZGameUserCallLandlordRequest;
}

void ProJDDDZGameUserCallLandlordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    iscallandlord_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserCallLandlordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iscallandlord;
        break;
      }

      // optional int32 iscallandlord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscallandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscallandlord_)));
          set_has_iscallandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserCallLandlordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 iscallandlord = 2;
  if (has_iscallandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iscallandlord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserCallLandlordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 iscallandlord = 2;
  if (has_iscallandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iscallandlord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserCallLandlordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 iscallandlord = 2;
    if (has_iscallandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscallandlord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserCallLandlordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserCallLandlordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserCallLandlordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserCallLandlordRequest::MergeFrom(const ProJDDDZGameUserCallLandlordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_iscallandlord()) {
      set_iscallandlord(from.iscallandlord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserCallLandlordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserCallLandlordRequest::CopyFrom(const ProJDDDZGameUserCallLandlordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserCallLandlordRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserCallLandlordRequest::Swap(ProJDDDZGameUserCallLandlordRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(iscallandlord_, other->iscallandlord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserCallLandlordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserCallLandlordRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserCallLandlordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserQinagLandlordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserQinagLandlordResponse_MSGID_descriptor_;
}
bool ProJDDDZGameUserQinagLandlordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserQinagLandlordResponse_MSGID ProJDDDZGameUserQinagLandlordResponse::ID;
const ProJDDDZGameUserQinagLandlordResponse_MSGID ProJDDDZGameUserQinagLandlordResponse::MSGID_MIN;
const ProJDDDZGameUserQinagLandlordResponse_MSGID ProJDDDZGameUserQinagLandlordResponse::MSGID_MAX;
const int ProJDDDZGameUserQinagLandlordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserQinagLandlordResponse::kIsQiangLandlordFieldNumber;
const int ProJDDDZGameUserQinagLandlordResponse::kScoreFieldNumber;
const int ProJDDDZGameUserQinagLandlordResponse::kLandlordSeatFieldNumber;
const int ProJDDDZGameUserQinagLandlordResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserQinagLandlordResponse::ProJDDDZGameUserQinagLandlordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserQinagLandlordResponse::InitAsDefaultInstance() {
}

ProJDDDZGameUserQinagLandlordResponse::ProJDDDZGameUserQinagLandlordResponse(const ProJDDDZGameUserQinagLandlordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserQinagLandlordResponse::SharedCtor() {
  _cached_size_ = 0;
  isqianglandlord_ = 0;
  score_ = 0;
  landlordseat_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserQinagLandlordResponse::~ProJDDDZGameUserQinagLandlordResponse() {
  SharedDtor();
}

void ProJDDDZGameUserQinagLandlordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserQinagLandlordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserQinagLandlordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserQinagLandlordResponse_descriptor_;
}

const ProJDDDZGameUserQinagLandlordResponse& ProJDDDZGameUserQinagLandlordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserQinagLandlordResponse* ProJDDDZGameUserQinagLandlordResponse::default_instance_ = NULL;

ProJDDDZGameUserQinagLandlordResponse* ProJDDDZGameUserQinagLandlordResponse::New() const {
  return new ProJDDDZGameUserQinagLandlordResponse;
}

void ProJDDDZGameUserQinagLandlordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isqianglandlord_ = 0;
    score_ = 0;
    landlordseat_ = 0;
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserQinagLandlordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isQiangLandlord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqianglandlord_)));
          set_has_isqianglandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landlordSeat;
        break;
      }

      // optional int32 landlordSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordseat_)));
          set_has_landlordseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seat;
        break;
      }

      // optional int32 seat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserQinagLandlordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isQiangLandlord = 1;
  if (has_isqianglandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isqianglandlord(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->landlordseat(), output);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserQinagLandlordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isQiangLandlord = 1;
  if (has_isqianglandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isqianglandlord(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->landlordseat(), target);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserQinagLandlordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isQiangLandlord = 1;
    if (has_isqianglandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqianglandlord());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 landlordSeat = 3;
    if (has_landlordseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordseat());
    }

    // optional int32 seat = 4;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserQinagLandlordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserQinagLandlordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserQinagLandlordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserQinagLandlordResponse::MergeFrom(const ProJDDDZGameUserQinagLandlordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isqianglandlord()) {
      set_isqianglandlord(from.isqianglandlord());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_landlordseat()) {
      set_landlordseat(from.landlordseat());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserQinagLandlordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserQinagLandlordResponse::CopyFrom(const ProJDDDZGameUserQinagLandlordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserQinagLandlordResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserQinagLandlordResponse::Swap(ProJDDDZGameUserQinagLandlordResponse* other) {
  if (other != this) {
    std::swap(isqianglandlord_, other->isqianglandlord_);
    std::swap(score_, other->score_);
    std::swap(landlordseat_, other->landlordseat_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserQinagLandlordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserQinagLandlordResponse_descriptor_;
  metadata.reflection = ProJDDDZGameUserQinagLandlordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserQiangLandlordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserQiangLandlordRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserQiangLandlordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserQiangLandlordRequest_MSGID ProJDDDZGameUserQiangLandlordRequest::ID;
const ProJDDDZGameUserQiangLandlordRequest_MSGID ProJDDDZGameUserQiangLandlordRequest::MSGID_MIN;
const ProJDDDZGameUserQiangLandlordRequest_MSGID ProJDDDZGameUserQiangLandlordRequest::MSGID_MAX;
const int ProJDDDZGameUserQiangLandlordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserQiangLandlordRequest::kSeatFieldNumber;
const int ProJDDDZGameUserQiangLandlordRequest::kIsQiangLandlordFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserQiangLandlordRequest::ProJDDDZGameUserQiangLandlordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserQiangLandlordRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserQiangLandlordRequest::ProJDDDZGameUserQiangLandlordRequest(const ProJDDDZGameUserQiangLandlordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserQiangLandlordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  isqianglandlord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserQiangLandlordRequest::~ProJDDDZGameUserQiangLandlordRequest() {
  SharedDtor();
}

void ProJDDDZGameUserQiangLandlordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserQiangLandlordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserQiangLandlordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserQiangLandlordRequest_descriptor_;
}

const ProJDDDZGameUserQiangLandlordRequest& ProJDDDZGameUserQiangLandlordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserQiangLandlordRequest* ProJDDDZGameUserQiangLandlordRequest::default_instance_ = NULL;

ProJDDDZGameUserQiangLandlordRequest* ProJDDDZGameUserQiangLandlordRequest::New() const {
  return new ProJDDDZGameUserQiangLandlordRequest;
}

void ProJDDDZGameUserQiangLandlordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    isqianglandlord_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserQiangLandlordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isQiangLandlord;
        break;
      }

      // optional int32 isQiangLandlord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQiangLandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqianglandlord_)));
          set_has_isqianglandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserQiangLandlordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 isQiangLandlord = 2;
  if (has_isqianglandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isqianglandlord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserQiangLandlordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 isQiangLandlord = 2;
  if (has_isqianglandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isqianglandlord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserQiangLandlordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 isQiangLandlord = 2;
    if (has_isqianglandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqianglandlord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserQiangLandlordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserQiangLandlordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserQiangLandlordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserQiangLandlordRequest::MergeFrom(const ProJDDDZGameUserQiangLandlordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_isqianglandlord()) {
      set_isqianglandlord(from.isqianglandlord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserQiangLandlordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserQiangLandlordRequest::CopyFrom(const ProJDDDZGameUserQiangLandlordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserQiangLandlordRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserQiangLandlordRequest::Swap(ProJDDDZGameUserQiangLandlordRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(isqianglandlord_, other->isqianglandlord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserQiangLandlordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserQiangLandlordRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserQiangLandlordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameSendLastCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendLastCard_MSGID_descriptor_;
}
bool ProJDDDZGameSendLastCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2246:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameSendLastCard_MSGID ProJDDDZGameSendLastCard::ID;
const ProJDDDZGameSendLastCard_MSGID ProJDDDZGameSendLastCard::MSGID_MIN;
const ProJDDDZGameSendLastCard_MSGID ProJDDDZGameSendLastCard::MSGID_MAX;
const int ProJDDDZGameSendLastCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameSendLastCard::kSeatFieldNumber;
const int ProJDDDZGameSendLastCard::kCbHandCardDataFieldNumber;
const int ProJDDDZGameSendLastCard::kLastmahsFieldNumber;
const int ProJDDDZGameSendLastCard::kLaiziFieldNumber;
const int ProJDDDZGameSendLastCard::kIsReComeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameSendLastCard::ProJDDDZGameSendLastCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameSendLastCard::InitAsDefaultInstance() {
}

ProJDDDZGameSendLastCard::ProJDDDZGameSendLastCard(const ProJDDDZGameSendLastCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameSendLastCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  laizi_ = 0;
  isrecome_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameSendLastCard::~ProJDDDZGameSendLastCard() {
  SharedDtor();
}

void ProJDDDZGameSendLastCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameSendLastCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameSendLastCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameSendLastCard_descriptor_;
}

const ProJDDDZGameSendLastCard& ProJDDDZGameSendLastCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameSendLastCard* ProJDDDZGameSendLastCard::default_instance_ = NULL;

ProJDDDZGameSendLastCard* ProJDDDZGameSendLastCard::New() const {
  return new ProJDDDZGameSendLastCard;
}

void ProJDDDZGameSendLastCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    laizi_ = 0;
    isrecome_ = false;
  }
  cbhandcarddata_.Clear();
  lastmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameSendLastCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cbHandCardData;
        break;
      }

      // repeated .JDDDZMahList cbHandCardData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cbHandCardData;
        if (input->ExpectTag(24)) goto parse_lastmahs;
        break;
      }

      // repeated int32 lastmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lastmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lastmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastmahs;
        if (input->ExpectTag(32)) goto parse_laizi;
        break;
      }

      // optional int32 laizi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizi_)));
          set_has_laizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isReCome;
        break;
      }

      // optional bool isReCome = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReCome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecome_)));
          set_has_isrecome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameSendLastCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated .JDDDZMahList cbHandCardData = 2;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cbhandcarddata(i), output);
  }

  // repeated int32 lastmahs = 3;
  for (int i = 0; i < this->lastmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lastmahs(i), output);
  }

  // optional int32 laizi = 4;
  if (has_laizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->laizi(), output);
  }

  // optional bool isReCome = 5;
  if (has_isrecome()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrecome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameSendLastCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated .JDDDZMahList cbHandCardData = 2;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cbhandcarddata(i), target);
  }

  // repeated int32 lastmahs = 3;
  for (int i = 0; i < this->lastmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lastmahs(i), target);
  }

  // optional int32 laizi = 4;
  if (has_laizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->laizi(), target);
  }

  // optional bool isReCome = 5;
  if (has_isrecome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrecome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameSendLastCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 laizi = 4;
    if (has_laizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizi());
    }

    // optional bool isReCome = 5;
    if (has_isrecome()) {
      total_size += 1 + 1;
    }

  }
  // repeated .JDDDZMahList cbHandCardData = 2;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated int32 lastmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lastmahs(i));
    }
    total_size += 1 * this->lastmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameSendLastCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameSendLastCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameSendLastCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameSendLastCard::MergeFrom(const ProJDDDZGameSendLastCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  lastmahs_.MergeFrom(from.lastmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_laizi()) {
      set_laizi(from.laizi());
    }
    if (from.has_isrecome()) {
      set_isrecome(from.isrecome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameSendLastCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameSendLastCard::CopyFrom(const ProJDDDZGameSendLastCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameSendLastCard::IsInitialized() const {

  return true;
}

void ProJDDDZGameSendLastCard::Swap(ProJDDDZGameSendLastCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    lastmahs_.Swap(&other->lastmahs_);
    std::swap(laizi_, other->laizi_);
    std::swap(isrecome_, other->isrecome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameSendLastCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameSendLastCard_descriptor_;
  metadata.reflection = ProJDDDZGameSendLastCard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserMingPaiRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserMingPaiRequest_MSGID_descriptor_;
}
bool ProJDDDZGameUserMingPaiRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2247:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserMingPaiRequest_MSGID ProJDDDZGameUserMingPaiRequest::ID;
const ProJDDDZGameUserMingPaiRequest_MSGID ProJDDDZGameUserMingPaiRequest::MSGID_MIN;
const ProJDDDZGameUserMingPaiRequest_MSGID ProJDDDZGameUserMingPaiRequest::MSGID_MAX;
const int ProJDDDZGameUserMingPaiRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserMingPaiRequest::kSeatFieldNumber;
const int ProJDDDZGameUserMingPaiRequest::kIsMingPaiFieldNumber;
const int ProJDDDZGameUserMingPaiRequest::kBeilvFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserMingPaiRequest::ProJDDDZGameUserMingPaiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserMingPaiRequest::InitAsDefaultInstance() {
}

ProJDDDZGameUserMingPaiRequest::ProJDDDZGameUserMingPaiRequest(const ProJDDDZGameUserMingPaiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserMingPaiRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ismingpai_ = false;
  beilv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserMingPaiRequest::~ProJDDDZGameUserMingPaiRequest() {
  SharedDtor();
}

void ProJDDDZGameUserMingPaiRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserMingPaiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserMingPaiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserMingPaiRequest_descriptor_;
}

const ProJDDDZGameUserMingPaiRequest& ProJDDDZGameUserMingPaiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserMingPaiRequest* ProJDDDZGameUserMingPaiRequest::default_instance_ = NULL;

ProJDDDZGameUserMingPaiRequest* ProJDDDZGameUserMingPaiRequest::New() const {
  return new ProJDDDZGameUserMingPaiRequest;
}

void ProJDDDZGameUserMingPaiRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    ismingpai_ = false;
    beilv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserMingPaiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMingPai;
        break;
      }

      // optional bool isMingPai = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMingPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismingpai_)));
          set_has_ismingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beilv;
        break;
      }

      // optional int32 beilv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beilv_)));
          set_has_beilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserMingPaiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismingpai(), output);
  }

  // optional int32 beilv = 3;
  if (has_beilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beilv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserMingPaiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismingpai(), target);
  }

  // optional int32 beilv = 3;
  if (has_beilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beilv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserMingPaiRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isMingPai = 2;
    if (has_ismingpai()) {
      total_size += 1 + 1;
    }

    // optional int32 beilv = 3;
    if (has_beilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beilv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserMingPaiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserMingPaiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserMingPaiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserMingPaiRequest::MergeFrom(const ProJDDDZGameUserMingPaiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_ismingpai()) {
      set_ismingpai(from.ismingpai());
    }
    if (from.has_beilv()) {
      set_beilv(from.beilv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserMingPaiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserMingPaiRequest::CopyFrom(const ProJDDDZGameUserMingPaiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserMingPaiRequest::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserMingPaiRequest::Swap(ProJDDDZGameUserMingPaiRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(ismingpai_, other->ismingpai_);
    std::swap(beilv_, other->beilv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserMingPaiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserMingPaiRequest_descriptor_;
  metadata.reflection = ProJDDDZGameUserMingPaiRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameUserMingPaiResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserMingPaiResponse_MSGID_descriptor_;
}
bool ProJDDDZGameUserMingPaiResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2248:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameUserMingPaiResponse_MSGID ProJDDDZGameUserMingPaiResponse::ID;
const ProJDDDZGameUserMingPaiResponse_MSGID ProJDDDZGameUserMingPaiResponse::MSGID_MIN;
const ProJDDDZGameUserMingPaiResponse_MSGID ProJDDDZGameUserMingPaiResponse::MSGID_MAX;
const int ProJDDDZGameUserMingPaiResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameUserMingPaiResponse::kSeatFieldNumber;
const int ProJDDDZGameUserMingPaiResponse::kIsMingPaiFieldNumber;
const int ProJDDDZGameUserMingPaiResponse::kScoreFieldNumber;
const int ProJDDDZGameUserMingPaiResponse::kMingtagFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameUserMingPaiResponse::ProJDDDZGameUserMingPaiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameUserMingPaiResponse::InitAsDefaultInstance() {
}

ProJDDDZGameUserMingPaiResponse::ProJDDDZGameUserMingPaiResponse(const ProJDDDZGameUserMingPaiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameUserMingPaiResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ismingpai_ = false;
  score_ = 0;
  mingtag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameUserMingPaiResponse::~ProJDDDZGameUserMingPaiResponse() {
  SharedDtor();
}

void ProJDDDZGameUserMingPaiResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameUserMingPaiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameUserMingPaiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameUserMingPaiResponse_descriptor_;
}

const ProJDDDZGameUserMingPaiResponse& ProJDDDZGameUserMingPaiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameUserMingPaiResponse* ProJDDDZGameUserMingPaiResponse::default_instance_ = NULL;

ProJDDDZGameUserMingPaiResponse* ProJDDDZGameUserMingPaiResponse::New() const {
  return new ProJDDDZGameUserMingPaiResponse;
}

void ProJDDDZGameUserMingPaiResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    ismingpai_ = false;
    score_ = 0;
    mingtag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameUserMingPaiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMingPai;
        break;
      }

      // optional bool isMingPai = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMingPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismingpai_)));
          set_has_ismingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mingtag;
        break;
      }

      // optional int32 mingtag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mingtag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingtag_)));
          set_has_mingtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameUserMingPaiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismingpai(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 mingtag = 4;
  if (has_mingtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mingtag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameUserMingPaiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismingpai(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int32 mingtag = 4;
  if (has_mingtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mingtag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameUserMingPaiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isMingPai = 2;
    if (has_ismingpai()) {
      total_size += 1 + 1;
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 mingtag = 4;
    if (has_mingtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingtag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameUserMingPaiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameUserMingPaiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameUserMingPaiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameUserMingPaiResponse::MergeFrom(const ProJDDDZGameUserMingPaiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_ismingpai()) {
      set_ismingpai(from.ismingpai());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_mingtag()) {
      set_mingtag(from.mingtag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameUserMingPaiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameUserMingPaiResponse::CopyFrom(const ProJDDDZGameUserMingPaiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameUserMingPaiResponse::IsInitialized() const {

  return true;
}

void ProJDDDZGameUserMingPaiResponse::Swap(ProJDDDZGameUserMingPaiResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(ismingpai_, other->ismingpai_);
    std::swap(score_, other->score_);
    std::swap(mingtag_, other->mingtag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameUserMingPaiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameUserMingPaiResponse_descriptor_;
  metadata.reflection = ProJDDDZGameUserMingPaiResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameMingNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameMingNotify_MSGID_descriptor_;
}
bool ProJDDDZGameMingNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2249:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameMingNotify_MSGID ProJDDDZGameMingNotify::ID;
const ProJDDDZGameMingNotify_MSGID ProJDDDZGameMingNotify::MSGID_MIN;
const ProJDDDZGameMingNotify_MSGID ProJDDDZGameMingNotify::MSGID_MAX;
const int ProJDDDZGameMingNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProJDDDZGameMingNotify::kSeatFieldNumber;
const int ProJDDDZGameMingNotify::kTagFieldNumber;
const int ProJDDDZGameMingNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProJDDDZGameMingNotify::ProJDDDZGameMingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameMingNotify::InitAsDefaultInstance() {
}

ProJDDDZGameMingNotify::ProJDDDZGameMingNotify(const ProJDDDZGameMingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameMingNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  tag_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameMingNotify::~ProJDDDZGameMingNotify() {
  SharedDtor();
}

void ProJDDDZGameMingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameMingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameMingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameMingNotify_descriptor_;
}

const ProJDDDZGameMingNotify& ProJDDDZGameMingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameMingNotify* ProJDDDZGameMingNotify::default_instance_ = NULL;

ProJDDDZGameMingNotify* ProJDDDZGameMingNotify::New() const {
  return new ProJDDDZGameMingNotify;
}

void ProJDDDZGameMingNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    tag_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameMingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tag;
        break;
      }

      // optional int32 tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time;
        break;
      }

      // optional float time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProJDDDZGameMingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag(), output);
  }

  // optional float time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameMingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag(), target);
  }

  // optional float time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameMingNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional float time = 3;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameMingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameMingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameMingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameMingNotify::MergeFrom(const ProJDDDZGameMingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameMingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameMingNotify::CopyFrom(const ProJDDDZGameMingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameMingNotify::IsInitialized() const {

  return true;
}

void ProJDDDZGameMingNotify::Swap(ProJDDDZGameMingNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(tag_, other->tag_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameMingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameMingNotify_descriptor_;
  metadata.reflection = ProJDDDZGameMingNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProJDDDZGameStartAgain_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameStartAgain_MSGID_descriptor_;
}
bool ProJDDDZGameStartAgain_MSGID_IsValid(int value) {
  switch(value) {
    case 2250:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProJDDDZGameStartAgain_MSGID ProJDDDZGameStartAgain::ID;
const ProJDDDZGameStartAgain_MSGID ProJDDDZGameStartAgain::MSGID_MIN;
const ProJDDDZGameStartAgain_MSGID ProJDDDZGameStartAgain::MSGID_MAX;
const int ProJDDDZGameStartAgain::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProJDDDZGameStartAgain::ProJDDDZGameStartAgain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProJDDDZGameStartAgain::InitAsDefaultInstance() {
}

ProJDDDZGameStartAgain::ProJDDDZGameStartAgain(const ProJDDDZGameStartAgain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProJDDDZGameStartAgain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProJDDDZGameStartAgain::~ProJDDDZGameStartAgain() {
  SharedDtor();
}

void ProJDDDZGameStartAgain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProJDDDZGameStartAgain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProJDDDZGameStartAgain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProJDDDZGameStartAgain_descriptor_;
}

const ProJDDDZGameStartAgain& ProJDDDZGameStartAgain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_jdddzpk_2eproto();
  return *default_instance_;
}

ProJDDDZGameStartAgain* ProJDDDZGameStartAgain::default_instance_ = NULL;

ProJDDDZGameStartAgain* ProJDDDZGameStartAgain::New() const {
  return new ProJDDDZGameStartAgain;
}

void ProJDDDZGameStartAgain::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProJDDDZGameStartAgain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProJDDDZGameStartAgain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProJDDDZGameStartAgain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProJDDDZGameStartAgain::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProJDDDZGameStartAgain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProJDDDZGameStartAgain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProJDDDZGameStartAgain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProJDDDZGameStartAgain::MergeFrom(const ProJDDDZGameStartAgain& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProJDDDZGameStartAgain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProJDDDZGameStartAgain::CopyFrom(const ProJDDDZGameStartAgain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProJDDDZGameStartAgain::IsInitialized() const {

  return true;
}

void ProJDDDZGameStartAgain::Swap(ProJDDDZGameStartAgain* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProJDDDZGameStartAgain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProJDDDZGameStartAgain_descriptor_;
  metadata.reflection = ProJDDDZGameStartAgain_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
