// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gppk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gppk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProGPGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GPMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GPWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GPWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserCallScoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserCallScoreResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserCallScoreResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGPGameUserCallScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGPGameUserCallScoreRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGPGameUserCallScoreRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPKIGN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GPBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gppk_2eproto() {
  protobuf_AddDesc_gppk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gppk.proto");
  GOOGLE_CHECK(file != NULL);
  ProGPGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProGPGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStatusResponse, status_),
  };
  ProGPGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameStatusResponse_descriptor_,
      ProGPGameStatusResponse::default_instance_,
      ProGPGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameStatusResponse));
  ProGPGameStatusResponse_MSGID_descriptor_ = ProGPGameStatusResponse_descriptor_->enum_type(0);
  ProGPGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProGPGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDeskInfoResponse, cellscore_),
  };
  ProGPGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameDeskInfoResponse_descriptor_,
      ProGPGameDeskInfoResponse::default_instance_,
      ProGPGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameDeskInfoResponse));
  ProGPGameDeskInfoResponse_MSGID_descriptor_ = ProGPGameDeskInfoResponse_descriptor_->enum_type(0);
  ProGPGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProGPGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyNotify, time_),
  };
  ProGPGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameReadyNotify_descriptor_,
      ProGPGameReadyNotify::default_instance_,
      ProGPGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameReadyNotify));
  ProGPGameReadyNotify_MSGID_descriptor_ = ProGPGameReadyNotify_descriptor_->enum_type(0);
  ProGPGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProGPGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyRequest, seat_),
  };
  ProGPGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameReadyRequest_descriptor_,
      ProGPGameReadyRequest::default_instance_,
      ProGPGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameReadyRequest));
  ProGPGameReadyRequest_MSGID_descriptor_ = ProGPGameReadyRequest_descriptor_->enum_type(0);
  ProGPGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProGPGameReadyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyResponse, seat_),
  };
  ProGPGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameReadyResponse_descriptor_,
      ProGPGameReadyResponse::default_instance_,
      ProGPGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameReadyResponse));
  ProGPGameReadyResponse_MSGID_descriptor_ = ProGPGameReadyResponse_descriptor_->enum_type(0);
  ProGPGameStart_descriptor_ = file->message_type(5);
  static const int ProGPGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStart, outcardtimes_),
  };
  ProGPGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameStart_descriptor_,
      ProGPGameStart::default_instance_,
      ProGPGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameStart));
  ProGPGameStart_MSGID_descriptor_ = ProGPGameStart_descriptor_->enum_type(0);
  ProGPGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProGPGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceNotify, dicecount_),
  };
  ProGPGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameDiceNotify_descriptor_,
      ProGPGameDiceNotify::default_instance_,
      ProGPGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameDiceNotify));
  ProGPGameDiceNotify_MSGID_descriptor_ = ProGPGameDiceNotify_descriptor_->enum_type(0);
  ProGPGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProGPGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceRequest, dicecount_),
  };
  ProGPGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameDiceRequest_descriptor_,
      ProGPGameDiceRequest::default_instance_,
      ProGPGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameDiceRequest));
  ProGPGameDiceRequest_MSGID_descriptor_ = ProGPGameDiceRequest_descriptor_->enum_type(0);
  ProGPGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProGPGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceResult, dicecount_),
  };
  ProGPGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameDiceResult_descriptor_,
      ProGPGameDiceResult::default_instance_,
      ProGPGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameDiceResult));
  ProGPGameDiceResult_MSGID_descriptor_ = ProGPGameDiceResult_descriptor_->enum_type(0);
  ProGPGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProGPGameSendMahs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, cbleftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, magiccardlogicvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, brecome_),
  };
  ProGPGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameSendMahs_descriptor_,
      ProGPGameSendMahs::default_instance_,
      ProGPGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameSendMahs));
  ProGPGameSendMahs_MSGID_descriptor_ = ProGPGameSendMahs_descriptor_->enum_type(0);
  ProGPGameKingData_descriptor_ = file->message_type(10);
  static const int ProGPGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, cbbawangking_),
  };
  ProGPGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameKingData_descriptor_,
      ProGPGameKingData::default_instance_,
      ProGPGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameKingData));
  ProGPGameKingData_MSGID_descriptor_ = ProGPGameKingData_descriptor_->enum_type(0);
  ProGPGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProGPGameOutMahsResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, seriesflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, seriesnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, point_),
  };
  ProGPGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameOutMahsResponse_descriptor_,
      ProGPGameOutMahsResponse::default_instance_,
      ProGPGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameOutMahsResponse));
  ProGPGameOutMahsResponse_MSGID_descriptor_ = ProGPGameOutMahsResponse_descriptor_->enum_type(0);
  ProGPGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProGPGameTimerPower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTimerPower, outcardtime_),
  };
  ProGPGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameTimerPower_descriptor_,
      ProGPGameTimerPower::default_instance_,
      ProGPGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameTimerPower));
  ProGPGameTimerPower_MSGID_descriptor_ = ProGPGameTimerPower_descriptor_->enum_type(0);
  ProGPGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProGPGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, operateseat_),
  };
  ProGPGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameOperateNotify_descriptor_,
      ProGPGameOperateNotify::default_instance_,
      ProGPGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameOperateNotify));
  ProGPGameOperateNotify_MSGID_descriptor_ = ProGPGameOperateNotify_descriptor_->enum_type(0);
  ProGPGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProGPGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, handcount_),
  };
  ProGPGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameOperateResult_descriptor_,
      ProGPGameOperateResult::default_instance_,
      ProGPGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameOperateResult));
  ProGPGameOperateResult_MSGID_descriptor_ = ProGPGameOperateResult_descriptor_->enum_type(0);
  ProGPGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProGPGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateRequest, cboperatecard_),
  };
  ProGPGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameOperateRequest_descriptor_,
      ProGPGameOperateRequest::default_instance_,
      ProGPGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameOperateRequest));
  ProGPGameOperateRequest_MSGID_descriptor_ = ProGPGameOperateRequest_descriptor_->enum_type(0);
  ProGPGameTrust_descriptor_ = file->message_type(16);
  static const int ProGPGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTrust, istrust_),
  };
  ProGPGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameTrust_descriptor_,
      ProGPGameTrust::default_instance_,
      ProGPGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameTrust));
  ProGPGameTrust_MSGID_descriptor_ = ProGPGameTrust_descriptor_->enum_type(0);
  ProGPGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProGPGameOutMahRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahRequest, outmahs_),
  };
  ProGPGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameOutMahRequest_descriptor_,
      ProGPGameOutMahRequest::default_instance_,
      ProGPGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameOutMahRequest));
  ProGPGameOutMahRequest_MSGID_descriptor_ = ProGPGameOutMahRequest_descriptor_->enum_type(0);
  ProGPGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProGPGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, cbleftcount_),
  };
  ProGPGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameCatchCard_descriptor_,
      ProGPGameCatchCard::default_instance_,
      ProGPGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameCatchCard));
  ProGPGameCatchCard_MSGID_descriptor_ = ProGPGameCatchCard_descriptor_->enum_type(0);
  GPMahList_descriptor_ = file->message_type(19);
  static const int GPMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPMahList, mahs_),
  };
  GPMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPMahList_descriptor_,
      GPMahList::default_instance_,
      GPMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPMahList));
  GPScoreList_descriptor_ = file->message_type(20);
  static const int GPScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPScoreList, roundscore_),
  };
  GPScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPScoreList_descriptor_,
      GPScoreList::default_instance_,
      GPScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPScoreList));
  GPAwardList_descriptor_ = file->message_type(21);
  static const int GPAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPAwardList, awardscore_),
  };
  GPAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPAwardList_descriptor_,
      GPAwardList::default_instance_,
      GPAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPAwardList));
  ProGPGameEnd_descriptor_ = file->message_type(22);
  static const int ProGPGameEnd_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, detailedscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, fangshuisaet_),
  };
  ProGPGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameEnd_descriptor_,
      ProGPGameEnd::default_instance_,
      ProGPGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameEnd));
  ProGPGameEnd_MSGID_descriptor_ = ProGPGameEnd_descriptor_->enum_type(0);
  ProGPGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProGPGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundRequest, text_),
  };
  ProGPGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameQuickSoundRequest_descriptor_,
      ProGPGameQuickSoundRequest::default_instance_,
      ProGPGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameQuickSoundRequest));
  ProGPGameQuickSoundRequest_MSGID_descriptor_ = ProGPGameQuickSoundRequest_descriptor_->enum_type(0);
  ProGPGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProGPGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundResponse, text_),
  };
  ProGPGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameQuickSoundResponse_descriptor_,
      ProGPGameQuickSoundResponse::default_instance_,
      ProGPGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameQuickSoundResponse));
  ProGPGameQuickSoundResponse_MSGID_descriptor_ = ProGPGameQuickSoundResponse_descriptor_->enum_type(0);
  ProGPGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProGPGameSendDiscardMahs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendDiscardMahs, deskcount_),
  };
  ProGPGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameSendDiscardMahs_descriptor_,
      ProGPGameSendDiscardMahs::default_instance_,
      ProGPGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameSendDiscardMahs));
  ProGPGameSendDiscardMahs_MSGID_descriptor_ = ProGPGameSendDiscardMahs_descriptor_->enum_type(0);
  GPWeaveItem_descriptor_ = file->message_type(26);
  static const int GPWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItem, cardsize_),
  };
  GPWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPWeaveItem_descriptor_,
      GPWeaveItem::default_instance_,
      GPWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPWeaveItem));
  GPWeaveItems_descriptor_ = file->message_type(27);
  static const int GPWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItems, items_),
  };
  GPWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPWeaveItems_descriptor_,
      GPWeaveItems::default_instance_,
      GPWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPWeaveItems));
  ProGPGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProGPGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendActionMahs, weaves_),
  };
  ProGPGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameSendActionMahs_descriptor_,
      ProGPGameSendActionMahs::default_instance_,
      ProGPGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameSendActionMahs));
  ProGPGameSendActionMahs_MSGID_descriptor_ = ProGPGameSendActionMahs_descriptor_->enum_type(0);
  ProGPGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProGPGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenRequest, time_),
  };
  ProGPGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameBrokenRequest_descriptor_,
      ProGPGameBrokenRequest::default_instance_,
      ProGPGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameBrokenRequest));
  ProGPGameBrokenRequest_MSGID_descriptor_ = ProGPGameBrokenRequest_descriptor_->enum_type(0);
  ProGPGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProGPGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenOperate, result_),
  };
  ProGPGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameBrokenOperate_descriptor_,
      ProGPGameBrokenOperate::default_instance_,
      ProGPGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameBrokenOperate));
  ProGPGameBrokenOperate_MSGID_descriptor_ = ProGPGameBrokenOperate_descriptor_->enum_type(0);
  ProGPGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProGPGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenNotify, operate_code_),
  };
  ProGPGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameBrokenNotify_descriptor_,
      ProGPGameBrokenNotify::default_instance_,
      ProGPGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameBrokenNotify));
  ProGPGameBrokenNotify_MSGID_descriptor_ = ProGPGameBrokenNotify_descriptor_->enum_type(0);
  ProGPGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProGPGameRuleConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, have_magiccard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, have_redpeach3firstout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, hava_mustoutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, hava_baopei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, splaytime_),
  };
  ProGPGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameRuleConfig_descriptor_,
      ProGPGameRuleConfig::default_instance_,
      ProGPGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameRuleConfig));
  ProGPGameRuleConfig_MSGID_descriptor_ = ProGPGameRuleConfig_descriptor_->enum_type(0);
  ProGPGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProGPGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenStatus, left_time_),
  };
  ProGPGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameBrokenStatus_descriptor_,
      ProGPGameBrokenStatus::default_instance_,
      ProGPGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameBrokenStatus));
  ProGPGameBrokenStatus_MSGID_descriptor_ = ProGPGameBrokenStatus_descriptor_->enum_type(0);
  ProGPGameDataResp_descriptor_ = file->message_type(34);
  static const int ProGPGameDataResp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDataResp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDataResp, boomplaayerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDataResp, isboom_),
  };
  ProGPGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameDataResp_descriptor_,
      ProGPGameDataResp::default_instance_,
      ProGPGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameDataResp));
  ProGPGameDataResp_MSGID_descriptor_ = ProGPGameDataResp_descriptor_->enum_type(0);
  ProGPGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProGPGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordRequest, url_),
  };
  ProGPGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameRecordRequest_descriptor_,
      ProGPGameRecordRequest::default_instance_,
      ProGPGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameRecordRequest));
  ProGPGameRecordRequest_MSGID_descriptor_ = ProGPGameRecordRequest_descriptor_->enum_type(0);
  ProGPGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProGPGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordResponse, url_),
  };
  ProGPGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameRecordResponse_descriptor_,
      ProGPGameRecordResponse::default_instance_,
      ProGPGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameRecordResponse));
  ProGPGameRecordResponse_MSGID_descriptor_ = ProGPGameRecordResponse_descriptor_->enum_type(0);
  ProGPGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProGPGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, strstreetname_),
  };
  ProGPGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserLocationRequest_descriptor_,
      ProGPGameUserLocationRequest::default_instance_,
      ProGPGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserLocationRequest));
  ProGPGameUserLocationRequest_MSGID_descriptor_ = ProGPGameUserLocationRequest_descriptor_->enum_type(0);
  ProGPGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProGPGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSyncCardResponse, handmahs_),
  };
  ProGPGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameSyncCardResponse_descriptor_,
      ProGPGameSyncCardResponse::default_instance_,
      ProGPGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameSyncCardResponse));
  ProGPGameSyncCardResponse_MSGID_descriptor_ = ProGPGameSyncCardResponse_descriptor_->enum_type(0);
  ProGPGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProGPGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserPhoneStatusRequest, userstatus_),
  };
  ProGPGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserPhoneStatusRequest_descriptor_,
      ProGPGameUserPhoneStatusRequest::default_instance_,
      ProGPGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserPhoneStatusRequest));
  ProGPGameUserPhoneStatusRequest_MSGID_descriptor_ = ProGPGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProGPGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProGPGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserGiveUpRequest, seat_id_),
  };
  ProGPGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserGiveUpRequest_descriptor_,
      ProGPGameUserGiveUpRequest::default_instance_,
      ProGPGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserGiveUpRequest));
  ProGPGameUserGiveUpRequest_MSGID_descriptor_ = ProGPGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProGPGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProGPGameUserHintRequest_offsets_[1] = {
  };
  ProGPGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserHintRequest_descriptor_,
      ProGPGameUserHintRequest::default_instance_,
      ProGPGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserHintRequest));
  ProGPGameUserHintRequest_MSGID_descriptor_ = ProGPGameUserHintRequest_descriptor_->enum_type(0);
  ProGPGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProGPGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserHintResponse, outmahs_),
  };
  ProGPGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserHintResponse_descriptor_,
      ProGPGameUserHintResponse::default_instance_,
      ProGPGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserHintResponse));
  ProGPGameUserHintResponse_MSGID_descriptor_ = ProGPGameUserHintResponse_descriptor_->enum_type(0);
  ProGPGameUserCallScoreResponse_descriptor_ = file->message_type(43);
  static const int ProGPGameUserCallScoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreResponse, usercallscore_),
  };
  ProGPGameUserCallScoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserCallScoreResponse_descriptor_,
      ProGPGameUserCallScoreResponse::default_instance_,
      ProGPGameUserCallScoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserCallScoreResponse));
  ProGPGameUserCallScoreResponse_MSGID_descriptor_ = ProGPGameUserCallScoreResponse_descriptor_->enum_type(0);
  ProGPGameUserCallScoreRequest_descriptor_ = file->message_type(44);
  static const int ProGPGameUserCallScoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreRequest, usercallscore_),
  };
  ProGPGameUserCallScoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGPGameUserCallScoreRequest_descriptor_,
      ProGPGameUserCallScoreRequest::default_instance_,
      ProGPGameUserCallScoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGPGameUserCallScoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGPGameUserCallScoreRequest));
  ProGPGameUserCallScoreRequest_MSGID_descriptor_ = ProGPGameUserCallScoreRequest_descriptor_->enum_type(0);
  GPGameState_descriptor_ = file->enum_type(0);
  GPSEND_TYPE_descriptor_ = file->enum_type(1);
  GPKIGN_TYPE_descriptor_ = file->enum_type(2);
  GPBROKEN_TYPE_descriptor_ = file->enum_type(3);
  GPBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  GPBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gppk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameStatusResponse_descriptor_, &ProGPGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameDeskInfoResponse_descriptor_, &ProGPGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameReadyNotify_descriptor_, &ProGPGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameReadyRequest_descriptor_, &ProGPGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameReadyResponse_descriptor_, &ProGPGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameStart_descriptor_, &ProGPGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameDiceNotify_descriptor_, &ProGPGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameDiceRequest_descriptor_, &ProGPGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameDiceResult_descriptor_, &ProGPGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameSendMahs_descriptor_, &ProGPGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameKingData_descriptor_, &ProGPGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameOutMahsResponse_descriptor_, &ProGPGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameTimerPower_descriptor_, &ProGPGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameOperateNotify_descriptor_, &ProGPGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameOperateResult_descriptor_, &ProGPGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameOperateRequest_descriptor_, &ProGPGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameTrust_descriptor_, &ProGPGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameOutMahRequest_descriptor_, &ProGPGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameCatchCard_descriptor_, &ProGPGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPMahList_descriptor_, &GPMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPScoreList_descriptor_, &GPScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPAwardList_descriptor_, &GPAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameEnd_descriptor_, &ProGPGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameQuickSoundRequest_descriptor_, &ProGPGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameQuickSoundResponse_descriptor_, &ProGPGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameSendDiscardMahs_descriptor_, &ProGPGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPWeaveItem_descriptor_, &GPWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPWeaveItems_descriptor_, &GPWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameSendActionMahs_descriptor_, &ProGPGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameBrokenRequest_descriptor_, &ProGPGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameBrokenOperate_descriptor_, &ProGPGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameBrokenNotify_descriptor_, &ProGPGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameRuleConfig_descriptor_, &ProGPGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameBrokenStatus_descriptor_, &ProGPGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameDataResp_descriptor_, &ProGPGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameRecordRequest_descriptor_, &ProGPGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameRecordResponse_descriptor_, &ProGPGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserLocationRequest_descriptor_, &ProGPGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameSyncCardResponse_descriptor_, &ProGPGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserPhoneStatusRequest_descriptor_, &ProGPGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserGiveUpRequest_descriptor_, &ProGPGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserHintRequest_descriptor_, &ProGPGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserHintResponse_descriptor_, &ProGPGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserCallScoreResponse_descriptor_, &ProGPGameUserCallScoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGPGameUserCallScoreRequest_descriptor_, &ProGPGameUserCallScoreRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gppk_2eproto() {
  delete ProGPGameStatusResponse::default_instance_;
  delete ProGPGameStatusResponse_reflection_;
  delete ProGPGameDeskInfoResponse::default_instance_;
  delete ProGPGameDeskInfoResponse_reflection_;
  delete ProGPGameReadyNotify::default_instance_;
  delete ProGPGameReadyNotify_reflection_;
  delete ProGPGameReadyRequest::default_instance_;
  delete ProGPGameReadyRequest_reflection_;
  delete ProGPGameReadyResponse::default_instance_;
  delete ProGPGameReadyResponse_reflection_;
  delete ProGPGameStart::default_instance_;
  delete ProGPGameStart_reflection_;
  delete ProGPGameDiceNotify::default_instance_;
  delete ProGPGameDiceNotify_reflection_;
  delete ProGPGameDiceRequest::default_instance_;
  delete ProGPGameDiceRequest_reflection_;
  delete ProGPGameDiceResult::default_instance_;
  delete ProGPGameDiceResult_reflection_;
  delete ProGPGameSendMahs::default_instance_;
  delete ProGPGameSendMahs_reflection_;
  delete ProGPGameKingData::default_instance_;
  delete ProGPGameKingData_reflection_;
  delete ProGPGameOutMahsResponse::default_instance_;
  delete ProGPGameOutMahsResponse_reflection_;
  delete ProGPGameTimerPower::default_instance_;
  delete ProGPGameTimerPower_reflection_;
  delete ProGPGameOperateNotify::default_instance_;
  delete ProGPGameOperateNotify_reflection_;
  delete ProGPGameOperateResult::default_instance_;
  delete ProGPGameOperateResult_reflection_;
  delete ProGPGameOperateRequest::default_instance_;
  delete ProGPGameOperateRequest_reflection_;
  delete ProGPGameTrust::default_instance_;
  delete ProGPGameTrust_reflection_;
  delete ProGPGameOutMahRequest::default_instance_;
  delete ProGPGameOutMahRequest_reflection_;
  delete ProGPGameCatchCard::default_instance_;
  delete ProGPGameCatchCard_reflection_;
  delete GPMahList::default_instance_;
  delete GPMahList_reflection_;
  delete GPScoreList::default_instance_;
  delete GPScoreList_reflection_;
  delete GPAwardList::default_instance_;
  delete GPAwardList_reflection_;
  delete ProGPGameEnd::default_instance_;
  delete ProGPGameEnd_reflection_;
  delete ProGPGameQuickSoundRequest::default_instance_;
  delete ProGPGameQuickSoundRequest_reflection_;
  delete ProGPGameQuickSoundResponse::default_instance_;
  delete ProGPGameQuickSoundResponse_reflection_;
  delete ProGPGameSendDiscardMahs::default_instance_;
  delete ProGPGameSendDiscardMahs_reflection_;
  delete GPWeaveItem::default_instance_;
  delete GPWeaveItem_reflection_;
  delete GPWeaveItems::default_instance_;
  delete GPWeaveItems_reflection_;
  delete ProGPGameSendActionMahs::default_instance_;
  delete ProGPGameSendActionMahs_reflection_;
  delete ProGPGameBrokenRequest::default_instance_;
  delete ProGPGameBrokenRequest_reflection_;
  delete ProGPGameBrokenOperate::default_instance_;
  delete ProGPGameBrokenOperate_reflection_;
  delete ProGPGameBrokenNotify::default_instance_;
  delete ProGPGameBrokenNotify_reflection_;
  delete ProGPGameRuleConfig::default_instance_;
  delete ProGPGameRuleConfig_reflection_;
  delete ProGPGameBrokenStatus::default_instance_;
  delete ProGPGameBrokenStatus_reflection_;
  delete ProGPGameDataResp::default_instance_;
  delete ProGPGameDataResp_reflection_;
  delete ProGPGameRecordRequest::default_instance_;
  delete ProGPGameRecordRequest_reflection_;
  delete ProGPGameRecordResponse::default_instance_;
  delete ProGPGameRecordResponse_reflection_;
  delete ProGPGameUserLocationRequest::default_instance_;
  delete ProGPGameUserLocationRequest_reflection_;
  delete ProGPGameSyncCardResponse::default_instance_;
  delete ProGPGameSyncCardResponse_reflection_;
  delete ProGPGameUserPhoneStatusRequest::default_instance_;
  delete ProGPGameUserPhoneStatusRequest_reflection_;
  delete ProGPGameUserGiveUpRequest::default_instance_;
  delete ProGPGameUserGiveUpRequest_reflection_;
  delete ProGPGameUserHintRequest::default_instance_;
  delete ProGPGameUserHintRequest_reflection_;
  delete ProGPGameUserHintResponse::default_instance_;
  delete ProGPGameUserHintResponse_reflection_;
  delete ProGPGameUserCallScoreResponse::default_instance_;
  delete ProGPGameUserCallScoreResponse_reflection_;
  delete ProGPGameUserCallScoreRequest::default_instance_;
  delete ProGPGameUserCallScoreRequest_reflection_;
}

void protobuf_AddDesc_gppk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ngppk.proto\032\nbase.proto\"I\n\027ProGPGameSta"
    "tusResponse\022\034\n\006status\030\002 \001(\0162\014.GPGameStat"
    "e\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"@\n\031ProGPGameDeskInfo"
    "Response\022\021\n\tCellScore\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002"
    "ID\020\231\021\"D\n\024ProGPGameReadyNotify\022\014\n\004seat\030\002 "
    "\001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\232\021\"7\n\025P"
    "roGPGameReadyRequest\022\014\n\004seat\030\002 \001(\005\"\020\n\005MS"
    "GID\022\007\n\002ID\020\233\021\"8\n\026ProGPGameReadyResponse\022\014"
    "\n\004seat\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\234\021\"_\n\016ProGPG"
    "ameStart\022\022\n\nbankerseat\030\002 \001(\005\022\021\n\tgamecoun"
    "t\030\003 \001(\005\022\024\n\014outCardtimes\030\004 \001(\005\"\020\n\005MSGID\022\007"
    "\n\002ID\020\235\021\"V\n\023ProGPGameDiceNotify\022\014\n\004seat\030\002"
    " \001(\005\022\014\n\004time\030\003 \001(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n"
    "\005MSGID\022\007\n\002ID\020\236\021\"I\n\024ProGPGameDiceRequest\022"
    "\014\n\004seat\030\002 \001(\005\022\021\n\tdicecount\030\003 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\237\021\"X\n\023ProGPGameDiceResult\022\014\n\004sea"
    "t\030\002 \001(\005\022\016\n\006result\030\003 \003(\005\022\021\n\tdicecount\030\004 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\240\021\"\227\001\n\021ProGPGameSendMa"
    "hs\022\014\n\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\021\n\tmahsco"
    "unt\030\004 \003(\005\022\023\n\013cbLeftCount\030\005 \001(\005\022\033\n\023magicC"
    "ardLogicValue\030\006 \001(\005\022\017\n\007bRecome\030\007 \001(\010\"\020\n\005"
    "MSGID\022\007\n\002ID\020\241\021\"\211\002\n\021ProGPGameKingData\022\014\n\004"
    "seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\025\n\rdownKingScor"
    "e\030\004 \003(\005\022\021\n\tkingcount\030\005 \003(\005\022\020\n\010viceking\030\006"
    " \003(\005\0221\n\013notify_type\030\007 \001(\0162\014.GPSEND_TYPE:"
    "\016GP_NORMAL_SEND\022+\n\tking_type\030\010 \001(\0162\014.GPK"
    "IGN_TYPE:\nGP_KING_UP\022\024\n\014cbChongGuang\030\t \003"
    "(\005\022\024\n\014cbBaWangKing\030\n \003(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\242\021\"\271\001\n\030ProGPGameOutMahsResponse\022\014\n\004seat\030"
    "\002 \001(\005\022\017\n\007outMahs\030\003 \003(\005\022\020\n\010handmahs\030\004 \003(\005"
    "\022\021\n\tcardCount\030\005 \001(\005\022\020\n\010cardType\030\006 \001(\005\022\022\n"
    "\nseriesFlag\030\007 \001(\005\022\022\n\nseriesNums\030\010 \001(\005\022\r\n"
    "\005point\030\t \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\243\021\"X\n\023ProGPG"
    "ameTimerPower\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001("
    "\005\022\023\n\013outcardTime\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\244\021"
    "\"\211\001\n\026ProGPGameOperateNotify\022\022\n\nresumeSea"
    "t\030\002 \001(\005\022\022\n\nActionMask\030\003 \001(\005\022\022\n\nActionCar"
    "d\030\004 \001(\005\022\014\n\004time\030\005 \001(\005\022\023\n\013operateseat\030\006 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\245\021\"\250\001\n\026ProGPGameOperat"
    "eResult\022\024\n\014wOperateUser\030\002 \001(\005\022\024\n\014wProvid"
    "eUser\030\003 \001(\005\022\024\n\014wOperateCode\030\004 \001(\005\022\025\n\rcbO"
    "perateCard\030\005 \001(\005\022\020\n\010handmahs\030\006 \003(\005\022\021\n\tha"
    "ndcount\030\007 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\246\021\"f\n\027ProGP"
    "GameOperateRequest\022\014\n\004seat\030\002 \001(\005\022\024\n\014wOpe"
    "rateCode\030\003 \001(\005\022\025\n\rcbOperateCard\030\004 \001(\005\"\020\n"
    "\005MSGID\022\007\n\002ID\020\247\021\"A\n\016ProGPGameTrust\022\014\n\004sea"
    "t\030\002 \001(\005\022\017\n\007isTrust\030\003 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020"
    "\250\021\"I\n\026ProGPGameOutMahRequest\022\014\n\004seat\030\002 \001"
    "(\005\022\017\n\007outMahs\030\003 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\251\021\"\207\001"
    "\n\022ProGPGameCatchCard\022\014\n\004seat\030\002 \001(\005\022\022\n\ncb"
    "CardData\030\003 \001(\005\022\023\n\013wActionMask\030\004 \001(\005\022\023\n\013c"
    "bIsNotGang\030\005 \001(\010\022\023\n\013cbLeftCount\030\006 \001(\005\"\020\n"
    "\005MSGID\022\007\n\002ID\020\252\021\"\031\n\tGPMahList\022\014\n\004Mahs\030\001 \003"
    "(\005\"!\n\013GPScoreList\022\022\n\nroundScore\030\001 \003(\005\"B\n"
    "\013GPAwardList\022\014\n\004seat\030\001 \001(\005\022\021\n\tCardsData\030"
    "\002 \003(\005\022\022\n\nawardScore\030\003 \001(\005\"\221\004\n\014ProGPGameE"
    "nd\022\020\n\010lGameTax\030\002 \001(\005\022\024\n\014cbChongGuang\030\003 \003"
    "(\005\022\024\n\014cbBaWangKing\030\004 \003(\005\022\024\n\014wProvideUser"
    "\030\005 \001(\005\022\023\n\013cbChiHuCard\030\006 \001(\005\022\023\n\013dwChiHuKi"
    "nd\030\007 \003(\005\022\024\n\014dwChiHuRight\030\010 \003(\005\022\030\n\020lTotas"
    "lGameScore\030\t \003(\005\022\031\n\021lCurrentGameScore\030\n "
    "\003(\005\022\032\n\022lCurrentPointScore\030\013 \003(\005\022\024\n\014lAtta"
    "chScore\030\014 \003(\005\022\"\n\016cbHandCardData\030\r \003(\0132\n."
    "GPMahList\022%\n\017cbAwardCardData\030\016 \003(\0132\014.GPA"
    "wardList\022\025\n\rlOnlyWinScore\030\017 \003(\005\022\021\n\tbRoun"
    "dEnd\030\020 \001(\010\022\024\n\014lHuiTouScore\030\021 \003(\005\022\022\n\nbZhu"
    "angWin\030\022 \001(\010\022\031\n\021cbJiangMaCardData\030\023 \003(\005\022"
    "$\n\016detailedScores\030\024 \003(\0132\014.GPScoreList\022\024\n"
    "\014fangShuiSaet\030\025 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\253\021\"p\n"
    "\032ProGPGameQuickSoundRequest\022\017\n\007desk_id\030\002"
    " \001(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022"
    "\014\n\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\254\021\"q\n\033ProGP"
    "GameQuickSoundResponse\022\017\n\007desk_id\030\002 \001(\005\022"
    "\017\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004te"
    "xt\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\255\021\"p\n\030ProGPGameS"
    "endDiscardMahs\022\017\n\007seat_id\030\002 \001(\005\022\036\n\ncbCar"
    "dData\030\003 \003(\0132\n.GPMahList\022\021\n\tdeskCount\030\004 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\256\021\"[\n\013GPWeaveItem\022\021\n\tw"
    "eaveKind\030\001 \001(\005\022\022\n\ncentercard\030\002 \001(\005\022\023\n\013pr"
    "ovideUser\030\003 \001(\005\022\020\n\010cardsize\030\004 \001(\005\"+\n\014GPW"
    "eaveItems\022\033\n\005items\030\001 \003(\0132\014.GPWeaveItem\"["
    "\n\027ProGPGameSendActionMahs\022\017\n\007seat_id\030\002 \001"
    "(\005\022\035\n\006weaves\030\003 \003(\0132\r.GPWeaveItems\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\257\021\"g\n\026ProGPGameBrokenRequest\022\017\n"
    "\007seat_id\030\002 \001(\005\022\034\n\004type\030\003 \001(\0162\016.GPBROKEN_"
    "TYPE\022\014\n\004time\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\260\021\"n\n\026"
    "ProGPGameBrokenOperate\022\017\n\007seat_id\030\002 \001(\005\022"
    "1\n\006result\030\003 \001(\0162\021.GPBROKEN_OPERATE:\016GP_B"
    "O_DISAGREE\"\020\n\005MSGID\022\007\n\002ID\020\261\021\"o\n\025ProGPGam"
    "eBrokenNotify\022\017\n\007seat_id\030\002 \001(\005\0223\n\014operat"
    "e_code\030\003 \001(\0162\016.GPBROKEN_CODE:\rGP_BC_SUCC"
    "ESS\"\020\n\005MSGID\022\007\n\002ID\020\262\021\"\313\002\n\023ProGPGameRuleC"
    "onfig\022\022\n\ngame_round\030\001 \001(\005\022\021\n\tneed_card\030\002"
    " \001(\005\022\026\n\016have_MagicCard\030\003 \001(\010\022\036\n\026have_Red"
    "Peach3FirstOut\030\004 \001(\010\022\030\n\020hava_MustOutCard"
    "\030\005 \001(\010\022\023\n\013nMasterSeat\030\006 \001(\005\022\032\n\022current_g"
    "ame_count\030\007 \001(\005\022\023\n\013have_jianma\030\010 \001(\010\022\025\n\r"
    "nChongguanNum\030\t \001(\005\022\023\n\013hava_BaoPei\030\n \001(\010"
    "\022\022\n\nnPlayerNum\030\013 \001(\005\022\020\n\010sRoomNum\030\014 \001(\014\022\021"
    "\n\tsPlayTime\030\r \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\263\021\"h\n\025P"
    "roGPGameBrokenStatus\022\023\n\013broken_seat\030\001 \001("
    "\005\022\025\n\rbroken_status\030\002 \003(\010\022\021\n\tleft_time\030\003 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\264\021\"q\n\021ProGPGameDataRe"
    "sp\022\023\n\013total_score\030\001 \003(\005\022\014\n\004type\030\002 \001(\005\022\027\n"
    "\017boomPlaayerSeat\030\003 \001(\005\022\016\n\006isboom\030\004 \001(\010\"\020"
    "\n\005MSGID\022\007\n\002ID\020\265\021\"H\n\026ProGPGameRecordReque"
    "st\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\266\021\"I\n\027ProGPGameRecordResponse\022\017\n"
    "\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002"
    "ID\020\267\021\"\226\001\n\034ProGPGameUserLocationRequest\022\017"
    "\n\007seat_id\030\001 \001(\005\022\023\n\013dwlongitude\030\002 \001(\001\022\022\n\n"
    "dwlatitude\030\003 \001(\001\022\023\n\013strDistrict\030\004 \001(\014\022\025\n"
    "\rstrStreetName\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\270\021\"M"
    "\n\031ProGPGameSyncCardResponse\022\014\n\004seat\030\002 \001("
    "\005\022\020\n\010handmahs\030\003 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\271\021\"X\n"
    "\037ProGPGameUserPhoneStatusRequest\022\017\n\007seat"
    "_id\030\001 \001(\005\022\022\n\nuserstatus\030\002 \001(\005\"\020\n\005MSGID\022\007"
    "\n\002ID\020\272\021\"\?\n\032ProGPGameUserGiveUpRequest\022\017\n"
    "\007seat_id\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\273\021\",\n\030ProG"
    "PGameUserHintRequest\"\020\n\005MSGID\022\007\n\002ID\020\274\021\"M"
    "\n\031ProGPGameUserHintResponse\022\r\n\005lenth\030\001 \001"
    "(\005\022\017\n\007outMahs\030\002 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\275\021\"W\n"
    "\036ProGPGameUserCallScoreResponse\022\014\n\004seat\030"
    "\001 \001(\005\022\025\n\rusercallscore\030\002 \001(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\276\021\"V\n\035ProGPGameUserCallScoreRequest\022"
    "\014\n\004seat\030\001 \001(\005\022\025\n\rusercallscore\030\002 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\277\021*\202\001\n\013GPGameState\022\020\n\014GP_GAM"
    "E_IDLE\020\001\022\025\n\021GP_GAME_DICE_BANK\020\002\022\020\n\014GP_GA"
    "ME_SEND\020\003\022\025\n\021GP_GAME_DICE_KING\020\004\022\020\n\014GP_G"
    "AME_PLAY\020\005\022\017\n\013GP_GAME_END\020\006*5\n\013GPSEND_TY"
    "PE\022\022\n\016GP_NORMAL_SEND\020\001\022\022\n\016GP_RECOME_SEND"
    "\020\002*E\n\013GPKIGN_TYPE\022\016\n\nGP_KING_UP\020\001\022\022\n\016GP_"
    "KING_HUITOU\020\002\022\022\n\016GP_KING_MAILEI\020\003*M\n\rGPB"
    "ROKEN_TYPE\022\025\n\021GP_BT_MASTER_QUIT\020\000\022\023\n\017GP_"
    "BT_USER_QUIT\020\001\022\020\n\014GP_BT_BROKEN\020\002*7\n\020GPBR"
    "OKEN_OPERATE\022\022\n\016GP_BO_DISAGREE\020\000\022\017\n\013GP_B"
    "O_AGREE\020\001*c\n\rGPBROKEN_CODE\022\021\n\rGP_BC_SUCC"
    "ESS\020\000\022\022\n\016GP_BC_DISAGREE\020\001\022\026\n\022GP_BC_QUIT_"
    "SUCCESS\020\002\022\023\n\017GP_BC_EXCEPTION\020\003", 5550);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gppk.proto", &protobuf_RegisterTypes);
  ProGPGameStatusResponse::default_instance_ = new ProGPGameStatusResponse();
  ProGPGameDeskInfoResponse::default_instance_ = new ProGPGameDeskInfoResponse();
  ProGPGameReadyNotify::default_instance_ = new ProGPGameReadyNotify();
  ProGPGameReadyRequest::default_instance_ = new ProGPGameReadyRequest();
  ProGPGameReadyResponse::default_instance_ = new ProGPGameReadyResponse();
  ProGPGameStart::default_instance_ = new ProGPGameStart();
  ProGPGameDiceNotify::default_instance_ = new ProGPGameDiceNotify();
  ProGPGameDiceRequest::default_instance_ = new ProGPGameDiceRequest();
  ProGPGameDiceResult::default_instance_ = new ProGPGameDiceResult();
  ProGPGameSendMahs::default_instance_ = new ProGPGameSendMahs();
  ProGPGameKingData::default_instance_ = new ProGPGameKingData();
  ProGPGameOutMahsResponse::default_instance_ = new ProGPGameOutMahsResponse();
  ProGPGameTimerPower::default_instance_ = new ProGPGameTimerPower();
  ProGPGameOperateNotify::default_instance_ = new ProGPGameOperateNotify();
  ProGPGameOperateResult::default_instance_ = new ProGPGameOperateResult();
  ProGPGameOperateRequest::default_instance_ = new ProGPGameOperateRequest();
  ProGPGameTrust::default_instance_ = new ProGPGameTrust();
  ProGPGameOutMahRequest::default_instance_ = new ProGPGameOutMahRequest();
  ProGPGameCatchCard::default_instance_ = new ProGPGameCatchCard();
  GPMahList::default_instance_ = new GPMahList();
  GPScoreList::default_instance_ = new GPScoreList();
  GPAwardList::default_instance_ = new GPAwardList();
  ProGPGameEnd::default_instance_ = new ProGPGameEnd();
  ProGPGameQuickSoundRequest::default_instance_ = new ProGPGameQuickSoundRequest();
  ProGPGameQuickSoundResponse::default_instance_ = new ProGPGameQuickSoundResponse();
  ProGPGameSendDiscardMahs::default_instance_ = new ProGPGameSendDiscardMahs();
  GPWeaveItem::default_instance_ = new GPWeaveItem();
  GPWeaveItems::default_instance_ = new GPWeaveItems();
  ProGPGameSendActionMahs::default_instance_ = new ProGPGameSendActionMahs();
  ProGPGameBrokenRequest::default_instance_ = new ProGPGameBrokenRequest();
  ProGPGameBrokenOperate::default_instance_ = new ProGPGameBrokenOperate();
  ProGPGameBrokenNotify::default_instance_ = new ProGPGameBrokenNotify();
  ProGPGameRuleConfig::default_instance_ = new ProGPGameRuleConfig();
  ProGPGameBrokenStatus::default_instance_ = new ProGPGameBrokenStatus();
  ProGPGameDataResp::default_instance_ = new ProGPGameDataResp();
  ProGPGameRecordRequest::default_instance_ = new ProGPGameRecordRequest();
  ProGPGameRecordResponse::default_instance_ = new ProGPGameRecordResponse();
  ProGPGameUserLocationRequest::default_instance_ = new ProGPGameUserLocationRequest();
  ProGPGameSyncCardResponse::default_instance_ = new ProGPGameSyncCardResponse();
  ProGPGameUserPhoneStatusRequest::default_instance_ = new ProGPGameUserPhoneStatusRequest();
  ProGPGameUserGiveUpRequest::default_instance_ = new ProGPGameUserGiveUpRequest();
  ProGPGameUserHintRequest::default_instance_ = new ProGPGameUserHintRequest();
  ProGPGameUserHintResponse::default_instance_ = new ProGPGameUserHintResponse();
  ProGPGameUserCallScoreResponse::default_instance_ = new ProGPGameUserCallScoreResponse();
  ProGPGameUserCallScoreRequest::default_instance_ = new ProGPGameUserCallScoreRequest();
  ProGPGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProGPGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameStart::default_instance_->InitAsDefaultInstance();
  ProGPGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProGPGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProGPGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProGPGameKingData::default_instance_->InitAsDefaultInstance();
  ProGPGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProGPGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProGPGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProGPGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameTrust::default_instance_->InitAsDefaultInstance();
  ProGPGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameCatchCard::default_instance_->InitAsDefaultInstance();
  GPMahList::default_instance_->InitAsDefaultInstance();
  GPScoreList::default_instance_->InitAsDefaultInstance();
  GPAwardList::default_instance_->InitAsDefaultInstance();
  ProGPGameEnd::default_instance_->InitAsDefaultInstance();
  ProGPGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  GPWeaveItem::default_instance_->InitAsDefaultInstance();
  GPWeaveItems::default_instance_->InitAsDefaultInstance();
  ProGPGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProGPGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProGPGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProGPGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProGPGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProGPGameDataResp::default_instance_->InitAsDefaultInstance();
  ProGPGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProGPGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameUserCallScoreResponse::default_instance_->InitAsDefaultInstance();
  ProGPGameUserCallScoreRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gppk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gppk_2eproto {
  StaticDescriptorInitializer_gppk_2eproto() {
    protobuf_AddDesc_gppk_2eproto();
  }
} static_descriptor_initializer_gppk_2eproto_;
const ::google::protobuf::EnumDescriptor* GPGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPGameState_descriptor_;
}
bool GPGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GPSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPSEND_TYPE_descriptor_;
}
bool GPSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GPKIGN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPKIGN_TYPE_descriptor_;
}
bool GPKIGN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GPBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPBROKEN_TYPE_descriptor_;
}
bool GPBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GPBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPBROKEN_OPERATE_descriptor_;
}
bool GPBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GPBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPBROKEN_CODE_descriptor_;
}
bool GPBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameStatusResponse_MSGID_descriptor_;
}
bool ProGPGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameStatusResponse_MSGID ProGPGameStatusResponse::ID;
const ProGPGameStatusResponse_MSGID ProGPGameStatusResponse::MSGID_MIN;
const ProGPGameStatusResponse_MSGID ProGPGameStatusResponse::MSGID_MAX;
const int ProGPGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProGPGameStatusResponse::ProGPGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameStatusResponse::InitAsDefaultInstance() {
}

ProGPGameStatusResponse::ProGPGameStatusResponse(const ProGPGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameStatusResponse::~ProGPGameStatusResponse() {
  SharedDtor();
}

void ProGPGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameStatusResponse_descriptor_;
}

const ProGPGameStatusResponse& ProGPGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameStatusResponse* ProGPGameStatusResponse::default_instance_ = NULL;

ProGPGameStatusResponse* ProGPGameStatusResponse::New() const {
  return new ProGPGameStatusResponse;
}

void ProGPGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GPGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GPGameState_IsValid(value)) {
            set_status(static_cast< ::GPGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GPGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GPGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GPGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameStatusResponse::MergeFrom(const ProGPGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameStatusResponse::CopyFrom(const ProGPGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameStatusResponse::IsInitialized() const {

  return true;
}

void ProGPGameStatusResponse::Swap(ProGPGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameStatusResponse_descriptor_;
  metadata.reflection = ProGPGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProGPGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameDeskInfoResponse_MSGID ProGPGameDeskInfoResponse::ID;
const ProGPGameDeskInfoResponse_MSGID ProGPGameDeskInfoResponse::MSGID_MIN;
const ProGPGameDeskInfoResponse_MSGID ProGPGameDeskInfoResponse::MSGID_MAX;
const int ProGPGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProGPGameDeskInfoResponse::ProGPGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProGPGameDeskInfoResponse::ProGPGameDeskInfoResponse(const ProGPGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameDeskInfoResponse::~ProGPGameDeskInfoResponse() {
  SharedDtor();
}

void ProGPGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDeskInfoResponse_descriptor_;
}

const ProGPGameDeskInfoResponse& ProGPGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameDeskInfoResponse* ProGPGameDeskInfoResponse::default_instance_ = NULL;

ProGPGameDeskInfoResponse* ProGPGameDeskInfoResponse::New() const {
  return new ProGPGameDeskInfoResponse;
}

void ProGPGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameDeskInfoResponse::MergeFrom(const ProGPGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameDeskInfoResponse::CopyFrom(const ProGPGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProGPGameDeskInfoResponse::Swap(ProGPGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProGPGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameReadyNotify_MSGID_descriptor_;
}
bool ProGPGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameReadyNotify_MSGID ProGPGameReadyNotify::ID;
const ProGPGameReadyNotify_MSGID ProGPGameReadyNotify::MSGID_MIN;
const ProGPGameReadyNotify_MSGID ProGPGameReadyNotify::MSGID_MAX;
const int ProGPGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameReadyNotify::kSeatFieldNumber;
const int ProGPGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProGPGameReadyNotify::ProGPGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameReadyNotify::InitAsDefaultInstance() {
}

ProGPGameReadyNotify::ProGPGameReadyNotify(const ProGPGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameReadyNotify::~ProGPGameReadyNotify() {
  SharedDtor();
}

void ProGPGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameReadyNotify_descriptor_;
}

const ProGPGameReadyNotify& ProGPGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameReadyNotify* ProGPGameReadyNotify::default_instance_ = NULL;

ProGPGameReadyNotify* ProGPGameReadyNotify::New() const {
  return new ProGPGameReadyNotify;
}

void ProGPGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameReadyNotify::MergeFrom(const ProGPGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameReadyNotify::CopyFrom(const ProGPGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameReadyNotify::IsInitialized() const {

  return true;
}

void ProGPGameReadyNotify::Swap(ProGPGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameReadyNotify_descriptor_;
  metadata.reflection = ProGPGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameReadyRequest_MSGID_descriptor_;
}
bool ProGPGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameReadyRequest_MSGID ProGPGameReadyRequest::ID;
const ProGPGameReadyRequest_MSGID ProGPGameReadyRequest::MSGID_MIN;
const ProGPGameReadyRequest_MSGID ProGPGameReadyRequest::MSGID_MAX;
const int ProGPGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGPGameReadyRequest::ProGPGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameReadyRequest::InitAsDefaultInstance() {
}

ProGPGameReadyRequest::ProGPGameReadyRequest(const ProGPGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameReadyRequest::~ProGPGameReadyRequest() {
  SharedDtor();
}

void ProGPGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameReadyRequest_descriptor_;
}

const ProGPGameReadyRequest& ProGPGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameReadyRequest* ProGPGameReadyRequest::default_instance_ = NULL;

ProGPGameReadyRequest* ProGPGameReadyRequest::New() const {
  return new ProGPGameReadyRequest;
}

void ProGPGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameReadyRequest::MergeFrom(const ProGPGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameReadyRequest::CopyFrom(const ProGPGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameReadyRequest::IsInitialized() const {

  return true;
}

void ProGPGameReadyRequest::Swap(ProGPGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameReadyRequest_descriptor_;
  metadata.reflection = ProGPGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameReadyResponse_MSGID_descriptor_;
}
bool ProGPGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameReadyResponse_MSGID ProGPGameReadyResponse::ID;
const ProGPGameReadyResponse_MSGID ProGPGameReadyResponse::MSGID_MIN;
const ProGPGameReadyResponse_MSGID ProGPGameReadyResponse::MSGID_MAX;
const int ProGPGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameReadyResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGPGameReadyResponse::ProGPGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameReadyResponse::InitAsDefaultInstance() {
}

ProGPGameReadyResponse::ProGPGameReadyResponse(const ProGPGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameReadyResponse::~ProGPGameReadyResponse() {
  SharedDtor();
}

void ProGPGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameReadyResponse_descriptor_;
}

const ProGPGameReadyResponse& ProGPGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameReadyResponse* ProGPGameReadyResponse::default_instance_ = NULL;

ProGPGameReadyResponse* ProGPGameReadyResponse::New() const {
  return new ProGPGameReadyResponse;
}

void ProGPGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameReadyResponse::MergeFrom(const ProGPGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameReadyResponse::CopyFrom(const ProGPGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameReadyResponse::IsInitialized() const {

  return true;
}

void ProGPGameReadyResponse::Swap(ProGPGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameReadyResponse_descriptor_;
  metadata.reflection = ProGPGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameStart_MSGID_descriptor_;
}
bool ProGPGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameStart_MSGID ProGPGameStart::ID;
const ProGPGameStart_MSGID ProGPGameStart::MSGID_MIN;
const ProGPGameStart_MSGID ProGPGameStart::MSGID_MAX;
const int ProGPGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameStart::kBankerseatFieldNumber;
const int ProGPGameStart::kGamecountFieldNumber;
const int ProGPGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProGPGameStart::ProGPGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameStart::InitAsDefaultInstance() {
}

ProGPGameStart::ProGPGameStart(const ProGPGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameStart::~ProGPGameStart() {
  SharedDtor();
}

void ProGPGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameStart_descriptor_;
}

const ProGPGameStart& ProGPGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameStart* ProGPGameStart::default_instance_ = NULL;

ProGPGameStart* ProGPGameStart::New() const {
  return new ProGPGameStart;
}

void ProGPGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameStart::MergeFrom(const ProGPGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameStart::CopyFrom(const ProGPGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameStart::IsInitialized() const {

  return true;
}

void ProGPGameStart::Swap(ProGPGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameStart_descriptor_;
  metadata.reflection = ProGPGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDiceNotify_MSGID_descriptor_;
}
bool ProGPGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameDiceNotify_MSGID ProGPGameDiceNotify::ID;
const ProGPGameDiceNotify_MSGID ProGPGameDiceNotify::MSGID_MIN;
const ProGPGameDiceNotify_MSGID ProGPGameDiceNotify::MSGID_MAX;
const int ProGPGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameDiceNotify::kSeatFieldNumber;
const int ProGPGameDiceNotify::kTimeFieldNumber;
const int ProGPGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGPGameDiceNotify::ProGPGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameDiceNotify::InitAsDefaultInstance() {
}

ProGPGameDiceNotify::ProGPGameDiceNotify(const ProGPGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameDiceNotify::~ProGPGameDiceNotify() {
  SharedDtor();
}

void ProGPGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDiceNotify_descriptor_;
}

const ProGPGameDiceNotify& ProGPGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameDiceNotify* ProGPGameDiceNotify::default_instance_ = NULL;

ProGPGameDiceNotify* ProGPGameDiceNotify::New() const {
  return new ProGPGameDiceNotify;
}

void ProGPGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameDiceNotify::MergeFrom(const ProGPGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameDiceNotify::CopyFrom(const ProGPGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameDiceNotify::IsInitialized() const {

  return true;
}

void ProGPGameDiceNotify::Swap(ProGPGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameDiceNotify_descriptor_;
  metadata.reflection = ProGPGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDiceRequest_MSGID_descriptor_;
}
bool ProGPGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameDiceRequest_MSGID ProGPGameDiceRequest::ID;
const ProGPGameDiceRequest_MSGID ProGPGameDiceRequest::MSGID_MIN;
const ProGPGameDiceRequest_MSGID ProGPGameDiceRequest::MSGID_MAX;
const int ProGPGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameDiceRequest::kSeatFieldNumber;
const int ProGPGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGPGameDiceRequest::ProGPGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameDiceRequest::InitAsDefaultInstance() {
}

ProGPGameDiceRequest::ProGPGameDiceRequest(const ProGPGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameDiceRequest::~ProGPGameDiceRequest() {
  SharedDtor();
}

void ProGPGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDiceRequest_descriptor_;
}

const ProGPGameDiceRequest& ProGPGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameDiceRequest* ProGPGameDiceRequest::default_instance_ = NULL;

ProGPGameDiceRequest* ProGPGameDiceRequest::New() const {
  return new ProGPGameDiceRequest;
}

void ProGPGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameDiceRequest::MergeFrom(const ProGPGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameDiceRequest::CopyFrom(const ProGPGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameDiceRequest::IsInitialized() const {

  return true;
}

void ProGPGameDiceRequest::Swap(ProGPGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameDiceRequest_descriptor_;
  metadata.reflection = ProGPGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDiceResult_MSGID_descriptor_;
}
bool ProGPGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameDiceResult_MSGID ProGPGameDiceResult::ID;
const ProGPGameDiceResult_MSGID ProGPGameDiceResult::MSGID_MIN;
const ProGPGameDiceResult_MSGID ProGPGameDiceResult::MSGID_MAX;
const int ProGPGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameDiceResult::kSeatFieldNumber;
const int ProGPGameDiceResult::kResultFieldNumber;
const int ProGPGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGPGameDiceResult::ProGPGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameDiceResult::InitAsDefaultInstance() {
}

ProGPGameDiceResult::ProGPGameDiceResult(const ProGPGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameDiceResult::~ProGPGameDiceResult() {
  SharedDtor();
}

void ProGPGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDiceResult_descriptor_;
}

const ProGPGameDiceResult& ProGPGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameDiceResult* ProGPGameDiceResult::default_instance_ = NULL;

ProGPGameDiceResult* ProGPGameDiceResult::New() const {
  return new ProGPGameDiceResult;
}

void ProGPGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameDiceResult::MergeFrom(const ProGPGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameDiceResult::CopyFrom(const ProGPGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameDiceResult::IsInitialized() const {

  return true;
}

void ProGPGameDiceResult::Swap(ProGPGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameDiceResult_descriptor_;
  metadata.reflection = ProGPGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSendMahs_MSGID_descriptor_;
}
bool ProGPGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameSendMahs_MSGID ProGPGameSendMahs::ID;
const ProGPGameSendMahs_MSGID ProGPGameSendMahs::MSGID_MIN;
const ProGPGameSendMahs_MSGID ProGPGameSendMahs::MSGID_MAX;
const int ProGPGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameSendMahs::kSeatFieldNumber;
const int ProGPGameSendMahs::kMahsFieldNumber;
const int ProGPGameSendMahs::kMahscountFieldNumber;
const int ProGPGameSendMahs::kCbLeftCountFieldNumber;
const int ProGPGameSendMahs::kMagicCardLogicValueFieldNumber;
const int ProGPGameSendMahs::kBRecomeFieldNumber;
#endif  // !_MSC_VER

ProGPGameSendMahs::ProGPGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameSendMahs::InitAsDefaultInstance() {
}

ProGPGameSendMahs::ProGPGameSendMahs(const ProGPGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  magiccardlogicvalue_ = 0;
  brecome_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameSendMahs::~ProGPGameSendMahs() {
  SharedDtor();
}

void ProGPGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSendMahs_descriptor_;
}

const ProGPGameSendMahs& ProGPGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameSendMahs* ProGPGameSendMahs::default_instance_ = NULL;

ProGPGameSendMahs* ProGPGameSendMahs::New() const {
  return new ProGPGameSendMahs;
}

void ProGPGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
    magiccardlogicvalue_ = 0;
    brecome_ = false;
  }
  mahs_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magicCardLogicValue;
        break;
      }

      // optional int32 magicCardLogicValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicCardLogicValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magiccardlogicvalue_)));
          set_has_magiccardlogicvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bRecome;
        break;
      }

      // optional bool bRecome = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRecome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brecome_)));
          set_has_brecome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  // optional int32 magicCardLogicValue = 6;
  if (has_magiccardlogicvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->magiccardlogicvalue(), output);
  }

  // optional bool bRecome = 7;
  if (has_brecome()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->brecome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  // optional int32 magicCardLogicValue = 6;
  if (has_magiccardlogicvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->magiccardlogicvalue(), target);
  }

  // optional bool bRecome = 7;
  if (has_brecome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->brecome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

    // optional int32 magicCardLogicValue = 6;
    if (has_magiccardlogicvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magiccardlogicvalue());
    }

    // optional bool bRecome = 7;
    if (has_brecome()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameSendMahs::MergeFrom(const ProGPGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
    if (from.has_magiccardlogicvalue()) {
      set_magiccardlogicvalue(from.magiccardlogicvalue());
    }
    if (from.has_brecome()) {
      set_brecome(from.brecome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameSendMahs::CopyFrom(const ProGPGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameSendMahs::IsInitialized() const {

  return true;
}

void ProGPGameSendMahs::Swap(ProGPGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(magiccardlogicvalue_, other->magiccardlogicvalue_);
    std::swap(brecome_, other->brecome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameSendMahs_descriptor_;
  metadata.reflection = ProGPGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameKingData_MSGID_descriptor_;
}
bool ProGPGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameKingData_MSGID ProGPGameKingData::ID;
const ProGPGameKingData_MSGID ProGPGameKingData::MSGID_MIN;
const ProGPGameKingData_MSGID ProGPGameKingData::MSGID_MAX;
const int ProGPGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameKingData::kSeatFieldNumber;
const int ProGPGameKingData::kMahsFieldNumber;
const int ProGPGameKingData::kDownKingScoreFieldNumber;
const int ProGPGameKingData::kKingcountFieldNumber;
const int ProGPGameKingData::kVicekingFieldNumber;
const int ProGPGameKingData::kNotifyTypeFieldNumber;
const int ProGPGameKingData::kKingTypeFieldNumber;
const int ProGPGameKingData::kCbChongGuangFieldNumber;
const int ProGPGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProGPGameKingData::ProGPGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameKingData::InitAsDefaultInstance() {
}

ProGPGameKingData::ProGPGameKingData(const ProGPGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameKingData::~ProGPGameKingData() {
  SharedDtor();
}

void ProGPGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameKingData_descriptor_;
}

const ProGPGameKingData& ProGPGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameKingData* ProGPGameKingData::default_instance_ = NULL;

ProGPGameKingData* ProGPGameKingData::New() const {
  return new ProGPGameKingData;
}

void ProGPGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .GPSEND_TYPE notify_type = 7 [default = GP_NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GPSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::GPSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .GPKIGN_TYPE king_type = 8 [default = GP_KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GPKIGN_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::GPKIGN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .GPSEND_TYPE notify_type = 7 [default = GP_NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .GPKIGN_TYPE king_type = 8 [default = GP_KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .GPSEND_TYPE notify_type = 7 [default = GP_NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .GPKIGN_TYPE king_type = 8 [default = GP_KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .GPSEND_TYPE notify_type = 7 [default = GP_NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .GPKIGN_TYPE king_type = 8 [default = GP_KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameKingData::MergeFrom(const ProGPGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameKingData::CopyFrom(const ProGPGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameKingData::IsInitialized() const {

  return true;
}

void ProGPGameKingData::Swap(ProGPGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameKingData_descriptor_;
  metadata.reflection = ProGPGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOutMahsResponse_MSGID_descriptor_;
}
bool ProGPGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameOutMahsResponse_MSGID ProGPGameOutMahsResponse::ID;
const ProGPGameOutMahsResponse_MSGID ProGPGameOutMahsResponse::MSGID_MIN;
const ProGPGameOutMahsResponse_MSGID ProGPGameOutMahsResponse::MSGID_MAX;
const int ProGPGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameOutMahsResponse::kSeatFieldNumber;
const int ProGPGameOutMahsResponse::kOutMahsFieldNumber;
const int ProGPGameOutMahsResponse::kHandmahsFieldNumber;
const int ProGPGameOutMahsResponse::kCardCountFieldNumber;
const int ProGPGameOutMahsResponse::kCardTypeFieldNumber;
const int ProGPGameOutMahsResponse::kSeriesFlagFieldNumber;
const int ProGPGameOutMahsResponse::kSeriesNumsFieldNumber;
const int ProGPGameOutMahsResponse::kPointFieldNumber;
#endif  // !_MSC_VER

ProGPGameOutMahsResponse::ProGPGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameOutMahsResponse::InitAsDefaultInstance() {
}

ProGPGameOutMahsResponse::ProGPGameOutMahsResponse(const ProGPGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  seriesflag_ = 0;
  seriesnums_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameOutMahsResponse::~ProGPGameOutMahsResponse() {
  SharedDtor();
}

void ProGPGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOutMahsResponse_descriptor_;
}

const ProGPGameOutMahsResponse& ProGPGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameOutMahsResponse* ProGPGameOutMahsResponse::default_instance_ = NULL;

ProGPGameOutMahsResponse* ProGPGameOutMahsResponse::New() const {
  return new ProGPGameOutMahsResponse;
}

void ProGPGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
    seriesflag_ = 0;
    seriesnums_ = 0;
    point_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seriesFlag;
        break;
      }

      // optional int32 seriesFlag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesflag_)));
          set_has_seriesflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seriesNums;
        break;
      }

      // optional int32 seriesNums = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesnums_)));
          set_has_seriesnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_point;
        break;
      }

      // optional int32 point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // optional int32 seriesFlag = 7;
  if (has_seriesflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seriesflag(), output);
  }

  // optional int32 seriesNums = 8;
  if (has_seriesnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seriesnums(), output);
  }

  // optional int32 point = 9;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // optional int32 seriesFlag = 7;
  if (has_seriesflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seriesflag(), target);
  }

  // optional int32 seriesNums = 8;
  if (has_seriesnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seriesnums(), target);
  }

  // optional int32 point = 9;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 seriesFlag = 7;
    if (has_seriesflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesflag());
    }

    // optional int32 seriesNums = 8;
    if (has_seriesnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesnums());
    }

    // optional int32 point = 9;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameOutMahsResponse::MergeFrom(const ProGPGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_seriesflag()) {
      set_seriesflag(from.seriesflag());
    }
    if (from.has_seriesnums()) {
      set_seriesnums(from.seriesnums());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameOutMahsResponse::CopyFrom(const ProGPGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProGPGameOutMahsResponse::Swap(ProGPGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(seriesflag_, other->seriesflag_);
    std::swap(seriesnums_, other->seriesnums_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameOutMahsResponse_descriptor_;
  metadata.reflection = ProGPGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameTimerPower_MSGID_descriptor_;
}
bool ProGPGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameTimerPower_MSGID ProGPGameTimerPower::ID;
const ProGPGameTimerPower_MSGID ProGPGameTimerPower::MSGID_MIN;
const ProGPGameTimerPower_MSGID ProGPGameTimerPower::MSGID_MAX;
const int ProGPGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameTimerPower::kSeatFieldNumber;
const int ProGPGameTimerPower::kTimeFieldNumber;
const int ProGPGameTimerPower::kOutcardTimeFieldNumber;
#endif  // !_MSC_VER

ProGPGameTimerPower::ProGPGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameTimerPower::InitAsDefaultInstance() {
}

ProGPGameTimerPower::ProGPGameTimerPower(const ProGPGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameTimerPower::~ProGPGameTimerPower() {
  SharedDtor();
}

void ProGPGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameTimerPower_descriptor_;
}

const ProGPGameTimerPower& ProGPGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameTimerPower* ProGPGameTimerPower::default_instance_ = NULL;

ProGPGameTimerPower* ProGPGameTimerPower::New() const {
  return new ProGPGameTimerPower;
}

void ProGPGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameTimerPower::MergeFrom(const ProGPGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameTimerPower::CopyFrom(const ProGPGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameTimerPower::IsInitialized() const {

  return true;
}

void ProGPGameTimerPower::Swap(ProGPGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameTimerPower_descriptor_;
  metadata.reflection = ProGPGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOperateNotify_MSGID_descriptor_;
}
bool ProGPGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameOperateNotify_MSGID ProGPGameOperateNotify::ID;
const ProGPGameOperateNotify_MSGID ProGPGameOperateNotify::MSGID_MIN;
const ProGPGameOperateNotify_MSGID ProGPGameOperateNotify::MSGID_MAX;
const int ProGPGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameOperateNotify::kResumeSeatFieldNumber;
const int ProGPGameOperateNotify::kActionMaskFieldNumber;
const int ProGPGameOperateNotify::kActionCardFieldNumber;
const int ProGPGameOperateNotify::kTimeFieldNumber;
const int ProGPGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProGPGameOperateNotify::ProGPGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameOperateNotify::InitAsDefaultInstance() {
}

ProGPGameOperateNotify::ProGPGameOperateNotify(const ProGPGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameOperateNotify::~ProGPGameOperateNotify() {
  SharedDtor();
}

void ProGPGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOperateNotify_descriptor_;
}

const ProGPGameOperateNotify& ProGPGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameOperateNotify* ProGPGameOperateNotify::default_instance_ = NULL;

ProGPGameOperateNotify* ProGPGameOperateNotify::New() const {
  return new ProGPGameOperateNotify;
}

void ProGPGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameOperateNotify::MergeFrom(const ProGPGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameOperateNotify::CopyFrom(const ProGPGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameOperateNotify::IsInitialized() const {

  return true;
}

void ProGPGameOperateNotify::Swap(ProGPGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameOperateNotify_descriptor_;
  metadata.reflection = ProGPGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOperateResult_MSGID_descriptor_;
}
bool ProGPGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameOperateResult_MSGID ProGPGameOperateResult::ID;
const ProGPGameOperateResult_MSGID ProGPGameOperateResult::MSGID_MIN;
const ProGPGameOperateResult_MSGID ProGPGameOperateResult::MSGID_MAX;
const int ProGPGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameOperateResult::kWOperateUserFieldNumber;
const int ProGPGameOperateResult::kWProvideUserFieldNumber;
const int ProGPGameOperateResult::kWOperateCodeFieldNumber;
const int ProGPGameOperateResult::kCbOperateCardFieldNumber;
const int ProGPGameOperateResult::kHandmahsFieldNumber;
const int ProGPGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProGPGameOperateResult::ProGPGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameOperateResult::InitAsDefaultInstance() {
}

ProGPGameOperateResult::ProGPGameOperateResult(const ProGPGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameOperateResult::~ProGPGameOperateResult() {
  SharedDtor();
}

void ProGPGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOperateResult_descriptor_;
}

const ProGPGameOperateResult& ProGPGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameOperateResult* ProGPGameOperateResult::default_instance_ = NULL;

ProGPGameOperateResult* ProGPGameOperateResult::New() const {
  return new ProGPGameOperateResult;
}

void ProGPGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameOperateResult::MergeFrom(const ProGPGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameOperateResult::CopyFrom(const ProGPGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameOperateResult::IsInitialized() const {

  return true;
}

void ProGPGameOperateResult::Swap(ProGPGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameOperateResult_descriptor_;
  metadata.reflection = ProGPGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOperateRequest_MSGID_descriptor_;
}
bool ProGPGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameOperateRequest_MSGID ProGPGameOperateRequest::ID;
const ProGPGameOperateRequest_MSGID ProGPGameOperateRequest::MSGID_MIN;
const ProGPGameOperateRequest_MSGID ProGPGameOperateRequest::MSGID_MAX;
const int ProGPGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameOperateRequest::kSeatFieldNumber;
const int ProGPGameOperateRequest::kWOperateCodeFieldNumber;
const int ProGPGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProGPGameOperateRequest::ProGPGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameOperateRequest::InitAsDefaultInstance() {
}

ProGPGameOperateRequest::ProGPGameOperateRequest(const ProGPGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameOperateRequest::~ProGPGameOperateRequest() {
  SharedDtor();
}

void ProGPGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOperateRequest_descriptor_;
}

const ProGPGameOperateRequest& ProGPGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameOperateRequest* ProGPGameOperateRequest::default_instance_ = NULL;

ProGPGameOperateRequest* ProGPGameOperateRequest::New() const {
  return new ProGPGameOperateRequest;
}

void ProGPGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameOperateRequest::MergeFrom(const ProGPGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameOperateRequest::CopyFrom(const ProGPGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameOperateRequest::IsInitialized() const {

  return true;
}

void ProGPGameOperateRequest::Swap(ProGPGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameOperateRequest_descriptor_;
  metadata.reflection = ProGPGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameTrust_MSGID_descriptor_;
}
bool ProGPGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameTrust_MSGID ProGPGameTrust::ID;
const ProGPGameTrust_MSGID ProGPGameTrust::MSGID_MIN;
const ProGPGameTrust_MSGID ProGPGameTrust::MSGID_MAX;
const int ProGPGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameTrust::kSeatFieldNumber;
const int ProGPGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProGPGameTrust::ProGPGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameTrust::InitAsDefaultInstance() {
}

ProGPGameTrust::ProGPGameTrust(const ProGPGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameTrust::~ProGPGameTrust() {
  SharedDtor();
}

void ProGPGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameTrust_descriptor_;
}

const ProGPGameTrust& ProGPGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameTrust* ProGPGameTrust::default_instance_ = NULL;

ProGPGameTrust* ProGPGameTrust::New() const {
  return new ProGPGameTrust;
}

void ProGPGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameTrust::MergeFrom(const ProGPGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameTrust::CopyFrom(const ProGPGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameTrust::IsInitialized() const {

  return true;
}

void ProGPGameTrust::Swap(ProGPGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameTrust_descriptor_;
  metadata.reflection = ProGPGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOutMahRequest_MSGID_descriptor_;
}
bool ProGPGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameOutMahRequest_MSGID ProGPGameOutMahRequest::ID;
const ProGPGameOutMahRequest_MSGID ProGPGameOutMahRequest::MSGID_MIN;
const ProGPGameOutMahRequest_MSGID ProGPGameOutMahRequest::MSGID_MAX;
const int ProGPGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameOutMahRequest::kSeatFieldNumber;
const int ProGPGameOutMahRequest::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProGPGameOutMahRequest::ProGPGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameOutMahRequest::InitAsDefaultInstance() {
}

ProGPGameOutMahRequest::ProGPGameOutMahRequest(const ProGPGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameOutMahRequest::~ProGPGameOutMahRequest() {
  SharedDtor();
}

void ProGPGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameOutMahRequest_descriptor_;
}

const ProGPGameOutMahRequest& ProGPGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameOutMahRequest* ProGPGameOutMahRequest::default_instance_ = NULL;

ProGPGameOutMahRequest* ProGPGameOutMahRequest::New() const {
  return new ProGPGameOutMahRequest;
}

void ProGPGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameOutMahRequest::MergeFrom(const ProGPGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameOutMahRequest::CopyFrom(const ProGPGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProGPGameOutMahRequest::Swap(ProGPGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameOutMahRequest_descriptor_;
  metadata.reflection = ProGPGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameCatchCard_MSGID_descriptor_;
}
bool ProGPGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameCatchCard_MSGID ProGPGameCatchCard::ID;
const ProGPGameCatchCard_MSGID ProGPGameCatchCard::MSGID_MIN;
const ProGPGameCatchCard_MSGID ProGPGameCatchCard::MSGID_MAX;
const int ProGPGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameCatchCard::kSeatFieldNumber;
const int ProGPGameCatchCard::kCbCardDataFieldNumber;
const int ProGPGameCatchCard::kWActionMaskFieldNumber;
const int ProGPGameCatchCard::kCbIsNotGangFieldNumber;
const int ProGPGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProGPGameCatchCard::ProGPGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameCatchCard::InitAsDefaultInstance() {
}

ProGPGameCatchCard::ProGPGameCatchCard(const ProGPGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameCatchCard::~ProGPGameCatchCard() {
  SharedDtor();
}

void ProGPGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameCatchCard_descriptor_;
}

const ProGPGameCatchCard& ProGPGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameCatchCard* ProGPGameCatchCard::default_instance_ = NULL;

ProGPGameCatchCard* ProGPGameCatchCard::New() const {
  return new ProGPGameCatchCard;
}

void ProGPGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameCatchCard::MergeFrom(const ProGPGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameCatchCard::CopyFrom(const ProGPGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameCatchCard::IsInitialized() const {

  return true;
}

void ProGPGameCatchCard::Swap(ProGPGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameCatchCard_descriptor_;
  metadata.reflection = ProGPGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

GPMahList::GPMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPMahList::InitAsDefaultInstance() {
}

GPMahList::GPMahList(const GPMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPMahList::~GPMahList() {
  SharedDtor();
}

void GPMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPMahList_descriptor_;
}

const GPMahList& GPMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

GPMahList* GPMahList::default_instance_ = NULL;

GPMahList* GPMahList::New() const {
  return new GPMahList;
}

void GPMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPMahList::MergeFrom(const GPMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPMahList::CopyFrom(const GPMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPMahList::IsInitialized() const {

  return true;
}

void GPMahList::Swap(GPMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPMahList_descriptor_;
  metadata.reflection = GPMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

GPScoreList::GPScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPScoreList::InitAsDefaultInstance() {
}

GPScoreList::GPScoreList(const GPScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPScoreList::~GPScoreList() {
  SharedDtor();
}

void GPScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPScoreList_descriptor_;
}

const GPScoreList& GPScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

GPScoreList* GPScoreList::default_instance_ = NULL;

GPScoreList* GPScoreList::New() const {
  return new GPScoreList;
}

void GPScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPScoreList::MergeFrom(const GPScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPScoreList::CopyFrom(const GPScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPScoreList::IsInitialized() const {

  return true;
}

void GPScoreList::Swap(GPScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPScoreList_descriptor_;
  metadata.reflection = GPScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPAwardList::kSeatFieldNumber;
const int GPAwardList::kCardsDataFieldNumber;
const int GPAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

GPAwardList::GPAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPAwardList::InitAsDefaultInstance() {
}

GPAwardList::GPAwardList(const GPAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPAwardList::~GPAwardList() {
  SharedDtor();
}

void GPAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPAwardList_descriptor_;
}

const GPAwardList& GPAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

GPAwardList* GPAwardList::default_instance_ = NULL;

GPAwardList* GPAwardList::New() const {
  return new GPAwardList;
}

void GPAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPAwardList::MergeFrom(const GPAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPAwardList::CopyFrom(const GPAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPAwardList::IsInitialized() const {

  return true;
}

void GPAwardList::Swap(GPAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPAwardList_descriptor_;
  metadata.reflection = GPAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameEnd_MSGID_descriptor_;
}
bool ProGPGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameEnd_MSGID ProGPGameEnd::ID;
const ProGPGameEnd_MSGID ProGPGameEnd::MSGID_MIN;
const ProGPGameEnd_MSGID ProGPGameEnd::MSGID_MAX;
const int ProGPGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameEnd::kLGameTaxFieldNumber;
const int ProGPGameEnd::kCbChongGuangFieldNumber;
const int ProGPGameEnd::kCbBaWangKingFieldNumber;
const int ProGPGameEnd::kWProvideUserFieldNumber;
const int ProGPGameEnd::kCbChiHuCardFieldNumber;
const int ProGPGameEnd::kDwChiHuKindFieldNumber;
const int ProGPGameEnd::kDwChiHuRightFieldNumber;
const int ProGPGameEnd::kLTotaslGameScoreFieldNumber;
const int ProGPGameEnd::kLCurrentGameScoreFieldNumber;
const int ProGPGameEnd::kLCurrentPointScoreFieldNumber;
const int ProGPGameEnd::kLAttachScoreFieldNumber;
const int ProGPGameEnd::kCbHandCardDataFieldNumber;
const int ProGPGameEnd::kCbAwardCardDataFieldNumber;
const int ProGPGameEnd::kLOnlyWinScoreFieldNumber;
const int ProGPGameEnd::kBRoundEndFieldNumber;
const int ProGPGameEnd::kLHuiTouScoreFieldNumber;
const int ProGPGameEnd::kBZhuangWinFieldNumber;
const int ProGPGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProGPGameEnd::kDetailedScoresFieldNumber;
const int ProGPGameEnd::kFangShuiSaetFieldNumber;
#endif  // !_MSC_VER

ProGPGameEnd::ProGPGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameEnd::InitAsDefaultInstance() {
}

ProGPGameEnd::ProGPGameEnd(const ProGPGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  fangshuisaet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameEnd::~ProGPGameEnd() {
  SharedDtor();
}

void ProGPGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameEnd_descriptor_;
}

const ProGPGameEnd& ProGPGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameEnd* ProGPGameEnd::default_instance_ = NULL;

ProGPGameEnd* ProGPGameEnd::New() const {
  return new ProGPGameEnd;
}

void ProGPGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
    fangshuisaet_ = 0;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .GPMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .GPAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .GPScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectTag(168)) goto parse_fangShuiSaet;
        break;
      }

      // optional int32 fangShuiSaet = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fangShuiSaet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fangshuisaet_)));
          set_has_fangshuisaet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .GPMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .GPAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .GPScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  // optional int32 fangShuiSaet = 21;
  if (has_fangshuisaet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fangshuisaet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .GPMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .GPAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .GPScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  // optional int32 fangShuiSaet = 21;
  if (has_fangshuisaet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fangshuisaet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

    // optional int32 fangShuiSaet = 21;
    if (has_fangshuisaet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fangshuisaet());
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .GPMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .GPAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .GPScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameEnd::MergeFrom(const ProGPGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
    if (from.has_fangshuisaet()) {
      set_fangshuisaet(from.fangshuisaet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameEnd::CopyFrom(const ProGPGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameEnd::IsInitialized() const {

  return true;
}

void ProGPGameEnd::Swap(ProGPGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(fangshuisaet_, other->fangshuisaet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameEnd_descriptor_;
  metadata.reflection = ProGPGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProGPGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameQuickSoundRequest_MSGID ProGPGameQuickSoundRequest::ID;
const ProGPGameQuickSoundRequest_MSGID ProGPGameQuickSoundRequest::MSGID_MIN;
const ProGPGameQuickSoundRequest_MSGID ProGPGameQuickSoundRequest::MSGID_MAX;
const int ProGPGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProGPGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProGPGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProGPGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProGPGameQuickSoundRequest::ProGPGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProGPGameQuickSoundRequest::ProGPGameQuickSoundRequest(const ProGPGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameQuickSoundRequest::~ProGPGameQuickSoundRequest() {
  SharedDtor();
}

void ProGPGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProGPGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameQuickSoundRequest_descriptor_;
}

const ProGPGameQuickSoundRequest& ProGPGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameQuickSoundRequest* ProGPGameQuickSoundRequest::default_instance_ = NULL;

ProGPGameQuickSoundRequest* ProGPGameQuickSoundRequest::New() const {
  return new ProGPGameQuickSoundRequest;
}

void ProGPGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameQuickSoundRequest::MergeFrom(const ProGPGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameQuickSoundRequest::CopyFrom(const ProGPGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProGPGameQuickSoundRequest::Swap(ProGPGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProGPGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProGPGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameQuickSoundResponse_MSGID ProGPGameQuickSoundResponse::ID;
const ProGPGameQuickSoundResponse_MSGID ProGPGameQuickSoundResponse::MSGID_MIN;
const ProGPGameQuickSoundResponse_MSGID ProGPGameQuickSoundResponse::MSGID_MAX;
const int ProGPGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProGPGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProGPGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProGPGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProGPGameQuickSoundResponse::ProGPGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProGPGameQuickSoundResponse::ProGPGameQuickSoundResponse(const ProGPGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameQuickSoundResponse::~ProGPGameQuickSoundResponse() {
  SharedDtor();
}

void ProGPGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProGPGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameQuickSoundResponse_descriptor_;
}

const ProGPGameQuickSoundResponse& ProGPGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameQuickSoundResponse* ProGPGameQuickSoundResponse::default_instance_ = NULL;

ProGPGameQuickSoundResponse* ProGPGameQuickSoundResponse::New() const {
  return new ProGPGameQuickSoundResponse;
}

void ProGPGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameQuickSoundResponse::MergeFrom(const ProGPGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameQuickSoundResponse::CopyFrom(const ProGPGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProGPGameQuickSoundResponse::Swap(ProGPGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProGPGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProGPGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameSendDiscardMahs_MSGID ProGPGameSendDiscardMahs::ID;
const ProGPGameSendDiscardMahs_MSGID ProGPGameSendDiscardMahs::MSGID_MIN;
const ProGPGameSendDiscardMahs_MSGID ProGPGameSendDiscardMahs::MSGID_MAX;
const int ProGPGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProGPGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProGPGameSendDiscardMahs::kDeskCountFieldNumber;
#endif  // !_MSC_VER

ProGPGameSendDiscardMahs::ProGPGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProGPGameSendDiscardMahs::ProGPGameSendDiscardMahs(const ProGPGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameSendDiscardMahs::~ProGPGameSendDiscardMahs() {
  SharedDtor();
}

void ProGPGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSendDiscardMahs_descriptor_;
}

const ProGPGameSendDiscardMahs& ProGPGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameSendDiscardMahs* ProGPGameSendDiscardMahs::default_instance_ = NULL;

ProGPGameSendDiscardMahs* ProGPGameSendDiscardMahs::New() const {
  return new ProGPGameSendDiscardMahs;
}

void ProGPGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .GPMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(32)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .GPMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deskcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .GPMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deskcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 4;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .GPMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameSendDiscardMahs::MergeFrom(const ProGPGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameSendDiscardMahs::CopyFrom(const ProGPGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProGPGameSendDiscardMahs::Swap(ProGPGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    std::swap(deskcount_, other->deskcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProGPGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPWeaveItem::kWeaveKindFieldNumber;
const int GPWeaveItem::kCentercardFieldNumber;
const int GPWeaveItem::kProvideUserFieldNumber;
const int GPWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

GPWeaveItem::GPWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPWeaveItem::InitAsDefaultInstance() {
}

GPWeaveItem::GPWeaveItem(const GPWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPWeaveItem::~GPWeaveItem() {
  SharedDtor();
}

void GPWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPWeaveItem_descriptor_;
}

const GPWeaveItem& GPWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

GPWeaveItem* GPWeaveItem::default_instance_ = NULL;

GPWeaveItem* GPWeaveItem::New() const {
  return new GPWeaveItem;
}

void GPWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPWeaveItem::MergeFrom(const GPWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPWeaveItem::CopyFrom(const GPWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPWeaveItem::IsInitialized() const {

  return true;
}

void GPWeaveItem::Swap(GPWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPWeaveItem_descriptor_;
  metadata.reflection = GPWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GPWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

GPWeaveItems::GPWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GPWeaveItems::InitAsDefaultInstance() {
}

GPWeaveItems::GPWeaveItems(const GPWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GPWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPWeaveItems::~GPWeaveItems() {
  SharedDtor();
}

void GPWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GPWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPWeaveItems_descriptor_;
}

const GPWeaveItems& GPWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

GPWeaveItems* GPWeaveItems::default_instance_ = NULL;

GPWeaveItems* GPWeaveItems::New() const {
  return new GPWeaveItems;
}

void GPWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GPWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GPWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GPWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GPWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GPWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GPWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .GPWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPWeaveItems::MergeFrom(const GPWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPWeaveItems::CopyFrom(const GPWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPWeaveItems::IsInitialized() const {

  return true;
}

void GPWeaveItems::Swap(GPWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPWeaveItems_descriptor_;
  metadata.reflection = GPWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSendActionMahs_MSGID_descriptor_;
}
bool ProGPGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameSendActionMahs_MSGID ProGPGameSendActionMahs::ID;
const ProGPGameSendActionMahs_MSGID ProGPGameSendActionMahs::MSGID_MIN;
const ProGPGameSendActionMahs_MSGID ProGPGameSendActionMahs::MSGID_MAX;
const int ProGPGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameSendActionMahs::kSeatIdFieldNumber;
const int ProGPGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProGPGameSendActionMahs::ProGPGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameSendActionMahs::InitAsDefaultInstance() {
}

ProGPGameSendActionMahs::ProGPGameSendActionMahs(const ProGPGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameSendActionMahs::~ProGPGameSendActionMahs() {
  SharedDtor();
}

void ProGPGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSendActionMahs_descriptor_;
}

const ProGPGameSendActionMahs& ProGPGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameSendActionMahs* ProGPGameSendActionMahs::default_instance_ = NULL;

ProGPGameSendActionMahs* ProGPGameSendActionMahs::New() const {
  return new ProGPGameSendActionMahs;
}

void ProGPGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .GPWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .GPWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .GPWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .GPWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameSendActionMahs::MergeFrom(const ProGPGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameSendActionMahs::CopyFrom(const ProGPGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProGPGameSendActionMahs::Swap(ProGPGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameSendActionMahs_descriptor_;
  metadata.reflection = ProGPGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenRequest_MSGID_descriptor_;
}
bool ProGPGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameBrokenRequest_MSGID ProGPGameBrokenRequest::ID;
const ProGPGameBrokenRequest_MSGID ProGPGameBrokenRequest::MSGID_MIN;
const ProGPGameBrokenRequest_MSGID ProGPGameBrokenRequest::MSGID_MAX;
const int ProGPGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameBrokenRequest::kSeatIdFieldNumber;
const int ProGPGameBrokenRequest::kTypeFieldNumber;
const int ProGPGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProGPGameBrokenRequest::ProGPGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameBrokenRequest::InitAsDefaultInstance() {
}

ProGPGameBrokenRequest::ProGPGameBrokenRequest(const ProGPGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameBrokenRequest::~ProGPGameBrokenRequest() {
  SharedDtor();
}

void ProGPGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenRequest_descriptor_;
}

const ProGPGameBrokenRequest& ProGPGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameBrokenRequest* ProGPGameBrokenRequest::default_instance_ = NULL;

ProGPGameBrokenRequest* ProGPGameBrokenRequest::New() const {
  return new ProGPGameBrokenRequest;
}

void ProGPGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .GPBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GPBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::GPBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GPBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GPBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GPBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameBrokenRequest::MergeFrom(const ProGPGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameBrokenRequest::CopyFrom(const ProGPGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProGPGameBrokenRequest::Swap(ProGPGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameBrokenRequest_descriptor_;
  metadata.reflection = ProGPGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenOperate_MSGID_descriptor_;
}
bool ProGPGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameBrokenOperate_MSGID ProGPGameBrokenOperate::ID;
const ProGPGameBrokenOperate_MSGID ProGPGameBrokenOperate::MSGID_MIN;
const ProGPGameBrokenOperate_MSGID ProGPGameBrokenOperate::MSGID_MAX;
const int ProGPGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameBrokenOperate::kSeatIdFieldNumber;
const int ProGPGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProGPGameBrokenOperate::ProGPGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameBrokenOperate::InitAsDefaultInstance() {
}

ProGPGameBrokenOperate::ProGPGameBrokenOperate(const ProGPGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameBrokenOperate::~ProGPGameBrokenOperate() {
  SharedDtor();
}

void ProGPGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenOperate_descriptor_;
}

const ProGPGameBrokenOperate& ProGPGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameBrokenOperate* ProGPGameBrokenOperate::default_instance_ = NULL;

ProGPGameBrokenOperate* ProGPGameBrokenOperate::New() const {
  return new ProGPGameBrokenOperate;
}

void ProGPGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .GPBROKEN_OPERATE result = 3 [default = GP_BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GPBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::GPBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GPBROKEN_OPERATE result = 3 [default = GP_BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GPBROKEN_OPERATE result = 3 [default = GP_BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GPBROKEN_OPERATE result = 3 [default = GP_BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameBrokenOperate::MergeFrom(const ProGPGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameBrokenOperate::CopyFrom(const ProGPGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProGPGameBrokenOperate::Swap(ProGPGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameBrokenOperate_descriptor_;
  metadata.reflection = ProGPGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenNotify_MSGID_descriptor_;
}
bool ProGPGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameBrokenNotify_MSGID ProGPGameBrokenNotify::ID;
const ProGPGameBrokenNotify_MSGID ProGPGameBrokenNotify::MSGID_MIN;
const ProGPGameBrokenNotify_MSGID ProGPGameBrokenNotify::MSGID_MAX;
const int ProGPGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameBrokenNotify::kSeatIdFieldNumber;
const int ProGPGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProGPGameBrokenNotify::ProGPGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameBrokenNotify::InitAsDefaultInstance() {
}

ProGPGameBrokenNotify::ProGPGameBrokenNotify(const ProGPGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameBrokenNotify::~ProGPGameBrokenNotify() {
  SharedDtor();
}

void ProGPGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenNotify_descriptor_;
}

const ProGPGameBrokenNotify& ProGPGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameBrokenNotify* ProGPGameBrokenNotify::default_instance_ = NULL;

ProGPGameBrokenNotify* ProGPGameBrokenNotify::New() const {
  return new ProGPGameBrokenNotify;
}

void ProGPGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .GPBROKEN_CODE operate_code = 3 [default = GP_BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GPBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::GPBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GPBROKEN_CODE operate_code = 3 [default = GP_BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GPBROKEN_CODE operate_code = 3 [default = GP_BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GPBROKEN_CODE operate_code = 3 [default = GP_BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameBrokenNotify::MergeFrom(const ProGPGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameBrokenNotify::CopyFrom(const ProGPGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProGPGameBrokenNotify::Swap(ProGPGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameBrokenNotify_descriptor_;
  metadata.reflection = ProGPGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameRuleConfig_MSGID_descriptor_;
}
bool ProGPGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameRuleConfig_MSGID ProGPGameRuleConfig::ID;
const ProGPGameRuleConfig_MSGID ProGPGameRuleConfig::MSGID_MIN;
const ProGPGameRuleConfig_MSGID ProGPGameRuleConfig::MSGID_MAX;
const int ProGPGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameRuleConfig::kGameRoundFieldNumber;
const int ProGPGameRuleConfig::kNeedCardFieldNumber;
const int ProGPGameRuleConfig::kHaveMagicCardFieldNumber;
const int ProGPGameRuleConfig::kHaveRedPeach3FirstOutFieldNumber;
const int ProGPGameRuleConfig::kHavaMustOutCardFieldNumber;
const int ProGPGameRuleConfig::kNMasterSeatFieldNumber;
const int ProGPGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProGPGameRuleConfig::kHaveJianmaFieldNumber;
const int ProGPGameRuleConfig::kNChongguanNumFieldNumber;
const int ProGPGameRuleConfig::kHavaBaoPeiFieldNumber;
const int ProGPGameRuleConfig::kNPlayerNumFieldNumber;
const int ProGPGameRuleConfig::kSRoomNumFieldNumber;
const int ProGPGameRuleConfig::kSPlayTimeFieldNumber;
#endif  // !_MSC_VER

ProGPGameRuleConfig::ProGPGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameRuleConfig::InitAsDefaultInstance() {
}

ProGPGameRuleConfig::ProGPGameRuleConfig(const ProGPGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_magiccard_ = false;
  have_redpeach3firstout_ = false;
  hava_mustoutcard_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  hava_baopei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameRuleConfig::~ProGPGameRuleConfig() {
  SharedDtor();
}

void ProGPGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProGPGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameRuleConfig_descriptor_;
}

const ProGPGameRuleConfig& ProGPGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameRuleConfig* ProGPGameRuleConfig::default_instance_ = NULL;

ProGPGameRuleConfig* ProGPGameRuleConfig::New() const {
  return new ProGPGameRuleConfig;
}

void ProGPGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_magiccard_ = false;
    have_redpeach3firstout_ = false;
    hava_mustoutcard_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    hava_baopei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_MagicCard;
        break;
      }

      // optional bool have_MagicCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_MagicCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_magiccard_)));
          set_has_have_magiccard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_RedPeach3FirstOut;
        break;
      }

      // optional bool have_RedPeach3FirstOut = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_RedPeach3FirstOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_redpeach3firstout_)));
          set_has_have_redpeach3firstout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_MustOutCard;
        break;
      }

      // optional bool hava_MustOutCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_MustOutCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_mustoutcard_)));
          set_has_hava_mustoutcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hava_BaoPei;
        break;
      }

      // optional bool hava_BaoPei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_BaoPei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_baopei_)));
          set_has_hava_baopei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_MagicCard = 3;
  if (has_have_magiccard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_magiccard(), output);
  }

  // optional bool have_RedPeach3FirstOut = 4;
  if (has_have_redpeach3firstout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_redpeach3firstout(), output);
  }

  // optional bool hava_MustOutCard = 5;
  if (has_hava_mustoutcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_mustoutcard(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool hava_BaoPei = 10;
  if (has_hava_baopei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hava_baopei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_MagicCard = 3;
  if (has_have_magiccard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_magiccard(), target);
  }

  // optional bool have_RedPeach3FirstOut = 4;
  if (has_have_redpeach3firstout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_redpeach3firstout(), target);
  }

  // optional bool hava_MustOutCard = 5;
  if (has_hava_mustoutcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_mustoutcard(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool hava_BaoPei = 10;
  if (has_hava_baopei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hava_baopei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_MagicCard = 3;
    if (has_have_magiccard()) {
      total_size += 1 + 1;
    }

    // optional bool have_RedPeach3FirstOut = 4;
    if (has_have_redpeach3firstout()) {
      total_size += 1 + 1;
    }

    // optional bool hava_MustOutCard = 5;
    if (has_hava_mustoutcard()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool hava_BaoPei = 10;
    if (has_hava_baopei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameRuleConfig::MergeFrom(const ProGPGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_magiccard()) {
      set_have_magiccard(from.have_magiccard());
    }
    if (from.has_have_redpeach3firstout()) {
      set_have_redpeach3firstout(from.have_redpeach3firstout());
    }
    if (from.has_hava_mustoutcard()) {
      set_hava_mustoutcard(from.hava_mustoutcard());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_hava_baopei()) {
      set_hava_baopei(from.hava_baopei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameRuleConfig::CopyFrom(const ProGPGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameRuleConfig::IsInitialized() const {

  return true;
}

void ProGPGameRuleConfig::Swap(ProGPGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_magiccard_, other->have_magiccard_);
    std::swap(have_redpeach3firstout_, other->have_redpeach3firstout_);
    std::swap(hava_mustoutcard_, other->hava_mustoutcard_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(hava_baopei_, other->hava_baopei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameRuleConfig_descriptor_;
  metadata.reflection = ProGPGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenStatus_MSGID_descriptor_;
}
bool ProGPGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameBrokenStatus_MSGID ProGPGameBrokenStatus::ID;
const ProGPGameBrokenStatus_MSGID ProGPGameBrokenStatus::MSGID_MIN;
const ProGPGameBrokenStatus_MSGID ProGPGameBrokenStatus::MSGID_MAX;
const int ProGPGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProGPGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProGPGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProGPGameBrokenStatus::ProGPGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameBrokenStatus::InitAsDefaultInstance() {
}

ProGPGameBrokenStatus::ProGPGameBrokenStatus(const ProGPGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameBrokenStatus::~ProGPGameBrokenStatus() {
  SharedDtor();
}

void ProGPGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameBrokenStatus_descriptor_;
}

const ProGPGameBrokenStatus& ProGPGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameBrokenStatus* ProGPGameBrokenStatus::default_instance_ = NULL;

ProGPGameBrokenStatus* ProGPGameBrokenStatus::New() const {
  return new ProGPGameBrokenStatus;
}

void ProGPGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameBrokenStatus::MergeFrom(const ProGPGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameBrokenStatus::CopyFrom(const ProGPGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProGPGameBrokenStatus::Swap(ProGPGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameBrokenStatus_descriptor_;
  metadata.reflection = ProGPGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDataResp_MSGID_descriptor_;
}
bool ProGPGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameDataResp_MSGID ProGPGameDataResp::ID;
const ProGPGameDataResp_MSGID ProGPGameDataResp::MSGID_MIN;
const ProGPGameDataResp_MSGID ProGPGameDataResp::MSGID_MAX;
const int ProGPGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameDataResp::kTotalScoreFieldNumber;
const int ProGPGameDataResp::kTypeFieldNumber;
const int ProGPGameDataResp::kBoomPlaayerSeatFieldNumber;
const int ProGPGameDataResp::kIsboomFieldNumber;
#endif  // !_MSC_VER

ProGPGameDataResp::ProGPGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameDataResp::InitAsDefaultInstance() {
}

ProGPGameDataResp::ProGPGameDataResp(const ProGPGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  boomplaayerseat_ = 0;
  isboom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameDataResp::~ProGPGameDataResp() {
  SharedDtor();
}

void ProGPGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameDataResp_descriptor_;
}

const ProGPGameDataResp& ProGPGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameDataResp* ProGPGameDataResp::default_instance_ = NULL;

ProGPGameDataResp* ProGPGameDataResp::New() const {
  return new ProGPGameDataResp;
}

void ProGPGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
    boomplaayerseat_ = 0;
    isboom_ = false;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boomPlaayerSeat;
        break;
      }

      // optional int32 boomPlaayerSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boomPlaayerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boomplaayerseat_)));
          set_has_boomplaayerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isboom;
        break;
      }

      // optional bool isboom = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isboom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isboom_)));
          set_has_isboom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 boomPlaayerSeat = 3;
  if (has_boomplaayerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->boomplaayerseat(), output);
  }

  // optional bool isboom = 4;
  if (has_isboom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isboom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 boomPlaayerSeat = 3;
  if (has_boomplaayerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->boomplaayerseat(), target);
  }

  // optional bool isboom = 4;
  if (has_isboom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isboom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 boomPlaayerSeat = 3;
    if (has_boomplaayerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boomplaayerseat());
    }

    // optional bool isboom = 4;
    if (has_isboom()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameDataResp::MergeFrom(const ProGPGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_boomplaayerseat()) {
      set_boomplaayerseat(from.boomplaayerseat());
    }
    if (from.has_isboom()) {
      set_isboom(from.isboom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameDataResp::CopyFrom(const ProGPGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameDataResp::IsInitialized() const {

  return true;
}

void ProGPGameDataResp::Swap(ProGPGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(boomplaayerseat_, other->boomplaayerseat_);
    std::swap(isboom_, other->isboom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameDataResp_descriptor_;
  metadata.reflection = ProGPGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameRecordRequest_MSGID_descriptor_;
}
bool ProGPGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameRecordRequest_MSGID ProGPGameRecordRequest::ID;
const ProGPGameRecordRequest_MSGID ProGPGameRecordRequest::MSGID_MIN;
const ProGPGameRecordRequest_MSGID ProGPGameRecordRequest::MSGID_MAX;
const int ProGPGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameRecordRequest::kSeatIdFieldNumber;
const int ProGPGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProGPGameRecordRequest::ProGPGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameRecordRequest::InitAsDefaultInstance() {
}

ProGPGameRecordRequest::ProGPGameRecordRequest(const ProGPGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameRecordRequest::~ProGPGameRecordRequest() {
  SharedDtor();
}

void ProGPGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProGPGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameRecordRequest_descriptor_;
}

const ProGPGameRecordRequest& ProGPGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameRecordRequest* ProGPGameRecordRequest::default_instance_ = NULL;

ProGPGameRecordRequest* ProGPGameRecordRequest::New() const {
  return new ProGPGameRecordRequest;
}

void ProGPGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameRecordRequest::MergeFrom(const ProGPGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameRecordRequest::CopyFrom(const ProGPGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameRecordRequest::IsInitialized() const {

  return true;
}

void ProGPGameRecordRequest::Swap(ProGPGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameRecordRequest_descriptor_;
  metadata.reflection = ProGPGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameRecordResponse_MSGID_descriptor_;
}
bool ProGPGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameRecordResponse_MSGID ProGPGameRecordResponse::ID;
const ProGPGameRecordResponse_MSGID ProGPGameRecordResponse::MSGID_MIN;
const ProGPGameRecordResponse_MSGID ProGPGameRecordResponse::MSGID_MAX;
const int ProGPGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameRecordResponse::kSeatIdFieldNumber;
const int ProGPGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProGPGameRecordResponse::ProGPGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameRecordResponse::InitAsDefaultInstance() {
}

ProGPGameRecordResponse::ProGPGameRecordResponse(const ProGPGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameRecordResponse::~ProGPGameRecordResponse() {
  SharedDtor();
}

void ProGPGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProGPGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameRecordResponse_descriptor_;
}

const ProGPGameRecordResponse& ProGPGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameRecordResponse* ProGPGameRecordResponse::default_instance_ = NULL;

ProGPGameRecordResponse* ProGPGameRecordResponse::New() const {
  return new ProGPGameRecordResponse;
}

void ProGPGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameRecordResponse::MergeFrom(const ProGPGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameRecordResponse::CopyFrom(const ProGPGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameRecordResponse::IsInitialized() const {

  return true;
}

void ProGPGameRecordResponse::Swap(ProGPGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameRecordResponse_descriptor_;
  metadata.reflection = ProGPGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserLocationRequest_MSGID_descriptor_;
}
bool ProGPGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserLocationRequest_MSGID ProGPGameUserLocationRequest::ID;
const ProGPGameUserLocationRequest_MSGID ProGPGameUserLocationRequest::MSGID_MIN;
const ProGPGameUserLocationRequest_MSGID ProGPGameUserLocationRequest::MSGID_MAX;
const int ProGPGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameUserLocationRequest::kSeatIdFieldNumber;
const int ProGPGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProGPGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProGPGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProGPGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProGPGameUserLocationRequest::ProGPGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserLocationRequest::InitAsDefaultInstance() {
}

ProGPGameUserLocationRequest::ProGPGameUserLocationRequest(const ProGPGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserLocationRequest::~ProGPGameUserLocationRequest() {
  SharedDtor();
}

void ProGPGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProGPGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserLocationRequest_descriptor_;
}

const ProGPGameUserLocationRequest& ProGPGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserLocationRequest* ProGPGameUserLocationRequest::default_instance_ = NULL;

ProGPGameUserLocationRequest* ProGPGameUserLocationRequest::New() const {
  return new ProGPGameUserLocationRequest;
}

void ProGPGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserLocationRequest::MergeFrom(const ProGPGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserLocationRequest::CopyFrom(const ProGPGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProGPGameUserLocationRequest::Swap(ProGPGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserLocationRequest_descriptor_;
  metadata.reflection = ProGPGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSyncCardResponse_MSGID_descriptor_;
}
bool ProGPGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameSyncCardResponse_MSGID ProGPGameSyncCardResponse::ID;
const ProGPGameSyncCardResponse_MSGID ProGPGameSyncCardResponse::MSGID_MIN;
const ProGPGameSyncCardResponse_MSGID ProGPGameSyncCardResponse::MSGID_MAX;
const int ProGPGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameSyncCardResponse::kSeatFieldNumber;
const int ProGPGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProGPGameSyncCardResponse::ProGPGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameSyncCardResponse::InitAsDefaultInstance() {
}

ProGPGameSyncCardResponse::ProGPGameSyncCardResponse(const ProGPGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameSyncCardResponse::~ProGPGameSyncCardResponse() {
  SharedDtor();
}

void ProGPGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameSyncCardResponse_descriptor_;
}

const ProGPGameSyncCardResponse& ProGPGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameSyncCardResponse* ProGPGameSyncCardResponse::default_instance_ = NULL;

ProGPGameSyncCardResponse* ProGPGameSyncCardResponse::New() const {
  return new ProGPGameSyncCardResponse;
}

void ProGPGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameSyncCardResponse::MergeFrom(const ProGPGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameSyncCardResponse::CopyFrom(const ProGPGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProGPGameSyncCardResponse::Swap(ProGPGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameSyncCardResponse_descriptor_;
  metadata.reflection = ProGPGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProGPGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserPhoneStatusRequest_MSGID ProGPGameUserPhoneStatusRequest::ID;
const ProGPGameUserPhoneStatusRequest_MSGID ProGPGameUserPhoneStatusRequest::MSGID_MIN;
const ProGPGameUserPhoneStatusRequest_MSGID ProGPGameUserPhoneStatusRequest::MSGID_MAX;
const int ProGPGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProGPGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProGPGameUserPhoneStatusRequest::ProGPGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProGPGameUserPhoneStatusRequest::ProGPGameUserPhoneStatusRequest(const ProGPGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserPhoneStatusRequest::~ProGPGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProGPGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserPhoneStatusRequest_descriptor_;
}

const ProGPGameUserPhoneStatusRequest& ProGPGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserPhoneStatusRequest* ProGPGameUserPhoneStatusRequest::default_instance_ = NULL;

ProGPGameUserPhoneStatusRequest* ProGPGameUserPhoneStatusRequest::New() const {
  return new ProGPGameUserPhoneStatusRequest;
}

void ProGPGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserPhoneStatusRequest::MergeFrom(const ProGPGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserPhoneStatusRequest::CopyFrom(const ProGPGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProGPGameUserPhoneStatusRequest::Swap(ProGPGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProGPGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProGPGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserGiveUpRequest_MSGID ProGPGameUserGiveUpRequest::ID;
const ProGPGameUserGiveUpRequest_MSGID ProGPGameUserGiveUpRequest::MSGID_MIN;
const ProGPGameUserGiveUpRequest_MSGID ProGPGameUserGiveUpRequest::MSGID_MAX;
const int ProGPGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProGPGameUserGiveUpRequest::ProGPGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProGPGameUserGiveUpRequest::ProGPGameUserGiveUpRequest(const ProGPGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserGiveUpRequest::~ProGPGameUserGiveUpRequest() {
  SharedDtor();
}

void ProGPGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserGiveUpRequest_descriptor_;
}

const ProGPGameUserGiveUpRequest& ProGPGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserGiveUpRequest* ProGPGameUserGiveUpRequest::default_instance_ = NULL;

ProGPGameUserGiveUpRequest* ProGPGameUserGiveUpRequest::New() const {
  return new ProGPGameUserGiveUpRequest;
}

void ProGPGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserGiveUpRequest::MergeFrom(const ProGPGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserGiveUpRequest::CopyFrom(const ProGPGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProGPGameUserGiveUpRequest::Swap(ProGPGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProGPGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserHintRequest_MSGID_descriptor_;
}
bool ProGPGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserHintRequest_MSGID ProGPGameUserHintRequest::ID;
const ProGPGameUserHintRequest_MSGID ProGPGameUserHintRequest::MSGID_MIN;
const ProGPGameUserHintRequest_MSGID ProGPGameUserHintRequest::MSGID_MAX;
const int ProGPGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProGPGameUserHintRequest::ProGPGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserHintRequest::InitAsDefaultInstance() {
}

ProGPGameUserHintRequest::ProGPGameUserHintRequest(const ProGPGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserHintRequest::~ProGPGameUserHintRequest() {
  SharedDtor();
}

void ProGPGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserHintRequest_descriptor_;
}

const ProGPGameUserHintRequest& ProGPGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserHintRequest* ProGPGameUserHintRequest::default_instance_ = NULL;

ProGPGameUserHintRequest* ProGPGameUserHintRequest::New() const {
  return new ProGPGameUserHintRequest;
}

void ProGPGameUserHintRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProGPGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserHintRequest::MergeFrom(const ProGPGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserHintRequest::CopyFrom(const ProGPGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProGPGameUserHintRequest::Swap(ProGPGameUserHintRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserHintRequest_descriptor_;
  metadata.reflection = ProGPGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserHintResponse_MSGID_descriptor_;
}
bool ProGPGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserHintResponse_MSGID ProGPGameUserHintResponse::ID;
const ProGPGameUserHintResponse_MSGID ProGPGameUserHintResponse::MSGID_MIN;
const ProGPGameUserHintResponse_MSGID ProGPGameUserHintResponse::MSGID_MAX;
const int ProGPGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameUserHintResponse::kLenthFieldNumber;
const int ProGPGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProGPGameUserHintResponse::ProGPGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserHintResponse::InitAsDefaultInstance() {
}

ProGPGameUserHintResponse::ProGPGameUserHintResponse(const ProGPGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserHintResponse::~ProGPGameUserHintResponse() {
  SharedDtor();
}

void ProGPGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserHintResponse_descriptor_;
}

const ProGPGameUserHintResponse& ProGPGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserHintResponse* ProGPGameUserHintResponse::default_instance_ = NULL;

ProGPGameUserHintResponse* ProGPGameUserHintResponse::New() const {
  return new ProGPGameUserHintResponse;
}

void ProGPGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserHintResponse::MergeFrom(const ProGPGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserHintResponse::CopyFrom(const ProGPGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProGPGameUserHintResponse::Swap(ProGPGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserHintResponse_descriptor_;
  metadata.reflection = ProGPGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserCallScoreResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserCallScoreResponse_MSGID_descriptor_;
}
bool ProGPGameUserCallScoreResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserCallScoreResponse_MSGID ProGPGameUserCallScoreResponse::ID;
const ProGPGameUserCallScoreResponse_MSGID ProGPGameUserCallScoreResponse::MSGID_MIN;
const ProGPGameUserCallScoreResponse_MSGID ProGPGameUserCallScoreResponse::MSGID_MAX;
const int ProGPGameUserCallScoreResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameUserCallScoreResponse::kSeatFieldNumber;
const int ProGPGameUserCallScoreResponse::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProGPGameUserCallScoreResponse::ProGPGameUserCallScoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserCallScoreResponse::InitAsDefaultInstance() {
}

ProGPGameUserCallScoreResponse::ProGPGameUserCallScoreResponse(const ProGPGameUserCallScoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserCallScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserCallScoreResponse::~ProGPGameUserCallScoreResponse() {
  SharedDtor();
}

void ProGPGameUserCallScoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameUserCallScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserCallScoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserCallScoreResponse_descriptor_;
}

const ProGPGameUserCallScoreResponse& ProGPGameUserCallScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserCallScoreResponse* ProGPGameUserCallScoreResponse::default_instance_ = NULL;

ProGPGameUserCallScoreResponse* ProGPGameUserCallScoreResponse::New() const {
  return new ProGPGameUserCallScoreResponse;
}

void ProGPGameUserCallScoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserCallScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameUserCallScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserCallScoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserCallScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserCallScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserCallScoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserCallScoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserCallScoreResponse::MergeFrom(const ProGPGameUserCallScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserCallScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserCallScoreResponse::CopyFrom(const ProGPGameUserCallScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserCallScoreResponse::IsInitialized() const {

  return true;
}

void ProGPGameUserCallScoreResponse::Swap(ProGPGameUserCallScoreResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserCallScoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserCallScoreResponse_descriptor_;
  metadata.reflection = ProGPGameUserCallScoreResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGPGameUserCallScoreRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserCallScoreRequest_MSGID_descriptor_;
}
bool ProGPGameUserCallScoreRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGPGameUserCallScoreRequest_MSGID ProGPGameUserCallScoreRequest::ID;
const ProGPGameUserCallScoreRequest_MSGID ProGPGameUserCallScoreRequest::MSGID_MIN;
const ProGPGameUserCallScoreRequest_MSGID ProGPGameUserCallScoreRequest::MSGID_MAX;
const int ProGPGameUserCallScoreRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGPGameUserCallScoreRequest::kSeatFieldNumber;
const int ProGPGameUserCallScoreRequest::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProGPGameUserCallScoreRequest::ProGPGameUserCallScoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGPGameUserCallScoreRequest::InitAsDefaultInstance() {
}

ProGPGameUserCallScoreRequest::ProGPGameUserCallScoreRequest(const ProGPGameUserCallScoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGPGameUserCallScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGPGameUserCallScoreRequest::~ProGPGameUserCallScoreRequest() {
  SharedDtor();
}

void ProGPGameUserCallScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGPGameUserCallScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGPGameUserCallScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGPGameUserCallScoreRequest_descriptor_;
}

const ProGPGameUserCallScoreRequest& ProGPGameUserCallScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gppk_2eproto();
  return *default_instance_;
}

ProGPGameUserCallScoreRequest* ProGPGameUserCallScoreRequest::default_instance_ = NULL;

ProGPGameUserCallScoreRequest* ProGPGameUserCallScoreRequest::New() const {
  return new ProGPGameUserCallScoreRequest;
}

void ProGPGameUserCallScoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGPGameUserCallScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGPGameUserCallScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGPGameUserCallScoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGPGameUserCallScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGPGameUserCallScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGPGameUserCallScoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGPGameUserCallScoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGPGameUserCallScoreRequest::MergeFrom(const ProGPGameUserCallScoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGPGameUserCallScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGPGameUserCallScoreRequest::CopyFrom(const ProGPGameUserCallScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGPGameUserCallScoreRequest::IsInitialized() const {

  return true;
}

void ProGPGameUserCallScoreRequest::Swap(ProGPGameUserCallScoreRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGPGameUserCallScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGPGameUserCallScoreRequest_descriptor_;
  metadata.reflection = ProGPGameUserCallScoreRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
