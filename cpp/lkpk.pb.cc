// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lkpk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lkpk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProPKGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PKMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PKWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PKWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PKWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserCallScoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserCallScoreResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserCallScoreResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProPKGameUserCallScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProPKGameUserCallScoreRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProPKGameUserCallScoreRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PKGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PKSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PKKIGN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PKBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PKBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PKBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_lkpk_2eproto() {
  protobuf_AddDesc_lkpk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lkpk.proto");
  GOOGLE_CHECK(file != NULL);
  ProPKGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProPKGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStatusResponse, status_),
  };
  ProPKGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameStatusResponse_descriptor_,
      ProPKGameStatusResponse::default_instance_,
      ProPKGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameStatusResponse));
  ProPKGameStatusResponse_MSGID_descriptor_ = ProPKGameStatusResponse_descriptor_->enum_type(0);
  ProPKGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProPKGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDeskInfoResponse, cellscore_),
  };
  ProPKGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameDeskInfoResponse_descriptor_,
      ProPKGameDeskInfoResponse::default_instance_,
      ProPKGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameDeskInfoResponse));
  ProPKGameDeskInfoResponse_MSGID_descriptor_ = ProPKGameDeskInfoResponse_descriptor_->enum_type(0);
  ProPKGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProPKGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyNotify, time_),
  };
  ProPKGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameReadyNotify_descriptor_,
      ProPKGameReadyNotify::default_instance_,
      ProPKGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameReadyNotify));
  ProPKGameReadyNotify_MSGID_descriptor_ = ProPKGameReadyNotify_descriptor_->enum_type(0);
  ProPKGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProPKGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyRequest, seat_),
  };
  ProPKGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameReadyRequest_descriptor_,
      ProPKGameReadyRequest::default_instance_,
      ProPKGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameReadyRequest));
  ProPKGameReadyRequest_MSGID_descriptor_ = ProPKGameReadyRequest_descriptor_->enum_type(0);
  ProPKGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProPKGameReadyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyResponse, seat_),
  };
  ProPKGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameReadyResponse_descriptor_,
      ProPKGameReadyResponse::default_instance_,
      ProPKGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameReadyResponse));
  ProPKGameReadyResponse_MSGID_descriptor_ = ProPKGameReadyResponse_descriptor_->enum_type(0);
  ProPKGameStart_descriptor_ = file->message_type(5);
  static const int ProPKGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStart, outcardtimes_),
  };
  ProPKGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameStart_descriptor_,
      ProPKGameStart::default_instance_,
      ProPKGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameStart));
  ProPKGameStart_MSGID_descriptor_ = ProPKGameStart_descriptor_->enum_type(0);
  ProPKGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProPKGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceNotify, dicecount_),
  };
  ProPKGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameDiceNotify_descriptor_,
      ProPKGameDiceNotify::default_instance_,
      ProPKGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameDiceNotify));
  ProPKGameDiceNotify_MSGID_descriptor_ = ProPKGameDiceNotify_descriptor_->enum_type(0);
  ProPKGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProPKGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceRequest, dicecount_),
  };
  ProPKGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameDiceRequest_descriptor_,
      ProPKGameDiceRequest::default_instance_,
      ProPKGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameDiceRequest));
  ProPKGameDiceRequest_MSGID_descriptor_ = ProPKGameDiceRequest_descriptor_->enum_type(0);
  ProPKGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProPKGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceResult, dicecount_),
  };
  ProPKGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameDiceResult_descriptor_,
      ProPKGameDiceResult::default_instance_,
      ProPKGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameDiceResult));
  ProPKGameDiceResult_MSGID_descriptor_ = ProPKGameDiceResult_descriptor_->enum_type(0);
  ProPKGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProPKGameSendMahs_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, cbleftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, magiccardlogicvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, brecome_),
  };
  ProPKGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameSendMahs_descriptor_,
      ProPKGameSendMahs::default_instance_,
      ProPKGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameSendMahs));
  ProPKGameSendMahs_MSGID_descriptor_ = ProPKGameSendMahs_descriptor_->enum_type(0);
  ProPKGameKingData_descriptor_ = file->message_type(10);
  static const int ProPKGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, cbbawangking_),
  };
  ProPKGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameKingData_descriptor_,
      ProPKGameKingData::default_instance_,
      ProPKGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameKingData));
  ProPKGameKingData_MSGID_descriptor_ = ProPKGameKingData_descriptor_->enum_type(0);
  ProPKGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProPKGameOutMahsResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, seriesflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, seriesnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, point_),
  };
  ProPKGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameOutMahsResponse_descriptor_,
      ProPKGameOutMahsResponse::default_instance_,
      ProPKGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameOutMahsResponse));
  ProPKGameOutMahsResponse_MSGID_descriptor_ = ProPKGameOutMahsResponse_descriptor_->enum_type(0);
  ProPKGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProPKGameTimerPower_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, outcardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, lastoutcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, lastoutcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, lastoutcardseriesflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, lastoutcardseriesnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, lastoutcardpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, lastmagic4boom_),
  };
  ProPKGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameTimerPower_descriptor_,
      ProPKGameTimerPower::default_instance_,
      ProPKGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameTimerPower));
  ProPKGameTimerPower_MSGID_descriptor_ = ProPKGameTimerPower_descriptor_->enum_type(0);
  ProPKGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProPKGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, operateseat_),
  };
  ProPKGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameOperateNotify_descriptor_,
      ProPKGameOperateNotify::default_instance_,
      ProPKGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameOperateNotify));
  ProPKGameOperateNotify_MSGID_descriptor_ = ProPKGameOperateNotify_descriptor_->enum_type(0);
  ProPKGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProPKGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, handcount_),
  };
  ProPKGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameOperateResult_descriptor_,
      ProPKGameOperateResult::default_instance_,
      ProPKGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameOperateResult));
  ProPKGameOperateResult_MSGID_descriptor_ = ProPKGameOperateResult_descriptor_->enum_type(0);
  ProPKGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProPKGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateRequest, cboperatecard_),
  };
  ProPKGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameOperateRequest_descriptor_,
      ProPKGameOperateRequest::default_instance_,
      ProPKGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameOperateRequest));
  ProPKGameOperateRequest_MSGID_descriptor_ = ProPKGameOperateRequest_descriptor_->enum_type(0);
  ProPKGameTrust_descriptor_ = file->message_type(16);
  static const int ProPKGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTrust, istrust_),
  };
  ProPKGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameTrust_descriptor_,
      ProPKGameTrust::default_instance_,
      ProPKGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameTrust));
  ProPKGameTrust_MSGID_descriptor_ = ProPKGameTrust_descriptor_->enum_type(0);
  ProPKGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProPKGameOutMahRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, outcardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, outcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, outcardseriesflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, outcardseriesnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, outcardpoint_),
  };
  ProPKGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameOutMahRequest_descriptor_,
      ProPKGameOutMahRequest::default_instance_,
      ProPKGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameOutMahRequest));
  ProPKGameOutMahRequest_MSGID_descriptor_ = ProPKGameOutMahRequest_descriptor_->enum_type(0);
  ProPKGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProPKGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, cbleftcount_),
  };
  ProPKGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameCatchCard_descriptor_,
      ProPKGameCatchCard::default_instance_,
      ProPKGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameCatchCard));
  ProPKGameCatchCard_MSGID_descriptor_ = ProPKGameCatchCard_descriptor_->enum_type(0);
  PKMahList_descriptor_ = file->message_type(19);
  static const int PKMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKMahList, mahs_),
  };
  PKMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKMahList_descriptor_,
      PKMahList::default_instance_,
      PKMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKMahList));
  PKScoreList_descriptor_ = file->message_type(20);
  static const int PKScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKScoreList, roundscore_),
  };
  PKScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKScoreList_descriptor_,
      PKScoreList::default_instance_,
      PKScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKScoreList));
  PKAwardList_descriptor_ = file->message_type(21);
  static const int PKAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKAwardList, awardscore_),
  };
  PKAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKAwardList_descriptor_,
      PKAwardList::default_instance_,
      PKAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKAwardList));
  ProPKGameEnd_descriptor_ = file->message_type(22);
  static const int ProPKGameEnd_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, detailedscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, fangshuisaet_),
  };
  ProPKGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameEnd_descriptor_,
      ProPKGameEnd::default_instance_,
      ProPKGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameEnd));
  ProPKGameEnd_MSGID_descriptor_ = ProPKGameEnd_descriptor_->enum_type(0);
  ProPKGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProPKGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundRequest, text_),
  };
  ProPKGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameQuickSoundRequest_descriptor_,
      ProPKGameQuickSoundRequest::default_instance_,
      ProPKGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameQuickSoundRequest));
  ProPKGameQuickSoundRequest_MSGID_descriptor_ = ProPKGameQuickSoundRequest_descriptor_->enum_type(0);
  ProPKGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProPKGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundResponse, text_),
  };
  ProPKGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameQuickSoundResponse_descriptor_,
      ProPKGameQuickSoundResponse::default_instance_,
      ProPKGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameQuickSoundResponse));
  ProPKGameQuickSoundResponse_MSGID_descriptor_ = ProPKGameQuickSoundResponse_descriptor_->enum_type(0);
  ProPKGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProPKGameSendDiscardMahs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendDiscardMahs, deskcount_),
  };
  ProPKGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameSendDiscardMahs_descriptor_,
      ProPKGameSendDiscardMahs::default_instance_,
      ProPKGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameSendDiscardMahs));
  ProPKGameSendDiscardMahs_MSGID_descriptor_ = ProPKGameSendDiscardMahs_descriptor_->enum_type(0);
  PKWeaveItem_descriptor_ = file->message_type(26);
  static const int PKWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItem, cardsize_),
  };
  PKWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKWeaveItem_descriptor_,
      PKWeaveItem::default_instance_,
      PKWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKWeaveItem));
  PKWeaveItems_descriptor_ = file->message_type(27);
  static const int PKWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItems, items_),
  };
  PKWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PKWeaveItems_descriptor_,
      PKWeaveItems::default_instance_,
      PKWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PKWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PKWeaveItems));
  ProPKGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProPKGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendActionMahs, weaves_),
  };
  ProPKGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameSendActionMahs_descriptor_,
      ProPKGameSendActionMahs::default_instance_,
      ProPKGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameSendActionMahs));
  ProPKGameSendActionMahs_MSGID_descriptor_ = ProPKGameSendActionMahs_descriptor_->enum_type(0);
  ProPKGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProPKGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenRequest, time_),
  };
  ProPKGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameBrokenRequest_descriptor_,
      ProPKGameBrokenRequest::default_instance_,
      ProPKGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameBrokenRequest));
  ProPKGameBrokenRequest_MSGID_descriptor_ = ProPKGameBrokenRequest_descriptor_->enum_type(0);
  ProPKGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProPKGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenOperate, result_),
  };
  ProPKGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameBrokenOperate_descriptor_,
      ProPKGameBrokenOperate::default_instance_,
      ProPKGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameBrokenOperate));
  ProPKGameBrokenOperate_MSGID_descriptor_ = ProPKGameBrokenOperate_descriptor_->enum_type(0);
  ProPKGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProPKGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenNotify, operate_code_),
  };
  ProPKGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameBrokenNotify_descriptor_,
      ProPKGameBrokenNotify::default_instance_,
      ProPKGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameBrokenNotify));
  ProPKGameBrokenNotify_MSGID_descriptor_ = ProPKGameBrokenNotify_descriptor_->enum_type(0);
  ProPKGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProPKGameRuleConfig_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, have_magiccard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, have_redpeach3firstout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, hava_mustoutcard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, hava_baopei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, splaytime_),
  };
  ProPKGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameRuleConfig_descriptor_,
      ProPKGameRuleConfig::default_instance_,
      ProPKGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameRuleConfig));
  ProPKGameRuleConfig_MSGID_descriptor_ = ProPKGameRuleConfig_descriptor_->enum_type(0);
  ProPKGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProPKGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenStatus, left_time_),
  };
  ProPKGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameBrokenStatus_descriptor_,
      ProPKGameBrokenStatus::default_instance_,
      ProPKGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameBrokenStatus));
  ProPKGameBrokenStatus_MSGID_descriptor_ = ProPKGameBrokenStatus_descriptor_->enum_type(0);
  ProPKGameDataResp_descriptor_ = file->message_type(34);
  static const int ProPKGameDataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDataResp, type_),
  };
  ProPKGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameDataResp_descriptor_,
      ProPKGameDataResp::default_instance_,
      ProPKGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameDataResp));
  ProPKGameDataResp_MSGID_descriptor_ = ProPKGameDataResp_descriptor_->enum_type(0);
  ProPKGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProPKGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordRequest, url_),
  };
  ProPKGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameRecordRequest_descriptor_,
      ProPKGameRecordRequest::default_instance_,
      ProPKGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameRecordRequest));
  ProPKGameRecordRequest_MSGID_descriptor_ = ProPKGameRecordRequest_descriptor_->enum_type(0);
  ProPKGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProPKGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordResponse, url_),
  };
  ProPKGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameRecordResponse_descriptor_,
      ProPKGameRecordResponse::default_instance_,
      ProPKGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameRecordResponse));
  ProPKGameRecordResponse_MSGID_descriptor_ = ProPKGameRecordResponse_descriptor_->enum_type(0);
  ProPKGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProPKGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, strstreetname_),
  };
  ProPKGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserLocationRequest_descriptor_,
      ProPKGameUserLocationRequest::default_instance_,
      ProPKGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserLocationRequest));
  ProPKGameUserLocationRequest_MSGID_descriptor_ = ProPKGameUserLocationRequest_descriptor_->enum_type(0);
  ProPKGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProPKGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSyncCardResponse, handmahs_),
  };
  ProPKGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameSyncCardResponse_descriptor_,
      ProPKGameSyncCardResponse::default_instance_,
      ProPKGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameSyncCardResponse));
  ProPKGameSyncCardResponse_MSGID_descriptor_ = ProPKGameSyncCardResponse_descriptor_->enum_type(0);
  ProPKGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProPKGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserPhoneStatusRequest, userstatus_),
  };
  ProPKGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserPhoneStatusRequest_descriptor_,
      ProPKGameUserPhoneStatusRequest::default_instance_,
      ProPKGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserPhoneStatusRequest));
  ProPKGameUserPhoneStatusRequest_MSGID_descriptor_ = ProPKGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProPKGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProPKGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserGiveUpRequest, seat_id_),
  };
  ProPKGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserGiveUpRequest_descriptor_,
      ProPKGameUserGiveUpRequest::default_instance_,
      ProPKGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserGiveUpRequest));
  ProPKGameUserGiveUpRequest_MSGID_descriptor_ = ProPKGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProPKGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProPKGameUserHintRequest_offsets_[1] = {
  };
  ProPKGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserHintRequest_descriptor_,
      ProPKGameUserHintRequest::default_instance_,
      ProPKGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserHintRequest));
  ProPKGameUserHintRequest_MSGID_descriptor_ = ProPKGameUserHintRequest_descriptor_->enum_type(0);
  ProPKGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProPKGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserHintResponse, outmahs_),
  };
  ProPKGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserHintResponse_descriptor_,
      ProPKGameUserHintResponse::default_instance_,
      ProPKGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserHintResponse));
  ProPKGameUserHintResponse_MSGID_descriptor_ = ProPKGameUserHintResponse_descriptor_->enum_type(0);
  ProPKGameUserCallScoreResponse_descriptor_ = file->message_type(43);
  static const int ProPKGameUserCallScoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreResponse, usercallscore_),
  };
  ProPKGameUserCallScoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserCallScoreResponse_descriptor_,
      ProPKGameUserCallScoreResponse::default_instance_,
      ProPKGameUserCallScoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserCallScoreResponse));
  ProPKGameUserCallScoreResponse_MSGID_descriptor_ = ProPKGameUserCallScoreResponse_descriptor_->enum_type(0);
  ProPKGameUserCallScoreRequest_descriptor_ = file->message_type(44);
  static const int ProPKGameUserCallScoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreRequest, usercallscore_),
  };
  ProPKGameUserCallScoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProPKGameUserCallScoreRequest_descriptor_,
      ProPKGameUserCallScoreRequest::default_instance_,
      ProPKGameUserCallScoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProPKGameUserCallScoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProPKGameUserCallScoreRequest));
  ProPKGameUserCallScoreRequest_MSGID_descriptor_ = ProPKGameUserCallScoreRequest_descriptor_->enum_type(0);
  PKGameState_descriptor_ = file->enum_type(0);
  PKSEND_TYPE_descriptor_ = file->enum_type(1);
  PKKIGN_TYPE_descriptor_ = file->enum_type(2);
  PKBROKEN_TYPE_descriptor_ = file->enum_type(3);
  PKBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  PKBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lkpk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameStatusResponse_descriptor_, &ProPKGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameDeskInfoResponse_descriptor_, &ProPKGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameReadyNotify_descriptor_, &ProPKGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameReadyRequest_descriptor_, &ProPKGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameReadyResponse_descriptor_, &ProPKGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameStart_descriptor_, &ProPKGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameDiceNotify_descriptor_, &ProPKGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameDiceRequest_descriptor_, &ProPKGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameDiceResult_descriptor_, &ProPKGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameSendMahs_descriptor_, &ProPKGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameKingData_descriptor_, &ProPKGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameOutMahsResponse_descriptor_, &ProPKGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameTimerPower_descriptor_, &ProPKGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameOperateNotify_descriptor_, &ProPKGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameOperateResult_descriptor_, &ProPKGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameOperateRequest_descriptor_, &ProPKGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameTrust_descriptor_, &ProPKGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameOutMahRequest_descriptor_, &ProPKGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameCatchCard_descriptor_, &ProPKGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKMahList_descriptor_, &PKMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKScoreList_descriptor_, &PKScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKAwardList_descriptor_, &PKAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameEnd_descriptor_, &ProPKGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameQuickSoundRequest_descriptor_, &ProPKGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameQuickSoundResponse_descriptor_, &ProPKGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameSendDiscardMahs_descriptor_, &ProPKGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKWeaveItem_descriptor_, &PKWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PKWeaveItems_descriptor_, &PKWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameSendActionMahs_descriptor_, &ProPKGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameBrokenRequest_descriptor_, &ProPKGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameBrokenOperate_descriptor_, &ProPKGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameBrokenNotify_descriptor_, &ProPKGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameRuleConfig_descriptor_, &ProPKGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameBrokenStatus_descriptor_, &ProPKGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameDataResp_descriptor_, &ProPKGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameRecordRequest_descriptor_, &ProPKGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameRecordResponse_descriptor_, &ProPKGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserLocationRequest_descriptor_, &ProPKGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameSyncCardResponse_descriptor_, &ProPKGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserPhoneStatusRequest_descriptor_, &ProPKGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserGiveUpRequest_descriptor_, &ProPKGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserHintRequest_descriptor_, &ProPKGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserHintResponse_descriptor_, &ProPKGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserCallScoreResponse_descriptor_, &ProPKGameUserCallScoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProPKGameUserCallScoreRequest_descriptor_, &ProPKGameUserCallScoreRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lkpk_2eproto() {
  delete ProPKGameStatusResponse::default_instance_;
  delete ProPKGameStatusResponse_reflection_;
  delete ProPKGameDeskInfoResponse::default_instance_;
  delete ProPKGameDeskInfoResponse_reflection_;
  delete ProPKGameReadyNotify::default_instance_;
  delete ProPKGameReadyNotify_reflection_;
  delete ProPKGameReadyRequest::default_instance_;
  delete ProPKGameReadyRequest_reflection_;
  delete ProPKGameReadyResponse::default_instance_;
  delete ProPKGameReadyResponse_reflection_;
  delete ProPKGameStart::default_instance_;
  delete ProPKGameStart_reflection_;
  delete ProPKGameDiceNotify::default_instance_;
  delete ProPKGameDiceNotify_reflection_;
  delete ProPKGameDiceRequest::default_instance_;
  delete ProPKGameDiceRequest_reflection_;
  delete ProPKGameDiceResult::default_instance_;
  delete ProPKGameDiceResult_reflection_;
  delete ProPKGameSendMahs::default_instance_;
  delete ProPKGameSendMahs_reflection_;
  delete ProPKGameKingData::default_instance_;
  delete ProPKGameKingData_reflection_;
  delete ProPKGameOutMahsResponse::default_instance_;
  delete ProPKGameOutMahsResponse_reflection_;
  delete ProPKGameTimerPower::default_instance_;
  delete ProPKGameTimerPower_reflection_;
  delete ProPKGameOperateNotify::default_instance_;
  delete ProPKGameOperateNotify_reflection_;
  delete ProPKGameOperateResult::default_instance_;
  delete ProPKGameOperateResult_reflection_;
  delete ProPKGameOperateRequest::default_instance_;
  delete ProPKGameOperateRequest_reflection_;
  delete ProPKGameTrust::default_instance_;
  delete ProPKGameTrust_reflection_;
  delete ProPKGameOutMahRequest::default_instance_;
  delete ProPKGameOutMahRequest_reflection_;
  delete ProPKGameCatchCard::default_instance_;
  delete ProPKGameCatchCard_reflection_;
  delete PKMahList::default_instance_;
  delete PKMahList_reflection_;
  delete PKScoreList::default_instance_;
  delete PKScoreList_reflection_;
  delete PKAwardList::default_instance_;
  delete PKAwardList_reflection_;
  delete ProPKGameEnd::default_instance_;
  delete ProPKGameEnd_reflection_;
  delete ProPKGameQuickSoundRequest::default_instance_;
  delete ProPKGameQuickSoundRequest_reflection_;
  delete ProPKGameQuickSoundResponse::default_instance_;
  delete ProPKGameQuickSoundResponse_reflection_;
  delete ProPKGameSendDiscardMahs::default_instance_;
  delete ProPKGameSendDiscardMahs_reflection_;
  delete PKWeaveItem::default_instance_;
  delete PKWeaveItem_reflection_;
  delete PKWeaveItems::default_instance_;
  delete PKWeaveItems_reflection_;
  delete ProPKGameSendActionMahs::default_instance_;
  delete ProPKGameSendActionMahs_reflection_;
  delete ProPKGameBrokenRequest::default_instance_;
  delete ProPKGameBrokenRequest_reflection_;
  delete ProPKGameBrokenOperate::default_instance_;
  delete ProPKGameBrokenOperate_reflection_;
  delete ProPKGameBrokenNotify::default_instance_;
  delete ProPKGameBrokenNotify_reflection_;
  delete ProPKGameRuleConfig::default_instance_;
  delete ProPKGameRuleConfig_reflection_;
  delete ProPKGameBrokenStatus::default_instance_;
  delete ProPKGameBrokenStatus_reflection_;
  delete ProPKGameDataResp::default_instance_;
  delete ProPKGameDataResp_reflection_;
  delete ProPKGameRecordRequest::default_instance_;
  delete ProPKGameRecordRequest_reflection_;
  delete ProPKGameRecordResponse::default_instance_;
  delete ProPKGameRecordResponse_reflection_;
  delete ProPKGameUserLocationRequest::default_instance_;
  delete ProPKGameUserLocationRequest_reflection_;
  delete ProPKGameSyncCardResponse::default_instance_;
  delete ProPKGameSyncCardResponse_reflection_;
  delete ProPKGameUserPhoneStatusRequest::default_instance_;
  delete ProPKGameUserPhoneStatusRequest_reflection_;
  delete ProPKGameUserGiveUpRequest::default_instance_;
  delete ProPKGameUserGiveUpRequest_reflection_;
  delete ProPKGameUserHintRequest::default_instance_;
  delete ProPKGameUserHintRequest_reflection_;
  delete ProPKGameUserHintResponse::default_instance_;
  delete ProPKGameUserHintResponse_reflection_;
  delete ProPKGameUserCallScoreResponse::default_instance_;
  delete ProPKGameUserCallScoreResponse_reflection_;
  delete ProPKGameUserCallScoreRequest::default_instance_;
  delete ProPKGameUserCallScoreRequest_reflection_;
}

void protobuf_AddDesc_lkpk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nlkpk.proto\032\nbase.proto\"I\n\027ProPKGameSta"
    "tusResponse\022\034\n\006status\030\002 \001(\0162\014.PKGameStat"
    "e\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"@\n\031ProPKGameDeskInfo"
    "Response\022\021\n\tCellScore\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002"
    "ID\020\231\021\"D\n\024ProPKGameReadyNotify\022\014\n\004seat\030\002 "
    "\001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\232\021\"7\n\025P"
    "roPKGameReadyRequest\022\014\n\004seat\030\002 \001(\005\"\020\n\005MS"
    "GID\022\007\n\002ID\020\233\021\"8\n\026ProPKGameReadyResponse\022\014"
    "\n\004seat\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\234\021\"_\n\016ProPKG"
    "ameStart\022\022\n\nbankerseat\030\002 \001(\005\022\021\n\tgamecoun"
    "t\030\003 \001(\005\022\024\n\014outCardtimes\030\004 \001(\005\"\020\n\005MSGID\022\007"
    "\n\002ID\020\235\021\"V\n\023ProPKGameDiceNotify\022\014\n\004seat\030\002"
    " \001(\005\022\014\n\004time\030\003 \001(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n"
    "\005MSGID\022\007\n\002ID\020\236\021\"I\n\024ProPKGameDiceRequest\022"
    "\014\n\004seat\030\002 \001(\005\022\021\n\tdicecount\030\003 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\237\021\"X\n\023ProPKGameDiceResult\022\014\n\004sea"
    "t\030\002 \001(\005\022\016\n\006result\030\003 \003(\005\022\021\n\tdicecount\030\004 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\240\021\"\227\001\n\021ProPKGameSendMa"
    "hs\022\014\n\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\021\n\tmahsco"
    "unt\030\004 \003(\005\022\023\n\013cbLeftCount\030\005 \001(\005\022\033\n\023magicC"
    "ardLogicValue\030\006 \001(\005\022\017\n\007bRecome\030\007 \001(\010\"\020\n\005"
    "MSGID\022\007\n\002ID\020\241\021\"\203\002\n\021ProPKGameKingData\022\014\n\004"
    "seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\025\n\rdownKingScor"
    "e\030\004 \003(\005\022\021\n\tkingcount\030\005 \003(\005\022\020\n\010viceking\030\006"
    " \003(\005\022.\n\013notify_type\030\007 \001(\0162\014.PKSEND_TYPE:"
    "\013NORMAL_SEND\022(\n\tking_type\030\010 \001(\0162\014.PKKIGN"
    "_TYPE:\007KING_UP\022\024\n\014cbChongGuang\030\t \003(\005\022\024\n\014"
    "cbBaWangKing\030\n \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\242\021\"\271\001\n"
    "\030ProPKGameOutMahsResponse\022\014\n\004seat\030\002 \001(\005\022"
    "\017\n\007outMahs\030\003 \003(\005\022\020\n\010handmahs\030\004 \003(\005\022\021\n\tca"
    "rdCount\030\005 \001(\005\022\020\n\010cardType\030\006 \001(\005\022\022\n\nserie"
    "sFlag\030\007 \001(\005\022\022\n\nseriesNums\030\010 \001(\005\022\r\n\005point"
    "\030\t \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\243\021\"\371\001\n\023ProPKGameTi"
    "merPower\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\023\n\013"
    "outcardTime\030\004 \001(\005\022\026\n\016lastoutcardnum\030\005 \001("
    "\005\022\027\n\017lastoutcardtype\030\006 \001(\005\022\035\n\025lastoutcar"
    "dseriesflag\030\007 \001(\005\022\035\n\025lastoutcardseriesnu"
    "ms\030\010 \001(\005\022\030\n\020lastoutcardpoint\030\t \001(\005\022\026\n\016la"
    "stmagic4boom\030\n \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\244\021\"\211\001\n"
    "\026ProPKGameOperateNotify\022\022\n\nresumeSeat\030\002 "
    "\001(\005\022\022\n\nActionMask\030\003 \001(\005\022\022\n\nActionCard\030\004 "
    "\001(\005\022\014\n\004time\030\005 \001(\005\022\023\n\013operateseat\030\006 \001(\005\"\020"
    "\n\005MSGID\022\007\n\002ID\020\245\021\"\250\001\n\026ProPKGameOperateRes"
    "ult\022\024\n\014wOperateUser\030\002 \001(\005\022\024\n\014wProvideUse"
    "r\030\003 \001(\005\022\024\n\014wOperateCode\030\004 \001(\005\022\025\n\rcbOpera"
    "teCard\030\005 \001(\005\022\020\n\010handmahs\030\006 \003(\005\022\021\n\thandco"
    "unt\030\007 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\246\021\"f\n\027ProPKGame"
    "OperateRequest\022\014\n\004seat\030\002 \001(\005\022\024\n\014wOperate"
    "Code\030\003 \001(\005\022\025\n\rcbOperateCard\030\004 \001(\005\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\247\021\"A\n\016ProPKGameTrust\022\014\n\004seat\030\002 "
    "\001(\005\022\017\n\007isTrust\030\003 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\250\021\"\276"
    "\001\n\026ProPKGameOutMahRequest\022\014\n\004seat\030\002 \001(\005\022"
    "\017\n\007outMahs\030\003 \003(\005\022\022\n\noutcardnum\030\004 \001(\005\022\023\n\013"
    "outcardtype\030\005 \001(\005\022\031\n\021outcardseriesflag\030\006"
    " \001(\005\022\031\n\021outcardseriesnums\030\007 \001(\005\022\024\n\014outca"
    "rdpoint\030\010 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\251\021\"\207\001\n\022ProP"
    "KGameCatchCard\022\014\n\004seat\030\002 \001(\005\022\022\n\ncbCardDa"
    "ta\030\003 \001(\005\022\023\n\013wActionMask\030\004 \001(\005\022\023\n\013cbIsNot"
    "Gang\030\005 \001(\010\022\023\n\013cbLeftCount\030\006 \001(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\252\021\"\031\n\tPKMahList\022\014\n\004Mahs\030\001 \003(\005\"!\n\013"
    "PKScoreList\022\022\n\nroundScore\030\001 \003(\005\"B\n\013PKAwa"
    "rdList\022\014\n\004seat\030\001 \001(\005\022\021\n\tCardsData\030\002 \003(\005\022"
    "\022\n\nawardScore\030\003 \001(\005\"\221\004\n\014ProPKGameEnd\022\020\n\010"
    "lGameTax\030\002 \001(\005\022\024\n\014cbChongGuang\030\003 \003(\005\022\024\n\014"
    "cbBaWangKing\030\004 \003(\005\022\024\n\014wProvideUser\030\005 \001(\005"
    "\022\023\n\013cbChiHuCard\030\006 \001(\005\022\023\n\013dwChiHuKind\030\007 \003"
    "(\005\022\024\n\014dwChiHuRight\030\010 \003(\005\022\030\n\020lTotaslGameS"
    "core\030\t \003(\005\022\031\n\021lCurrentGameScore\030\n \003(\005\022\032\n"
    "\022lCurrentPointScore\030\013 \003(\005\022\024\n\014lAttachScor"
    "e\030\014 \003(\005\022\"\n\016cbHandCardData\030\r \003(\0132\n.PKMahL"
    "ist\022%\n\017cbAwardCardData\030\016 \003(\0132\014.PKAwardLi"
    "st\022\025\n\rlOnlyWinScore\030\017 \003(\005\022\021\n\tbRoundEnd\030\020"
    " \001(\010\022\024\n\014lHuiTouScore\030\021 \003(\005\022\022\n\nbZhuangWin"
    "\030\022 \001(\010\022\031\n\021cbJiangMaCardData\030\023 \003(\005\022$\n\016det"
    "ailedScores\030\024 \003(\0132\014.PKScoreList\022\024\n\014fangS"
    "huiSaet\030\025 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\253\021\"p\n\032ProPK"
    "GameQuickSoundRequest\022\017\n\007desk_id\030\002 \001(\005\022\017"
    "\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004tex"
    "t\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\254\021\"q\n\033ProPKGameQu"
    "ickSoundResponse\022\017\n\007desk_id\030\002 \001(\005\022\017\n\007sea"
    "t_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004text\030\005 \001"
    "(\014\"\020\n\005MSGID\022\007\n\002ID\020\255\021\"p\n\030ProPKGameSendDis"
    "cardMahs\022\017\n\007seat_id\030\002 \001(\005\022\036\n\ncbCardData\030"
    "\003 \003(\0132\n.PKMahList\022\021\n\tdeskCount\030\004 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\256\021\"[\n\013PKWeaveItem\022\021\n\tweaveKi"
    "nd\030\001 \001(\005\022\022\n\ncentercard\030\002 \001(\005\022\023\n\013provideU"
    "ser\030\003 \001(\005\022\020\n\010cardsize\030\004 \001(\005\"+\n\014PKWeaveIt"
    "ems\022\033\n\005items\030\001 \003(\0132\014.PKWeaveItem\"[\n\027ProP"
    "KGameSendActionMahs\022\017\n\007seat_id\030\002 \001(\005\022\035\n\006"
    "weaves\030\003 \003(\0132\r.PKWeaveItems\"\020\n\005MSGID\022\007\n\002"
    "ID\020\257\021\"g\n\026ProPKGameBrokenRequest\022\017\n\007seat_"
    "id\030\002 \001(\005\022\034\n\004type\030\003 \001(\0162\016.PKBROKEN_TYPE\022\014"
    "\n\004time\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\260\021\"k\n\026ProPKG"
    "ameBrokenOperate\022\017\n\007seat_id\030\002 \001(\005\022.\n\006res"
    "ult\030\003 \001(\0162\021.PKBROKEN_OPERATE:\013BO_DISAGRE"
    "E\"\020\n\005MSGID\022\007\n\002ID\020\261\021\"l\n\025ProPKGameBrokenNo"
    "tify\022\017\n\007seat_id\030\002 \001(\005\0220\n\014operate_code\030\003 "
    "\001(\0162\016.PKBROKEN_CODE:\nBC_SUCCESS\"\020\n\005MSGID"
    "\022\007\n\002ID\020\262\021\"\313\002\n\023ProPKGameRuleConfig\022\022\n\ngam"
    "e_round\030\001 \001(\005\022\021\n\tneed_card\030\002 \001(\005\022\026\n\016have"
    "_MagicCard\030\003 \001(\010\022\036\n\026have_RedPeach3FirstO"
    "ut\030\004 \001(\010\022\030\n\020hava_MustOutCard\030\005 \001(\010\022\023\n\013nM"
    "asterSeat\030\006 \001(\005\022\032\n\022current_game_count\030\007 "
    "\001(\005\022\023\n\013have_jianma\030\010 \001(\010\022\025\n\rnChongguanNu"
    "m\030\t \001(\005\022\023\n\013hava_BaoPei\030\n \001(\010\022\022\n\nnPlayerN"
    "um\030\013 \001(\005\022\020\n\010sRoomNum\030\014 \001(\014\022\021\n\tsPlayTime\030"
    "\r \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\263\021\"h\n\025ProPKGameBrok"
    "enStatus\022\023\n\013broken_seat\030\001 \001(\005\022\025\n\rbroken_"
    "status\030\002 \003(\010\022\021\n\tleft_time\030\003 \001(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\264\021\"H\n\021ProPKGameDataResp\022\023\n\013total_"
    "score\030\001 \003(\005\022\014\n\004type\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID"
    "\020\265\021\"H\n\026ProPKGameRecordRequest\022\017\n\007seat_id"
    "\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\266\021\"I\n"
    "\027ProPKGameRecordResponse\022\017\n\007seat_id\030\001 \001("
    "\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\267\021\"\226\001\n\034Pro"
    "PKGameUserLocationRequest\022\017\n\007seat_id\030\001 \001"
    "(\005\022\023\n\013dwlongitude\030\002 \001(\001\022\022\n\ndwlatitude\030\003 "
    "\001(\001\022\023\n\013strDistrict\030\004 \001(\014\022\025\n\rstrStreetNam"
    "e\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\270\021\"M\n\031ProPKGameSy"
    "ncCardResponse\022\014\n\004seat\030\002 \001(\005\022\020\n\010handmahs"
    "\030\003 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\271\021\"X\n\037ProPKGameUse"
    "rPhoneStatusRequest\022\017\n\007seat_id\030\001 \001(\005\022\022\n\n"
    "userstatus\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\272\021\"\?\n\032Pr"
    "oPKGameUserGiveUpRequest\022\017\n\007seat_id\030\001 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\273\021\",\n\030ProPKGameUserHint"
    "Request\"\020\n\005MSGID\022\007\n\002ID\020\274\021\"M\n\031ProPKGameUs"
    "erHintResponse\022\r\n\005lenth\030\001 \001(\005\022\017\n\007outMahs"
    "\030\002 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\275\021\"W\n\036ProPKGameUse"
    "rCallScoreResponse\022\014\n\004seat\030\001 \001(\005\022\025\n\ruser"
    "callscore\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\276\021\"V\n\035Pro"
    "PKGameUserCallScoreRequest\022\014\n\004seat\030\001 \001(\005"
    "\022\025\n\rusercallscore\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\277"
    "\021*\202\001\n\013PKGameState\022\020\n\014PK_GAME_IDLE\020\001\022\025\n\021P"
    "K_GAME_DICE_BANK\020\002\022\020\n\014PK_GAME_SEND\020\003\022\025\n\021"
    "PK_GAME_DICE_KING\020\004\022\020\n\014PK_GAME_PLAY\020\005\022\017\n"
    "\013PK_GAME_END\020\006*/\n\013PKSEND_TYPE\022\017\n\013NORMAL_"
    "SEND\020\001\022\017\n\013RECOME_SEND\020\002*<\n\013PKKIGN_TYPE\022\013"
    "\n\007KING_UP\020\001\022\017\n\013KING_HUITOU\020\002\022\017\n\013KING_MAI"
    "LEI\020\003*D\n\rPKBROKEN_TYPE\022\022\n\016BT_MASTER_QUIT"
    "\020\000\022\020\n\014BT_USER_QUIT\020\001\022\r\n\tBT_BROKEN\020\002*1\n\020P"
    "KBROKEN_OPERATE\022\017\n\013BO_DISAGREE\020\000\022\014\n\010BO_A"
    "GREE\020\001*W\n\rPKBROKEN_CODE\022\016\n\nBC_SUCCESS\020\000\022"
    "\017\n\013BC_DISAGREE\020\001\022\023\n\017BC_QUIT_SUCCESS\020\002\022\020\n"
    "\014BC_EXCEPTION\020\003", 5735);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lkpk.proto", &protobuf_RegisterTypes);
  ProPKGameStatusResponse::default_instance_ = new ProPKGameStatusResponse();
  ProPKGameDeskInfoResponse::default_instance_ = new ProPKGameDeskInfoResponse();
  ProPKGameReadyNotify::default_instance_ = new ProPKGameReadyNotify();
  ProPKGameReadyRequest::default_instance_ = new ProPKGameReadyRequest();
  ProPKGameReadyResponse::default_instance_ = new ProPKGameReadyResponse();
  ProPKGameStart::default_instance_ = new ProPKGameStart();
  ProPKGameDiceNotify::default_instance_ = new ProPKGameDiceNotify();
  ProPKGameDiceRequest::default_instance_ = new ProPKGameDiceRequest();
  ProPKGameDiceResult::default_instance_ = new ProPKGameDiceResult();
  ProPKGameSendMahs::default_instance_ = new ProPKGameSendMahs();
  ProPKGameKingData::default_instance_ = new ProPKGameKingData();
  ProPKGameOutMahsResponse::default_instance_ = new ProPKGameOutMahsResponse();
  ProPKGameTimerPower::default_instance_ = new ProPKGameTimerPower();
  ProPKGameOperateNotify::default_instance_ = new ProPKGameOperateNotify();
  ProPKGameOperateResult::default_instance_ = new ProPKGameOperateResult();
  ProPKGameOperateRequest::default_instance_ = new ProPKGameOperateRequest();
  ProPKGameTrust::default_instance_ = new ProPKGameTrust();
  ProPKGameOutMahRequest::default_instance_ = new ProPKGameOutMahRequest();
  ProPKGameCatchCard::default_instance_ = new ProPKGameCatchCard();
  PKMahList::default_instance_ = new PKMahList();
  PKScoreList::default_instance_ = new PKScoreList();
  PKAwardList::default_instance_ = new PKAwardList();
  ProPKGameEnd::default_instance_ = new ProPKGameEnd();
  ProPKGameQuickSoundRequest::default_instance_ = new ProPKGameQuickSoundRequest();
  ProPKGameQuickSoundResponse::default_instance_ = new ProPKGameQuickSoundResponse();
  ProPKGameSendDiscardMahs::default_instance_ = new ProPKGameSendDiscardMahs();
  PKWeaveItem::default_instance_ = new PKWeaveItem();
  PKWeaveItems::default_instance_ = new PKWeaveItems();
  ProPKGameSendActionMahs::default_instance_ = new ProPKGameSendActionMahs();
  ProPKGameBrokenRequest::default_instance_ = new ProPKGameBrokenRequest();
  ProPKGameBrokenOperate::default_instance_ = new ProPKGameBrokenOperate();
  ProPKGameBrokenNotify::default_instance_ = new ProPKGameBrokenNotify();
  ProPKGameRuleConfig::default_instance_ = new ProPKGameRuleConfig();
  ProPKGameBrokenStatus::default_instance_ = new ProPKGameBrokenStatus();
  ProPKGameDataResp::default_instance_ = new ProPKGameDataResp();
  ProPKGameRecordRequest::default_instance_ = new ProPKGameRecordRequest();
  ProPKGameRecordResponse::default_instance_ = new ProPKGameRecordResponse();
  ProPKGameUserLocationRequest::default_instance_ = new ProPKGameUserLocationRequest();
  ProPKGameSyncCardResponse::default_instance_ = new ProPKGameSyncCardResponse();
  ProPKGameUserPhoneStatusRequest::default_instance_ = new ProPKGameUserPhoneStatusRequest();
  ProPKGameUserGiveUpRequest::default_instance_ = new ProPKGameUserGiveUpRequest();
  ProPKGameUserHintRequest::default_instance_ = new ProPKGameUserHintRequest();
  ProPKGameUserHintResponse::default_instance_ = new ProPKGameUserHintResponse();
  ProPKGameUserCallScoreResponse::default_instance_ = new ProPKGameUserCallScoreResponse();
  ProPKGameUserCallScoreRequest::default_instance_ = new ProPKGameUserCallScoreRequest();
  ProPKGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProPKGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameStart::default_instance_->InitAsDefaultInstance();
  ProPKGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProPKGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProPKGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProPKGameKingData::default_instance_->InitAsDefaultInstance();
  ProPKGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProPKGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProPKGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProPKGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameTrust::default_instance_->InitAsDefaultInstance();
  ProPKGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameCatchCard::default_instance_->InitAsDefaultInstance();
  PKMahList::default_instance_->InitAsDefaultInstance();
  PKScoreList::default_instance_->InitAsDefaultInstance();
  PKAwardList::default_instance_->InitAsDefaultInstance();
  ProPKGameEnd::default_instance_->InitAsDefaultInstance();
  ProPKGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  PKWeaveItem::default_instance_->InitAsDefaultInstance();
  PKWeaveItems::default_instance_->InitAsDefaultInstance();
  ProPKGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProPKGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProPKGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProPKGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProPKGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProPKGameDataResp::default_instance_->InitAsDefaultInstance();
  ProPKGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProPKGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameUserCallScoreResponse::default_instance_->InitAsDefaultInstance();
  ProPKGameUserCallScoreRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lkpk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lkpk_2eproto {
  StaticDescriptorInitializer_lkpk_2eproto() {
    protobuf_AddDesc_lkpk_2eproto();
  }
} static_descriptor_initializer_lkpk_2eproto_;
const ::google::protobuf::EnumDescriptor* PKGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKGameState_descriptor_;
}
bool PKGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PKSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKSEND_TYPE_descriptor_;
}
bool PKSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PKKIGN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKKIGN_TYPE_descriptor_;
}
bool PKKIGN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PKBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKBROKEN_TYPE_descriptor_;
}
bool PKBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PKBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKBROKEN_OPERATE_descriptor_;
}
bool PKBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PKBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKBROKEN_CODE_descriptor_;
}
bool PKBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameStatusResponse_MSGID_descriptor_;
}
bool ProPKGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameStatusResponse_MSGID ProPKGameStatusResponse::ID;
const ProPKGameStatusResponse_MSGID ProPKGameStatusResponse::MSGID_MIN;
const ProPKGameStatusResponse_MSGID ProPKGameStatusResponse::MSGID_MAX;
const int ProPKGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProPKGameStatusResponse::ProPKGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameStatusResponse::InitAsDefaultInstance() {
}

ProPKGameStatusResponse::ProPKGameStatusResponse(const ProPKGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameStatusResponse::~ProPKGameStatusResponse() {
  SharedDtor();
}

void ProPKGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameStatusResponse_descriptor_;
}

const ProPKGameStatusResponse& ProPKGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameStatusResponse* ProPKGameStatusResponse::default_instance_ = NULL;

ProPKGameStatusResponse* ProPKGameStatusResponse::New() const {
  return new ProPKGameStatusResponse;
}

void ProPKGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PKGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKGameState_IsValid(value)) {
            set_status(static_cast< ::PKGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PKGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PKGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PKGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameStatusResponse::MergeFrom(const ProPKGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameStatusResponse::CopyFrom(const ProPKGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameStatusResponse::IsInitialized() const {

  return true;
}

void ProPKGameStatusResponse::Swap(ProPKGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameStatusResponse_descriptor_;
  metadata.reflection = ProPKGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProPKGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameDeskInfoResponse_MSGID ProPKGameDeskInfoResponse::ID;
const ProPKGameDeskInfoResponse_MSGID ProPKGameDeskInfoResponse::MSGID_MIN;
const ProPKGameDeskInfoResponse_MSGID ProPKGameDeskInfoResponse::MSGID_MAX;
const int ProPKGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProPKGameDeskInfoResponse::ProPKGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProPKGameDeskInfoResponse::ProPKGameDeskInfoResponse(const ProPKGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameDeskInfoResponse::~ProPKGameDeskInfoResponse() {
  SharedDtor();
}

void ProPKGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDeskInfoResponse_descriptor_;
}

const ProPKGameDeskInfoResponse& ProPKGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameDeskInfoResponse* ProPKGameDeskInfoResponse::default_instance_ = NULL;

ProPKGameDeskInfoResponse* ProPKGameDeskInfoResponse::New() const {
  return new ProPKGameDeskInfoResponse;
}

void ProPKGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameDeskInfoResponse::MergeFrom(const ProPKGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameDeskInfoResponse::CopyFrom(const ProPKGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProPKGameDeskInfoResponse::Swap(ProPKGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProPKGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameReadyNotify_MSGID_descriptor_;
}
bool ProPKGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameReadyNotify_MSGID ProPKGameReadyNotify::ID;
const ProPKGameReadyNotify_MSGID ProPKGameReadyNotify::MSGID_MIN;
const ProPKGameReadyNotify_MSGID ProPKGameReadyNotify::MSGID_MAX;
const int ProPKGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameReadyNotify::kSeatFieldNumber;
const int ProPKGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProPKGameReadyNotify::ProPKGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameReadyNotify::InitAsDefaultInstance() {
}

ProPKGameReadyNotify::ProPKGameReadyNotify(const ProPKGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameReadyNotify::~ProPKGameReadyNotify() {
  SharedDtor();
}

void ProPKGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameReadyNotify_descriptor_;
}

const ProPKGameReadyNotify& ProPKGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameReadyNotify* ProPKGameReadyNotify::default_instance_ = NULL;

ProPKGameReadyNotify* ProPKGameReadyNotify::New() const {
  return new ProPKGameReadyNotify;
}

void ProPKGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameReadyNotify::MergeFrom(const ProPKGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameReadyNotify::CopyFrom(const ProPKGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameReadyNotify::IsInitialized() const {

  return true;
}

void ProPKGameReadyNotify::Swap(ProPKGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameReadyNotify_descriptor_;
  metadata.reflection = ProPKGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameReadyRequest_MSGID_descriptor_;
}
bool ProPKGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameReadyRequest_MSGID ProPKGameReadyRequest::ID;
const ProPKGameReadyRequest_MSGID ProPKGameReadyRequest::MSGID_MIN;
const ProPKGameReadyRequest_MSGID ProPKGameReadyRequest::MSGID_MAX;
const int ProPKGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProPKGameReadyRequest::ProPKGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameReadyRequest::InitAsDefaultInstance() {
}

ProPKGameReadyRequest::ProPKGameReadyRequest(const ProPKGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameReadyRequest::~ProPKGameReadyRequest() {
  SharedDtor();
}

void ProPKGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameReadyRequest_descriptor_;
}

const ProPKGameReadyRequest& ProPKGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameReadyRequest* ProPKGameReadyRequest::default_instance_ = NULL;

ProPKGameReadyRequest* ProPKGameReadyRequest::New() const {
  return new ProPKGameReadyRequest;
}

void ProPKGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameReadyRequest::MergeFrom(const ProPKGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameReadyRequest::CopyFrom(const ProPKGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameReadyRequest::IsInitialized() const {

  return true;
}

void ProPKGameReadyRequest::Swap(ProPKGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameReadyRequest_descriptor_;
  metadata.reflection = ProPKGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameReadyResponse_MSGID_descriptor_;
}
bool ProPKGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameReadyResponse_MSGID ProPKGameReadyResponse::ID;
const ProPKGameReadyResponse_MSGID ProPKGameReadyResponse::MSGID_MIN;
const ProPKGameReadyResponse_MSGID ProPKGameReadyResponse::MSGID_MAX;
const int ProPKGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameReadyResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProPKGameReadyResponse::ProPKGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameReadyResponse::InitAsDefaultInstance() {
}

ProPKGameReadyResponse::ProPKGameReadyResponse(const ProPKGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameReadyResponse::~ProPKGameReadyResponse() {
  SharedDtor();
}

void ProPKGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameReadyResponse_descriptor_;
}

const ProPKGameReadyResponse& ProPKGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameReadyResponse* ProPKGameReadyResponse::default_instance_ = NULL;

ProPKGameReadyResponse* ProPKGameReadyResponse::New() const {
  return new ProPKGameReadyResponse;
}

void ProPKGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameReadyResponse::MergeFrom(const ProPKGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameReadyResponse::CopyFrom(const ProPKGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameReadyResponse::IsInitialized() const {

  return true;
}

void ProPKGameReadyResponse::Swap(ProPKGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameReadyResponse_descriptor_;
  metadata.reflection = ProPKGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameStart_MSGID_descriptor_;
}
bool ProPKGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameStart_MSGID ProPKGameStart::ID;
const ProPKGameStart_MSGID ProPKGameStart::MSGID_MIN;
const ProPKGameStart_MSGID ProPKGameStart::MSGID_MAX;
const int ProPKGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameStart::kBankerseatFieldNumber;
const int ProPKGameStart::kGamecountFieldNumber;
const int ProPKGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProPKGameStart::ProPKGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameStart::InitAsDefaultInstance() {
}

ProPKGameStart::ProPKGameStart(const ProPKGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameStart::~ProPKGameStart() {
  SharedDtor();
}

void ProPKGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameStart_descriptor_;
}

const ProPKGameStart& ProPKGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameStart* ProPKGameStart::default_instance_ = NULL;

ProPKGameStart* ProPKGameStart::New() const {
  return new ProPKGameStart;
}

void ProPKGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameStart::MergeFrom(const ProPKGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameStart::CopyFrom(const ProPKGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameStart::IsInitialized() const {

  return true;
}

void ProPKGameStart::Swap(ProPKGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameStart_descriptor_;
  metadata.reflection = ProPKGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDiceNotify_MSGID_descriptor_;
}
bool ProPKGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameDiceNotify_MSGID ProPKGameDiceNotify::ID;
const ProPKGameDiceNotify_MSGID ProPKGameDiceNotify::MSGID_MIN;
const ProPKGameDiceNotify_MSGID ProPKGameDiceNotify::MSGID_MAX;
const int ProPKGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameDiceNotify::kSeatFieldNumber;
const int ProPKGameDiceNotify::kTimeFieldNumber;
const int ProPKGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProPKGameDiceNotify::ProPKGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameDiceNotify::InitAsDefaultInstance() {
}

ProPKGameDiceNotify::ProPKGameDiceNotify(const ProPKGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameDiceNotify::~ProPKGameDiceNotify() {
  SharedDtor();
}

void ProPKGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDiceNotify_descriptor_;
}

const ProPKGameDiceNotify& ProPKGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameDiceNotify* ProPKGameDiceNotify::default_instance_ = NULL;

ProPKGameDiceNotify* ProPKGameDiceNotify::New() const {
  return new ProPKGameDiceNotify;
}

void ProPKGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameDiceNotify::MergeFrom(const ProPKGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameDiceNotify::CopyFrom(const ProPKGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameDiceNotify::IsInitialized() const {

  return true;
}

void ProPKGameDiceNotify::Swap(ProPKGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameDiceNotify_descriptor_;
  metadata.reflection = ProPKGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDiceRequest_MSGID_descriptor_;
}
bool ProPKGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameDiceRequest_MSGID ProPKGameDiceRequest::ID;
const ProPKGameDiceRequest_MSGID ProPKGameDiceRequest::MSGID_MIN;
const ProPKGameDiceRequest_MSGID ProPKGameDiceRequest::MSGID_MAX;
const int ProPKGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameDiceRequest::kSeatFieldNumber;
const int ProPKGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProPKGameDiceRequest::ProPKGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameDiceRequest::InitAsDefaultInstance() {
}

ProPKGameDiceRequest::ProPKGameDiceRequest(const ProPKGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameDiceRequest::~ProPKGameDiceRequest() {
  SharedDtor();
}

void ProPKGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDiceRequest_descriptor_;
}

const ProPKGameDiceRequest& ProPKGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameDiceRequest* ProPKGameDiceRequest::default_instance_ = NULL;

ProPKGameDiceRequest* ProPKGameDiceRequest::New() const {
  return new ProPKGameDiceRequest;
}

void ProPKGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameDiceRequest::MergeFrom(const ProPKGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameDiceRequest::CopyFrom(const ProPKGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameDiceRequest::IsInitialized() const {

  return true;
}

void ProPKGameDiceRequest::Swap(ProPKGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameDiceRequest_descriptor_;
  metadata.reflection = ProPKGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDiceResult_MSGID_descriptor_;
}
bool ProPKGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameDiceResult_MSGID ProPKGameDiceResult::ID;
const ProPKGameDiceResult_MSGID ProPKGameDiceResult::MSGID_MIN;
const ProPKGameDiceResult_MSGID ProPKGameDiceResult::MSGID_MAX;
const int ProPKGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameDiceResult::kSeatFieldNumber;
const int ProPKGameDiceResult::kResultFieldNumber;
const int ProPKGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProPKGameDiceResult::ProPKGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameDiceResult::InitAsDefaultInstance() {
}

ProPKGameDiceResult::ProPKGameDiceResult(const ProPKGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameDiceResult::~ProPKGameDiceResult() {
  SharedDtor();
}

void ProPKGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDiceResult_descriptor_;
}

const ProPKGameDiceResult& ProPKGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameDiceResult* ProPKGameDiceResult::default_instance_ = NULL;

ProPKGameDiceResult* ProPKGameDiceResult::New() const {
  return new ProPKGameDiceResult;
}

void ProPKGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameDiceResult::MergeFrom(const ProPKGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameDiceResult::CopyFrom(const ProPKGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameDiceResult::IsInitialized() const {

  return true;
}

void ProPKGameDiceResult::Swap(ProPKGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameDiceResult_descriptor_;
  metadata.reflection = ProPKGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSendMahs_MSGID_descriptor_;
}
bool ProPKGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameSendMahs_MSGID ProPKGameSendMahs::ID;
const ProPKGameSendMahs_MSGID ProPKGameSendMahs::MSGID_MIN;
const ProPKGameSendMahs_MSGID ProPKGameSendMahs::MSGID_MAX;
const int ProPKGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameSendMahs::kSeatFieldNumber;
const int ProPKGameSendMahs::kMahsFieldNumber;
const int ProPKGameSendMahs::kMahscountFieldNumber;
const int ProPKGameSendMahs::kCbLeftCountFieldNumber;
const int ProPKGameSendMahs::kMagicCardLogicValueFieldNumber;
const int ProPKGameSendMahs::kBRecomeFieldNumber;
#endif  // !_MSC_VER

ProPKGameSendMahs::ProPKGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameSendMahs::InitAsDefaultInstance() {
}

ProPKGameSendMahs::ProPKGameSendMahs(const ProPKGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  magiccardlogicvalue_ = 0;
  brecome_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameSendMahs::~ProPKGameSendMahs() {
  SharedDtor();
}

void ProPKGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSendMahs_descriptor_;
}

const ProPKGameSendMahs& ProPKGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameSendMahs* ProPKGameSendMahs::default_instance_ = NULL;

ProPKGameSendMahs* ProPKGameSendMahs::New() const {
  return new ProPKGameSendMahs;
}

void ProPKGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
    magiccardlogicvalue_ = 0;
    brecome_ = false;
  }
  mahs_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magicCardLogicValue;
        break;
      }

      // optional int32 magicCardLogicValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicCardLogicValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magiccardlogicvalue_)));
          set_has_magiccardlogicvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bRecome;
        break;
      }

      // optional bool bRecome = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRecome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &brecome_)));
          set_has_brecome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  // optional int32 magicCardLogicValue = 6;
  if (has_magiccardlogicvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->magiccardlogicvalue(), output);
  }

  // optional bool bRecome = 7;
  if (has_brecome()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->brecome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  // optional int32 magicCardLogicValue = 6;
  if (has_magiccardlogicvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->magiccardlogicvalue(), target);
  }

  // optional bool bRecome = 7;
  if (has_brecome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->brecome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

    // optional int32 magicCardLogicValue = 6;
    if (has_magiccardlogicvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magiccardlogicvalue());
    }

    // optional bool bRecome = 7;
    if (has_brecome()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameSendMahs::MergeFrom(const ProPKGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
    if (from.has_magiccardlogicvalue()) {
      set_magiccardlogicvalue(from.magiccardlogicvalue());
    }
    if (from.has_brecome()) {
      set_brecome(from.brecome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameSendMahs::CopyFrom(const ProPKGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameSendMahs::IsInitialized() const {

  return true;
}

void ProPKGameSendMahs::Swap(ProPKGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(magiccardlogicvalue_, other->magiccardlogicvalue_);
    std::swap(brecome_, other->brecome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameSendMahs_descriptor_;
  metadata.reflection = ProPKGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameKingData_MSGID_descriptor_;
}
bool ProPKGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameKingData_MSGID ProPKGameKingData::ID;
const ProPKGameKingData_MSGID ProPKGameKingData::MSGID_MIN;
const ProPKGameKingData_MSGID ProPKGameKingData::MSGID_MAX;
const int ProPKGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameKingData::kSeatFieldNumber;
const int ProPKGameKingData::kMahsFieldNumber;
const int ProPKGameKingData::kDownKingScoreFieldNumber;
const int ProPKGameKingData::kKingcountFieldNumber;
const int ProPKGameKingData::kVicekingFieldNumber;
const int ProPKGameKingData::kNotifyTypeFieldNumber;
const int ProPKGameKingData::kKingTypeFieldNumber;
const int ProPKGameKingData::kCbChongGuangFieldNumber;
const int ProPKGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProPKGameKingData::ProPKGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameKingData::InitAsDefaultInstance() {
}

ProPKGameKingData::ProPKGameKingData(const ProPKGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameKingData::~ProPKGameKingData() {
  SharedDtor();
}

void ProPKGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameKingData_descriptor_;
}

const ProPKGameKingData& ProPKGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameKingData* ProPKGameKingData::default_instance_ = NULL;

ProPKGameKingData* ProPKGameKingData::New() const {
  return new ProPKGameKingData;
}

void ProPKGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .PKSEND_TYPE notify_type = 7 [default = NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::PKSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .PKKIGN_TYPE king_type = 8 [default = KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKKIGN_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::PKKIGN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .PKSEND_TYPE notify_type = 7 [default = NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .PKKIGN_TYPE king_type = 8 [default = KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .PKSEND_TYPE notify_type = 7 [default = NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .PKKIGN_TYPE king_type = 8 [default = KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .PKSEND_TYPE notify_type = 7 [default = NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .PKKIGN_TYPE king_type = 8 [default = KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameKingData::MergeFrom(const ProPKGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameKingData::CopyFrom(const ProPKGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameKingData::IsInitialized() const {

  return true;
}

void ProPKGameKingData::Swap(ProPKGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameKingData_descriptor_;
  metadata.reflection = ProPKGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOutMahsResponse_MSGID_descriptor_;
}
bool ProPKGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameOutMahsResponse_MSGID ProPKGameOutMahsResponse::ID;
const ProPKGameOutMahsResponse_MSGID ProPKGameOutMahsResponse::MSGID_MIN;
const ProPKGameOutMahsResponse_MSGID ProPKGameOutMahsResponse::MSGID_MAX;
const int ProPKGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameOutMahsResponse::kSeatFieldNumber;
const int ProPKGameOutMahsResponse::kOutMahsFieldNumber;
const int ProPKGameOutMahsResponse::kHandmahsFieldNumber;
const int ProPKGameOutMahsResponse::kCardCountFieldNumber;
const int ProPKGameOutMahsResponse::kCardTypeFieldNumber;
const int ProPKGameOutMahsResponse::kSeriesFlagFieldNumber;
const int ProPKGameOutMahsResponse::kSeriesNumsFieldNumber;
const int ProPKGameOutMahsResponse::kPointFieldNumber;
#endif  // !_MSC_VER

ProPKGameOutMahsResponse::ProPKGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameOutMahsResponse::InitAsDefaultInstance() {
}

ProPKGameOutMahsResponse::ProPKGameOutMahsResponse(const ProPKGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  seriesflag_ = 0;
  seriesnums_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameOutMahsResponse::~ProPKGameOutMahsResponse() {
  SharedDtor();
}

void ProPKGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOutMahsResponse_descriptor_;
}

const ProPKGameOutMahsResponse& ProPKGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameOutMahsResponse* ProPKGameOutMahsResponse::default_instance_ = NULL;

ProPKGameOutMahsResponse* ProPKGameOutMahsResponse::New() const {
  return new ProPKGameOutMahsResponse;
}

void ProPKGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
    seriesflag_ = 0;
    seriesnums_ = 0;
    point_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_seriesFlag;
        break;
      }

      // optional int32 seriesFlag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesflag_)));
          set_has_seriesflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_seriesNums;
        break;
      }

      // optional int32 seriesNums = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesnums_)));
          set_has_seriesnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_point;
        break;
      }

      // optional int32 point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // optional int32 seriesFlag = 7;
  if (has_seriesflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->seriesflag(), output);
  }

  // optional int32 seriesNums = 8;
  if (has_seriesnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->seriesnums(), output);
  }

  // optional int32 point = 9;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // optional int32 seriesFlag = 7;
  if (has_seriesflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->seriesflag(), target);
  }

  // optional int32 seriesNums = 8;
  if (has_seriesnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->seriesnums(), target);
  }

  // optional int32 point = 9;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 seriesFlag = 7;
    if (has_seriesflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesflag());
    }

    // optional int32 seriesNums = 8;
    if (has_seriesnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesnums());
    }

    // optional int32 point = 9;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameOutMahsResponse::MergeFrom(const ProPKGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_seriesflag()) {
      set_seriesflag(from.seriesflag());
    }
    if (from.has_seriesnums()) {
      set_seriesnums(from.seriesnums());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameOutMahsResponse::CopyFrom(const ProPKGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProPKGameOutMahsResponse::Swap(ProPKGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(seriesflag_, other->seriesflag_);
    std::swap(seriesnums_, other->seriesnums_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameOutMahsResponse_descriptor_;
  metadata.reflection = ProPKGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameTimerPower_MSGID_descriptor_;
}
bool ProPKGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameTimerPower_MSGID ProPKGameTimerPower::ID;
const ProPKGameTimerPower_MSGID ProPKGameTimerPower::MSGID_MIN;
const ProPKGameTimerPower_MSGID ProPKGameTimerPower::MSGID_MAX;
const int ProPKGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameTimerPower::kSeatFieldNumber;
const int ProPKGameTimerPower::kTimeFieldNumber;
const int ProPKGameTimerPower::kOutcardTimeFieldNumber;
const int ProPKGameTimerPower::kLastoutcardnumFieldNumber;
const int ProPKGameTimerPower::kLastoutcardtypeFieldNumber;
const int ProPKGameTimerPower::kLastoutcardseriesflagFieldNumber;
const int ProPKGameTimerPower::kLastoutcardseriesnumsFieldNumber;
const int ProPKGameTimerPower::kLastoutcardpointFieldNumber;
const int ProPKGameTimerPower::kLastmagic4BoomFieldNumber;
#endif  // !_MSC_VER

ProPKGameTimerPower::ProPKGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameTimerPower::InitAsDefaultInstance() {
}

ProPKGameTimerPower::ProPKGameTimerPower(const ProPKGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  lastoutcardnum_ = 0;
  lastoutcardtype_ = 0;
  lastoutcardseriesflag_ = 0;
  lastoutcardseriesnums_ = 0;
  lastoutcardpoint_ = 0;
  lastmagic4boom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameTimerPower::~ProPKGameTimerPower() {
  SharedDtor();
}

void ProPKGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameTimerPower_descriptor_;
}

const ProPKGameTimerPower& ProPKGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameTimerPower* ProPKGameTimerPower::default_instance_ = NULL;

ProPKGameTimerPower* ProPKGameTimerPower::New() const {
  return new ProPKGameTimerPower;
}

void ProPKGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
    lastoutcardnum_ = 0;
    lastoutcardtype_ = 0;
    lastoutcardseriesflag_ = 0;
    lastoutcardseriesnums_ = 0;
    lastoutcardpoint_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lastmagic4boom_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastoutcardnum;
        break;
      }

      // optional int32 lastoutcardnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastoutcardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastoutcardnum_)));
          set_has_lastoutcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastoutcardtype;
        break;
      }

      // optional int32 lastoutcardtype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastoutcardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastoutcardtype_)));
          set_has_lastoutcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastoutcardseriesflag;
        break;
      }

      // optional int32 lastoutcardseriesflag = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastoutcardseriesflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastoutcardseriesflag_)));
          set_has_lastoutcardseriesflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lastoutcardseriesnums;
        break;
      }

      // optional int32 lastoutcardseriesnums = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastoutcardseriesnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastoutcardseriesnums_)));
          set_has_lastoutcardseriesnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lastoutcardpoint;
        break;
      }

      // optional int32 lastoutcardpoint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastoutcardpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastoutcardpoint_)));
          set_has_lastoutcardpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lastmagic4boom;
        break;
      }

      // optional bool lastmagic4boom = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmagic4boom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastmagic4boom_)));
          set_has_lastmagic4boom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  // optional int32 lastoutcardnum = 5;
  if (has_lastoutcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastoutcardnum(), output);
  }

  // optional int32 lastoutcardtype = 6;
  if (has_lastoutcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastoutcardtype(), output);
  }

  // optional int32 lastoutcardseriesflag = 7;
  if (has_lastoutcardseriesflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastoutcardseriesflag(), output);
  }

  // optional int32 lastoutcardseriesnums = 8;
  if (has_lastoutcardseriesnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lastoutcardseriesnums(), output);
  }

  // optional int32 lastoutcardpoint = 9;
  if (has_lastoutcardpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lastoutcardpoint(), output);
  }

  // optional bool lastmagic4boom = 10;
  if (has_lastmagic4boom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->lastmagic4boom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  // optional int32 lastoutcardnum = 5;
  if (has_lastoutcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastoutcardnum(), target);
  }

  // optional int32 lastoutcardtype = 6;
  if (has_lastoutcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastoutcardtype(), target);
  }

  // optional int32 lastoutcardseriesflag = 7;
  if (has_lastoutcardseriesflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastoutcardseriesflag(), target);
  }

  // optional int32 lastoutcardseriesnums = 8;
  if (has_lastoutcardseriesnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lastoutcardseriesnums(), target);
  }

  // optional int32 lastoutcardpoint = 9;
  if (has_lastoutcardpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lastoutcardpoint(), target);
  }

  // optional bool lastmagic4boom = 10;
  if (has_lastmagic4boom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->lastmagic4boom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

    // optional int32 lastoutcardnum = 5;
    if (has_lastoutcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastoutcardnum());
    }

    // optional int32 lastoutcardtype = 6;
    if (has_lastoutcardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastoutcardtype());
    }

    // optional int32 lastoutcardseriesflag = 7;
    if (has_lastoutcardseriesflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastoutcardseriesflag());
    }

    // optional int32 lastoutcardseriesnums = 8;
    if (has_lastoutcardseriesnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastoutcardseriesnums());
    }

    // optional int32 lastoutcardpoint = 9;
    if (has_lastoutcardpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastoutcardpoint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool lastmagic4boom = 10;
    if (has_lastmagic4boom()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameTimerPower::MergeFrom(const ProPKGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
    if (from.has_lastoutcardnum()) {
      set_lastoutcardnum(from.lastoutcardnum());
    }
    if (from.has_lastoutcardtype()) {
      set_lastoutcardtype(from.lastoutcardtype());
    }
    if (from.has_lastoutcardseriesflag()) {
      set_lastoutcardseriesflag(from.lastoutcardseriesflag());
    }
    if (from.has_lastoutcardseriesnums()) {
      set_lastoutcardseriesnums(from.lastoutcardseriesnums());
    }
    if (from.has_lastoutcardpoint()) {
      set_lastoutcardpoint(from.lastoutcardpoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastmagic4boom()) {
      set_lastmagic4boom(from.lastmagic4boom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameTimerPower::CopyFrom(const ProPKGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameTimerPower::IsInitialized() const {

  return true;
}

void ProPKGameTimerPower::Swap(ProPKGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(lastoutcardnum_, other->lastoutcardnum_);
    std::swap(lastoutcardtype_, other->lastoutcardtype_);
    std::swap(lastoutcardseriesflag_, other->lastoutcardseriesflag_);
    std::swap(lastoutcardseriesnums_, other->lastoutcardseriesnums_);
    std::swap(lastoutcardpoint_, other->lastoutcardpoint_);
    std::swap(lastmagic4boom_, other->lastmagic4boom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameTimerPower_descriptor_;
  metadata.reflection = ProPKGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOperateNotify_MSGID_descriptor_;
}
bool ProPKGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameOperateNotify_MSGID ProPKGameOperateNotify::ID;
const ProPKGameOperateNotify_MSGID ProPKGameOperateNotify::MSGID_MIN;
const ProPKGameOperateNotify_MSGID ProPKGameOperateNotify::MSGID_MAX;
const int ProPKGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameOperateNotify::kResumeSeatFieldNumber;
const int ProPKGameOperateNotify::kActionMaskFieldNumber;
const int ProPKGameOperateNotify::kActionCardFieldNumber;
const int ProPKGameOperateNotify::kTimeFieldNumber;
const int ProPKGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProPKGameOperateNotify::ProPKGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameOperateNotify::InitAsDefaultInstance() {
}

ProPKGameOperateNotify::ProPKGameOperateNotify(const ProPKGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameOperateNotify::~ProPKGameOperateNotify() {
  SharedDtor();
}

void ProPKGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOperateNotify_descriptor_;
}

const ProPKGameOperateNotify& ProPKGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameOperateNotify* ProPKGameOperateNotify::default_instance_ = NULL;

ProPKGameOperateNotify* ProPKGameOperateNotify::New() const {
  return new ProPKGameOperateNotify;
}

void ProPKGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameOperateNotify::MergeFrom(const ProPKGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameOperateNotify::CopyFrom(const ProPKGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameOperateNotify::IsInitialized() const {

  return true;
}

void ProPKGameOperateNotify::Swap(ProPKGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameOperateNotify_descriptor_;
  metadata.reflection = ProPKGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOperateResult_MSGID_descriptor_;
}
bool ProPKGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameOperateResult_MSGID ProPKGameOperateResult::ID;
const ProPKGameOperateResult_MSGID ProPKGameOperateResult::MSGID_MIN;
const ProPKGameOperateResult_MSGID ProPKGameOperateResult::MSGID_MAX;
const int ProPKGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameOperateResult::kWOperateUserFieldNumber;
const int ProPKGameOperateResult::kWProvideUserFieldNumber;
const int ProPKGameOperateResult::kWOperateCodeFieldNumber;
const int ProPKGameOperateResult::kCbOperateCardFieldNumber;
const int ProPKGameOperateResult::kHandmahsFieldNumber;
const int ProPKGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProPKGameOperateResult::ProPKGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameOperateResult::InitAsDefaultInstance() {
}

ProPKGameOperateResult::ProPKGameOperateResult(const ProPKGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameOperateResult::~ProPKGameOperateResult() {
  SharedDtor();
}

void ProPKGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOperateResult_descriptor_;
}

const ProPKGameOperateResult& ProPKGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameOperateResult* ProPKGameOperateResult::default_instance_ = NULL;

ProPKGameOperateResult* ProPKGameOperateResult::New() const {
  return new ProPKGameOperateResult;
}

void ProPKGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameOperateResult::MergeFrom(const ProPKGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameOperateResult::CopyFrom(const ProPKGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameOperateResult::IsInitialized() const {

  return true;
}

void ProPKGameOperateResult::Swap(ProPKGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameOperateResult_descriptor_;
  metadata.reflection = ProPKGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOperateRequest_MSGID_descriptor_;
}
bool ProPKGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameOperateRequest_MSGID ProPKGameOperateRequest::ID;
const ProPKGameOperateRequest_MSGID ProPKGameOperateRequest::MSGID_MIN;
const ProPKGameOperateRequest_MSGID ProPKGameOperateRequest::MSGID_MAX;
const int ProPKGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameOperateRequest::kSeatFieldNumber;
const int ProPKGameOperateRequest::kWOperateCodeFieldNumber;
const int ProPKGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProPKGameOperateRequest::ProPKGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameOperateRequest::InitAsDefaultInstance() {
}

ProPKGameOperateRequest::ProPKGameOperateRequest(const ProPKGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameOperateRequest::~ProPKGameOperateRequest() {
  SharedDtor();
}

void ProPKGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOperateRequest_descriptor_;
}

const ProPKGameOperateRequest& ProPKGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameOperateRequest* ProPKGameOperateRequest::default_instance_ = NULL;

ProPKGameOperateRequest* ProPKGameOperateRequest::New() const {
  return new ProPKGameOperateRequest;
}

void ProPKGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameOperateRequest::MergeFrom(const ProPKGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameOperateRequest::CopyFrom(const ProPKGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameOperateRequest::IsInitialized() const {

  return true;
}

void ProPKGameOperateRequest::Swap(ProPKGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameOperateRequest_descriptor_;
  metadata.reflection = ProPKGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameTrust_MSGID_descriptor_;
}
bool ProPKGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameTrust_MSGID ProPKGameTrust::ID;
const ProPKGameTrust_MSGID ProPKGameTrust::MSGID_MIN;
const ProPKGameTrust_MSGID ProPKGameTrust::MSGID_MAX;
const int ProPKGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameTrust::kSeatFieldNumber;
const int ProPKGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProPKGameTrust::ProPKGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameTrust::InitAsDefaultInstance() {
}

ProPKGameTrust::ProPKGameTrust(const ProPKGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameTrust::~ProPKGameTrust() {
  SharedDtor();
}

void ProPKGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameTrust_descriptor_;
}

const ProPKGameTrust& ProPKGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameTrust* ProPKGameTrust::default_instance_ = NULL;

ProPKGameTrust* ProPKGameTrust::New() const {
  return new ProPKGameTrust;
}

void ProPKGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameTrust::MergeFrom(const ProPKGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameTrust::CopyFrom(const ProPKGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameTrust::IsInitialized() const {

  return true;
}

void ProPKGameTrust::Swap(ProPKGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameTrust_descriptor_;
  metadata.reflection = ProPKGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOutMahRequest_MSGID_descriptor_;
}
bool ProPKGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameOutMahRequest_MSGID ProPKGameOutMahRequest::ID;
const ProPKGameOutMahRequest_MSGID ProPKGameOutMahRequest::MSGID_MIN;
const ProPKGameOutMahRequest_MSGID ProPKGameOutMahRequest::MSGID_MAX;
const int ProPKGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameOutMahRequest::kSeatFieldNumber;
const int ProPKGameOutMahRequest::kOutMahsFieldNumber;
const int ProPKGameOutMahRequest::kOutcardnumFieldNumber;
const int ProPKGameOutMahRequest::kOutcardtypeFieldNumber;
const int ProPKGameOutMahRequest::kOutcardseriesflagFieldNumber;
const int ProPKGameOutMahRequest::kOutcardseriesnumsFieldNumber;
const int ProPKGameOutMahRequest::kOutcardpointFieldNumber;
#endif  // !_MSC_VER

ProPKGameOutMahRequest::ProPKGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameOutMahRequest::InitAsDefaultInstance() {
}

ProPKGameOutMahRequest::ProPKGameOutMahRequest(const ProPKGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  outcardnum_ = 0;
  outcardtype_ = 0;
  outcardseriesflag_ = 0;
  outcardseriesnums_ = 0;
  outcardpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameOutMahRequest::~ProPKGameOutMahRequest() {
  SharedDtor();
}

void ProPKGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameOutMahRequest_descriptor_;
}

const ProPKGameOutMahRequest& ProPKGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameOutMahRequest* ProPKGameOutMahRequest::default_instance_ = NULL;

ProPKGameOutMahRequest* ProPKGameOutMahRequest::New() const {
  return new ProPKGameOutMahRequest;
}

void ProPKGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    outcardnum_ = 0;
    outcardtype_ = 0;
    outcardseriesflag_ = 0;
    outcardseriesnums_ = 0;
    outcardpoint_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_outcardnum;
        break;
      }

      // optional int32 outcardnum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardnum_)));
          set_has_outcardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_outcardtype;
        break;
      }

      // optional int32 outcardtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtype_)));
          set_has_outcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_outcardseriesflag;
        break;
      }

      // optional int32 outcardseriesflag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardseriesflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardseriesflag_)));
          set_has_outcardseriesflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_outcardseriesnums;
        break;
      }

      // optional int32 outcardseriesnums = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardseriesnums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardseriesnums_)));
          set_has_outcardseriesnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_outcardpoint;
        break;
      }

      // optional int32 outcardpoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardpoint_)));
          set_has_outcardpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // optional int32 outcardnum = 4;
  if (has_outcardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardnum(), output);
  }

  // optional int32 outcardtype = 5;
  if (has_outcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->outcardtype(), output);
  }

  // optional int32 outcardseriesflag = 6;
  if (has_outcardseriesflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->outcardseriesflag(), output);
  }

  // optional int32 outcardseriesnums = 7;
  if (has_outcardseriesnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->outcardseriesnums(), output);
  }

  // optional int32 outcardpoint = 8;
  if (has_outcardpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->outcardpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // optional int32 outcardnum = 4;
  if (has_outcardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardnum(), target);
  }

  // optional int32 outcardtype = 5;
  if (has_outcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->outcardtype(), target);
  }

  // optional int32 outcardseriesflag = 6;
  if (has_outcardseriesflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->outcardseriesflag(), target);
  }

  // optional int32 outcardseriesnums = 7;
  if (has_outcardseriesnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->outcardseriesnums(), target);
  }

  // optional int32 outcardpoint = 8;
  if (has_outcardpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->outcardpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 outcardnum = 4;
    if (has_outcardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardnum());
    }

    // optional int32 outcardtype = 5;
    if (has_outcardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtype());
    }

    // optional int32 outcardseriesflag = 6;
    if (has_outcardseriesflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardseriesflag());
    }

    // optional int32 outcardseriesnums = 7;
    if (has_outcardseriesnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardseriesnums());
    }

    // optional int32 outcardpoint = 8;
    if (has_outcardpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardpoint());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameOutMahRequest::MergeFrom(const ProPKGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_outcardnum()) {
      set_outcardnum(from.outcardnum());
    }
    if (from.has_outcardtype()) {
      set_outcardtype(from.outcardtype());
    }
    if (from.has_outcardseriesflag()) {
      set_outcardseriesflag(from.outcardseriesflag());
    }
    if (from.has_outcardseriesnums()) {
      set_outcardseriesnums(from.outcardseriesnums());
    }
    if (from.has_outcardpoint()) {
      set_outcardpoint(from.outcardpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameOutMahRequest::CopyFrom(const ProPKGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProPKGameOutMahRequest::Swap(ProPKGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(outcardnum_, other->outcardnum_);
    std::swap(outcardtype_, other->outcardtype_);
    std::swap(outcardseriesflag_, other->outcardseriesflag_);
    std::swap(outcardseriesnums_, other->outcardseriesnums_);
    std::swap(outcardpoint_, other->outcardpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameOutMahRequest_descriptor_;
  metadata.reflection = ProPKGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameCatchCard_MSGID_descriptor_;
}
bool ProPKGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameCatchCard_MSGID ProPKGameCatchCard::ID;
const ProPKGameCatchCard_MSGID ProPKGameCatchCard::MSGID_MIN;
const ProPKGameCatchCard_MSGID ProPKGameCatchCard::MSGID_MAX;
const int ProPKGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameCatchCard::kSeatFieldNumber;
const int ProPKGameCatchCard::kCbCardDataFieldNumber;
const int ProPKGameCatchCard::kWActionMaskFieldNumber;
const int ProPKGameCatchCard::kCbIsNotGangFieldNumber;
const int ProPKGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProPKGameCatchCard::ProPKGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameCatchCard::InitAsDefaultInstance() {
}

ProPKGameCatchCard::ProPKGameCatchCard(const ProPKGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameCatchCard::~ProPKGameCatchCard() {
  SharedDtor();
}

void ProPKGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameCatchCard_descriptor_;
}

const ProPKGameCatchCard& ProPKGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameCatchCard* ProPKGameCatchCard::default_instance_ = NULL;

ProPKGameCatchCard* ProPKGameCatchCard::New() const {
  return new ProPKGameCatchCard;
}

void ProPKGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameCatchCard::MergeFrom(const ProPKGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameCatchCard::CopyFrom(const ProPKGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameCatchCard::IsInitialized() const {

  return true;
}

void ProPKGameCatchCard::Swap(ProPKGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameCatchCard_descriptor_;
  metadata.reflection = ProPKGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

PKMahList::PKMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKMahList::InitAsDefaultInstance() {
}

PKMahList::PKMahList(const PKMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKMahList::~PKMahList() {
  SharedDtor();
}

void PKMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKMahList_descriptor_;
}

const PKMahList& PKMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

PKMahList* PKMahList::default_instance_ = NULL;

PKMahList* PKMahList::New() const {
  return new PKMahList;
}

void PKMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKMahList::MergeFrom(const PKMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKMahList::CopyFrom(const PKMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKMahList::IsInitialized() const {

  return true;
}

void PKMahList::Swap(PKMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKMahList_descriptor_;
  metadata.reflection = PKMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

PKScoreList::PKScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKScoreList::InitAsDefaultInstance() {
}

PKScoreList::PKScoreList(const PKScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKScoreList::~PKScoreList() {
  SharedDtor();
}

void PKScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKScoreList_descriptor_;
}

const PKScoreList& PKScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

PKScoreList* PKScoreList::default_instance_ = NULL;

PKScoreList* PKScoreList::New() const {
  return new PKScoreList;
}

void PKScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKScoreList::MergeFrom(const PKScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKScoreList::CopyFrom(const PKScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKScoreList::IsInitialized() const {

  return true;
}

void PKScoreList::Swap(PKScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKScoreList_descriptor_;
  metadata.reflection = PKScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKAwardList::kSeatFieldNumber;
const int PKAwardList::kCardsDataFieldNumber;
const int PKAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

PKAwardList::PKAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKAwardList::InitAsDefaultInstance() {
}

PKAwardList::PKAwardList(const PKAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKAwardList::~PKAwardList() {
  SharedDtor();
}

void PKAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKAwardList_descriptor_;
}

const PKAwardList& PKAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

PKAwardList* PKAwardList::default_instance_ = NULL;

PKAwardList* PKAwardList::New() const {
  return new PKAwardList;
}

void PKAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKAwardList::MergeFrom(const PKAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKAwardList::CopyFrom(const PKAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKAwardList::IsInitialized() const {

  return true;
}

void PKAwardList::Swap(PKAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKAwardList_descriptor_;
  metadata.reflection = PKAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameEnd_MSGID_descriptor_;
}
bool ProPKGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameEnd_MSGID ProPKGameEnd::ID;
const ProPKGameEnd_MSGID ProPKGameEnd::MSGID_MIN;
const ProPKGameEnd_MSGID ProPKGameEnd::MSGID_MAX;
const int ProPKGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameEnd::kLGameTaxFieldNumber;
const int ProPKGameEnd::kCbChongGuangFieldNumber;
const int ProPKGameEnd::kCbBaWangKingFieldNumber;
const int ProPKGameEnd::kWProvideUserFieldNumber;
const int ProPKGameEnd::kCbChiHuCardFieldNumber;
const int ProPKGameEnd::kDwChiHuKindFieldNumber;
const int ProPKGameEnd::kDwChiHuRightFieldNumber;
const int ProPKGameEnd::kLTotaslGameScoreFieldNumber;
const int ProPKGameEnd::kLCurrentGameScoreFieldNumber;
const int ProPKGameEnd::kLCurrentPointScoreFieldNumber;
const int ProPKGameEnd::kLAttachScoreFieldNumber;
const int ProPKGameEnd::kCbHandCardDataFieldNumber;
const int ProPKGameEnd::kCbAwardCardDataFieldNumber;
const int ProPKGameEnd::kLOnlyWinScoreFieldNumber;
const int ProPKGameEnd::kBRoundEndFieldNumber;
const int ProPKGameEnd::kLHuiTouScoreFieldNumber;
const int ProPKGameEnd::kBZhuangWinFieldNumber;
const int ProPKGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProPKGameEnd::kDetailedScoresFieldNumber;
const int ProPKGameEnd::kFangShuiSaetFieldNumber;
#endif  // !_MSC_VER

ProPKGameEnd::ProPKGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameEnd::InitAsDefaultInstance() {
}

ProPKGameEnd::ProPKGameEnd(const ProPKGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  fangshuisaet_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameEnd::~ProPKGameEnd() {
  SharedDtor();
}

void ProPKGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameEnd_descriptor_;
}

const ProPKGameEnd& ProPKGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameEnd* ProPKGameEnd::default_instance_ = NULL;

ProPKGameEnd* ProPKGameEnd::New() const {
  return new ProPKGameEnd;
}

void ProPKGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
    fangshuisaet_ = 0;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .PKMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .PKAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .PKScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectTag(168)) goto parse_fangShuiSaet;
        break;
      }

      // optional int32 fangShuiSaet = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fangShuiSaet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fangshuisaet_)));
          set_has_fangshuisaet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .PKMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .PKAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .PKScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  // optional int32 fangShuiSaet = 21;
  if (has_fangshuisaet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fangshuisaet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .PKMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .PKAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .PKScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  // optional int32 fangShuiSaet = 21;
  if (has_fangshuisaet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fangshuisaet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

    // optional int32 fangShuiSaet = 21;
    if (has_fangshuisaet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fangshuisaet());
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .PKMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .PKAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .PKScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameEnd::MergeFrom(const ProPKGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
    if (from.has_fangshuisaet()) {
      set_fangshuisaet(from.fangshuisaet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameEnd::CopyFrom(const ProPKGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameEnd::IsInitialized() const {

  return true;
}

void ProPKGameEnd::Swap(ProPKGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(fangshuisaet_, other->fangshuisaet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameEnd_descriptor_;
  metadata.reflection = ProPKGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProPKGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameQuickSoundRequest_MSGID ProPKGameQuickSoundRequest::ID;
const ProPKGameQuickSoundRequest_MSGID ProPKGameQuickSoundRequest::MSGID_MIN;
const ProPKGameQuickSoundRequest_MSGID ProPKGameQuickSoundRequest::MSGID_MAX;
const int ProPKGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProPKGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProPKGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProPKGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProPKGameQuickSoundRequest::ProPKGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProPKGameQuickSoundRequest::ProPKGameQuickSoundRequest(const ProPKGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameQuickSoundRequest::~ProPKGameQuickSoundRequest() {
  SharedDtor();
}

void ProPKGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProPKGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameQuickSoundRequest_descriptor_;
}

const ProPKGameQuickSoundRequest& ProPKGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameQuickSoundRequest* ProPKGameQuickSoundRequest::default_instance_ = NULL;

ProPKGameQuickSoundRequest* ProPKGameQuickSoundRequest::New() const {
  return new ProPKGameQuickSoundRequest;
}

void ProPKGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameQuickSoundRequest::MergeFrom(const ProPKGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameQuickSoundRequest::CopyFrom(const ProPKGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProPKGameQuickSoundRequest::Swap(ProPKGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProPKGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProPKGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameQuickSoundResponse_MSGID ProPKGameQuickSoundResponse::ID;
const ProPKGameQuickSoundResponse_MSGID ProPKGameQuickSoundResponse::MSGID_MIN;
const ProPKGameQuickSoundResponse_MSGID ProPKGameQuickSoundResponse::MSGID_MAX;
const int ProPKGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProPKGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProPKGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProPKGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProPKGameQuickSoundResponse::ProPKGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProPKGameQuickSoundResponse::ProPKGameQuickSoundResponse(const ProPKGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameQuickSoundResponse::~ProPKGameQuickSoundResponse() {
  SharedDtor();
}

void ProPKGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProPKGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameQuickSoundResponse_descriptor_;
}

const ProPKGameQuickSoundResponse& ProPKGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameQuickSoundResponse* ProPKGameQuickSoundResponse::default_instance_ = NULL;

ProPKGameQuickSoundResponse* ProPKGameQuickSoundResponse::New() const {
  return new ProPKGameQuickSoundResponse;
}

void ProPKGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameQuickSoundResponse::MergeFrom(const ProPKGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameQuickSoundResponse::CopyFrom(const ProPKGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProPKGameQuickSoundResponse::Swap(ProPKGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProPKGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProPKGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameSendDiscardMahs_MSGID ProPKGameSendDiscardMahs::ID;
const ProPKGameSendDiscardMahs_MSGID ProPKGameSendDiscardMahs::MSGID_MIN;
const ProPKGameSendDiscardMahs_MSGID ProPKGameSendDiscardMahs::MSGID_MAX;
const int ProPKGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProPKGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProPKGameSendDiscardMahs::kDeskCountFieldNumber;
#endif  // !_MSC_VER

ProPKGameSendDiscardMahs::ProPKGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProPKGameSendDiscardMahs::ProPKGameSendDiscardMahs(const ProPKGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameSendDiscardMahs::~ProPKGameSendDiscardMahs() {
  SharedDtor();
}

void ProPKGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSendDiscardMahs_descriptor_;
}

const ProPKGameSendDiscardMahs& ProPKGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameSendDiscardMahs* ProPKGameSendDiscardMahs::default_instance_ = NULL;

ProPKGameSendDiscardMahs* ProPKGameSendDiscardMahs::New() const {
  return new ProPKGameSendDiscardMahs;
}

void ProPKGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .PKMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(32)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .PKMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deskcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .PKMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deskcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 4;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .PKMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameSendDiscardMahs::MergeFrom(const ProPKGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameSendDiscardMahs::CopyFrom(const ProPKGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProPKGameSendDiscardMahs::Swap(ProPKGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    std::swap(deskcount_, other->deskcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProPKGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKWeaveItem::kWeaveKindFieldNumber;
const int PKWeaveItem::kCentercardFieldNumber;
const int PKWeaveItem::kProvideUserFieldNumber;
const int PKWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

PKWeaveItem::PKWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKWeaveItem::InitAsDefaultInstance() {
}

PKWeaveItem::PKWeaveItem(const PKWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKWeaveItem::~PKWeaveItem() {
  SharedDtor();
}

void PKWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKWeaveItem_descriptor_;
}

const PKWeaveItem& PKWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

PKWeaveItem* PKWeaveItem::default_instance_ = NULL;

PKWeaveItem* PKWeaveItem::New() const {
  return new PKWeaveItem;
}

void PKWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKWeaveItem::MergeFrom(const PKWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKWeaveItem::CopyFrom(const PKWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKWeaveItem::IsInitialized() const {

  return true;
}

void PKWeaveItem::Swap(PKWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKWeaveItem_descriptor_;
  metadata.reflection = PKWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PKWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

PKWeaveItems::PKWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PKWeaveItems::InitAsDefaultInstance() {
}

PKWeaveItems::PKWeaveItems(const PKWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PKWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PKWeaveItems::~PKWeaveItems() {
  SharedDtor();
}

void PKWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PKWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PKWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PKWeaveItems_descriptor_;
}

const PKWeaveItems& PKWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

PKWeaveItems* PKWeaveItems::default_instance_ = NULL;

PKWeaveItems* PKWeaveItems::New() const {
  return new PKWeaveItems;
}

void PKWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PKWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PKWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PKWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PKWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PKWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PKWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PKWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .PKWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PKWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PKWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PKWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PKWeaveItems::MergeFrom(const PKWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PKWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PKWeaveItems::CopyFrom(const PKWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PKWeaveItems::IsInitialized() const {

  return true;
}

void PKWeaveItems::Swap(PKWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PKWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PKWeaveItems_descriptor_;
  metadata.reflection = PKWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSendActionMahs_MSGID_descriptor_;
}
bool ProPKGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameSendActionMahs_MSGID ProPKGameSendActionMahs::ID;
const ProPKGameSendActionMahs_MSGID ProPKGameSendActionMahs::MSGID_MIN;
const ProPKGameSendActionMahs_MSGID ProPKGameSendActionMahs::MSGID_MAX;
const int ProPKGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameSendActionMahs::kSeatIdFieldNumber;
const int ProPKGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProPKGameSendActionMahs::ProPKGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameSendActionMahs::InitAsDefaultInstance() {
}

ProPKGameSendActionMahs::ProPKGameSendActionMahs(const ProPKGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameSendActionMahs::~ProPKGameSendActionMahs() {
  SharedDtor();
}

void ProPKGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSendActionMahs_descriptor_;
}

const ProPKGameSendActionMahs& ProPKGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameSendActionMahs* ProPKGameSendActionMahs::default_instance_ = NULL;

ProPKGameSendActionMahs* ProPKGameSendActionMahs::New() const {
  return new ProPKGameSendActionMahs;
}

void ProPKGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .PKWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .PKWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .PKWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .PKWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameSendActionMahs::MergeFrom(const ProPKGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameSendActionMahs::CopyFrom(const ProPKGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProPKGameSendActionMahs::Swap(ProPKGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameSendActionMahs_descriptor_;
  metadata.reflection = ProPKGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenRequest_MSGID_descriptor_;
}
bool ProPKGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameBrokenRequest_MSGID ProPKGameBrokenRequest::ID;
const ProPKGameBrokenRequest_MSGID ProPKGameBrokenRequest::MSGID_MIN;
const ProPKGameBrokenRequest_MSGID ProPKGameBrokenRequest::MSGID_MAX;
const int ProPKGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameBrokenRequest::kSeatIdFieldNumber;
const int ProPKGameBrokenRequest::kTypeFieldNumber;
const int ProPKGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProPKGameBrokenRequest::ProPKGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameBrokenRequest::InitAsDefaultInstance() {
}

ProPKGameBrokenRequest::ProPKGameBrokenRequest(const ProPKGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameBrokenRequest::~ProPKGameBrokenRequest() {
  SharedDtor();
}

void ProPKGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenRequest_descriptor_;
}

const ProPKGameBrokenRequest& ProPKGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameBrokenRequest* ProPKGameBrokenRequest::default_instance_ = NULL;

ProPKGameBrokenRequest* ProPKGameBrokenRequest::New() const {
  return new ProPKGameBrokenRequest;
}

void ProPKGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .PKBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::PKBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .PKBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .PKBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .PKBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameBrokenRequest::MergeFrom(const ProPKGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameBrokenRequest::CopyFrom(const ProPKGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProPKGameBrokenRequest::Swap(ProPKGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameBrokenRequest_descriptor_;
  metadata.reflection = ProPKGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenOperate_MSGID_descriptor_;
}
bool ProPKGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameBrokenOperate_MSGID ProPKGameBrokenOperate::ID;
const ProPKGameBrokenOperate_MSGID ProPKGameBrokenOperate::MSGID_MIN;
const ProPKGameBrokenOperate_MSGID ProPKGameBrokenOperate::MSGID_MAX;
const int ProPKGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameBrokenOperate::kSeatIdFieldNumber;
const int ProPKGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProPKGameBrokenOperate::ProPKGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameBrokenOperate::InitAsDefaultInstance() {
}

ProPKGameBrokenOperate::ProPKGameBrokenOperate(const ProPKGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameBrokenOperate::~ProPKGameBrokenOperate() {
  SharedDtor();
}

void ProPKGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenOperate_descriptor_;
}

const ProPKGameBrokenOperate& ProPKGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameBrokenOperate* ProPKGameBrokenOperate::default_instance_ = NULL;

ProPKGameBrokenOperate* ProPKGameBrokenOperate::New() const {
  return new ProPKGameBrokenOperate;
}

void ProPKGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .PKBROKEN_OPERATE result = 3 [default = BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::PKBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .PKBROKEN_OPERATE result = 3 [default = BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .PKBROKEN_OPERATE result = 3 [default = BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .PKBROKEN_OPERATE result = 3 [default = BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameBrokenOperate::MergeFrom(const ProPKGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameBrokenOperate::CopyFrom(const ProPKGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProPKGameBrokenOperate::Swap(ProPKGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameBrokenOperate_descriptor_;
  metadata.reflection = ProPKGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenNotify_MSGID_descriptor_;
}
bool ProPKGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameBrokenNotify_MSGID ProPKGameBrokenNotify::ID;
const ProPKGameBrokenNotify_MSGID ProPKGameBrokenNotify::MSGID_MIN;
const ProPKGameBrokenNotify_MSGID ProPKGameBrokenNotify::MSGID_MAX;
const int ProPKGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameBrokenNotify::kSeatIdFieldNumber;
const int ProPKGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProPKGameBrokenNotify::ProPKGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameBrokenNotify::InitAsDefaultInstance() {
}

ProPKGameBrokenNotify::ProPKGameBrokenNotify(const ProPKGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameBrokenNotify::~ProPKGameBrokenNotify() {
  SharedDtor();
}

void ProPKGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenNotify_descriptor_;
}

const ProPKGameBrokenNotify& ProPKGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameBrokenNotify* ProPKGameBrokenNotify::default_instance_ = NULL;

ProPKGameBrokenNotify* ProPKGameBrokenNotify::New() const {
  return new ProPKGameBrokenNotify;
}

void ProPKGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .PKBROKEN_CODE operate_code = 3 [default = BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PKBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::PKBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .PKBROKEN_CODE operate_code = 3 [default = BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .PKBROKEN_CODE operate_code = 3 [default = BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .PKBROKEN_CODE operate_code = 3 [default = BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameBrokenNotify::MergeFrom(const ProPKGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameBrokenNotify::CopyFrom(const ProPKGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProPKGameBrokenNotify::Swap(ProPKGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameBrokenNotify_descriptor_;
  metadata.reflection = ProPKGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameRuleConfig_MSGID_descriptor_;
}
bool ProPKGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameRuleConfig_MSGID ProPKGameRuleConfig::ID;
const ProPKGameRuleConfig_MSGID ProPKGameRuleConfig::MSGID_MIN;
const ProPKGameRuleConfig_MSGID ProPKGameRuleConfig::MSGID_MAX;
const int ProPKGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameRuleConfig::kGameRoundFieldNumber;
const int ProPKGameRuleConfig::kNeedCardFieldNumber;
const int ProPKGameRuleConfig::kHaveMagicCardFieldNumber;
const int ProPKGameRuleConfig::kHaveRedPeach3FirstOutFieldNumber;
const int ProPKGameRuleConfig::kHavaMustOutCardFieldNumber;
const int ProPKGameRuleConfig::kNMasterSeatFieldNumber;
const int ProPKGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProPKGameRuleConfig::kHaveJianmaFieldNumber;
const int ProPKGameRuleConfig::kNChongguanNumFieldNumber;
const int ProPKGameRuleConfig::kHavaBaoPeiFieldNumber;
const int ProPKGameRuleConfig::kNPlayerNumFieldNumber;
const int ProPKGameRuleConfig::kSRoomNumFieldNumber;
const int ProPKGameRuleConfig::kSPlayTimeFieldNumber;
#endif  // !_MSC_VER

ProPKGameRuleConfig::ProPKGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameRuleConfig::InitAsDefaultInstance() {
}

ProPKGameRuleConfig::ProPKGameRuleConfig(const ProPKGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_magiccard_ = false;
  have_redpeach3firstout_ = false;
  hava_mustoutcard_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  hava_baopei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameRuleConfig::~ProPKGameRuleConfig() {
  SharedDtor();
}

void ProPKGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProPKGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameRuleConfig_descriptor_;
}

const ProPKGameRuleConfig& ProPKGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameRuleConfig* ProPKGameRuleConfig::default_instance_ = NULL;

ProPKGameRuleConfig* ProPKGameRuleConfig::New() const {
  return new ProPKGameRuleConfig;
}

void ProPKGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_magiccard_ = false;
    have_redpeach3firstout_ = false;
    hava_mustoutcard_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    hava_baopei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_MagicCard;
        break;
      }

      // optional bool have_MagicCard = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_MagicCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_magiccard_)));
          set_has_have_magiccard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_RedPeach3FirstOut;
        break;
      }

      // optional bool have_RedPeach3FirstOut = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_RedPeach3FirstOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_redpeach3firstout_)));
          set_has_have_redpeach3firstout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_MustOutCard;
        break;
      }

      // optional bool hava_MustOutCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_MustOutCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_mustoutcard_)));
          set_has_hava_mustoutcard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hava_BaoPei;
        break;
      }

      // optional bool hava_BaoPei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_BaoPei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_baopei_)));
          set_has_hava_baopei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_MagicCard = 3;
  if (has_have_magiccard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_magiccard(), output);
  }

  // optional bool have_RedPeach3FirstOut = 4;
  if (has_have_redpeach3firstout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_redpeach3firstout(), output);
  }

  // optional bool hava_MustOutCard = 5;
  if (has_hava_mustoutcard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_mustoutcard(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool hava_BaoPei = 10;
  if (has_hava_baopei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hava_baopei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_MagicCard = 3;
  if (has_have_magiccard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_magiccard(), target);
  }

  // optional bool have_RedPeach3FirstOut = 4;
  if (has_have_redpeach3firstout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_redpeach3firstout(), target);
  }

  // optional bool hava_MustOutCard = 5;
  if (has_hava_mustoutcard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_mustoutcard(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool hava_BaoPei = 10;
  if (has_hava_baopei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hava_baopei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_MagicCard = 3;
    if (has_have_magiccard()) {
      total_size += 1 + 1;
    }

    // optional bool have_RedPeach3FirstOut = 4;
    if (has_have_redpeach3firstout()) {
      total_size += 1 + 1;
    }

    // optional bool hava_MustOutCard = 5;
    if (has_hava_mustoutcard()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool hava_BaoPei = 10;
    if (has_hava_baopei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameRuleConfig::MergeFrom(const ProPKGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_magiccard()) {
      set_have_magiccard(from.have_magiccard());
    }
    if (from.has_have_redpeach3firstout()) {
      set_have_redpeach3firstout(from.have_redpeach3firstout());
    }
    if (from.has_hava_mustoutcard()) {
      set_hava_mustoutcard(from.hava_mustoutcard());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_hava_baopei()) {
      set_hava_baopei(from.hava_baopei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameRuleConfig::CopyFrom(const ProPKGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameRuleConfig::IsInitialized() const {

  return true;
}

void ProPKGameRuleConfig::Swap(ProPKGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_magiccard_, other->have_magiccard_);
    std::swap(have_redpeach3firstout_, other->have_redpeach3firstout_);
    std::swap(hava_mustoutcard_, other->hava_mustoutcard_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(hava_baopei_, other->hava_baopei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameRuleConfig_descriptor_;
  metadata.reflection = ProPKGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenStatus_MSGID_descriptor_;
}
bool ProPKGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameBrokenStatus_MSGID ProPKGameBrokenStatus::ID;
const ProPKGameBrokenStatus_MSGID ProPKGameBrokenStatus::MSGID_MIN;
const ProPKGameBrokenStatus_MSGID ProPKGameBrokenStatus::MSGID_MAX;
const int ProPKGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProPKGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProPKGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProPKGameBrokenStatus::ProPKGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameBrokenStatus::InitAsDefaultInstance() {
}

ProPKGameBrokenStatus::ProPKGameBrokenStatus(const ProPKGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameBrokenStatus::~ProPKGameBrokenStatus() {
  SharedDtor();
}

void ProPKGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameBrokenStatus_descriptor_;
}

const ProPKGameBrokenStatus& ProPKGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameBrokenStatus* ProPKGameBrokenStatus::default_instance_ = NULL;

ProPKGameBrokenStatus* ProPKGameBrokenStatus::New() const {
  return new ProPKGameBrokenStatus;
}

void ProPKGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameBrokenStatus::MergeFrom(const ProPKGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameBrokenStatus::CopyFrom(const ProPKGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProPKGameBrokenStatus::Swap(ProPKGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameBrokenStatus_descriptor_;
  metadata.reflection = ProPKGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDataResp_MSGID_descriptor_;
}
bool ProPKGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameDataResp_MSGID ProPKGameDataResp::ID;
const ProPKGameDataResp_MSGID ProPKGameDataResp::MSGID_MIN;
const ProPKGameDataResp_MSGID ProPKGameDataResp::MSGID_MAX;
const int ProPKGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameDataResp::kTotalScoreFieldNumber;
const int ProPKGameDataResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ProPKGameDataResp::ProPKGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameDataResp::InitAsDefaultInstance() {
}

ProPKGameDataResp::ProPKGameDataResp(const ProPKGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameDataResp::~ProPKGameDataResp() {
  SharedDtor();
}

void ProPKGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameDataResp_descriptor_;
}

const ProPKGameDataResp& ProPKGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameDataResp* ProPKGameDataResp::default_instance_ = NULL;

ProPKGameDataResp* ProPKGameDataResp::New() const {
  return new ProPKGameDataResp;
}

void ProPKGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameDataResp::MergeFrom(const ProPKGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameDataResp::CopyFrom(const ProPKGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameDataResp::IsInitialized() const {

  return true;
}

void ProPKGameDataResp::Swap(ProPKGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameDataResp_descriptor_;
  metadata.reflection = ProPKGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameRecordRequest_MSGID_descriptor_;
}
bool ProPKGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameRecordRequest_MSGID ProPKGameRecordRequest::ID;
const ProPKGameRecordRequest_MSGID ProPKGameRecordRequest::MSGID_MIN;
const ProPKGameRecordRequest_MSGID ProPKGameRecordRequest::MSGID_MAX;
const int ProPKGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameRecordRequest::kSeatIdFieldNumber;
const int ProPKGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProPKGameRecordRequest::ProPKGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameRecordRequest::InitAsDefaultInstance() {
}

ProPKGameRecordRequest::ProPKGameRecordRequest(const ProPKGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameRecordRequest::~ProPKGameRecordRequest() {
  SharedDtor();
}

void ProPKGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProPKGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameRecordRequest_descriptor_;
}

const ProPKGameRecordRequest& ProPKGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameRecordRequest* ProPKGameRecordRequest::default_instance_ = NULL;

ProPKGameRecordRequest* ProPKGameRecordRequest::New() const {
  return new ProPKGameRecordRequest;
}

void ProPKGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameRecordRequest::MergeFrom(const ProPKGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameRecordRequest::CopyFrom(const ProPKGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameRecordRequest::IsInitialized() const {

  return true;
}

void ProPKGameRecordRequest::Swap(ProPKGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameRecordRequest_descriptor_;
  metadata.reflection = ProPKGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameRecordResponse_MSGID_descriptor_;
}
bool ProPKGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameRecordResponse_MSGID ProPKGameRecordResponse::ID;
const ProPKGameRecordResponse_MSGID ProPKGameRecordResponse::MSGID_MIN;
const ProPKGameRecordResponse_MSGID ProPKGameRecordResponse::MSGID_MAX;
const int ProPKGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameRecordResponse::kSeatIdFieldNumber;
const int ProPKGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProPKGameRecordResponse::ProPKGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameRecordResponse::InitAsDefaultInstance() {
}

ProPKGameRecordResponse::ProPKGameRecordResponse(const ProPKGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameRecordResponse::~ProPKGameRecordResponse() {
  SharedDtor();
}

void ProPKGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProPKGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameRecordResponse_descriptor_;
}

const ProPKGameRecordResponse& ProPKGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameRecordResponse* ProPKGameRecordResponse::default_instance_ = NULL;

ProPKGameRecordResponse* ProPKGameRecordResponse::New() const {
  return new ProPKGameRecordResponse;
}

void ProPKGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameRecordResponse::MergeFrom(const ProPKGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameRecordResponse::CopyFrom(const ProPKGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameRecordResponse::IsInitialized() const {

  return true;
}

void ProPKGameRecordResponse::Swap(ProPKGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameRecordResponse_descriptor_;
  metadata.reflection = ProPKGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserLocationRequest_MSGID_descriptor_;
}
bool ProPKGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserLocationRequest_MSGID ProPKGameUserLocationRequest::ID;
const ProPKGameUserLocationRequest_MSGID ProPKGameUserLocationRequest::MSGID_MIN;
const ProPKGameUserLocationRequest_MSGID ProPKGameUserLocationRequest::MSGID_MAX;
const int ProPKGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameUserLocationRequest::kSeatIdFieldNumber;
const int ProPKGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProPKGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProPKGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProPKGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProPKGameUserLocationRequest::ProPKGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserLocationRequest::InitAsDefaultInstance() {
}

ProPKGameUserLocationRequest::ProPKGameUserLocationRequest(const ProPKGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserLocationRequest::~ProPKGameUserLocationRequest() {
  SharedDtor();
}

void ProPKGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProPKGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserLocationRequest_descriptor_;
}

const ProPKGameUserLocationRequest& ProPKGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserLocationRequest* ProPKGameUserLocationRequest::default_instance_ = NULL;

ProPKGameUserLocationRequest* ProPKGameUserLocationRequest::New() const {
  return new ProPKGameUserLocationRequest;
}

void ProPKGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserLocationRequest::MergeFrom(const ProPKGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserLocationRequest::CopyFrom(const ProPKGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProPKGameUserLocationRequest::Swap(ProPKGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserLocationRequest_descriptor_;
  metadata.reflection = ProPKGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSyncCardResponse_MSGID_descriptor_;
}
bool ProPKGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameSyncCardResponse_MSGID ProPKGameSyncCardResponse::ID;
const ProPKGameSyncCardResponse_MSGID ProPKGameSyncCardResponse::MSGID_MIN;
const ProPKGameSyncCardResponse_MSGID ProPKGameSyncCardResponse::MSGID_MAX;
const int ProPKGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameSyncCardResponse::kSeatFieldNumber;
const int ProPKGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProPKGameSyncCardResponse::ProPKGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameSyncCardResponse::InitAsDefaultInstance() {
}

ProPKGameSyncCardResponse::ProPKGameSyncCardResponse(const ProPKGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameSyncCardResponse::~ProPKGameSyncCardResponse() {
  SharedDtor();
}

void ProPKGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameSyncCardResponse_descriptor_;
}

const ProPKGameSyncCardResponse& ProPKGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameSyncCardResponse* ProPKGameSyncCardResponse::default_instance_ = NULL;

ProPKGameSyncCardResponse* ProPKGameSyncCardResponse::New() const {
  return new ProPKGameSyncCardResponse;
}

void ProPKGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameSyncCardResponse::MergeFrom(const ProPKGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameSyncCardResponse::CopyFrom(const ProPKGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProPKGameSyncCardResponse::Swap(ProPKGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameSyncCardResponse_descriptor_;
  metadata.reflection = ProPKGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProPKGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserPhoneStatusRequest_MSGID ProPKGameUserPhoneStatusRequest::ID;
const ProPKGameUserPhoneStatusRequest_MSGID ProPKGameUserPhoneStatusRequest::MSGID_MIN;
const ProPKGameUserPhoneStatusRequest_MSGID ProPKGameUserPhoneStatusRequest::MSGID_MAX;
const int ProPKGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProPKGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProPKGameUserPhoneStatusRequest::ProPKGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProPKGameUserPhoneStatusRequest::ProPKGameUserPhoneStatusRequest(const ProPKGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserPhoneStatusRequest::~ProPKGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProPKGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserPhoneStatusRequest_descriptor_;
}

const ProPKGameUserPhoneStatusRequest& ProPKGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserPhoneStatusRequest* ProPKGameUserPhoneStatusRequest::default_instance_ = NULL;

ProPKGameUserPhoneStatusRequest* ProPKGameUserPhoneStatusRequest::New() const {
  return new ProPKGameUserPhoneStatusRequest;
}

void ProPKGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserPhoneStatusRequest::MergeFrom(const ProPKGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserPhoneStatusRequest::CopyFrom(const ProPKGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProPKGameUserPhoneStatusRequest::Swap(ProPKGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProPKGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProPKGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserGiveUpRequest_MSGID ProPKGameUserGiveUpRequest::ID;
const ProPKGameUserGiveUpRequest_MSGID ProPKGameUserGiveUpRequest::MSGID_MIN;
const ProPKGameUserGiveUpRequest_MSGID ProPKGameUserGiveUpRequest::MSGID_MAX;
const int ProPKGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProPKGameUserGiveUpRequest::ProPKGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProPKGameUserGiveUpRequest::ProPKGameUserGiveUpRequest(const ProPKGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserGiveUpRequest::~ProPKGameUserGiveUpRequest() {
  SharedDtor();
}

void ProPKGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserGiveUpRequest_descriptor_;
}

const ProPKGameUserGiveUpRequest& ProPKGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserGiveUpRequest* ProPKGameUserGiveUpRequest::default_instance_ = NULL;

ProPKGameUserGiveUpRequest* ProPKGameUserGiveUpRequest::New() const {
  return new ProPKGameUserGiveUpRequest;
}

void ProPKGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserGiveUpRequest::MergeFrom(const ProPKGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserGiveUpRequest::CopyFrom(const ProPKGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProPKGameUserGiveUpRequest::Swap(ProPKGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProPKGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserHintRequest_MSGID_descriptor_;
}
bool ProPKGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserHintRequest_MSGID ProPKGameUserHintRequest::ID;
const ProPKGameUserHintRequest_MSGID ProPKGameUserHintRequest::MSGID_MIN;
const ProPKGameUserHintRequest_MSGID ProPKGameUserHintRequest::MSGID_MAX;
const int ProPKGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProPKGameUserHintRequest::ProPKGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserHintRequest::InitAsDefaultInstance() {
}

ProPKGameUserHintRequest::ProPKGameUserHintRequest(const ProPKGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserHintRequest::~ProPKGameUserHintRequest() {
  SharedDtor();
}

void ProPKGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserHintRequest_descriptor_;
}

const ProPKGameUserHintRequest& ProPKGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserHintRequest* ProPKGameUserHintRequest::default_instance_ = NULL;

ProPKGameUserHintRequest* ProPKGameUserHintRequest::New() const {
  return new ProPKGameUserHintRequest;
}

void ProPKGameUserHintRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProPKGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserHintRequest::MergeFrom(const ProPKGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserHintRequest::CopyFrom(const ProPKGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProPKGameUserHintRequest::Swap(ProPKGameUserHintRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserHintRequest_descriptor_;
  metadata.reflection = ProPKGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserHintResponse_MSGID_descriptor_;
}
bool ProPKGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserHintResponse_MSGID ProPKGameUserHintResponse::ID;
const ProPKGameUserHintResponse_MSGID ProPKGameUserHintResponse::MSGID_MIN;
const ProPKGameUserHintResponse_MSGID ProPKGameUserHintResponse::MSGID_MAX;
const int ProPKGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameUserHintResponse::kLenthFieldNumber;
const int ProPKGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProPKGameUserHintResponse::ProPKGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserHintResponse::InitAsDefaultInstance() {
}

ProPKGameUserHintResponse::ProPKGameUserHintResponse(const ProPKGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserHintResponse::~ProPKGameUserHintResponse() {
  SharedDtor();
}

void ProPKGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserHintResponse_descriptor_;
}

const ProPKGameUserHintResponse& ProPKGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserHintResponse* ProPKGameUserHintResponse::default_instance_ = NULL;

ProPKGameUserHintResponse* ProPKGameUserHintResponse::New() const {
  return new ProPKGameUserHintResponse;
}

void ProPKGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserHintResponse::MergeFrom(const ProPKGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserHintResponse::CopyFrom(const ProPKGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProPKGameUserHintResponse::Swap(ProPKGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserHintResponse_descriptor_;
  metadata.reflection = ProPKGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserCallScoreResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserCallScoreResponse_MSGID_descriptor_;
}
bool ProPKGameUserCallScoreResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserCallScoreResponse_MSGID ProPKGameUserCallScoreResponse::ID;
const ProPKGameUserCallScoreResponse_MSGID ProPKGameUserCallScoreResponse::MSGID_MIN;
const ProPKGameUserCallScoreResponse_MSGID ProPKGameUserCallScoreResponse::MSGID_MAX;
const int ProPKGameUserCallScoreResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameUserCallScoreResponse::kSeatFieldNumber;
const int ProPKGameUserCallScoreResponse::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProPKGameUserCallScoreResponse::ProPKGameUserCallScoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserCallScoreResponse::InitAsDefaultInstance() {
}

ProPKGameUserCallScoreResponse::ProPKGameUserCallScoreResponse(const ProPKGameUserCallScoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserCallScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserCallScoreResponse::~ProPKGameUserCallScoreResponse() {
  SharedDtor();
}

void ProPKGameUserCallScoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameUserCallScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserCallScoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserCallScoreResponse_descriptor_;
}

const ProPKGameUserCallScoreResponse& ProPKGameUserCallScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserCallScoreResponse* ProPKGameUserCallScoreResponse::default_instance_ = NULL;

ProPKGameUserCallScoreResponse* ProPKGameUserCallScoreResponse::New() const {
  return new ProPKGameUserCallScoreResponse;
}

void ProPKGameUserCallScoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserCallScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameUserCallScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserCallScoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserCallScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserCallScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserCallScoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserCallScoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserCallScoreResponse::MergeFrom(const ProPKGameUserCallScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserCallScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserCallScoreResponse::CopyFrom(const ProPKGameUserCallScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserCallScoreResponse::IsInitialized() const {

  return true;
}

void ProPKGameUserCallScoreResponse::Swap(ProPKGameUserCallScoreResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserCallScoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserCallScoreResponse_descriptor_;
  metadata.reflection = ProPKGameUserCallScoreResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProPKGameUserCallScoreRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserCallScoreRequest_MSGID_descriptor_;
}
bool ProPKGameUserCallScoreRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProPKGameUserCallScoreRequest_MSGID ProPKGameUserCallScoreRequest::ID;
const ProPKGameUserCallScoreRequest_MSGID ProPKGameUserCallScoreRequest::MSGID_MIN;
const ProPKGameUserCallScoreRequest_MSGID ProPKGameUserCallScoreRequest::MSGID_MAX;
const int ProPKGameUserCallScoreRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProPKGameUserCallScoreRequest::kSeatFieldNumber;
const int ProPKGameUserCallScoreRequest::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProPKGameUserCallScoreRequest::ProPKGameUserCallScoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProPKGameUserCallScoreRequest::InitAsDefaultInstance() {
}

ProPKGameUserCallScoreRequest::ProPKGameUserCallScoreRequest(const ProPKGameUserCallScoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProPKGameUserCallScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProPKGameUserCallScoreRequest::~ProPKGameUserCallScoreRequest() {
  SharedDtor();
}

void ProPKGameUserCallScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProPKGameUserCallScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProPKGameUserCallScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProPKGameUserCallScoreRequest_descriptor_;
}

const ProPKGameUserCallScoreRequest& ProPKGameUserCallScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lkpk_2eproto();
  return *default_instance_;
}

ProPKGameUserCallScoreRequest* ProPKGameUserCallScoreRequest::default_instance_ = NULL;

ProPKGameUserCallScoreRequest* ProPKGameUserCallScoreRequest::New() const {
  return new ProPKGameUserCallScoreRequest;
}

void ProPKGameUserCallScoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProPKGameUserCallScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProPKGameUserCallScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProPKGameUserCallScoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProPKGameUserCallScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProPKGameUserCallScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProPKGameUserCallScoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProPKGameUserCallScoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProPKGameUserCallScoreRequest::MergeFrom(const ProPKGameUserCallScoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProPKGameUserCallScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProPKGameUserCallScoreRequest::CopyFrom(const ProPKGameUserCallScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProPKGameUserCallScoreRequest::IsInitialized() const {

  return true;
}

void ProPKGameUserCallScoreRequest::Swap(ProPKGameUserCallScoreRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProPKGameUserCallScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProPKGameUserCallScoreRequest_descriptor_;
  metadata.reflection = ProPKGameUserCallScoreRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
