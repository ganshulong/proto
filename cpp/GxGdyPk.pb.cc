// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GxGdyPk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GxGdyPk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProGXGDYGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GXGDYMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GXGDYMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GXGDYScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GXGDYScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GXGDYAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GXGDYAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GXGDYWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GXGDYWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GXGDYWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GXGDYWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserDaTuNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserTeammateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserTeammateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserTeammateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserDaTuRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserDaTuResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameUserDaTuResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShangYouResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShangYouResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShangYouResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShowFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShowFriendNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowFriendNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameBoomNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameBoomNumNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameBoomNumNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShowBoomDataRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomDataRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShowBoomDataResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomDataResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameCardTypeSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameCardTypeSelect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameCardTypeSelect_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameIsSurrenderSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameIsSurrenderSelect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsSurrenderSelect_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameIsSurrenderOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameIsSurrenderOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsSurrenderOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameIsAgreeSurrenderSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameIsAgreeSurrenderSelect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsAgreeSurrenderSelect_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameIsAgreeSurrenderOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameIsAgreeSurrenderOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsAgreeSurrenderOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameIsAgreeSurrenderStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameIsAgreeSurrenderStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsAgreeSurrenderStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameSurrenderResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameSurrenderResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameSurrenderResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShowBoomNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShowBoomOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGXGDYGameShowBoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GXGDYGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GXGDYSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GXGDYKING_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GXGDYBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GXGDYBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GXGDYBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GxGdyPk_2eproto() {
  protobuf_AddDesc_GxGdyPk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GxGdyPk.proto");
  GOOGLE_CHECK(file != NULL);
  ProGXGDYGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProGXGDYGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStatusResponse, status_),
  };
  ProGXGDYGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameStatusResponse_descriptor_,
      ProGXGDYGameStatusResponse::default_instance_,
      ProGXGDYGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameStatusResponse));
  ProGXGDYGameStatusResponse_MSGID_descriptor_ = ProGXGDYGameStatusResponse_descriptor_->enum_type(0);
  ProGXGDYGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProGXGDYGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDeskInfoResponse, cellscore_),
  };
  ProGXGDYGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameDeskInfoResponse_descriptor_,
      ProGXGDYGameDeskInfoResponse::default_instance_,
      ProGXGDYGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameDeskInfoResponse));
  ProGXGDYGameDeskInfoResponse_MSGID_descriptor_ = ProGXGDYGameDeskInfoResponse_descriptor_->enum_type(0);
  ProGXGDYGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProGXGDYGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyNotify, time_),
  };
  ProGXGDYGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameReadyNotify_descriptor_,
      ProGXGDYGameReadyNotify::default_instance_,
      ProGXGDYGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameReadyNotify));
  ProGXGDYGameReadyNotify_MSGID_descriptor_ = ProGXGDYGameReadyNotify_descriptor_->enum_type(0);
  ProGXGDYGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProGXGDYGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyRequest, seat_),
  };
  ProGXGDYGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameReadyRequest_descriptor_,
      ProGXGDYGameReadyRequest::default_instance_,
      ProGXGDYGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameReadyRequest));
  ProGXGDYGameReadyRequest_MSGID_descriptor_ = ProGXGDYGameReadyRequest_descriptor_->enum_type(0);
  ProGXGDYGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProGXGDYGameReadyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyResponse, seat_),
  };
  ProGXGDYGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameReadyResponse_descriptor_,
      ProGXGDYGameReadyResponse::default_instance_,
      ProGXGDYGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameReadyResponse));
  ProGXGDYGameReadyResponse_MSGID_descriptor_ = ProGXGDYGameReadyResponse_descriptor_->enum_type(0);
  ProGXGDYGameStart_descriptor_ = file->message_type(5);
  static const int ProGXGDYGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStart, outcardtimes_),
  };
  ProGXGDYGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameStart_descriptor_,
      ProGXGDYGameStart::default_instance_,
      ProGXGDYGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameStart));
  ProGXGDYGameStart_MSGID_descriptor_ = ProGXGDYGameStart_descriptor_->enum_type(0);
  ProGXGDYGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProGXGDYGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceNotify, dicecount_),
  };
  ProGXGDYGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameDiceNotify_descriptor_,
      ProGXGDYGameDiceNotify::default_instance_,
      ProGXGDYGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameDiceNotify));
  ProGXGDYGameDiceNotify_MSGID_descriptor_ = ProGXGDYGameDiceNotify_descriptor_->enum_type(0);
  ProGXGDYGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProGXGDYGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceRequest, dicecount_),
  };
  ProGXGDYGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameDiceRequest_descriptor_,
      ProGXGDYGameDiceRequest::default_instance_,
      ProGXGDYGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameDiceRequest));
  ProGXGDYGameDiceRequest_MSGID_descriptor_ = ProGXGDYGameDiceRequest_descriptor_->enum_type(0);
  ProGXGDYGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProGXGDYGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceResult, dicecount_),
  };
  ProGXGDYGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameDiceResult_descriptor_,
      ProGXGDYGameDiceResult::default_instance_,
      ProGXGDYGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameDiceResult));
  ProGXGDYGameDiceResult_MSGID_descriptor_ = ProGXGDYGameDiceResult_descriptor_->enum_type(0);
  ProGXGDYGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProGXGDYGameSendMahs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendMahs, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendMahs, cbleftcount_),
  };
  ProGXGDYGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameSendMahs_descriptor_,
      ProGXGDYGameSendMahs::default_instance_,
      ProGXGDYGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameSendMahs));
  ProGXGDYGameSendMahs_MSGID_descriptor_ = ProGXGDYGameSendMahs_descriptor_->enum_type(0);
  ProGXGDYGameKingData_descriptor_ = file->message_type(10);
  static const int ProGXGDYGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, cbbawangking_),
  };
  ProGXGDYGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameKingData_descriptor_,
      ProGXGDYGameKingData::default_instance_,
      ProGXGDYGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameKingData));
  ProGXGDYGameKingData_MSGID_descriptor_ = ProGXGDYGameKingData_descriptor_->enum_type(0);
  ProGXGDYGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProGXGDYGameOutMahsResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, cardtypeflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, cardpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, seriesflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, seriesnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, nochangemahs_),
  };
  ProGXGDYGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameOutMahsResponse_descriptor_,
      ProGXGDYGameOutMahsResponse::default_instance_,
      ProGXGDYGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameOutMahsResponse));
  ProGXGDYGameOutMahsResponse_MSGID_descriptor_ = ProGXGDYGameOutMahsResponse_descriptor_->enum_type(0);
  ProGXGDYGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProGXGDYGameTimerPower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTimerPower, outcardtime_),
  };
  ProGXGDYGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameTimerPower_descriptor_,
      ProGXGDYGameTimerPower::default_instance_,
      ProGXGDYGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameTimerPower));
  ProGXGDYGameTimerPower_MSGID_descriptor_ = ProGXGDYGameTimerPower_descriptor_->enum_type(0);
  ProGXGDYGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProGXGDYGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, operateseat_),
  };
  ProGXGDYGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameOperateNotify_descriptor_,
      ProGXGDYGameOperateNotify::default_instance_,
      ProGXGDYGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameOperateNotify));
  ProGXGDYGameOperateNotify_MSGID_descriptor_ = ProGXGDYGameOperateNotify_descriptor_->enum_type(0);
  ProGXGDYGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProGXGDYGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, handcount_),
  };
  ProGXGDYGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameOperateResult_descriptor_,
      ProGXGDYGameOperateResult::default_instance_,
      ProGXGDYGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameOperateResult));
  ProGXGDYGameOperateResult_MSGID_descriptor_ = ProGXGDYGameOperateResult_descriptor_->enum_type(0);
  ProGXGDYGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProGXGDYGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateRequest, cboperatecard_),
  };
  ProGXGDYGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameOperateRequest_descriptor_,
      ProGXGDYGameOperateRequest::default_instance_,
      ProGXGDYGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameOperateRequest));
  ProGXGDYGameOperateRequest_MSGID_descriptor_ = ProGXGDYGameOperateRequest_descriptor_->enum_type(0);
  ProGXGDYGameTrust_descriptor_ = file->message_type(16);
  static const int ProGXGDYGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTrust, istrust_),
  };
  ProGXGDYGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameTrust_descriptor_,
      ProGXGDYGameTrust::default_instance_,
      ProGXGDYGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameTrust));
  ProGXGDYGameTrust_MSGID_descriptor_ = ProGXGDYGameTrust_descriptor_->enum_type(0);
  ProGXGDYGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProGXGDYGameOutMahRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahRequest, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahRequest, nochangemahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahRequest, bischanged_),
  };
  ProGXGDYGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameOutMahRequest_descriptor_,
      ProGXGDYGameOutMahRequest::default_instance_,
      ProGXGDYGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameOutMahRequest));
  ProGXGDYGameOutMahRequest_MSGID_descriptor_ = ProGXGDYGameOutMahRequest_descriptor_->enum_type(0);
  ProGXGDYGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProGXGDYGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, cbleftcount_),
  };
  ProGXGDYGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameCatchCard_descriptor_,
      ProGXGDYGameCatchCard::default_instance_,
      ProGXGDYGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameCatchCard));
  ProGXGDYGameCatchCard_MSGID_descriptor_ = ProGXGDYGameCatchCard_descriptor_->enum_type(0);
  GXGDYMahList_descriptor_ = file->message_type(19);
  static const int GXGDYMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYMahList, mahs_),
  };
  GXGDYMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GXGDYMahList_descriptor_,
      GXGDYMahList::default_instance_,
      GXGDYMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GXGDYMahList));
  GXGDYScoreList_descriptor_ = file->message_type(20);
  static const int GXGDYScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYScoreList, roundscore_),
  };
  GXGDYScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GXGDYScoreList_descriptor_,
      GXGDYScoreList::default_instance_,
      GXGDYScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GXGDYScoreList));
  GXGDYAwardList_descriptor_ = file->message_type(21);
  static const int GXGDYAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYAwardList, awardscore_),
  };
  GXGDYAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GXGDYAwardList_descriptor_,
      GXGDYAwardList::default_instance_,
      GXGDYAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GXGDYAwardList));
  ProGXGDYGameEnd_descriptor_ = file->message_type(22);
  static const int ProGXGDYGameEnd_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, detailedscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, bisdatu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, biskutong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nno1seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nwinerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nwinersmate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nno2seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nno3seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nno4seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, bbroken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nbrokenplayerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, bsurrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nsurrenderplayerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, bisspring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, nsurpluscardcount_),
  };
  ProGXGDYGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameEnd_descriptor_,
      ProGXGDYGameEnd::default_instance_,
      ProGXGDYGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameEnd));
  ProGXGDYGameEnd_MSGID_descriptor_ = ProGXGDYGameEnd_descriptor_->enum_type(0);
  ProGXGDYGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProGXGDYGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundRequest, text_),
  };
  ProGXGDYGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameQuickSoundRequest_descriptor_,
      ProGXGDYGameQuickSoundRequest::default_instance_,
      ProGXGDYGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameQuickSoundRequest));
  ProGXGDYGameQuickSoundRequest_MSGID_descriptor_ = ProGXGDYGameQuickSoundRequest_descriptor_->enum_type(0);
  ProGXGDYGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProGXGDYGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundResponse, text_),
  };
  ProGXGDYGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameQuickSoundResponse_descriptor_,
      ProGXGDYGameQuickSoundResponse::default_instance_,
      ProGXGDYGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameQuickSoundResponse));
  ProGXGDYGameQuickSoundResponse_MSGID_descriptor_ = ProGXGDYGameQuickSoundResponse_descriptor_->enum_type(0);
  ProGXGDYGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProGXGDYGameSendDiscardMahs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, cbnochangecarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, deskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, outcardcount_),
  };
  ProGXGDYGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameSendDiscardMahs_descriptor_,
      ProGXGDYGameSendDiscardMahs::default_instance_,
      ProGXGDYGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameSendDiscardMahs));
  ProGXGDYGameSendDiscardMahs_MSGID_descriptor_ = ProGXGDYGameSendDiscardMahs_descriptor_->enum_type(0);
  GXGDYWeaveItem_descriptor_ = file->message_type(26);
  static const int GXGDYWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItem, cardsize_),
  };
  GXGDYWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GXGDYWeaveItem_descriptor_,
      GXGDYWeaveItem::default_instance_,
      GXGDYWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GXGDYWeaveItem));
  GXGDYWeaveItems_descriptor_ = file->message_type(27);
  static const int GXGDYWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItems, items_),
  };
  GXGDYWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GXGDYWeaveItems_descriptor_,
      GXGDYWeaveItems::default_instance_,
      GXGDYWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GXGDYWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GXGDYWeaveItems));
  ProGXGDYGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProGXGDYGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendActionMahs, weaves_),
  };
  ProGXGDYGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameSendActionMahs_descriptor_,
      ProGXGDYGameSendActionMahs::default_instance_,
      ProGXGDYGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameSendActionMahs));
  ProGXGDYGameSendActionMahs_MSGID_descriptor_ = ProGXGDYGameSendActionMahs_descriptor_->enum_type(0);
  ProGXGDYGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProGXGDYGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenRequest, time_),
  };
  ProGXGDYGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameBrokenRequest_descriptor_,
      ProGXGDYGameBrokenRequest::default_instance_,
      ProGXGDYGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameBrokenRequest));
  ProGXGDYGameBrokenRequest_MSGID_descriptor_ = ProGXGDYGameBrokenRequest_descriptor_->enum_type(0);
  ProGXGDYGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProGXGDYGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenOperate, result_),
  };
  ProGXGDYGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameBrokenOperate_descriptor_,
      ProGXGDYGameBrokenOperate::default_instance_,
      ProGXGDYGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameBrokenOperate));
  ProGXGDYGameBrokenOperate_MSGID_descriptor_ = ProGXGDYGameBrokenOperate_descriptor_->enum_type(0);
  ProGXGDYGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProGXGDYGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenNotify, operate_code_),
  };
  ProGXGDYGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameBrokenNotify_descriptor_,
      ProGXGDYGameBrokenNotify::default_instance_,
      ProGXGDYGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameBrokenNotify));
  ProGXGDYGameBrokenNotify_MSGID_descriptor_ = ProGXGDYGameBrokenNotify_descriptor_->enum_type(0);
  ProGXGDYGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProGXGDYGameRuleConfig_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, have_bottom_king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, have_mai_lei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, hava_hui_tou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, bbawangfanbei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, splaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, isjingdian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, isopenteammate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, bissendsinglecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, nmultipletop_),
  };
  ProGXGDYGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameRuleConfig_descriptor_,
      ProGXGDYGameRuleConfig::default_instance_,
      ProGXGDYGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameRuleConfig));
  ProGXGDYGameRuleConfig_MSGID_descriptor_ = ProGXGDYGameRuleConfig_descriptor_->enum_type(0);
  ProGXGDYGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProGXGDYGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenStatus, left_time_),
  };
  ProGXGDYGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameBrokenStatus_descriptor_,
      ProGXGDYGameBrokenStatus::default_instance_,
      ProGXGDYGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameBrokenStatus));
  ProGXGDYGameBrokenStatus_MSGID_descriptor_ = ProGXGDYGameBrokenStatus_descriptor_->enum_type(0);
  ProGXGDYGameDataResp_descriptor_ = file->message_type(34);
  static const int ProGXGDYGameDataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDataResp, type_),
  };
  ProGXGDYGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameDataResp_descriptor_,
      ProGXGDYGameDataResp::default_instance_,
      ProGXGDYGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameDataResp));
  ProGXGDYGameDataResp_MSGID_descriptor_ = ProGXGDYGameDataResp_descriptor_->enum_type(0);
  ProGXGDYGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProGXGDYGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordRequest, url_),
  };
  ProGXGDYGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameRecordRequest_descriptor_,
      ProGXGDYGameRecordRequest::default_instance_,
      ProGXGDYGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameRecordRequest));
  ProGXGDYGameRecordRequest_MSGID_descriptor_ = ProGXGDYGameRecordRequest_descriptor_->enum_type(0);
  ProGXGDYGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProGXGDYGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordResponse, url_),
  };
  ProGXGDYGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameRecordResponse_descriptor_,
      ProGXGDYGameRecordResponse::default_instance_,
      ProGXGDYGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameRecordResponse));
  ProGXGDYGameRecordResponse_MSGID_descriptor_ = ProGXGDYGameRecordResponse_descriptor_->enum_type(0);
  ProGXGDYGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProGXGDYGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, strstreetname_),
  };
  ProGXGDYGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserLocationRequest_descriptor_,
      ProGXGDYGameUserLocationRequest::default_instance_,
      ProGXGDYGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserLocationRequest));
  ProGXGDYGameUserLocationRequest_MSGID_descriptor_ = ProGXGDYGameUserLocationRequest_descriptor_->enum_type(0);
  ProGXGDYGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProGXGDYGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSyncCardResponse, handmahs_),
  };
  ProGXGDYGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameSyncCardResponse_descriptor_,
      ProGXGDYGameSyncCardResponse::default_instance_,
      ProGXGDYGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameSyncCardResponse));
  ProGXGDYGameSyncCardResponse_MSGID_descriptor_ = ProGXGDYGameSyncCardResponse_descriptor_->enum_type(0);
  ProGXGDYGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProGXGDYGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserPhoneStatusRequest, userstatus_),
  };
  ProGXGDYGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserPhoneStatusRequest_descriptor_,
      ProGXGDYGameUserPhoneStatusRequest::default_instance_,
      ProGXGDYGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserPhoneStatusRequest));
  ProGXGDYGameUserPhoneStatusRequest_MSGID_descriptor_ = ProGXGDYGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProGXGDYGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProGXGDYGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserGiveUpRequest, seat_id_),
  };
  ProGXGDYGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserGiveUpRequest_descriptor_,
      ProGXGDYGameUserGiveUpRequest::default_instance_,
      ProGXGDYGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserGiveUpRequest));
  ProGXGDYGameUserGiveUpRequest_MSGID_descriptor_ = ProGXGDYGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProGXGDYGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProGXGDYGameUserHintRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintRequest, bisuserrequest_),
  };
  ProGXGDYGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserHintRequest_descriptor_,
      ProGXGDYGameUserHintRequest::default_instance_,
      ProGXGDYGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserHintRequest));
  ProGXGDYGameUserHintRequest_MSGID_descriptor_ = ProGXGDYGameUserHintRequest_descriptor_->enum_type(0);
  ProGXGDYGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProGXGDYGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintResponse, outmahs_),
  };
  ProGXGDYGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserHintResponse_descriptor_,
      ProGXGDYGameUserHintResponse::default_instance_,
      ProGXGDYGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserHintResponse));
  ProGXGDYGameUserHintResponse_MSGID_descriptor_ = ProGXGDYGameUserHintResponse_descriptor_->enum_type(0);
  ProGXGDYGameUserDaTuNotify_descriptor_ = file->message_type(43);
  static const int ProGXGDYGameUserDaTuNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuNotify, seat_),
  };
  ProGXGDYGameUserDaTuNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserDaTuNotify_descriptor_,
      ProGXGDYGameUserDaTuNotify::default_instance_,
      ProGXGDYGameUserDaTuNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserDaTuNotify));
  ProGXGDYGameUserDaTuNotify_MSGID_descriptor_ = ProGXGDYGameUserDaTuNotify_descriptor_->enum_type(0);
  ProGXGDYGameUserTeammateRequest_descriptor_ = file->message_type(44);
  static const int ProGXGDYGameUserTeammateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserTeammateRequest, bankermateseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserTeammateRequest, matecard_),
  };
  ProGXGDYGameUserTeammateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserTeammateRequest_descriptor_,
      ProGXGDYGameUserTeammateRequest::default_instance_,
      ProGXGDYGameUserTeammateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserTeammateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserTeammateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserTeammateRequest));
  ProGXGDYGameUserTeammateRequest_MSGID_descriptor_ = ProGXGDYGameUserTeammateRequest_descriptor_->enum_type(0);
  ProGXGDYGameUserDaTuRequest_descriptor_ = file->message_type(45);
  static const int ProGXGDYGameUserDaTuRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuRequest, bisdatu_),
  };
  ProGXGDYGameUserDaTuRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserDaTuRequest_descriptor_,
      ProGXGDYGameUserDaTuRequest::default_instance_,
      ProGXGDYGameUserDaTuRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserDaTuRequest));
  ProGXGDYGameUserDaTuRequest_MSGID_descriptor_ = ProGXGDYGameUserDaTuRequest_descriptor_->enum_type(0);
  ProGXGDYGameUserDaTuResponse_descriptor_ = file->message_type(46);
  static const int ProGXGDYGameUserDaTuResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResponse, bisdatu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResponse, nextseat_),
  };
  ProGXGDYGameUserDaTuResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserDaTuResponse_descriptor_,
      ProGXGDYGameUserDaTuResponse::default_instance_,
      ProGXGDYGameUserDaTuResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserDaTuResponse));
  ProGXGDYGameUserDaTuResponse_MSGID_descriptor_ = ProGXGDYGameUserDaTuResponse_descriptor_->enum_type(0);
  ProGXGDYGameUserDaTuResult_descriptor_ = file->message_type(47);
  static const int ProGXGDYGameUserDaTuResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResult, bisdatu_),
  };
  ProGXGDYGameUserDaTuResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameUserDaTuResult_descriptor_,
      ProGXGDYGameUserDaTuResult::default_instance_,
      ProGXGDYGameUserDaTuResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameUserDaTuResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameUserDaTuResult));
  ProGXGDYGameUserDaTuResult_MSGID_descriptor_ = ProGXGDYGameUserDaTuResult_descriptor_->enum_type(0);
  ProGXGDYGameShangYouResult_descriptor_ = file->message_type(48);
  static const int ProGXGDYGameShangYouResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShangYouResult, shangyouseat_),
  };
  ProGXGDYGameShangYouResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShangYouResult_descriptor_,
      ProGXGDYGameShangYouResult::default_instance_,
      ProGXGDYGameShangYouResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShangYouResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShangYouResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShangYouResult));
  ProGXGDYGameShangYouResult_MSGID_descriptor_ = ProGXGDYGameShangYouResult_descriptor_->enum_type(0);
  ProGXGDYGameShowFriendNotify_descriptor_ = file->message_type(49);
  static const int ProGXGDYGameShowFriendNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowFriendNotify, bshow_),
  };
  ProGXGDYGameShowFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShowFriendNotify_descriptor_,
      ProGXGDYGameShowFriendNotify::default_instance_,
      ProGXGDYGameShowFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShowFriendNotify));
  ProGXGDYGameShowFriendNotify_MSGID_descriptor_ = ProGXGDYGameShowFriendNotify_descriptor_->enum_type(0);
  ProGXGDYGameBoomNumNotify_descriptor_ = file->message_type(50);
  static const int ProGXGDYGameBoomNumNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBoomNumNotify, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBoomNumNotify, nboomnum_),
  };
  ProGXGDYGameBoomNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameBoomNumNotify_descriptor_,
      ProGXGDYGameBoomNumNotify::default_instance_,
      ProGXGDYGameBoomNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBoomNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameBoomNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameBoomNumNotify));
  ProGXGDYGameBoomNumNotify_MSGID_descriptor_ = ProGXGDYGameBoomNumNotify_descriptor_->enum_type(0);
  ProGXGDYGameShowBoomDataRequest_descriptor_ = file->message_type(51);
  static const int ProGXGDYGameShowBoomDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataRequest, nseat_),
  };
  ProGXGDYGameShowBoomDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShowBoomDataRequest_descriptor_,
      ProGXGDYGameShowBoomDataRequest::default_instance_,
      ProGXGDYGameShowBoomDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShowBoomDataRequest));
  ProGXGDYGameShowBoomDataRequest_MSGID_descriptor_ = ProGXGDYGameShowBoomDataRequest_descriptor_->enum_type(0);
  ProGXGDYGameShowBoomDataResponse_descriptor_ = file->message_type(52);
  static const int ProGXGDYGameShowBoomDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataResponse, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataResponse, bissendtoall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataResponse, cbawardcarddata_),
  };
  ProGXGDYGameShowBoomDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShowBoomDataResponse_descriptor_,
      ProGXGDYGameShowBoomDataResponse::default_instance_,
      ProGXGDYGameShowBoomDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShowBoomDataResponse));
  ProGXGDYGameShowBoomDataResponse_MSGID_descriptor_ = ProGXGDYGameShowBoomDataResponse_descriptor_->enum_type(0);
  ProGXGDYGameCardTypeSelect_descriptor_ = file->message_type(53);
  static const int ProGXGDYGameCardTypeSelect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCardTypeSelect, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCardTypeSelect, cardtypeselectdata_),
  };
  ProGXGDYGameCardTypeSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameCardTypeSelect_descriptor_,
      ProGXGDYGameCardTypeSelect::default_instance_,
      ProGXGDYGameCardTypeSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCardTypeSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameCardTypeSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameCardTypeSelect));
  ProGXGDYGameCardTypeSelect_MSGID_descriptor_ = ProGXGDYGameCardTypeSelect_descriptor_->enum_type(0);
  ProGXGDYGameIsSurrenderSelect_descriptor_ = file->message_type(54);
  static const int ProGXGDYGameIsSurrenderSelect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderSelect, nseat_),
  };
  ProGXGDYGameIsSurrenderSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameIsSurrenderSelect_descriptor_,
      ProGXGDYGameIsSurrenderSelect::default_instance_,
      ProGXGDYGameIsSurrenderSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameIsSurrenderSelect));
  ProGXGDYGameIsSurrenderSelect_MSGID_descriptor_ = ProGXGDYGameIsSurrenderSelect_descriptor_->enum_type(0);
  ProGXGDYGameIsSurrenderOperate_descriptor_ = file->message_type(55);
  static const int ProGXGDYGameIsSurrenderOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderOperate, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderOperate, bissurrender_),
  };
  ProGXGDYGameIsSurrenderOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameIsSurrenderOperate_descriptor_,
      ProGXGDYGameIsSurrenderOperate::default_instance_,
      ProGXGDYGameIsSurrenderOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsSurrenderOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameIsSurrenderOperate));
  ProGXGDYGameIsSurrenderOperate_MSGID_descriptor_ = ProGXGDYGameIsSurrenderOperate_descriptor_->enum_type(0);
  ProGXGDYGameIsAgreeSurrenderSelect_descriptor_ = file->message_type(56);
  static const int ProGXGDYGameIsAgreeSurrenderSelect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderSelect, nsurrenderseat_),
  };
  ProGXGDYGameIsAgreeSurrenderSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameIsAgreeSurrenderSelect_descriptor_,
      ProGXGDYGameIsAgreeSurrenderSelect::default_instance_,
      ProGXGDYGameIsAgreeSurrenderSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameIsAgreeSurrenderSelect));
  ProGXGDYGameIsAgreeSurrenderSelect_MSGID_descriptor_ = ProGXGDYGameIsAgreeSurrenderSelect_descriptor_->enum_type(0);
  ProGXGDYGameIsAgreeSurrenderOperate_descriptor_ = file->message_type(57);
  static const int ProGXGDYGameIsAgreeSurrenderOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderOperate, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderOperate, bisagreesurrender_),
  };
  ProGXGDYGameIsAgreeSurrenderOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameIsAgreeSurrenderOperate_descriptor_,
      ProGXGDYGameIsAgreeSurrenderOperate::default_instance_,
      ProGXGDYGameIsAgreeSurrenderOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameIsAgreeSurrenderOperate));
  ProGXGDYGameIsAgreeSurrenderOperate_MSGID_descriptor_ = ProGXGDYGameIsAgreeSurrenderOperate_descriptor_->enum_type(0);
  ProGXGDYGameIsAgreeSurrenderStatus_descriptor_ = file->message_type(58);
  static const int ProGXGDYGameIsAgreeSurrenderStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderStatus, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderStatus, bisagreesurrender_),
  };
  ProGXGDYGameIsAgreeSurrenderStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameIsAgreeSurrenderStatus_descriptor_,
      ProGXGDYGameIsAgreeSurrenderStatus::default_instance_,
      ProGXGDYGameIsAgreeSurrenderStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameIsAgreeSurrenderStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameIsAgreeSurrenderStatus));
  ProGXGDYGameIsAgreeSurrenderStatus_MSGID_descriptor_ = ProGXGDYGameIsAgreeSurrenderStatus_descriptor_->enum_type(0);
  ProGXGDYGameSurrenderResult_descriptor_ = file->message_type(59);
  static const int ProGXGDYGameSurrenderResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSurrenderResult, bsurrenderresult_),
  };
  ProGXGDYGameSurrenderResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameSurrenderResult_descriptor_,
      ProGXGDYGameSurrenderResult::default_instance_,
      ProGXGDYGameSurrenderResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSurrenderResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameSurrenderResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameSurrenderResult));
  ProGXGDYGameSurrenderResult_MSGID_descriptor_ = ProGXGDYGameSurrenderResult_descriptor_->enum_type(0);
  ProGXGDYGameShowBoomNotify_descriptor_ = file->message_type(60);
  static const int ProGXGDYGameShowBoomNotify_offsets_[1] = {
  };
  ProGXGDYGameShowBoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShowBoomNotify_descriptor_,
      ProGXGDYGameShowBoomNotify::default_instance_,
      ProGXGDYGameShowBoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShowBoomNotify));
  ProGXGDYGameShowBoomNotify_MSGID_descriptor_ = ProGXGDYGameShowBoomNotify_descriptor_->enum_type(0);
  ProGXGDYGameShowBoomOperate_descriptor_ = file->message_type(61);
  static const int ProGXGDYGameShowBoomOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomOperate, nseat_),
  };
  ProGXGDYGameShowBoomOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShowBoomOperate_descriptor_,
      ProGXGDYGameShowBoomOperate::default_instance_,
      ProGXGDYGameShowBoomOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShowBoomOperate));
  ProGXGDYGameShowBoomOperate_MSGID_descriptor_ = ProGXGDYGameShowBoomOperate_descriptor_->enum_type(0);
  ProGXGDYGameShowBoomResponse_descriptor_ = file->message_type(62);
  static const int ProGXGDYGameShowBoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomResponse, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomResponse, awardscore_),
  };
  ProGXGDYGameShowBoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGXGDYGameShowBoomResponse_descriptor_,
      ProGXGDYGameShowBoomResponse::default_instance_,
      ProGXGDYGameShowBoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGXGDYGameShowBoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGXGDYGameShowBoomResponse));
  ProGXGDYGameShowBoomResponse_MSGID_descriptor_ = ProGXGDYGameShowBoomResponse_descriptor_->enum_type(0);
  GXGDYGameState_descriptor_ = file->enum_type(0);
  GXGDYSEND_TYPE_descriptor_ = file->enum_type(1);
  GXGDYKING_TYPE_descriptor_ = file->enum_type(2);
  GXGDYBROKEN_TYPE_descriptor_ = file->enum_type(3);
  GXGDYBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  GXGDYBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GxGdyPk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameStatusResponse_descriptor_, &ProGXGDYGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameDeskInfoResponse_descriptor_, &ProGXGDYGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameReadyNotify_descriptor_, &ProGXGDYGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameReadyRequest_descriptor_, &ProGXGDYGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameReadyResponse_descriptor_, &ProGXGDYGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameStart_descriptor_, &ProGXGDYGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameDiceNotify_descriptor_, &ProGXGDYGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameDiceRequest_descriptor_, &ProGXGDYGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameDiceResult_descriptor_, &ProGXGDYGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameSendMahs_descriptor_, &ProGXGDYGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameKingData_descriptor_, &ProGXGDYGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameOutMahsResponse_descriptor_, &ProGXGDYGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameTimerPower_descriptor_, &ProGXGDYGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameOperateNotify_descriptor_, &ProGXGDYGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameOperateResult_descriptor_, &ProGXGDYGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameOperateRequest_descriptor_, &ProGXGDYGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameTrust_descriptor_, &ProGXGDYGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameOutMahRequest_descriptor_, &ProGXGDYGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameCatchCard_descriptor_, &ProGXGDYGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GXGDYMahList_descriptor_, &GXGDYMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GXGDYScoreList_descriptor_, &GXGDYScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GXGDYAwardList_descriptor_, &GXGDYAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameEnd_descriptor_, &ProGXGDYGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameQuickSoundRequest_descriptor_, &ProGXGDYGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameQuickSoundResponse_descriptor_, &ProGXGDYGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameSendDiscardMahs_descriptor_, &ProGXGDYGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GXGDYWeaveItem_descriptor_, &GXGDYWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GXGDYWeaveItems_descriptor_, &GXGDYWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameSendActionMahs_descriptor_, &ProGXGDYGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameBrokenRequest_descriptor_, &ProGXGDYGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameBrokenOperate_descriptor_, &ProGXGDYGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameBrokenNotify_descriptor_, &ProGXGDYGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameRuleConfig_descriptor_, &ProGXGDYGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameBrokenStatus_descriptor_, &ProGXGDYGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameDataResp_descriptor_, &ProGXGDYGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameRecordRequest_descriptor_, &ProGXGDYGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameRecordResponse_descriptor_, &ProGXGDYGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserLocationRequest_descriptor_, &ProGXGDYGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameSyncCardResponse_descriptor_, &ProGXGDYGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserPhoneStatusRequest_descriptor_, &ProGXGDYGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserGiveUpRequest_descriptor_, &ProGXGDYGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserHintRequest_descriptor_, &ProGXGDYGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserHintResponse_descriptor_, &ProGXGDYGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserDaTuNotify_descriptor_, &ProGXGDYGameUserDaTuNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserTeammateRequest_descriptor_, &ProGXGDYGameUserTeammateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserDaTuRequest_descriptor_, &ProGXGDYGameUserDaTuRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserDaTuResponse_descriptor_, &ProGXGDYGameUserDaTuResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameUserDaTuResult_descriptor_, &ProGXGDYGameUserDaTuResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShangYouResult_descriptor_, &ProGXGDYGameShangYouResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShowFriendNotify_descriptor_, &ProGXGDYGameShowFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameBoomNumNotify_descriptor_, &ProGXGDYGameBoomNumNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShowBoomDataRequest_descriptor_, &ProGXGDYGameShowBoomDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShowBoomDataResponse_descriptor_, &ProGXGDYGameShowBoomDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameCardTypeSelect_descriptor_, &ProGXGDYGameCardTypeSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameIsSurrenderSelect_descriptor_, &ProGXGDYGameIsSurrenderSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameIsSurrenderOperate_descriptor_, &ProGXGDYGameIsSurrenderOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameIsAgreeSurrenderSelect_descriptor_, &ProGXGDYGameIsAgreeSurrenderSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameIsAgreeSurrenderOperate_descriptor_, &ProGXGDYGameIsAgreeSurrenderOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameIsAgreeSurrenderStatus_descriptor_, &ProGXGDYGameIsAgreeSurrenderStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameSurrenderResult_descriptor_, &ProGXGDYGameSurrenderResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShowBoomNotify_descriptor_, &ProGXGDYGameShowBoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShowBoomOperate_descriptor_, &ProGXGDYGameShowBoomOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGXGDYGameShowBoomResponse_descriptor_, &ProGXGDYGameShowBoomResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GxGdyPk_2eproto() {
  delete ProGXGDYGameStatusResponse::default_instance_;
  delete ProGXGDYGameStatusResponse_reflection_;
  delete ProGXGDYGameDeskInfoResponse::default_instance_;
  delete ProGXGDYGameDeskInfoResponse_reflection_;
  delete ProGXGDYGameReadyNotify::default_instance_;
  delete ProGXGDYGameReadyNotify_reflection_;
  delete ProGXGDYGameReadyRequest::default_instance_;
  delete ProGXGDYGameReadyRequest_reflection_;
  delete ProGXGDYGameReadyResponse::default_instance_;
  delete ProGXGDYGameReadyResponse_reflection_;
  delete ProGXGDYGameStart::default_instance_;
  delete ProGXGDYGameStart_reflection_;
  delete ProGXGDYGameDiceNotify::default_instance_;
  delete ProGXGDYGameDiceNotify_reflection_;
  delete ProGXGDYGameDiceRequest::default_instance_;
  delete ProGXGDYGameDiceRequest_reflection_;
  delete ProGXGDYGameDiceResult::default_instance_;
  delete ProGXGDYGameDiceResult_reflection_;
  delete ProGXGDYGameSendMahs::default_instance_;
  delete ProGXGDYGameSendMahs_reflection_;
  delete ProGXGDYGameKingData::default_instance_;
  delete ProGXGDYGameKingData_reflection_;
  delete ProGXGDYGameOutMahsResponse::default_instance_;
  delete ProGXGDYGameOutMahsResponse_reflection_;
  delete ProGXGDYGameTimerPower::default_instance_;
  delete ProGXGDYGameTimerPower_reflection_;
  delete ProGXGDYGameOperateNotify::default_instance_;
  delete ProGXGDYGameOperateNotify_reflection_;
  delete ProGXGDYGameOperateResult::default_instance_;
  delete ProGXGDYGameOperateResult_reflection_;
  delete ProGXGDYGameOperateRequest::default_instance_;
  delete ProGXGDYGameOperateRequest_reflection_;
  delete ProGXGDYGameTrust::default_instance_;
  delete ProGXGDYGameTrust_reflection_;
  delete ProGXGDYGameOutMahRequest::default_instance_;
  delete ProGXGDYGameOutMahRequest_reflection_;
  delete ProGXGDYGameCatchCard::default_instance_;
  delete ProGXGDYGameCatchCard_reflection_;
  delete GXGDYMahList::default_instance_;
  delete GXGDYMahList_reflection_;
  delete GXGDYScoreList::default_instance_;
  delete GXGDYScoreList_reflection_;
  delete GXGDYAwardList::default_instance_;
  delete GXGDYAwardList_reflection_;
  delete ProGXGDYGameEnd::default_instance_;
  delete ProGXGDYGameEnd_reflection_;
  delete ProGXGDYGameQuickSoundRequest::default_instance_;
  delete ProGXGDYGameQuickSoundRequest_reflection_;
  delete ProGXGDYGameQuickSoundResponse::default_instance_;
  delete ProGXGDYGameQuickSoundResponse_reflection_;
  delete ProGXGDYGameSendDiscardMahs::default_instance_;
  delete ProGXGDYGameSendDiscardMahs_reflection_;
  delete GXGDYWeaveItem::default_instance_;
  delete GXGDYWeaveItem_reflection_;
  delete GXGDYWeaveItems::default_instance_;
  delete GXGDYWeaveItems_reflection_;
  delete ProGXGDYGameSendActionMahs::default_instance_;
  delete ProGXGDYGameSendActionMahs_reflection_;
  delete ProGXGDYGameBrokenRequest::default_instance_;
  delete ProGXGDYGameBrokenRequest_reflection_;
  delete ProGXGDYGameBrokenOperate::default_instance_;
  delete ProGXGDYGameBrokenOperate_reflection_;
  delete ProGXGDYGameBrokenNotify::default_instance_;
  delete ProGXGDYGameBrokenNotify_reflection_;
  delete ProGXGDYGameRuleConfig::default_instance_;
  delete ProGXGDYGameRuleConfig_reflection_;
  delete ProGXGDYGameBrokenStatus::default_instance_;
  delete ProGXGDYGameBrokenStatus_reflection_;
  delete ProGXGDYGameDataResp::default_instance_;
  delete ProGXGDYGameDataResp_reflection_;
  delete ProGXGDYGameRecordRequest::default_instance_;
  delete ProGXGDYGameRecordRequest_reflection_;
  delete ProGXGDYGameRecordResponse::default_instance_;
  delete ProGXGDYGameRecordResponse_reflection_;
  delete ProGXGDYGameUserLocationRequest::default_instance_;
  delete ProGXGDYGameUserLocationRequest_reflection_;
  delete ProGXGDYGameSyncCardResponse::default_instance_;
  delete ProGXGDYGameSyncCardResponse_reflection_;
  delete ProGXGDYGameUserPhoneStatusRequest::default_instance_;
  delete ProGXGDYGameUserPhoneStatusRequest_reflection_;
  delete ProGXGDYGameUserGiveUpRequest::default_instance_;
  delete ProGXGDYGameUserGiveUpRequest_reflection_;
  delete ProGXGDYGameUserHintRequest::default_instance_;
  delete ProGXGDYGameUserHintRequest_reflection_;
  delete ProGXGDYGameUserHintResponse::default_instance_;
  delete ProGXGDYGameUserHintResponse_reflection_;
  delete ProGXGDYGameUserDaTuNotify::default_instance_;
  delete ProGXGDYGameUserDaTuNotify_reflection_;
  delete ProGXGDYGameUserTeammateRequest::default_instance_;
  delete ProGXGDYGameUserTeammateRequest_reflection_;
  delete ProGXGDYGameUserDaTuRequest::default_instance_;
  delete ProGXGDYGameUserDaTuRequest_reflection_;
  delete ProGXGDYGameUserDaTuResponse::default_instance_;
  delete ProGXGDYGameUserDaTuResponse_reflection_;
  delete ProGXGDYGameUserDaTuResult::default_instance_;
  delete ProGXGDYGameUserDaTuResult_reflection_;
  delete ProGXGDYGameShangYouResult::default_instance_;
  delete ProGXGDYGameShangYouResult_reflection_;
  delete ProGXGDYGameShowFriendNotify::default_instance_;
  delete ProGXGDYGameShowFriendNotify_reflection_;
  delete ProGXGDYGameBoomNumNotify::default_instance_;
  delete ProGXGDYGameBoomNumNotify_reflection_;
  delete ProGXGDYGameShowBoomDataRequest::default_instance_;
  delete ProGXGDYGameShowBoomDataRequest_reflection_;
  delete ProGXGDYGameShowBoomDataResponse::default_instance_;
  delete ProGXGDYGameShowBoomDataResponse_reflection_;
  delete ProGXGDYGameCardTypeSelect::default_instance_;
  delete ProGXGDYGameCardTypeSelect_reflection_;
  delete ProGXGDYGameIsSurrenderSelect::default_instance_;
  delete ProGXGDYGameIsSurrenderSelect_reflection_;
  delete ProGXGDYGameIsSurrenderOperate::default_instance_;
  delete ProGXGDYGameIsSurrenderOperate_reflection_;
  delete ProGXGDYGameIsAgreeSurrenderSelect::default_instance_;
  delete ProGXGDYGameIsAgreeSurrenderSelect_reflection_;
  delete ProGXGDYGameIsAgreeSurrenderOperate::default_instance_;
  delete ProGXGDYGameIsAgreeSurrenderOperate_reflection_;
  delete ProGXGDYGameIsAgreeSurrenderStatus::default_instance_;
  delete ProGXGDYGameIsAgreeSurrenderStatus_reflection_;
  delete ProGXGDYGameSurrenderResult::default_instance_;
  delete ProGXGDYGameSurrenderResult_reflection_;
  delete ProGXGDYGameShowBoomNotify::default_instance_;
  delete ProGXGDYGameShowBoomNotify_reflection_;
  delete ProGXGDYGameShowBoomOperate::default_instance_;
  delete ProGXGDYGameShowBoomOperate_reflection_;
  delete ProGXGDYGameShowBoomResponse::default_instance_;
  delete ProGXGDYGameShowBoomResponse_reflection_;
}

void protobuf_AddDesc_GxGdyPk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGxGdyPk.proto\032\nbase.proto\"O\n\032ProGXGDYG"
    "ameStatusResponse\022\037\n\006status\030\002 \001(\0162\017.GXGD"
    "YGameState\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"C\n\034ProGXGDY"
    "GameDeskInfoResponse\022\021\n\tCellScore\030\002 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\231\021\"G\n\027ProGXGDYGameReadyNo"
    "tify\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\232\021\":\n\030ProGXGDYGameReadyRequest\022\014"
    "\n\004seat\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\233\021\";\n\031ProGXG"
    "DYGameReadyResponse\022\014\n\004seat\030\002 \001(\005\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\234\021\"b\n\021ProGXGDYGameStart\022\022\n\nbank"
    "erseat\030\002 \001(\005\022\021\n\tgamecount\030\003 \001(\005\022\024\n\014outCa"
    "rdtimes\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\235\021\"Y\n\026ProGX"
    "GDYGameDiceNotify\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030"
    "\003 \001(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\236\021\"L\n\027ProGXGDYGameDiceRequest\022\014\n\004seat\030\002 "
    "\001(\005\022\021\n\tdicecount\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\237\021"
    "\"[\n\026ProGXGDYGameDiceResult\022\014\n\004seat\030\002 \001(\005"
    "\022\016\n\006result\030\003 \003(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n\005M"
    "SGID\022\007\n\002ID\020\240\021\"l\n\024ProGXGDYGameSendMahs\022\014\n"
    "\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\021\n\tmahscount\030\004"
    " \003(\005\022\023\n\013cbLeftCount\030\005 \001(\005\"\020\n\005MSGID\022\007\n\002ID"
    "\020\241\021\"\230\002\n\024ProGXGDYGameKingData\022\014\n\004seat\030\002 \001"
    "(\005\022\014\n\004mahs\030\003 \003(\005\022\025\n\rdownKingScore\030\004 \003(\005\022"
    "\021\n\tkingcount\030\005 \003(\005\022\020\n\010viceking\030\006 \003(\005\0227\n\013"
    "notify_type\030\007 \001(\0162\017.GXGDYSEND_TYPE:\021GXGD"
    "Y_NORMAL_SEND\0221\n\tking_type\030\010 \001(\0162\017.GXGDY"
    "KING_TYPE:\rGXGDY_KING_UP\022\024\n\014cbChongGuang"
    "\030\t \003(\005\022\024\n\014cbBaWangKing\030\n \003(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\242\021\"\353\001\n\033ProGXGDYGameOutMahsResponse\022\014"
    "\n\004seat\030\002 \001(\005\022\017\n\007outMahs\030\003 \003(\005\022\020\n\010handmah"
    "s\030\004 \003(\005\022\021\n\tcardCount\030\005 \001(\005\022\020\n\010cardType\030\006"
    " \001(\005\022\023\n\013cardtypeflg\030\007 \001(\005\022\021\n\tcardPoint\030\010"
    " \001(\005\022\022\n\nseriesFlag\030\t \001(\005\022\022\n\nseriesNums\030\n"
    " \001(\005\022\024\n\014noChangeMahs\030\013 \003(\005\"\020\n\005MSGID\022\007\n\002I"
    "D\020\243\021\"[\n\026ProGXGDYGameTimerPower\022\014\n\004seat\030\002"
    " \001(\005\022\014\n\004time\030\003 \001(\005\022\023\n\013outcardTime\030\004 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\244\021\"\214\001\n\031ProGXGDYGameOperat"
    "eNotify\022\022\n\nresumeSeat\030\002 \001(\005\022\022\n\nActionMas"
    "k\030\003 \001(\005\022\022\n\nActionCard\030\004 \001(\005\022\014\n\004time\030\005 \001("
    "\005\022\023\n\013operateseat\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\245\021"
    "\"\253\001\n\031ProGXGDYGameOperateResult\022\024\n\014wOpera"
    "teUser\030\002 \001(\005\022\024\n\014wProvideUser\030\003 \001(\005\022\024\n\014wO"
    "perateCode\030\004 \001(\005\022\025\n\rcbOperateCard\030\005 \001(\005\022"
    "\020\n\010handmahs\030\006 \003(\005\022\021\n\thandcount\030\007 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\246\021\"i\n\032ProGXGDYGameOperateReq"
    "uest\022\014\n\004seat\030\002 \001(\005\022\024\n\014wOperateCode\030\003 \001(\005"
    "\022\025\n\rcbOperateCard\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\247"
    "\021\"D\n\021ProGXGDYGameTrust\022\014\n\004seat\030\002 \001(\005\022\017\n\007"
    "isTrust\030\003 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\250\021\"v\n\031ProGX"
    "GDYGameOutMahRequest\022\014\n\004seat\030\002 \001(\005\022\017\n\007ou"
    "tMahs\030\003 \003(\005\022\024\n\014nochangemahs\030\004 \003(\005\022\022\n\nbIs"
    "Changed\030\005 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\251\021\"\212\001\n\025ProG"
    "XGDYGameCatchCard\022\014\n\004seat\030\002 \001(\005\022\022\n\ncbCar"
    "dData\030\003 \001(\005\022\023\n\013wActionMask\030\004 \001(\005\022\023\n\013cbIs"
    "NotGang\030\005 \001(\010\022\023\n\013cbLeftCount\030\006 \001(\005\"\020\n\005MS"
    "GID\022\007\n\002ID\020\252\021\"\034\n\014GXGDYMahList\022\014\n\004Mahs\030\001 \003"
    "(\005\"$\n\016GXGDYScoreList\022\022\n\nroundScore\030\001 \003(\005"
    "\"E\n\016GXGDYAwardList\022\014\n\004seat\030\001 \001(\005\022\021\n\tCard"
    "sData\030\002 \003(\005\022\022\n\nawardScore\030\003 \001(\005\"\250\006\n\017ProG"
    "XGDYGameEnd\022\020\n\010lGameTax\030\002 \001(\005\022\024\n\014cbChong"
    "Guang\030\003 \003(\005\022\024\n\014cbBaWangKing\030\004 \003(\005\022\024\n\014wPr"
    "ovideUser\030\005 \001(\005\022\023\n\013cbChiHuCard\030\006 \001(\005\022\023\n\013"
    "dwChiHuKind\030\007 \003(\005\022\024\n\014dwChiHuRight\030\010 \003(\005\022"
    "\030\n\020lTotaslGameScore\030\t \003(\005\022\031\n\021lCurrentGam"
    "eScore\030\n \003(\005\022\032\n\022lCurrentPointScore\030\013 \003(\005"
    "\022\024\n\014lAttachScore\030\014 \003(\005\022%\n\016cbHandCardData"
    "\030\r \003(\0132\r.GXGDYMahList\022(\n\017cbAwardCardData"
    "\030\016 \003(\0132\017.GXGDYAwardList\022\025\n\rlOnlyWinScore"
    "\030\017 \003(\005\022\021\n\tbRoundEnd\030\020 \001(\010\022\024\n\014lHuiTouScor"
    "e\030\021 \003(\005\022\022\n\nbZhuangWin\030\022 \001(\010\022\031\n\021cbJiangMa"
    "CardData\030\023 \003(\005\022\'\n\016detailedScores\030\024 \003(\0132\017"
    ".GXGDYScoreList\022\017\n\007bIsDaTu\030\025 \001(\010\022\021\n\tbIsK"
    "uTong\030\026 \001(\010\022\020\n\010nNo1Seat\030\027 \001(\005\022\022\n\nnWinerS"
    "eat\030\030 \001(\005\022\023\n\013nWinersMate\030\031 \001(\005\022\020\n\010nNo2Se"
    "at\030\032 \001(\005\022\020\n\010nNo3Seat\030\033 \001(\005\022\020\n\010nNo4Seat\030\034"
    " \001(\005\022\017\n\007bBroken\030\035 \001(\010\022\031\n\021nBrokenPlayerSe"
    "at\030\036 \001(\005\022\022\n\nbSurrender\030\037 \001(\010\022\034\n\024nSurrend"
    "erPlayerSeat\030  \001(\005\022\021\n\tbIsSpring\030! \003(\010\022\031\n"
    "\021nSurplusCardCount\030\" \003(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\253\021\"s\n\035ProGXGDYGameQuickSoundRequest\022\017\n\007d"
    "esk_id\030\002 \001(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010sound_i"
    "d\030\004 \001(\005\022\014\n\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\254\021\""
    "t\n\036ProGXGDYGameQuickSoundResponse\022\017\n\007des"
    "k_id\030\002 \001(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030"
    "\004 \001(\005\022\014\n\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\255\021\"\267\001"
    "\n\033ProGXGDYGameSendDiscardMahs\022\017\n\007seat_id"
    "\030\002 \001(\005\022!\n\ncbCardData\030\003 \003(\0132\r.GXGDYMahLis"
    "t\022)\n\022cbNoChangeCardData\030\004 \003(\0132\r.GXGDYMah"
    "List\022\021\n\tdeskCount\030\005 \001(\005\022\024\n\014outCardCount\030"
    "\006 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\256\021\"^\n\016GXGDYWeaveIte"
    "m\022\021\n\tweaveKind\030\001 \001(\005\022\022\n\ncentercard\030\002 \001(\005"
    "\022\023\n\013provideUser\030\003 \001(\005\022\020\n\010cardsize\030\004 \001(\005\""
    "1\n\017GXGDYWeaveItems\022\036\n\005items\030\001 \003(\0132\017.GXGD"
    "YWeaveItem\"a\n\032ProGXGDYGameSendActionMahs"
    "\022\017\n\007seat_id\030\002 \001(\005\022 \n\006weaves\030\003 \003(\0132\020.GXGD"
    "YWeaveItems\"\020\n\005MSGID\022\007\n\002ID\020\257\021\"m\n\031ProGXGD"
    "YGameBrokenRequest\022\017\n\007seat_id\030\002 \001(\005\022\037\n\004t"
    "ype\030\003 \001(\0162\021.GXGDYBROKEN_TYPE\022\014\n\004time\030\004 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\260\021\"w\n\031ProGXGDYGameBrok"
    "enOperate\022\017\n\007seat_id\030\002 \001(\005\0227\n\006result\030\003 \001"
    "(\0162\024.GXGDYBROKEN_OPERATE:\021GXGDY_BO_DISAG"
    "REE\"\020\n\005MSGID\022\007\n\002ID\020\261\021\"x\n\030ProGXGDYGameBro"
    "kenNotify\022\017\n\007seat_id\030\002 \001(\005\0229\n\014operate_co"
    "de\030\003 \001(\0162\021.GXGDYBROKEN_CODE:\020GXGDY_BC_SU"
    "CCESS\"\020\n\005MSGID\022\007\n\002ID\020\262\021\"\263\003\n\026ProGXGDYGame"
    "RuleConfig\022\022\n\ngame_round\030\001 \001(\005\022\021\n\tneed_c"
    "ard\030\002 \001(\005\022\030\n\020have_bottom_king\030\003 \001(\010\022\024\n\014h"
    "ave_mai_lei\030\004 \001(\010\022\024\n\014hava_hui_tou\030\005 \001(\010\022"
    "\023\n\013nMasterSeat\030\006 \001(\005\022\032\n\022current_game_cou"
    "nt\030\007 \001(\005\022\023\n\013have_jianma\030\010 \001(\010\022\025\n\rnChongg"
    "uanNum\030\t \001(\005\022\025\n\rbbawangfanbei\030\n \001(\010\022\022\n\nn"
    "PlayerNum\030\013 \001(\005\022\020\n\010sRoomNum\030\014 \001(\014\022\021\n\tsPl"
    "ayTime\030\r \001(\014\022\020\n\010gametype\030\016 \001(\005\022\022\n\nisJing"
    "Dian\030\017 \001(\010\022\026\n\016isOpenTeammate\030\020 \001(\010\022\031\n\021bI"
    "sSendSingleCard\030\021 \001(\010\022\024\n\014nMultipleTop\030\022 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\263\021\"k\n\030ProGXGDYGameBro"
    "kenStatus\022\023\n\013broken_seat\030\001 \001(\005\022\025\n\rbroken"
    "_status\030\002 \003(\010\022\021\n\tleft_time\030\003 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\264\021\"K\n\024ProGXGDYGameDataResp\022\023\n\013to"
    "tal_score\030\001 \003(\005\022\014\n\004type\030\002 \001(\005\"\020\n\005MSGID\022\007"
    "\n\002ID\020\265\021\"K\n\031ProGXGDYGameRecordRequest\022\017\n\007"
    "seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002I"
    "D\020\266\021\"L\n\032ProGXGDYGameRecordResponse\022\017\n\007se"
    "at_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020"
    "\267\021\"\231\001\n\037ProGXGDYGameUserLocationRequest\022\017"
    "\n\007seat_id\030\001 \001(\005\022\023\n\013dwlongitude\030\002 \001(\001\022\022\n\n"
    "dwlatitude\030\003 \001(\001\022\023\n\013strDistrict\030\004 \001(\014\022\025\n"
    "\rstrStreetName\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\270\021\"P"
    "\n\034ProGXGDYGameSyncCardResponse\022\014\n\004seat\030\002"
    " \001(\005\022\020\n\010handmahs\030\003 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\271\021"
    "\"[\n\"ProGXGDYGameUserPhoneStatusRequest\022\017"
    "\n\007seat_id\030\001 \001(\005\022\022\n\nuserstatus\030\002 \001(\005\"\020\n\005M"
    "SGID\022\007\n\002ID\020\272\021\"B\n\035ProGXGDYGameUserGiveUpR"
    "equest\022\017\n\007seat_id\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\273"
    "\021\"G\n\033ProGXGDYGameUserHintRequest\022\026\n\016bIsU"
    "serRequest\030\001 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\274\021\"P\n\034Pr"
    "oGXGDYGameUserHintResponse\022\r\n\005lenth\030\001 \001("
    "\005\022\017\n\007outMahs\030\002 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\275\021\"<\n\032"
    "ProGXGDYGameUserDaTuNotify\022\014\n\004seat\030\001 \001(\005"
    "\"\020\n\005MSGID\022\007\n\002ID\020\276\021\"]\n\037ProGXGDYGameUserTe"
    "ammateRequest\022\026\n\016bankerMateSeat\030\001 \001(\005\022\020\n"
    "\010mateCard\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\277\021\"N\n\033Pro"
    "GXGDYGameUserDaTuRequest\022\014\n\004seat\030\001 \001(\005\022\017"
    "\n\007bIsDaTu\030\002 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\300\021\"a\n\034Pro"
    "GXGDYGameUserDaTuResponse\022\014\n\004seat\030\001 \001(\005\022"
    "\017\n\007bIsDaTu\030\002 \001(\010\022\020\n\010nextSeat\030\003 \001(\005\"\020\n\005MS"
    "GID\022\007\n\002ID\020\301\021\"M\n\032ProGXGDYGameUserDaTuResu"
    "lt\022\014\n\004seat\030\001 \001(\005\022\017\n\007bIsDaTu\030\002 \001(\010\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\302\021\"D\n\032ProGXGDYGameShangYouResul"
    "t\022\024\n\014shangyouSeat\030\001 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\303"
    "\021\"\?\n\034ProGXGDYGameShowFriendNotify\022\r\n\005bSh"
    "ow\030\001 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\304\021\"N\n\031ProGXGDYGa"
    "meBoomNumNotify\022\r\n\005nSeat\030\001 \001(\005\022\020\n\010nBoomN"
    "um\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\305\021\"B\n\037ProGXGDYGa"
    "meShowBoomDataRequest\022\r\n\005nSeat\030\001 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\306\021\"\203\001\n ProGXGDYGameShowBoomD"
    "ataResponse\022\r\n\005nSeat\030\001 \001(\005\022\024\n\014bIsSendToA"
    "ll\030\002 \001(\010\022(\n\017cbAwardCardData\030\003 \003(\0132\017.GXGD"
    "YAwardList\"\020\n\005MSGID\022\007\n\002ID\020\307\021\"h\n\032ProGXGDY"
    "GameCardTypeSelect\022\r\n\005nSeat\030\001 \001(\005\022)\n\022Car"
    "dTypeSelectData\030\002 \003(\0132\r.GXGDYMahList\"\020\n\005"
    "MSGID\022\007\n\002ID\020\310\021\"@\n\035ProGXGDYGameIsSurrende"
    "rSelect\022\r\n\005nSeat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\311\021"
    "\"W\n\036ProGXGDYGameIsSurrenderOperate\022\r\n\005nS"
    "eat\030\001 \001(\005\022\024\n\014bIsSurrender\030\002 \001(\010\"\020\n\005MSGID"
    "\022\007\n\002ID\020\312\021\"N\n\"ProGXGDYGameIsAgreeSurrende"
    "rSelect\022\026\n\016nSurrenderSeat\030\001 \001(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\313\021\"a\n#ProGXGDYGameIsAgreeSurrende"
    "rOperate\022\r\n\005nSeat\030\001 \001(\005\022\031\n\021bIsAgreeSurre"
    "nder\030\002 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\314\021\"`\n\"ProGXGDY"
    "GameIsAgreeSurrenderStatus\022\r\n\005nSeat\030\001 \001("
    "\005\022\031\n\021bIsAgreeSurrender\030\002 \001(\010\"\020\n\005MSGID\022\007\n"
    "\002ID\020\315\021\"I\n\033ProGXGDYGameSurrenderResult\022\030\n"
    "\020bSurrenderResult\030\001 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\316"
    "\021\".\n\032ProGXGDYGameShowBoomNotify\"\020\n\005MSGID"
    "\022\007\n\002ID\020\317\021\">\n\033ProGXGDYGameShowBoomOperate"
    "\022\r\n\005nSeat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\320\021\"S\n\034Pro"
    "GXGDYGameShowBoomResponse\022\r\n\005nSeat\030\001 \001(\005"
    "\022\022\n\nAwardScore\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\321\021*\222"
    "\001\n\016GXGDYGameState\022\023\n\017GXGDY_GAME_IDLE\020\001\022\030"
    "\n\024GXGDY_GAME_DICE_BANK\020\002\022\023\n\017GXGDY_GAME_S"
    "END\020\003\022\023\n\017GXGDY_GAME_DATU\020\004\022\023\n\017GXGDY_GAME"
    "_PLAY\020\006\022\022\n\016GXGDY_GAME_END\020\007*>\n\016GXGDYSEND"
    "_TYPE\022\025\n\021GXGDY_NORMAL_SEND\020\001\022\025\n\021GXGDY_RE"
    "COME_SEND\020\002*Q\n\016GXGDYKING_TYPE\022\021\n\rGXGDY_K"
    "ING_UP\020\001\022\025\n\021GXGDY_KING_HUITOU\020\002\022\025\n\021GXGDY"
    "_KING_MAILEI\020\003*Y\n\020GXGDYBROKEN_TYPE\022\030\n\024GX"
    "GDY_BT_MASTER_QUIT\020\000\022\026\n\022GXGDY_BT_USER_QU"
    "IT\020\001\022\023\n\017GXGDY_BT_BROKEN\020\002*@\n\023GXGDYBROKEN"
    "_OPERATE\022\025\n\021GXGDY_BO_DISAGREE\020\000\022\022\n\016GXGDY"
    "_BO_AGREE\020\001*r\n\020GXGDYBROKEN_CODE\022\024\n\020GXGDY"
    "_BC_SUCCESS\020\000\022\025\n\021GXGDY_BC_DISAGREE\020\001\022\031\n\025"
    "GXGDY_BC_QUIT_SUCCESS\020\002\022\026\n\022GXGDY_BC_EXCE"
    "PTION\020\003", 7727);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GxGdyPk.proto", &protobuf_RegisterTypes);
  ProGXGDYGameStatusResponse::default_instance_ = new ProGXGDYGameStatusResponse();
  ProGXGDYGameDeskInfoResponse::default_instance_ = new ProGXGDYGameDeskInfoResponse();
  ProGXGDYGameReadyNotify::default_instance_ = new ProGXGDYGameReadyNotify();
  ProGXGDYGameReadyRequest::default_instance_ = new ProGXGDYGameReadyRequest();
  ProGXGDYGameReadyResponse::default_instance_ = new ProGXGDYGameReadyResponse();
  ProGXGDYGameStart::default_instance_ = new ProGXGDYGameStart();
  ProGXGDYGameDiceNotify::default_instance_ = new ProGXGDYGameDiceNotify();
  ProGXGDYGameDiceRequest::default_instance_ = new ProGXGDYGameDiceRequest();
  ProGXGDYGameDiceResult::default_instance_ = new ProGXGDYGameDiceResult();
  ProGXGDYGameSendMahs::default_instance_ = new ProGXGDYGameSendMahs();
  ProGXGDYGameKingData::default_instance_ = new ProGXGDYGameKingData();
  ProGXGDYGameOutMahsResponse::default_instance_ = new ProGXGDYGameOutMahsResponse();
  ProGXGDYGameTimerPower::default_instance_ = new ProGXGDYGameTimerPower();
  ProGXGDYGameOperateNotify::default_instance_ = new ProGXGDYGameOperateNotify();
  ProGXGDYGameOperateResult::default_instance_ = new ProGXGDYGameOperateResult();
  ProGXGDYGameOperateRequest::default_instance_ = new ProGXGDYGameOperateRequest();
  ProGXGDYGameTrust::default_instance_ = new ProGXGDYGameTrust();
  ProGXGDYGameOutMahRequest::default_instance_ = new ProGXGDYGameOutMahRequest();
  ProGXGDYGameCatchCard::default_instance_ = new ProGXGDYGameCatchCard();
  GXGDYMahList::default_instance_ = new GXGDYMahList();
  GXGDYScoreList::default_instance_ = new GXGDYScoreList();
  GXGDYAwardList::default_instance_ = new GXGDYAwardList();
  ProGXGDYGameEnd::default_instance_ = new ProGXGDYGameEnd();
  ProGXGDYGameQuickSoundRequest::default_instance_ = new ProGXGDYGameQuickSoundRequest();
  ProGXGDYGameQuickSoundResponse::default_instance_ = new ProGXGDYGameQuickSoundResponse();
  ProGXGDYGameSendDiscardMahs::default_instance_ = new ProGXGDYGameSendDiscardMahs();
  GXGDYWeaveItem::default_instance_ = new GXGDYWeaveItem();
  GXGDYWeaveItems::default_instance_ = new GXGDYWeaveItems();
  ProGXGDYGameSendActionMahs::default_instance_ = new ProGXGDYGameSendActionMahs();
  ProGXGDYGameBrokenRequest::default_instance_ = new ProGXGDYGameBrokenRequest();
  ProGXGDYGameBrokenOperate::default_instance_ = new ProGXGDYGameBrokenOperate();
  ProGXGDYGameBrokenNotify::default_instance_ = new ProGXGDYGameBrokenNotify();
  ProGXGDYGameRuleConfig::default_instance_ = new ProGXGDYGameRuleConfig();
  ProGXGDYGameBrokenStatus::default_instance_ = new ProGXGDYGameBrokenStatus();
  ProGXGDYGameDataResp::default_instance_ = new ProGXGDYGameDataResp();
  ProGXGDYGameRecordRequest::default_instance_ = new ProGXGDYGameRecordRequest();
  ProGXGDYGameRecordResponse::default_instance_ = new ProGXGDYGameRecordResponse();
  ProGXGDYGameUserLocationRequest::default_instance_ = new ProGXGDYGameUserLocationRequest();
  ProGXGDYGameSyncCardResponse::default_instance_ = new ProGXGDYGameSyncCardResponse();
  ProGXGDYGameUserPhoneStatusRequest::default_instance_ = new ProGXGDYGameUserPhoneStatusRequest();
  ProGXGDYGameUserGiveUpRequest::default_instance_ = new ProGXGDYGameUserGiveUpRequest();
  ProGXGDYGameUserHintRequest::default_instance_ = new ProGXGDYGameUserHintRequest();
  ProGXGDYGameUserHintResponse::default_instance_ = new ProGXGDYGameUserHintResponse();
  ProGXGDYGameUserDaTuNotify::default_instance_ = new ProGXGDYGameUserDaTuNotify();
  ProGXGDYGameUserTeammateRequest::default_instance_ = new ProGXGDYGameUserTeammateRequest();
  ProGXGDYGameUserDaTuRequest::default_instance_ = new ProGXGDYGameUserDaTuRequest();
  ProGXGDYGameUserDaTuResponse::default_instance_ = new ProGXGDYGameUserDaTuResponse();
  ProGXGDYGameUserDaTuResult::default_instance_ = new ProGXGDYGameUserDaTuResult();
  ProGXGDYGameShangYouResult::default_instance_ = new ProGXGDYGameShangYouResult();
  ProGXGDYGameShowFriendNotify::default_instance_ = new ProGXGDYGameShowFriendNotify();
  ProGXGDYGameBoomNumNotify::default_instance_ = new ProGXGDYGameBoomNumNotify();
  ProGXGDYGameShowBoomDataRequest::default_instance_ = new ProGXGDYGameShowBoomDataRequest();
  ProGXGDYGameShowBoomDataResponse::default_instance_ = new ProGXGDYGameShowBoomDataResponse();
  ProGXGDYGameCardTypeSelect::default_instance_ = new ProGXGDYGameCardTypeSelect();
  ProGXGDYGameIsSurrenderSelect::default_instance_ = new ProGXGDYGameIsSurrenderSelect();
  ProGXGDYGameIsSurrenderOperate::default_instance_ = new ProGXGDYGameIsSurrenderOperate();
  ProGXGDYGameIsAgreeSurrenderSelect::default_instance_ = new ProGXGDYGameIsAgreeSurrenderSelect();
  ProGXGDYGameIsAgreeSurrenderOperate::default_instance_ = new ProGXGDYGameIsAgreeSurrenderOperate();
  ProGXGDYGameIsAgreeSurrenderStatus::default_instance_ = new ProGXGDYGameIsAgreeSurrenderStatus();
  ProGXGDYGameSurrenderResult::default_instance_ = new ProGXGDYGameSurrenderResult();
  ProGXGDYGameShowBoomNotify::default_instance_ = new ProGXGDYGameShowBoomNotify();
  ProGXGDYGameShowBoomOperate::default_instance_ = new ProGXGDYGameShowBoomOperate();
  ProGXGDYGameShowBoomResponse::default_instance_ = new ProGXGDYGameShowBoomResponse();
  ProGXGDYGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameStart::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameKingData::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameTrust::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameCatchCard::default_instance_->InitAsDefaultInstance();
  GXGDYMahList::default_instance_->InitAsDefaultInstance();
  GXGDYScoreList::default_instance_->InitAsDefaultInstance();
  GXGDYAwardList::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameEnd::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  GXGDYWeaveItem::default_instance_->InitAsDefaultInstance();
  GXGDYWeaveItems::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameDataResp::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserDaTuNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserTeammateRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserDaTuRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserDaTuResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameUserDaTuResult::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShangYouResult::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShowFriendNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameBoomNumNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShowBoomDataRequest::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShowBoomDataResponse::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameCardTypeSelect::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameIsSurrenderSelect::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameIsSurrenderOperate::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameIsAgreeSurrenderSelect::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameIsAgreeSurrenderOperate::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameIsAgreeSurrenderStatus::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameSurrenderResult::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShowBoomNotify::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShowBoomOperate::default_instance_->InitAsDefaultInstance();
  ProGXGDYGameShowBoomResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GxGdyPk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GxGdyPk_2eproto {
  StaticDescriptorInitializer_GxGdyPk_2eproto() {
    protobuf_AddDesc_GxGdyPk_2eproto();
  }
} static_descriptor_initializer_GxGdyPk_2eproto_;
const ::google::protobuf::EnumDescriptor* GXGDYGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYGameState_descriptor_;
}
bool GXGDYGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GXGDYSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYSEND_TYPE_descriptor_;
}
bool GXGDYSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GXGDYKING_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYKING_TYPE_descriptor_;
}
bool GXGDYKING_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GXGDYBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYBROKEN_TYPE_descriptor_;
}
bool GXGDYBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GXGDYBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYBROKEN_OPERATE_descriptor_;
}
bool GXGDYBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GXGDYBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYBROKEN_CODE_descriptor_;
}
bool GXGDYBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameStatusResponse_MSGID_descriptor_;
}
bool ProGXGDYGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameStatusResponse_MSGID ProGXGDYGameStatusResponse::ID;
const ProGXGDYGameStatusResponse_MSGID ProGXGDYGameStatusResponse::MSGID_MIN;
const ProGXGDYGameStatusResponse_MSGID ProGXGDYGameStatusResponse::MSGID_MAX;
const int ProGXGDYGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameStatusResponse::ProGXGDYGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameStatusResponse::InitAsDefaultInstance() {
}

ProGXGDYGameStatusResponse::ProGXGDYGameStatusResponse(const ProGXGDYGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameStatusResponse::~ProGXGDYGameStatusResponse() {
  SharedDtor();
}

void ProGXGDYGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameStatusResponse_descriptor_;
}

const ProGXGDYGameStatusResponse& ProGXGDYGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameStatusResponse* ProGXGDYGameStatusResponse::default_instance_ = NULL;

ProGXGDYGameStatusResponse* ProGXGDYGameStatusResponse::New() const {
  return new ProGXGDYGameStatusResponse;
}

void ProGXGDYGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GXGDYGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GXGDYGameState_IsValid(value)) {
            set_status(static_cast< ::GXGDYGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GXGDYGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GXGDYGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GXGDYGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameStatusResponse::MergeFrom(const ProGXGDYGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameStatusResponse::CopyFrom(const ProGXGDYGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameStatusResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameStatusResponse::Swap(ProGXGDYGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameStatusResponse_descriptor_;
  metadata.reflection = ProGXGDYGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProGXGDYGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameDeskInfoResponse_MSGID ProGXGDYGameDeskInfoResponse::ID;
const ProGXGDYGameDeskInfoResponse_MSGID ProGXGDYGameDeskInfoResponse::MSGID_MIN;
const ProGXGDYGameDeskInfoResponse_MSGID ProGXGDYGameDeskInfoResponse::MSGID_MAX;
const int ProGXGDYGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameDeskInfoResponse::ProGXGDYGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProGXGDYGameDeskInfoResponse::ProGXGDYGameDeskInfoResponse(const ProGXGDYGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameDeskInfoResponse::~ProGXGDYGameDeskInfoResponse() {
  SharedDtor();
}

void ProGXGDYGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDeskInfoResponse_descriptor_;
}

const ProGXGDYGameDeskInfoResponse& ProGXGDYGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameDeskInfoResponse* ProGXGDYGameDeskInfoResponse::default_instance_ = NULL;

ProGXGDYGameDeskInfoResponse* ProGXGDYGameDeskInfoResponse::New() const {
  return new ProGXGDYGameDeskInfoResponse;
}

void ProGXGDYGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameDeskInfoResponse::MergeFrom(const ProGXGDYGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameDeskInfoResponse::CopyFrom(const ProGXGDYGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameDeskInfoResponse::Swap(ProGXGDYGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProGXGDYGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameReadyNotify_MSGID_descriptor_;
}
bool ProGXGDYGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameReadyNotify_MSGID ProGXGDYGameReadyNotify::ID;
const ProGXGDYGameReadyNotify_MSGID ProGXGDYGameReadyNotify::MSGID_MIN;
const ProGXGDYGameReadyNotify_MSGID ProGXGDYGameReadyNotify::MSGID_MAX;
const int ProGXGDYGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameReadyNotify::kSeatFieldNumber;
const int ProGXGDYGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameReadyNotify::ProGXGDYGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameReadyNotify::InitAsDefaultInstance() {
}

ProGXGDYGameReadyNotify::ProGXGDYGameReadyNotify(const ProGXGDYGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameReadyNotify::~ProGXGDYGameReadyNotify() {
  SharedDtor();
}

void ProGXGDYGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameReadyNotify_descriptor_;
}

const ProGXGDYGameReadyNotify& ProGXGDYGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameReadyNotify* ProGXGDYGameReadyNotify::default_instance_ = NULL;

ProGXGDYGameReadyNotify* ProGXGDYGameReadyNotify::New() const {
  return new ProGXGDYGameReadyNotify;
}

void ProGXGDYGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameReadyNotify::MergeFrom(const ProGXGDYGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameReadyNotify::CopyFrom(const ProGXGDYGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameReadyNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameReadyNotify::Swap(ProGXGDYGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameReadyNotify_descriptor_;
  metadata.reflection = ProGXGDYGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameReadyRequest_MSGID_descriptor_;
}
bool ProGXGDYGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameReadyRequest_MSGID ProGXGDYGameReadyRequest::ID;
const ProGXGDYGameReadyRequest_MSGID ProGXGDYGameReadyRequest::MSGID_MIN;
const ProGXGDYGameReadyRequest_MSGID ProGXGDYGameReadyRequest::MSGID_MAX;
const int ProGXGDYGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameReadyRequest::ProGXGDYGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameReadyRequest::InitAsDefaultInstance() {
}

ProGXGDYGameReadyRequest::ProGXGDYGameReadyRequest(const ProGXGDYGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameReadyRequest::~ProGXGDYGameReadyRequest() {
  SharedDtor();
}

void ProGXGDYGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameReadyRequest_descriptor_;
}

const ProGXGDYGameReadyRequest& ProGXGDYGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameReadyRequest* ProGXGDYGameReadyRequest::default_instance_ = NULL;

ProGXGDYGameReadyRequest* ProGXGDYGameReadyRequest::New() const {
  return new ProGXGDYGameReadyRequest;
}

void ProGXGDYGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameReadyRequest::MergeFrom(const ProGXGDYGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameReadyRequest::CopyFrom(const ProGXGDYGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameReadyRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameReadyRequest::Swap(ProGXGDYGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameReadyRequest_descriptor_;
  metadata.reflection = ProGXGDYGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameReadyResponse_MSGID_descriptor_;
}
bool ProGXGDYGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameReadyResponse_MSGID ProGXGDYGameReadyResponse::ID;
const ProGXGDYGameReadyResponse_MSGID ProGXGDYGameReadyResponse::MSGID_MIN;
const ProGXGDYGameReadyResponse_MSGID ProGXGDYGameReadyResponse::MSGID_MAX;
const int ProGXGDYGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameReadyResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameReadyResponse::ProGXGDYGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameReadyResponse::InitAsDefaultInstance() {
}

ProGXGDYGameReadyResponse::ProGXGDYGameReadyResponse(const ProGXGDYGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameReadyResponse::~ProGXGDYGameReadyResponse() {
  SharedDtor();
}

void ProGXGDYGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameReadyResponse_descriptor_;
}

const ProGXGDYGameReadyResponse& ProGXGDYGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameReadyResponse* ProGXGDYGameReadyResponse::default_instance_ = NULL;

ProGXGDYGameReadyResponse* ProGXGDYGameReadyResponse::New() const {
  return new ProGXGDYGameReadyResponse;
}

void ProGXGDYGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameReadyResponse::MergeFrom(const ProGXGDYGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameReadyResponse::CopyFrom(const ProGXGDYGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameReadyResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameReadyResponse::Swap(ProGXGDYGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameReadyResponse_descriptor_;
  metadata.reflection = ProGXGDYGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameStart_MSGID_descriptor_;
}
bool ProGXGDYGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameStart_MSGID ProGXGDYGameStart::ID;
const ProGXGDYGameStart_MSGID ProGXGDYGameStart::MSGID_MIN;
const ProGXGDYGameStart_MSGID ProGXGDYGameStart::MSGID_MAX;
const int ProGXGDYGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameStart::kBankerseatFieldNumber;
const int ProGXGDYGameStart::kGamecountFieldNumber;
const int ProGXGDYGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameStart::ProGXGDYGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameStart::InitAsDefaultInstance() {
}

ProGXGDYGameStart::ProGXGDYGameStart(const ProGXGDYGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameStart::~ProGXGDYGameStart() {
  SharedDtor();
}

void ProGXGDYGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameStart_descriptor_;
}

const ProGXGDYGameStart& ProGXGDYGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameStart* ProGXGDYGameStart::default_instance_ = NULL;

ProGXGDYGameStart* ProGXGDYGameStart::New() const {
  return new ProGXGDYGameStart;
}

void ProGXGDYGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameStart::MergeFrom(const ProGXGDYGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameStart::CopyFrom(const ProGXGDYGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameStart::IsInitialized() const {

  return true;
}

void ProGXGDYGameStart::Swap(ProGXGDYGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameStart_descriptor_;
  metadata.reflection = ProGXGDYGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDiceNotify_MSGID_descriptor_;
}
bool ProGXGDYGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameDiceNotify_MSGID ProGXGDYGameDiceNotify::ID;
const ProGXGDYGameDiceNotify_MSGID ProGXGDYGameDiceNotify::MSGID_MIN;
const ProGXGDYGameDiceNotify_MSGID ProGXGDYGameDiceNotify::MSGID_MAX;
const int ProGXGDYGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameDiceNotify::kSeatFieldNumber;
const int ProGXGDYGameDiceNotify::kTimeFieldNumber;
const int ProGXGDYGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameDiceNotify::ProGXGDYGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameDiceNotify::InitAsDefaultInstance() {
}

ProGXGDYGameDiceNotify::ProGXGDYGameDiceNotify(const ProGXGDYGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameDiceNotify::~ProGXGDYGameDiceNotify() {
  SharedDtor();
}

void ProGXGDYGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDiceNotify_descriptor_;
}

const ProGXGDYGameDiceNotify& ProGXGDYGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameDiceNotify* ProGXGDYGameDiceNotify::default_instance_ = NULL;

ProGXGDYGameDiceNotify* ProGXGDYGameDiceNotify::New() const {
  return new ProGXGDYGameDiceNotify;
}

void ProGXGDYGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameDiceNotify::MergeFrom(const ProGXGDYGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameDiceNotify::CopyFrom(const ProGXGDYGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameDiceNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameDiceNotify::Swap(ProGXGDYGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameDiceNotify_descriptor_;
  metadata.reflection = ProGXGDYGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDiceRequest_MSGID_descriptor_;
}
bool ProGXGDYGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameDiceRequest_MSGID ProGXGDYGameDiceRequest::ID;
const ProGXGDYGameDiceRequest_MSGID ProGXGDYGameDiceRequest::MSGID_MIN;
const ProGXGDYGameDiceRequest_MSGID ProGXGDYGameDiceRequest::MSGID_MAX;
const int ProGXGDYGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameDiceRequest::kSeatFieldNumber;
const int ProGXGDYGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameDiceRequest::ProGXGDYGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameDiceRequest::InitAsDefaultInstance() {
}

ProGXGDYGameDiceRequest::ProGXGDYGameDiceRequest(const ProGXGDYGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameDiceRequest::~ProGXGDYGameDiceRequest() {
  SharedDtor();
}

void ProGXGDYGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDiceRequest_descriptor_;
}

const ProGXGDYGameDiceRequest& ProGXGDYGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameDiceRequest* ProGXGDYGameDiceRequest::default_instance_ = NULL;

ProGXGDYGameDiceRequest* ProGXGDYGameDiceRequest::New() const {
  return new ProGXGDYGameDiceRequest;
}

void ProGXGDYGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameDiceRequest::MergeFrom(const ProGXGDYGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameDiceRequest::CopyFrom(const ProGXGDYGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameDiceRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameDiceRequest::Swap(ProGXGDYGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameDiceRequest_descriptor_;
  metadata.reflection = ProGXGDYGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDiceResult_MSGID_descriptor_;
}
bool ProGXGDYGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameDiceResult_MSGID ProGXGDYGameDiceResult::ID;
const ProGXGDYGameDiceResult_MSGID ProGXGDYGameDiceResult::MSGID_MIN;
const ProGXGDYGameDiceResult_MSGID ProGXGDYGameDiceResult::MSGID_MAX;
const int ProGXGDYGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameDiceResult::kSeatFieldNumber;
const int ProGXGDYGameDiceResult::kResultFieldNumber;
const int ProGXGDYGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameDiceResult::ProGXGDYGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameDiceResult::InitAsDefaultInstance() {
}

ProGXGDYGameDiceResult::ProGXGDYGameDiceResult(const ProGXGDYGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameDiceResult::~ProGXGDYGameDiceResult() {
  SharedDtor();
}

void ProGXGDYGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDiceResult_descriptor_;
}

const ProGXGDYGameDiceResult& ProGXGDYGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameDiceResult* ProGXGDYGameDiceResult::default_instance_ = NULL;

ProGXGDYGameDiceResult* ProGXGDYGameDiceResult::New() const {
  return new ProGXGDYGameDiceResult;
}

void ProGXGDYGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameDiceResult::MergeFrom(const ProGXGDYGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameDiceResult::CopyFrom(const ProGXGDYGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameDiceResult::IsInitialized() const {

  return true;
}

void ProGXGDYGameDiceResult::Swap(ProGXGDYGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameDiceResult_descriptor_;
  metadata.reflection = ProGXGDYGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSendMahs_MSGID_descriptor_;
}
bool ProGXGDYGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameSendMahs_MSGID ProGXGDYGameSendMahs::ID;
const ProGXGDYGameSendMahs_MSGID ProGXGDYGameSendMahs::MSGID_MIN;
const ProGXGDYGameSendMahs_MSGID ProGXGDYGameSendMahs::MSGID_MAX;
const int ProGXGDYGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameSendMahs::kSeatFieldNumber;
const int ProGXGDYGameSendMahs::kMahsFieldNumber;
const int ProGXGDYGameSendMahs::kMahscountFieldNumber;
const int ProGXGDYGameSendMahs::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameSendMahs::ProGXGDYGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameSendMahs::InitAsDefaultInstance() {
}

ProGXGDYGameSendMahs::ProGXGDYGameSendMahs(const ProGXGDYGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameSendMahs::~ProGXGDYGameSendMahs() {
  SharedDtor();
}

void ProGXGDYGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSendMahs_descriptor_;
}

const ProGXGDYGameSendMahs& ProGXGDYGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameSendMahs* ProGXGDYGameSendMahs::default_instance_ = NULL;

ProGXGDYGameSendMahs* ProGXGDYGameSendMahs::New() const {
  return new ProGXGDYGameSendMahs;
}

void ProGXGDYGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
  }
  mahs_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameSendMahs::MergeFrom(const ProGXGDYGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameSendMahs::CopyFrom(const ProGXGDYGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameSendMahs::IsInitialized() const {

  return true;
}

void ProGXGDYGameSendMahs::Swap(ProGXGDYGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameSendMahs_descriptor_;
  metadata.reflection = ProGXGDYGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameKingData_MSGID_descriptor_;
}
bool ProGXGDYGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameKingData_MSGID ProGXGDYGameKingData::ID;
const ProGXGDYGameKingData_MSGID ProGXGDYGameKingData::MSGID_MIN;
const ProGXGDYGameKingData_MSGID ProGXGDYGameKingData::MSGID_MAX;
const int ProGXGDYGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameKingData::kSeatFieldNumber;
const int ProGXGDYGameKingData::kMahsFieldNumber;
const int ProGXGDYGameKingData::kDownKingScoreFieldNumber;
const int ProGXGDYGameKingData::kKingcountFieldNumber;
const int ProGXGDYGameKingData::kVicekingFieldNumber;
const int ProGXGDYGameKingData::kNotifyTypeFieldNumber;
const int ProGXGDYGameKingData::kKingTypeFieldNumber;
const int ProGXGDYGameKingData::kCbChongGuangFieldNumber;
const int ProGXGDYGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameKingData::ProGXGDYGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameKingData::InitAsDefaultInstance() {
}

ProGXGDYGameKingData::ProGXGDYGameKingData(const ProGXGDYGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameKingData::~ProGXGDYGameKingData() {
  SharedDtor();
}

void ProGXGDYGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameKingData_descriptor_;
}

const ProGXGDYGameKingData& ProGXGDYGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameKingData* ProGXGDYGameKingData::default_instance_ = NULL;

ProGXGDYGameKingData* ProGXGDYGameKingData::New() const {
  return new ProGXGDYGameKingData;
}

void ProGXGDYGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .GXGDYSEND_TYPE notify_type = 7 [default = GXGDY_NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GXGDYSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::GXGDYSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .GXGDYKING_TYPE king_type = 8 [default = GXGDY_KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GXGDYKING_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::GXGDYKING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .GXGDYSEND_TYPE notify_type = 7 [default = GXGDY_NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .GXGDYKING_TYPE king_type = 8 [default = GXGDY_KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .GXGDYSEND_TYPE notify_type = 7 [default = GXGDY_NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .GXGDYKING_TYPE king_type = 8 [default = GXGDY_KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .GXGDYSEND_TYPE notify_type = 7 [default = GXGDY_NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .GXGDYKING_TYPE king_type = 8 [default = GXGDY_KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameKingData::MergeFrom(const ProGXGDYGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameKingData::CopyFrom(const ProGXGDYGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameKingData::IsInitialized() const {

  return true;
}

void ProGXGDYGameKingData::Swap(ProGXGDYGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameKingData_descriptor_;
  metadata.reflection = ProGXGDYGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOutMahsResponse_MSGID_descriptor_;
}
bool ProGXGDYGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameOutMahsResponse_MSGID ProGXGDYGameOutMahsResponse::ID;
const ProGXGDYGameOutMahsResponse_MSGID ProGXGDYGameOutMahsResponse::MSGID_MIN;
const ProGXGDYGameOutMahsResponse_MSGID ProGXGDYGameOutMahsResponse::MSGID_MAX;
const int ProGXGDYGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameOutMahsResponse::kSeatFieldNumber;
const int ProGXGDYGameOutMahsResponse::kOutMahsFieldNumber;
const int ProGXGDYGameOutMahsResponse::kHandmahsFieldNumber;
const int ProGXGDYGameOutMahsResponse::kCardCountFieldNumber;
const int ProGXGDYGameOutMahsResponse::kCardTypeFieldNumber;
const int ProGXGDYGameOutMahsResponse::kCardtypeflgFieldNumber;
const int ProGXGDYGameOutMahsResponse::kCardPointFieldNumber;
const int ProGXGDYGameOutMahsResponse::kSeriesFlagFieldNumber;
const int ProGXGDYGameOutMahsResponse::kSeriesNumsFieldNumber;
const int ProGXGDYGameOutMahsResponse::kNoChangeMahsFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameOutMahsResponse::ProGXGDYGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameOutMahsResponse::InitAsDefaultInstance() {
}

ProGXGDYGameOutMahsResponse::ProGXGDYGameOutMahsResponse(const ProGXGDYGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  cardtypeflg_ = 0;
  cardpoint_ = 0;
  seriesflag_ = 0;
  seriesnums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameOutMahsResponse::~ProGXGDYGameOutMahsResponse() {
  SharedDtor();
}

void ProGXGDYGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOutMahsResponse_descriptor_;
}

const ProGXGDYGameOutMahsResponse& ProGXGDYGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameOutMahsResponse* ProGXGDYGameOutMahsResponse::default_instance_ = NULL;

ProGXGDYGameOutMahsResponse* ProGXGDYGameOutMahsResponse::New() const {
  return new ProGXGDYGameOutMahsResponse;
}

void ProGXGDYGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
    cardtypeflg_ = 0;
    cardpoint_ = 0;
    seriesflag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    seriesnums_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cardtypeflg;
        break;
      }

      // optional int32 cardtypeflg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtypeflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtypeflg_)));
          set_has_cardtypeflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cardPoint;
        break;
      }

      // optional int32 cardPoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardpoint_)));
          set_has_cardpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seriesFlag;
        break;
      }

      // optional int32 seriesFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesflag_)));
          set_has_seriesflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_seriesNums;
        break;
      }

      // optional int32 seriesNums = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesnums_)));
          set_has_seriesnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_noChangeMahs;
        break;
      }

      // repeated int32 noChangeMahs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noChangeMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_noChangeMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // optional int32 cardtypeflg = 7;
  if (has_cardtypeflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cardtypeflg(), output);
  }

  // optional int32 cardPoint = 8;
  if (has_cardpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cardpoint(), output);
  }

  // optional int32 seriesFlag = 9;
  if (has_seriesflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seriesflag(), output);
  }

  // optional int32 seriesNums = 10;
  if (has_seriesnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->seriesnums(), output);
  }

  // repeated int32 noChangeMahs = 11;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->nochangemahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // optional int32 cardtypeflg = 7;
  if (has_cardtypeflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cardtypeflg(), target);
  }

  // optional int32 cardPoint = 8;
  if (has_cardpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cardpoint(), target);
  }

  // optional int32 seriesFlag = 9;
  if (has_seriesflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seriesflag(), target);
  }

  // optional int32 seriesNums = 10;
  if (has_seriesnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->seriesnums(), target);
  }

  // repeated int32 noChangeMahs = 11;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->nochangemahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 cardtypeflg = 7;
    if (has_cardtypeflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtypeflg());
    }

    // optional int32 cardPoint = 8;
    if (has_cardpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardpoint());
    }

    // optional int32 seriesFlag = 9;
    if (has_seriesflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesflag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 seriesNums = 10;
    if (has_seriesnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesnums());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  // repeated int32 noChangeMahs = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameOutMahsResponse::MergeFrom(const ProGXGDYGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_cardtypeflg()) {
      set_cardtypeflg(from.cardtypeflg());
    }
    if (from.has_cardpoint()) {
      set_cardpoint(from.cardpoint());
    }
    if (from.has_seriesflag()) {
      set_seriesflag(from.seriesflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seriesnums()) {
      set_seriesnums(from.seriesnums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameOutMahsResponse::CopyFrom(const ProGXGDYGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameOutMahsResponse::Swap(ProGXGDYGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(cardtypeflg_, other->cardtypeflg_);
    std::swap(cardpoint_, other->cardpoint_);
    std::swap(seriesflag_, other->seriesflag_);
    std::swap(seriesnums_, other->seriesnums_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameOutMahsResponse_descriptor_;
  metadata.reflection = ProGXGDYGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameTimerPower_MSGID_descriptor_;
}
bool ProGXGDYGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameTimerPower_MSGID ProGXGDYGameTimerPower::ID;
const ProGXGDYGameTimerPower_MSGID ProGXGDYGameTimerPower::MSGID_MIN;
const ProGXGDYGameTimerPower_MSGID ProGXGDYGameTimerPower::MSGID_MAX;
const int ProGXGDYGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameTimerPower::kSeatFieldNumber;
const int ProGXGDYGameTimerPower::kTimeFieldNumber;
const int ProGXGDYGameTimerPower::kOutcardTimeFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameTimerPower::ProGXGDYGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameTimerPower::InitAsDefaultInstance() {
}

ProGXGDYGameTimerPower::ProGXGDYGameTimerPower(const ProGXGDYGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameTimerPower::~ProGXGDYGameTimerPower() {
  SharedDtor();
}

void ProGXGDYGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameTimerPower_descriptor_;
}

const ProGXGDYGameTimerPower& ProGXGDYGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameTimerPower* ProGXGDYGameTimerPower::default_instance_ = NULL;

ProGXGDYGameTimerPower* ProGXGDYGameTimerPower::New() const {
  return new ProGXGDYGameTimerPower;
}

void ProGXGDYGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameTimerPower::MergeFrom(const ProGXGDYGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameTimerPower::CopyFrom(const ProGXGDYGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameTimerPower::IsInitialized() const {

  return true;
}

void ProGXGDYGameTimerPower::Swap(ProGXGDYGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameTimerPower_descriptor_;
  metadata.reflection = ProGXGDYGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOperateNotify_MSGID_descriptor_;
}
bool ProGXGDYGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameOperateNotify_MSGID ProGXGDYGameOperateNotify::ID;
const ProGXGDYGameOperateNotify_MSGID ProGXGDYGameOperateNotify::MSGID_MIN;
const ProGXGDYGameOperateNotify_MSGID ProGXGDYGameOperateNotify::MSGID_MAX;
const int ProGXGDYGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameOperateNotify::kResumeSeatFieldNumber;
const int ProGXGDYGameOperateNotify::kActionMaskFieldNumber;
const int ProGXGDYGameOperateNotify::kActionCardFieldNumber;
const int ProGXGDYGameOperateNotify::kTimeFieldNumber;
const int ProGXGDYGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameOperateNotify::ProGXGDYGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameOperateNotify::InitAsDefaultInstance() {
}

ProGXGDYGameOperateNotify::ProGXGDYGameOperateNotify(const ProGXGDYGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameOperateNotify::~ProGXGDYGameOperateNotify() {
  SharedDtor();
}

void ProGXGDYGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOperateNotify_descriptor_;
}

const ProGXGDYGameOperateNotify& ProGXGDYGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameOperateNotify* ProGXGDYGameOperateNotify::default_instance_ = NULL;

ProGXGDYGameOperateNotify* ProGXGDYGameOperateNotify::New() const {
  return new ProGXGDYGameOperateNotify;
}

void ProGXGDYGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameOperateNotify::MergeFrom(const ProGXGDYGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameOperateNotify::CopyFrom(const ProGXGDYGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameOperateNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameOperateNotify::Swap(ProGXGDYGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameOperateNotify_descriptor_;
  metadata.reflection = ProGXGDYGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOperateResult_MSGID_descriptor_;
}
bool ProGXGDYGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameOperateResult_MSGID ProGXGDYGameOperateResult::ID;
const ProGXGDYGameOperateResult_MSGID ProGXGDYGameOperateResult::MSGID_MIN;
const ProGXGDYGameOperateResult_MSGID ProGXGDYGameOperateResult::MSGID_MAX;
const int ProGXGDYGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameOperateResult::kWOperateUserFieldNumber;
const int ProGXGDYGameOperateResult::kWProvideUserFieldNumber;
const int ProGXGDYGameOperateResult::kWOperateCodeFieldNumber;
const int ProGXGDYGameOperateResult::kCbOperateCardFieldNumber;
const int ProGXGDYGameOperateResult::kHandmahsFieldNumber;
const int ProGXGDYGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameOperateResult::ProGXGDYGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameOperateResult::InitAsDefaultInstance() {
}

ProGXGDYGameOperateResult::ProGXGDYGameOperateResult(const ProGXGDYGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameOperateResult::~ProGXGDYGameOperateResult() {
  SharedDtor();
}

void ProGXGDYGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOperateResult_descriptor_;
}

const ProGXGDYGameOperateResult& ProGXGDYGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameOperateResult* ProGXGDYGameOperateResult::default_instance_ = NULL;

ProGXGDYGameOperateResult* ProGXGDYGameOperateResult::New() const {
  return new ProGXGDYGameOperateResult;
}

void ProGXGDYGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameOperateResult::MergeFrom(const ProGXGDYGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameOperateResult::CopyFrom(const ProGXGDYGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameOperateResult::IsInitialized() const {

  return true;
}

void ProGXGDYGameOperateResult::Swap(ProGXGDYGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameOperateResult_descriptor_;
  metadata.reflection = ProGXGDYGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOperateRequest_MSGID_descriptor_;
}
bool ProGXGDYGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameOperateRequest_MSGID ProGXGDYGameOperateRequest::ID;
const ProGXGDYGameOperateRequest_MSGID ProGXGDYGameOperateRequest::MSGID_MIN;
const ProGXGDYGameOperateRequest_MSGID ProGXGDYGameOperateRequest::MSGID_MAX;
const int ProGXGDYGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameOperateRequest::kSeatFieldNumber;
const int ProGXGDYGameOperateRequest::kWOperateCodeFieldNumber;
const int ProGXGDYGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameOperateRequest::ProGXGDYGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameOperateRequest::InitAsDefaultInstance() {
}

ProGXGDYGameOperateRequest::ProGXGDYGameOperateRequest(const ProGXGDYGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameOperateRequest::~ProGXGDYGameOperateRequest() {
  SharedDtor();
}

void ProGXGDYGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOperateRequest_descriptor_;
}

const ProGXGDYGameOperateRequest& ProGXGDYGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameOperateRequest* ProGXGDYGameOperateRequest::default_instance_ = NULL;

ProGXGDYGameOperateRequest* ProGXGDYGameOperateRequest::New() const {
  return new ProGXGDYGameOperateRequest;
}

void ProGXGDYGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameOperateRequest::MergeFrom(const ProGXGDYGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameOperateRequest::CopyFrom(const ProGXGDYGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameOperateRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameOperateRequest::Swap(ProGXGDYGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameOperateRequest_descriptor_;
  metadata.reflection = ProGXGDYGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameTrust_MSGID_descriptor_;
}
bool ProGXGDYGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameTrust_MSGID ProGXGDYGameTrust::ID;
const ProGXGDYGameTrust_MSGID ProGXGDYGameTrust::MSGID_MIN;
const ProGXGDYGameTrust_MSGID ProGXGDYGameTrust::MSGID_MAX;
const int ProGXGDYGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameTrust::kSeatFieldNumber;
const int ProGXGDYGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameTrust::ProGXGDYGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameTrust::InitAsDefaultInstance() {
}

ProGXGDYGameTrust::ProGXGDYGameTrust(const ProGXGDYGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameTrust::~ProGXGDYGameTrust() {
  SharedDtor();
}

void ProGXGDYGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameTrust_descriptor_;
}

const ProGXGDYGameTrust& ProGXGDYGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameTrust* ProGXGDYGameTrust::default_instance_ = NULL;

ProGXGDYGameTrust* ProGXGDYGameTrust::New() const {
  return new ProGXGDYGameTrust;
}

void ProGXGDYGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameTrust::MergeFrom(const ProGXGDYGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameTrust::CopyFrom(const ProGXGDYGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameTrust::IsInitialized() const {

  return true;
}

void ProGXGDYGameTrust::Swap(ProGXGDYGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameTrust_descriptor_;
  metadata.reflection = ProGXGDYGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOutMahRequest_MSGID_descriptor_;
}
bool ProGXGDYGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameOutMahRequest_MSGID ProGXGDYGameOutMahRequest::ID;
const ProGXGDYGameOutMahRequest_MSGID ProGXGDYGameOutMahRequest::MSGID_MIN;
const ProGXGDYGameOutMahRequest_MSGID ProGXGDYGameOutMahRequest::MSGID_MAX;
const int ProGXGDYGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameOutMahRequest::kSeatFieldNumber;
const int ProGXGDYGameOutMahRequest::kOutMahsFieldNumber;
const int ProGXGDYGameOutMahRequest::kNochangemahsFieldNumber;
const int ProGXGDYGameOutMahRequest::kBIsChangedFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameOutMahRequest::ProGXGDYGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameOutMahRequest::InitAsDefaultInstance() {
}

ProGXGDYGameOutMahRequest::ProGXGDYGameOutMahRequest(const ProGXGDYGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bischanged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameOutMahRequest::~ProGXGDYGameOutMahRequest() {
  SharedDtor();
}

void ProGXGDYGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameOutMahRequest_descriptor_;
}

const ProGXGDYGameOutMahRequest& ProGXGDYGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameOutMahRequest* ProGXGDYGameOutMahRequest::default_instance_ = NULL;

ProGXGDYGameOutMahRequest* ProGXGDYGameOutMahRequest::New() const {
  return new ProGXGDYGameOutMahRequest;
}

void ProGXGDYGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bischanged_ = false;
  }
  outmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_nochangemahs;
        break;
      }

      // repeated int32 nochangemahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nochangemahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nochangemahs;
        if (input->ExpectTag(40)) goto parse_bIsChanged;
        break;
      }

      // optional bool bIsChanged = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bischanged_)));
          set_has_bischanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 nochangemahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->nochangemahs(i), output);
  }

  // optional bool bIsChanged = 5;
  if (has_bischanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bischanged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 nochangemahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->nochangemahs(i), target);
  }

  // optional bool bIsChanged = 5;
  if (has_bischanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bischanged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsChanged = 5;
    if (has_bischanged()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 nochangemahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameOutMahRequest::MergeFrom(const ProGXGDYGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bischanged()) {
      set_bischanged(from.bischanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameOutMahRequest::CopyFrom(const ProGXGDYGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameOutMahRequest::Swap(ProGXGDYGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(bischanged_, other->bischanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameOutMahRequest_descriptor_;
  metadata.reflection = ProGXGDYGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameCatchCard_MSGID_descriptor_;
}
bool ProGXGDYGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameCatchCard_MSGID ProGXGDYGameCatchCard::ID;
const ProGXGDYGameCatchCard_MSGID ProGXGDYGameCatchCard::MSGID_MIN;
const ProGXGDYGameCatchCard_MSGID ProGXGDYGameCatchCard::MSGID_MAX;
const int ProGXGDYGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameCatchCard::kSeatFieldNumber;
const int ProGXGDYGameCatchCard::kCbCardDataFieldNumber;
const int ProGXGDYGameCatchCard::kWActionMaskFieldNumber;
const int ProGXGDYGameCatchCard::kCbIsNotGangFieldNumber;
const int ProGXGDYGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameCatchCard::ProGXGDYGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameCatchCard::InitAsDefaultInstance() {
}

ProGXGDYGameCatchCard::ProGXGDYGameCatchCard(const ProGXGDYGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameCatchCard::~ProGXGDYGameCatchCard() {
  SharedDtor();
}

void ProGXGDYGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameCatchCard_descriptor_;
}

const ProGXGDYGameCatchCard& ProGXGDYGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameCatchCard* ProGXGDYGameCatchCard::default_instance_ = NULL;

ProGXGDYGameCatchCard* ProGXGDYGameCatchCard::New() const {
  return new ProGXGDYGameCatchCard;
}

void ProGXGDYGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameCatchCard::MergeFrom(const ProGXGDYGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameCatchCard::CopyFrom(const ProGXGDYGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameCatchCard::IsInitialized() const {

  return true;
}

void ProGXGDYGameCatchCard::Swap(ProGXGDYGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameCatchCard_descriptor_;
  metadata.reflection = ProGXGDYGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GXGDYMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

GXGDYMahList::GXGDYMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GXGDYMahList::InitAsDefaultInstance() {
}

GXGDYMahList::GXGDYMahList(const GXGDYMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GXGDYMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GXGDYMahList::~GXGDYMahList() {
  SharedDtor();
}

void GXGDYMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GXGDYMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GXGDYMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYMahList_descriptor_;
}

const GXGDYMahList& GXGDYMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

GXGDYMahList* GXGDYMahList::default_instance_ = NULL;

GXGDYMahList* GXGDYMahList::New() const {
  return new GXGDYMahList;
}

void GXGDYMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GXGDYMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GXGDYMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GXGDYMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GXGDYMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GXGDYMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GXGDYMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GXGDYMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GXGDYMahList::MergeFrom(const GXGDYMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GXGDYMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GXGDYMahList::CopyFrom(const GXGDYMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GXGDYMahList::IsInitialized() const {

  return true;
}

void GXGDYMahList::Swap(GXGDYMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GXGDYMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GXGDYMahList_descriptor_;
  metadata.reflection = GXGDYMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GXGDYScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

GXGDYScoreList::GXGDYScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GXGDYScoreList::InitAsDefaultInstance() {
}

GXGDYScoreList::GXGDYScoreList(const GXGDYScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GXGDYScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GXGDYScoreList::~GXGDYScoreList() {
  SharedDtor();
}

void GXGDYScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GXGDYScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GXGDYScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYScoreList_descriptor_;
}

const GXGDYScoreList& GXGDYScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

GXGDYScoreList* GXGDYScoreList::default_instance_ = NULL;

GXGDYScoreList* GXGDYScoreList::New() const {
  return new GXGDYScoreList;
}

void GXGDYScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GXGDYScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GXGDYScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GXGDYScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GXGDYScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GXGDYScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GXGDYScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GXGDYScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GXGDYScoreList::MergeFrom(const GXGDYScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GXGDYScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GXGDYScoreList::CopyFrom(const GXGDYScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GXGDYScoreList::IsInitialized() const {

  return true;
}

void GXGDYScoreList::Swap(GXGDYScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GXGDYScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GXGDYScoreList_descriptor_;
  metadata.reflection = GXGDYScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GXGDYAwardList::kSeatFieldNumber;
const int GXGDYAwardList::kCardsDataFieldNumber;
const int GXGDYAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

GXGDYAwardList::GXGDYAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GXGDYAwardList::InitAsDefaultInstance() {
}

GXGDYAwardList::GXGDYAwardList(const GXGDYAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GXGDYAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GXGDYAwardList::~GXGDYAwardList() {
  SharedDtor();
}

void GXGDYAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GXGDYAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GXGDYAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYAwardList_descriptor_;
}

const GXGDYAwardList& GXGDYAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

GXGDYAwardList* GXGDYAwardList::default_instance_ = NULL;

GXGDYAwardList* GXGDYAwardList::New() const {
  return new GXGDYAwardList;
}

void GXGDYAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GXGDYAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GXGDYAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GXGDYAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GXGDYAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GXGDYAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GXGDYAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GXGDYAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GXGDYAwardList::MergeFrom(const GXGDYAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GXGDYAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GXGDYAwardList::CopyFrom(const GXGDYAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GXGDYAwardList::IsInitialized() const {

  return true;
}

void GXGDYAwardList::Swap(GXGDYAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GXGDYAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GXGDYAwardList_descriptor_;
  metadata.reflection = GXGDYAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameEnd_MSGID_descriptor_;
}
bool ProGXGDYGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameEnd_MSGID ProGXGDYGameEnd::ID;
const ProGXGDYGameEnd_MSGID ProGXGDYGameEnd::MSGID_MIN;
const ProGXGDYGameEnd_MSGID ProGXGDYGameEnd::MSGID_MAX;
const int ProGXGDYGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameEnd::kLGameTaxFieldNumber;
const int ProGXGDYGameEnd::kCbChongGuangFieldNumber;
const int ProGXGDYGameEnd::kCbBaWangKingFieldNumber;
const int ProGXGDYGameEnd::kWProvideUserFieldNumber;
const int ProGXGDYGameEnd::kCbChiHuCardFieldNumber;
const int ProGXGDYGameEnd::kDwChiHuKindFieldNumber;
const int ProGXGDYGameEnd::kDwChiHuRightFieldNumber;
const int ProGXGDYGameEnd::kLTotaslGameScoreFieldNumber;
const int ProGXGDYGameEnd::kLCurrentGameScoreFieldNumber;
const int ProGXGDYGameEnd::kLCurrentPointScoreFieldNumber;
const int ProGXGDYGameEnd::kLAttachScoreFieldNumber;
const int ProGXGDYGameEnd::kCbHandCardDataFieldNumber;
const int ProGXGDYGameEnd::kCbAwardCardDataFieldNumber;
const int ProGXGDYGameEnd::kLOnlyWinScoreFieldNumber;
const int ProGXGDYGameEnd::kBRoundEndFieldNumber;
const int ProGXGDYGameEnd::kLHuiTouScoreFieldNumber;
const int ProGXGDYGameEnd::kBZhuangWinFieldNumber;
const int ProGXGDYGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProGXGDYGameEnd::kDetailedScoresFieldNumber;
const int ProGXGDYGameEnd::kBIsDaTuFieldNumber;
const int ProGXGDYGameEnd::kBIsKuTongFieldNumber;
const int ProGXGDYGameEnd::kNNo1SeatFieldNumber;
const int ProGXGDYGameEnd::kNWinerSeatFieldNumber;
const int ProGXGDYGameEnd::kNWinersMateFieldNumber;
const int ProGXGDYGameEnd::kNNo2SeatFieldNumber;
const int ProGXGDYGameEnd::kNNo3SeatFieldNumber;
const int ProGXGDYGameEnd::kNNo4SeatFieldNumber;
const int ProGXGDYGameEnd::kBBrokenFieldNumber;
const int ProGXGDYGameEnd::kNBrokenPlayerSeatFieldNumber;
const int ProGXGDYGameEnd::kBSurrenderFieldNumber;
const int ProGXGDYGameEnd::kNSurrenderPlayerSeatFieldNumber;
const int ProGXGDYGameEnd::kBIsSpringFieldNumber;
const int ProGXGDYGameEnd::kNSurplusCardCountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameEnd::ProGXGDYGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameEnd::InitAsDefaultInstance() {
}

ProGXGDYGameEnd::ProGXGDYGameEnd(const ProGXGDYGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  bisdatu_ = false;
  biskutong_ = false;
  nno1seat_ = 0;
  nwinerseat_ = 0;
  nwinersmate_ = 0;
  nno2seat_ = 0;
  nno3seat_ = 0;
  nno4seat_ = 0;
  bbroken_ = false;
  nbrokenplayerseat_ = 0;
  bsurrender_ = false;
  nsurrenderplayerseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameEnd::~ProGXGDYGameEnd() {
  SharedDtor();
}

void ProGXGDYGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameEnd_descriptor_;
}

const ProGXGDYGameEnd& ProGXGDYGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameEnd* ProGXGDYGameEnd::default_instance_ = NULL;

ProGXGDYGameEnd* ProGXGDYGameEnd::New() const {
  return new ProGXGDYGameEnd;
}

void ProGXGDYGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
    bisdatu_ = false;
    biskutong_ = false;
    nno1seat_ = 0;
    nwinerseat_ = 0;
    nwinersmate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    nno2seat_ = 0;
    nno3seat_ = 0;
    nno4seat_ = 0;
    bbroken_ = false;
    nbrokenplayerseat_ = 0;
    bsurrender_ = false;
    nsurrenderplayerseat_ = 0;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  bisspring_.Clear();
  nsurpluscardcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .GXGDYMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .GXGDYAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .GXGDYScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectTag(168)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bIsKuTong;
        break;
      }

      // optional bool bIsKuTong = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsKuTong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biskutong_)));
          set_has_biskutong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nNo1Seat;
        break;
      }

      // optional int32 nNo1Seat = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo1Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno1seat_)));
          set_has_nno1seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nWinerSeat;
        break;
      }

      // optional int32 nWinerSeat = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinerseat_)));
          set_has_nwinerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nWinersMate;
        break;
      }

      // optional int32 nWinersMate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinersMate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinersmate_)));
          set_has_nwinersmate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_nNo2Seat;
        break;
      }

      // optional int32 nNo2Seat = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo2Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno2seat_)));
          set_has_nno2seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_nNo3Seat;
        break;
      }

      // optional int32 nNo3Seat = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo3Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno3seat_)));
          set_has_nno3seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nNo4Seat;
        break;
      }

      // optional int32 nNo4Seat = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo4Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno4seat_)));
          set_has_nno4seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bBroken;
        break;
      }

      // optional bool bBroken = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bBroken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbroken_)));
          set_has_bbroken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_nBrokenPlayerSeat;
        break;
      }

      // optional int32 nBrokenPlayerSeat = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBrokenPlayerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbrokenplayerseat_)));
          set_has_nbrokenplayerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_bSurrender;
        break;
      }

      // optional bool bSurrender = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsurrender_)));
          set_has_bsurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_nSurrenderPlayerSeat;
        break;
      }

      // optional int32 nSurrenderPlayerSeat = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSurrenderPlayerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsurrenderplayerseat_)));
          set_has_nsurrenderplayerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_bIsSpring;
        break;
      }

      // repeated bool bIsSpring = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSpring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 264, input, this->mutable_bisspring())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bisspring())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_bIsSpring;
        if (input->ExpectTag(272)) goto parse_nSurplusCardCount;
        break;
      }

      // repeated int32 nSurplusCardCount = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSurplusCardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_nsurpluscardcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nsurpluscardcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_nSurplusCardCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .GXGDYMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .GXGDYAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .GXGDYScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  // optional bool bIsDaTu = 21;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->bisdatu(), output);
  }

  // optional bool bIsKuTong = 22;
  if (has_biskutong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->biskutong(), output);
  }

  // optional int32 nNo1Seat = 23;
  if (has_nno1seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nno1seat(), output);
  }

  // optional int32 nWinerSeat = 24;
  if (has_nwinerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nwinerseat(), output);
  }

  // optional int32 nWinersMate = 25;
  if (has_nwinersmate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nwinersmate(), output);
  }

  // optional int32 nNo2Seat = 26;
  if (has_nno2seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->nno2seat(), output);
  }

  // optional int32 nNo3Seat = 27;
  if (has_nno3seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nno3seat(), output);
  }

  // optional int32 nNo4Seat = 28;
  if (has_nno4seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nno4seat(), output);
  }

  // optional bool bBroken = 29;
  if (has_bbroken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->bbroken(), output);
  }

  // optional int32 nBrokenPlayerSeat = 30;
  if (has_nbrokenplayerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->nbrokenplayerseat(), output);
  }

  // optional bool bSurrender = 31;
  if (has_bsurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->bsurrender(), output);
  }

  // optional int32 nSurrenderPlayerSeat = 32;
  if (has_nsurrenderplayerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->nsurrenderplayerseat(), output);
  }

  // repeated bool bIsSpring = 33;
  for (int i = 0; i < this->bisspring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      33, this->bisspring(i), output);
  }

  // repeated int32 nSurplusCardCount = 34;
  for (int i = 0; i < this->nsurpluscardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->nsurpluscardcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .GXGDYMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .GXGDYAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .GXGDYScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  // optional bool bIsDaTu = 21;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->bisdatu(), target);
  }

  // optional bool bIsKuTong = 22;
  if (has_biskutong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->biskutong(), target);
  }

  // optional int32 nNo1Seat = 23;
  if (has_nno1seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nno1seat(), target);
  }

  // optional int32 nWinerSeat = 24;
  if (has_nwinerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nwinerseat(), target);
  }

  // optional int32 nWinersMate = 25;
  if (has_nwinersmate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nwinersmate(), target);
  }

  // optional int32 nNo2Seat = 26;
  if (has_nno2seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->nno2seat(), target);
  }

  // optional int32 nNo3Seat = 27;
  if (has_nno3seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nno3seat(), target);
  }

  // optional int32 nNo4Seat = 28;
  if (has_nno4seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nno4seat(), target);
  }

  // optional bool bBroken = 29;
  if (has_bbroken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->bbroken(), target);
  }

  // optional int32 nBrokenPlayerSeat = 30;
  if (has_nbrokenplayerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->nbrokenplayerseat(), target);
  }

  // optional bool bSurrender = 31;
  if (has_bsurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->bsurrender(), target);
  }

  // optional int32 nSurrenderPlayerSeat = 32;
  if (has_nsurrenderplayerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->nsurrenderplayerseat(), target);
  }

  // repeated bool bIsSpring = 33;
  for (int i = 0; i < this->bisspring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(33, this->bisspring(i), target);
  }

  // repeated int32 nSurplusCardCount = 34;
  for (int i = 0; i < this->nsurpluscardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->nsurpluscardcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

    // optional bool bIsDaTu = 21;
    if (has_bisdatu()) {
      total_size += 2 + 1;
    }

    // optional bool bIsKuTong = 22;
    if (has_biskutong()) {
      total_size += 2 + 1;
    }

    // optional int32 nNo1Seat = 23;
    if (has_nno1seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno1seat());
    }

    // optional int32 nWinerSeat = 24;
    if (has_nwinerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinerseat());
    }

    // optional int32 nWinersMate = 25;
    if (has_nwinersmate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinersmate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nNo2Seat = 26;
    if (has_nno2seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno2seat());
    }

    // optional int32 nNo3Seat = 27;
    if (has_nno3seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno3seat());
    }

    // optional int32 nNo4Seat = 28;
    if (has_nno4seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno4seat());
    }

    // optional bool bBroken = 29;
    if (has_bbroken()) {
      total_size += 2 + 1;
    }

    // optional int32 nBrokenPlayerSeat = 30;
    if (has_nbrokenplayerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbrokenplayerseat());
    }

    // optional bool bSurrender = 31;
    if (has_bsurrender()) {
      total_size += 2 + 1;
    }

    // optional int32 nSurrenderPlayerSeat = 32;
    if (has_nsurrenderplayerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsurrenderplayerseat());
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .GXGDYMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .GXGDYAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .GXGDYScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  // repeated bool bIsSpring = 33;
  {
    int data_size = 0;
    data_size = 1 * this->bisspring_size();
    total_size += 2 * this->bisspring_size() + data_size;
  }

  // repeated int32 nSurplusCardCount = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->nsurpluscardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nsurpluscardcount(i));
    }
    total_size += 2 * this->nsurpluscardcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameEnd::MergeFrom(const ProGXGDYGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  bisspring_.MergeFrom(from.bisspring_);
  nsurpluscardcount_.MergeFrom(from.nsurpluscardcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
    if (from.has_biskutong()) {
      set_biskutong(from.biskutong());
    }
    if (from.has_nno1seat()) {
      set_nno1seat(from.nno1seat());
    }
    if (from.has_nwinerseat()) {
      set_nwinerseat(from.nwinerseat());
    }
    if (from.has_nwinersmate()) {
      set_nwinersmate(from.nwinersmate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nno2seat()) {
      set_nno2seat(from.nno2seat());
    }
    if (from.has_nno3seat()) {
      set_nno3seat(from.nno3seat());
    }
    if (from.has_nno4seat()) {
      set_nno4seat(from.nno4seat());
    }
    if (from.has_bbroken()) {
      set_bbroken(from.bbroken());
    }
    if (from.has_nbrokenplayerseat()) {
      set_nbrokenplayerseat(from.nbrokenplayerseat());
    }
    if (from.has_bsurrender()) {
      set_bsurrender(from.bsurrender());
    }
    if (from.has_nsurrenderplayerseat()) {
      set_nsurrenderplayerseat(from.nsurrenderplayerseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameEnd::CopyFrom(const ProGXGDYGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameEnd::IsInitialized() const {

  return true;
}

void ProGXGDYGameEnd::Swap(ProGXGDYGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(biskutong_, other->biskutong_);
    std::swap(nno1seat_, other->nno1seat_);
    std::swap(nwinerseat_, other->nwinerseat_);
    std::swap(nwinersmate_, other->nwinersmate_);
    std::swap(nno2seat_, other->nno2seat_);
    std::swap(nno3seat_, other->nno3seat_);
    std::swap(nno4seat_, other->nno4seat_);
    std::swap(bbroken_, other->bbroken_);
    std::swap(nbrokenplayerseat_, other->nbrokenplayerseat_);
    std::swap(bsurrender_, other->bsurrender_);
    std::swap(nsurrenderplayerseat_, other->nsurrenderplayerseat_);
    bisspring_.Swap(&other->bisspring_);
    nsurpluscardcount_.Swap(&other->nsurpluscardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameEnd_descriptor_;
  metadata.reflection = ProGXGDYGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProGXGDYGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameQuickSoundRequest_MSGID ProGXGDYGameQuickSoundRequest::ID;
const ProGXGDYGameQuickSoundRequest_MSGID ProGXGDYGameQuickSoundRequest::MSGID_MIN;
const ProGXGDYGameQuickSoundRequest_MSGID ProGXGDYGameQuickSoundRequest::MSGID_MAX;
const int ProGXGDYGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProGXGDYGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProGXGDYGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProGXGDYGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameQuickSoundRequest::ProGXGDYGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProGXGDYGameQuickSoundRequest::ProGXGDYGameQuickSoundRequest(const ProGXGDYGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameQuickSoundRequest::~ProGXGDYGameQuickSoundRequest() {
  SharedDtor();
}

void ProGXGDYGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProGXGDYGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameQuickSoundRequest_descriptor_;
}

const ProGXGDYGameQuickSoundRequest& ProGXGDYGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameQuickSoundRequest* ProGXGDYGameQuickSoundRequest::default_instance_ = NULL;

ProGXGDYGameQuickSoundRequest* ProGXGDYGameQuickSoundRequest::New() const {
  return new ProGXGDYGameQuickSoundRequest;
}

void ProGXGDYGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameQuickSoundRequest::MergeFrom(const ProGXGDYGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameQuickSoundRequest::CopyFrom(const ProGXGDYGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameQuickSoundRequest::Swap(ProGXGDYGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProGXGDYGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProGXGDYGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameQuickSoundResponse_MSGID ProGXGDYGameQuickSoundResponse::ID;
const ProGXGDYGameQuickSoundResponse_MSGID ProGXGDYGameQuickSoundResponse::MSGID_MIN;
const ProGXGDYGameQuickSoundResponse_MSGID ProGXGDYGameQuickSoundResponse::MSGID_MAX;
const int ProGXGDYGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProGXGDYGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProGXGDYGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProGXGDYGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameQuickSoundResponse::ProGXGDYGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProGXGDYGameQuickSoundResponse::ProGXGDYGameQuickSoundResponse(const ProGXGDYGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameQuickSoundResponse::~ProGXGDYGameQuickSoundResponse() {
  SharedDtor();
}

void ProGXGDYGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProGXGDYGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameQuickSoundResponse_descriptor_;
}

const ProGXGDYGameQuickSoundResponse& ProGXGDYGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameQuickSoundResponse* ProGXGDYGameQuickSoundResponse::default_instance_ = NULL;

ProGXGDYGameQuickSoundResponse* ProGXGDYGameQuickSoundResponse::New() const {
  return new ProGXGDYGameQuickSoundResponse;
}

void ProGXGDYGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameQuickSoundResponse::MergeFrom(const ProGXGDYGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameQuickSoundResponse::CopyFrom(const ProGXGDYGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameQuickSoundResponse::Swap(ProGXGDYGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProGXGDYGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProGXGDYGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameSendDiscardMahs_MSGID ProGXGDYGameSendDiscardMahs::ID;
const ProGXGDYGameSendDiscardMahs_MSGID ProGXGDYGameSendDiscardMahs::MSGID_MIN;
const ProGXGDYGameSendDiscardMahs_MSGID ProGXGDYGameSendDiscardMahs::MSGID_MAX;
const int ProGXGDYGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProGXGDYGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProGXGDYGameSendDiscardMahs::kCbNoChangeCardDataFieldNumber;
const int ProGXGDYGameSendDiscardMahs::kDeskCountFieldNumber;
const int ProGXGDYGameSendDiscardMahs::kOutCardCountFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameSendDiscardMahs::ProGXGDYGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProGXGDYGameSendDiscardMahs::ProGXGDYGameSendDiscardMahs(const ProGXGDYGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameSendDiscardMahs::~ProGXGDYGameSendDiscardMahs() {
  SharedDtor();
}

void ProGXGDYGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSendDiscardMahs_descriptor_;
}

const ProGXGDYGameSendDiscardMahs& ProGXGDYGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameSendDiscardMahs* ProGXGDYGameSendDiscardMahs::default_instance_ = NULL;

ProGXGDYGameSendDiscardMahs* ProGXGDYGameSendDiscardMahs::New() const {
  return new ProGXGDYGameSendDiscardMahs;
}

void ProGXGDYGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  cbnochangecarddata_.Clear();
  outcardcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .GXGDYMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(34)) goto parse_cbNoChangeCardData;
        break;
      }

      // repeated .GXGDYMahList cbNoChangeCardData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbNoChangeCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbnochangecarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cbNoChangeCardData;
        if (input->ExpectTag(40)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_outCardCount;
        break;
      }

      // repeated int32 outCardCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_outcardcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcardcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_outCardCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .GXGDYMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // repeated .GXGDYMahList cbNoChangeCardData = 4;
  for (int i = 0; i < this->cbnochangecarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cbnochangecarddata(i), output);
  }

  // optional int32 deskCount = 5;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deskcount(), output);
  }

  // repeated int32 outCardCount = 6;
  for (int i = 0; i < this->outcardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->outcardcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .GXGDYMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // repeated .GXGDYMahList cbNoChangeCardData = 4;
  for (int i = 0; i < this->cbnochangecarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cbnochangecarddata(i), target);
  }

  // optional int32 deskCount = 5;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deskcount(), target);
  }

  // repeated int32 outCardCount = 6;
  for (int i = 0; i < this->outcardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->outcardcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 5;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .GXGDYMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  // repeated .GXGDYMahList cbNoChangeCardData = 4;
  total_size += 1 * this->cbnochangecarddata_size();
  for (int i = 0; i < this->cbnochangecarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbnochangecarddata(i));
  }

  // repeated int32 outCardCount = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcardcount(i));
    }
    total_size += 1 * this->outcardcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameSendDiscardMahs::MergeFrom(const ProGXGDYGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  cbnochangecarddata_.MergeFrom(from.cbnochangecarddata_);
  outcardcount_.MergeFrom(from.outcardcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameSendDiscardMahs::CopyFrom(const ProGXGDYGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProGXGDYGameSendDiscardMahs::Swap(ProGXGDYGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    cbnochangecarddata_.Swap(&other->cbnochangecarddata_);
    std::swap(deskcount_, other->deskcount_);
    outcardcount_.Swap(&other->outcardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProGXGDYGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GXGDYWeaveItem::kWeaveKindFieldNumber;
const int GXGDYWeaveItem::kCentercardFieldNumber;
const int GXGDYWeaveItem::kProvideUserFieldNumber;
const int GXGDYWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

GXGDYWeaveItem::GXGDYWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GXGDYWeaveItem::InitAsDefaultInstance() {
}

GXGDYWeaveItem::GXGDYWeaveItem(const GXGDYWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GXGDYWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GXGDYWeaveItem::~GXGDYWeaveItem() {
  SharedDtor();
}

void GXGDYWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GXGDYWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GXGDYWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYWeaveItem_descriptor_;
}

const GXGDYWeaveItem& GXGDYWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

GXGDYWeaveItem* GXGDYWeaveItem::default_instance_ = NULL;

GXGDYWeaveItem* GXGDYWeaveItem::New() const {
  return new GXGDYWeaveItem;
}

void GXGDYWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GXGDYWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GXGDYWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GXGDYWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GXGDYWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GXGDYWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GXGDYWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GXGDYWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GXGDYWeaveItem::MergeFrom(const GXGDYWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GXGDYWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GXGDYWeaveItem::CopyFrom(const GXGDYWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GXGDYWeaveItem::IsInitialized() const {

  return true;
}

void GXGDYWeaveItem::Swap(GXGDYWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GXGDYWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GXGDYWeaveItem_descriptor_;
  metadata.reflection = GXGDYWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GXGDYWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

GXGDYWeaveItems::GXGDYWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GXGDYWeaveItems::InitAsDefaultInstance() {
}

GXGDYWeaveItems::GXGDYWeaveItems(const GXGDYWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GXGDYWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GXGDYWeaveItems::~GXGDYWeaveItems() {
  SharedDtor();
}

void GXGDYWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GXGDYWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GXGDYWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GXGDYWeaveItems_descriptor_;
}

const GXGDYWeaveItems& GXGDYWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

GXGDYWeaveItems* GXGDYWeaveItems::default_instance_ = NULL;

GXGDYWeaveItems* GXGDYWeaveItems::New() const {
  return new GXGDYWeaveItems;
}

void GXGDYWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GXGDYWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GXGDYWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GXGDYWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GXGDYWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GXGDYWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GXGDYWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GXGDYWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .GXGDYWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GXGDYWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GXGDYWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GXGDYWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GXGDYWeaveItems::MergeFrom(const GXGDYWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GXGDYWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GXGDYWeaveItems::CopyFrom(const GXGDYWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GXGDYWeaveItems::IsInitialized() const {

  return true;
}

void GXGDYWeaveItems::Swap(GXGDYWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GXGDYWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GXGDYWeaveItems_descriptor_;
  metadata.reflection = GXGDYWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSendActionMahs_MSGID_descriptor_;
}
bool ProGXGDYGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameSendActionMahs_MSGID ProGXGDYGameSendActionMahs::ID;
const ProGXGDYGameSendActionMahs_MSGID ProGXGDYGameSendActionMahs::MSGID_MIN;
const ProGXGDYGameSendActionMahs_MSGID ProGXGDYGameSendActionMahs::MSGID_MAX;
const int ProGXGDYGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameSendActionMahs::kSeatIdFieldNumber;
const int ProGXGDYGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameSendActionMahs::ProGXGDYGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameSendActionMahs::InitAsDefaultInstance() {
}

ProGXGDYGameSendActionMahs::ProGXGDYGameSendActionMahs(const ProGXGDYGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameSendActionMahs::~ProGXGDYGameSendActionMahs() {
  SharedDtor();
}

void ProGXGDYGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSendActionMahs_descriptor_;
}

const ProGXGDYGameSendActionMahs& ProGXGDYGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameSendActionMahs* ProGXGDYGameSendActionMahs::default_instance_ = NULL;

ProGXGDYGameSendActionMahs* ProGXGDYGameSendActionMahs::New() const {
  return new ProGXGDYGameSendActionMahs;
}

void ProGXGDYGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .GXGDYWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .GXGDYWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .GXGDYWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .GXGDYWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameSendActionMahs::MergeFrom(const ProGXGDYGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameSendActionMahs::CopyFrom(const ProGXGDYGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProGXGDYGameSendActionMahs::Swap(ProGXGDYGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameSendActionMahs_descriptor_;
  metadata.reflection = ProGXGDYGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenRequest_MSGID_descriptor_;
}
bool ProGXGDYGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameBrokenRequest_MSGID ProGXGDYGameBrokenRequest::ID;
const ProGXGDYGameBrokenRequest_MSGID ProGXGDYGameBrokenRequest::MSGID_MIN;
const ProGXGDYGameBrokenRequest_MSGID ProGXGDYGameBrokenRequest::MSGID_MAX;
const int ProGXGDYGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameBrokenRequest::kSeatIdFieldNumber;
const int ProGXGDYGameBrokenRequest::kTypeFieldNumber;
const int ProGXGDYGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameBrokenRequest::ProGXGDYGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameBrokenRequest::InitAsDefaultInstance() {
}

ProGXGDYGameBrokenRequest::ProGXGDYGameBrokenRequest(const ProGXGDYGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameBrokenRequest::~ProGXGDYGameBrokenRequest() {
  SharedDtor();
}

void ProGXGDYGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenRequest_descriptor_;
}

const ProGXGDYGameBrokenRequest& ProGXGDYGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameBrokenRequest* ProGXGDYGameBrokenRequest::default_instance_ = NULL;

ProGXGDYGameBrokenRequest* ProGXGDYGameBrokenRequest::New() const {
  return new ProGXGDYGameBrokenRequest;
}

void ProGXGDYGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .GXGDYBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GXGDYBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::GXGDYBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GXGDYBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GXGDYBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GXGDYBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameBrokenRequest::MergeFrom(const ProGXGDYGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameBrokenRequest::CopyFrom(const ProGXGDYGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameBrokenRequest::Swap(ProGXGDYGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameBrokenRequest_descriptor_;
  metadata.reflection = ProGXGDYGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenOperate_MSGID_descriptor_;
}
bool ProGXGDYGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameBrokenOperate_MSGID ProGXGDYGameBrokenOperate::ID;
const ProGXGDYGameBrokenOperate_MSGID ProGXGDYGameBrokenOperate::MSGID_MIN;
const ProGXGDYGameBrokenOperate_MSGID ProGXGDYGameBrokenOperate::MSGID_MAX;
const int ProGXGDYGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameBrokenOperate::kSeatIdFieldNumber;
const int ProGXGDYGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameBrokenOperate::ProGXGDYGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameBrokenOperate::InitAsDefaultInstance() {
}

ProGXGDYGameBrokenOperate::ProGXGDYGameBrokenOperate(const ProGXGDYGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameBrokenOperate::~ProGXGDYGameBrokenOperate() {
  SharedDtor();
}

void ProGXGDYGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenOperate_descriptor_;
}

const ProGXGDYGameBrokenOperate& ProGXGDYGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameBrokenOperate* ProGXGDYGameBrokenOperate::default_instance_ = NULL;

ProGXGDYGameBrokenOperate* ProGXGDYGameBrokenOperate::New() const {
  return new ProGXGDYGameBrokenOperate;
}

void ProGXGDYGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .GXGDYBROKEN_OPERATE result = 3 [default = GXGDY_BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GXGDYBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::GXGDYBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GXGDYBROKEN_OPERATE result = 3 [default = GXGDY_BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GXGDYBROKEN_OPERATE result = 3 [default = GXGDY_BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GXGDYBROKEN_OPERATE result = 3 [default = GXGDY_BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameBrokenOperate::MergeFrom(const ProGXGDYGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameBrokenOperate::CopyFrom(const ProGXGDYGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProGXGDYGameBrokenOperate::Swap(ProGXGDYGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameBrokenOperate_descriptor_;
  metadata.reflection = ProGXGDYGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenNotify_MSGID_descriptor_;
}
bool ProGXGDYGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameBrokenNotify_MSGID ProGXGDYGameBrokenNotify::ID;
const ProGXGDYGameBrokenNotify_MSGID ProGXGDYGameBrokenNotify::MSGID_MIN;
const ProGXGDYGameBrokenNotify_MSGID ProGXGDYGameBrokenNotify::MSGID_MAX;
const int ProGXGDYGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameBrokenNotify::kSeatIdFieldNumber;
const int ProGXGDYGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameBrokenNotify::ProGXGDYGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameBrokenNotify::InitAsDefaultInstance() {
}

ProGXGDYGameBrokenNotify::ProGXGDYGameBrokenNotify(const ProGXGDYGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameBrokenNotify::~ProGXGDYGameBrokenNotify() {
  SharedDtor();
}

void ProGXGDYGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenNotify_descriptor_;
}

const ProGXGDYGameBrokenNotify& ProGXGDYGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameBrokenNotify* ProGXGDYGameBrokenNotify::default_instance_ = NULL;

ProGXGDYGameBrokenNotify* ProGXGDYGameBrokenNotify::New() const {
  return new ProGXGDYGameBrokenNotify;
}

void ProGXGDYGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .GXGDYBROKEN_CODE operate_code = 3 [default = GXGDY_BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GXGDYBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::GXGDYBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GXGDYBROKEN_CODE operate_code = 3 [default = GXGDY_BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GXGDYBROKEN_CODE operate_code = 3 [default = GXGDY_BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GXGDYBROKEN_CODE operate_code = 3 [default = GXGDY_BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameBrokenNotify::MergeFrom(const ProGXGDYGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameBrokenNotify::CopyFrom(const ProGXGDYGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameBrokenNotify::Swap(ProGXGDYGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameBrokenNotify_descriptor_;
  metadata.reflection = ProGXGDYGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameRuleConfig_MSGID_descriptor_;
}
bool ProGXGDYGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameRuleConfig_MSGID ProGXGDYGameRuleConfig::ID;
const ProGXGDYGameRuleConfig_MSGID ProGXGDYGameRuleConfig::MSGID_MIN;
const ProGXGDYGameRuleConfig_MSGID ProGXGDYGameRuleConfig::MSGID_MAX;
const int ProGXGDYGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameRuleConfig::kGameRoundFieldNumber;
const int ProGXGDYGameRuleConfig::kNeedCardFieldNumber;
const int ProGXGDYGameRuleConfig::kHaveBottomKingFieldNumber;
const int ProGXGDYGameRuleConfig::kHaveMaiLeiFieldNumber;
const int ProGXGDYGameRuleConfig::kHavaHuiTouFieldNumber;
const int ProGXGDYGameRuleConfig::kNMasterSeatFieldNumber;
const int ProGXGDYGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProGXGDYGameRuleConfig::kHaveJianmaFieldNumber;
const int ProGXGDYGameRuleConfig::kNChongguanNumFieldNumber;
const int ProGXGDYGameRuleConfig::kBbawangfanbeiFieldNumber;
const int ProGXGDYGameRuleConfig::kNPlayerNumFieldNumber;
const int ProGXGDYGameRuleConfig::kSRoomNumFieldNumber;
const int ProGXGDYGameRuleConfig::kSPlayTimeFieldNumber;
const int ProGXGDYGameRuleConfig::kGametypeFieldNumber;
const int ProGXGDYGameRuleConfig::kIsJingDianFieldNumber;
const int ProGXGDYGameRuleConfig::kIsOpenTeammateFieldNumber;
const int ProGXGDYGameRuleConfig::kBIsSendSingleCardFieldNumber;
const int ProGXGDYGameRuleConfig::kNMultipleTopFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameRuleConfig::ProGXGDYGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameRuleConfig::InitAsDefaultInstance() {
}

ProGXGDYGameRuleConfig::ProGXGDYGameRuleConfig(const ProGXGDYGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_bottom_king_ = false;
  have_mai_lei_ = false;
  hava_hui_tou_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  bbawangfanbei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gametype_ = 0;
  isjingdian_ = false;
  isopenteammate_ = false;
  bissendsinglecard_ = false;
  nmultipletop_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameRuleConfig::~ProGXGDYGameRuleConfig() {
  SharedDtor();
}

void ProGXGDYGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProGXGDYGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameRuleConfig_descriptor_;
}

const ProGXGDYGameRuleConfig& ProGXGDYGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameRuleConfig* ProGXGDYGameRuleConfig::default_instance_ = NULL;

ProGXGDYGameRuleConfig* ProGXGDYGameRuleConfig::New() const {
  return new ProGXGDYGameRuleConfig;
}

void ProGXGDYGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_bottom_king_ = false;
    have_mai_lei_ = false;
    hava_hui_tou_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    bbawangfanbei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
    gametype_ = 0;
    isjingdian_ = false;
    isopenteammate_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bissendsinglecard_ = false;
    nmultipletop_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_bottom_king;
        break;
      }

      // optional bool have_bottom_king = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_bottom_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_bottom_king_)));
          set_has_have_bottom_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_mai_lei;
        break;
      }

      // optional bool have_mai_lei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_mai_lei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_mai_lei_)));
          set_has_have_mai_lei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_hui_tou;
        break;
      }

      // optional bool hava_hui_tou = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_hui_tou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_hui_tou_)));
          set_has_hava_hui_tou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bbawangfanbei;
        break;
      }

      // optional bool bbawangfanbei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbawangfanbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbawangfanbei_)));
          set_has_bbawangfanbei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gametype;
        break;
      }

      // optional int32 gametype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isJingDian;
        break;
      }

      // optional bool isJingDian = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJingDian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjingdian_)));
          set_has_isjingdian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isOpenTeammate;
        break;
      }

      // optional bool isOpenTeammate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpenTeammate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopenteammate_)));
          set_has_isopenteammate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_bIsSendSingleCard;
        break;
      }

      // optional bool bIsSendSingleCard = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSendSingleCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissendsinglecard_)));
          set_has_bissendsinglecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_nMultipleTop;
        break;
      }

      // optional int32 nMultipleTop = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMultipleTop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmultipletop_)));
          set_has_nmultipletop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_bottom_king(), output);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_mai_lei(), output);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_hui_tou(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbawangfanbei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  // optional int32 gametype = 14;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gametype(), output);
  }

  // optional bool isJingDian = 15;
  if (has_isjingdian()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isjingdian(), output);
  }

  // optional bool isOpenTeammate = 16;
  if (has_isopenteammate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isopenteammate(), output);
  }

  // optional bool bIsSendSingleCard = 17;
  if (has_bissendsinglecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->bissendsinglecard(), output);
  }

  // optional int32 nMultipleTop = 18;
  if (has_nmultipletop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->nmultipletop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_bottom_king(), target);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_mai_lei(), target);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_hui_tou(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbawangfanbei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  // optional int32 gametype = 14;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gametype(), target);
  }

  // optional bool isJingDian = 15;
  if (has_isjingdian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isjingdian(), target);
  }

  // optional bool isOpenTeammate = 16;
  if (has_isopenteammate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isopenteammate(), target);
  }

  // optional bool bIsSendSingleCard = 17;
  if (has_bissendsinglecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->bissendsinglecard(), target);
  }

  // optional int32 nMultipleTop = 18;
  if (has_nmultipletop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->nmultipletop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_bottom_king = 3;
    if (has_have_bottom_king()) {
      total_size += 1 + 1;
    }

    // optional bool have_mai_lei = 4;
    if (has_have_mai_lei()) {
      total_size += 1 + 1;
    }

    // optional bool hava_hui_tou = 5;
    if (has_hava_hui_tou()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool bbawangfanbei = 10;
    if (has_bbawangfanbei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

    // optional int32 gametype = 14;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional bool isJingDian = 15;
    if (has_isjingdian()) {
      total_size += 1 + 1;
    }

    // optional bool isOpenTeammate = 16;
    if (has_isopenteammate()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bIsSendSingleCard = 17;
    if (has_bissendsinglecard()) {
      total_size += 2 + 1;
    }

    // optional int32 nMultipleTop = 18;
    if (has_nmultipletop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmultipletop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameRuleConfig::MergeFrom(const ProGXGDYGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_bottom_king()) {
      set_have_bottom_king(from.have_bottom_king());
    }
    if (from.has_have_mai_lei()) {
      set_have_mai_lei(from.have_mai_lei());
    }
    if (from.has_hava_hui_tou()) {
      set_hava_hui_tou(from.hava_hui_tou());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_bbawangfanbei()) {
      set_bbawangfanbei(from.bbawangfanbei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_isjingdian()) {
      set_isjingdian(from.isjingdian());
    }
    if (from.has_isopenteammate()) {
      set_isopenteammate(from.isopenteammate());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bissendsinglecard()) {
      set_bissendsinglecard(from.bissendsinglecard());
    }
    if (from.has_nmultipletop()) {
      set_nmultipletop(from.nmultipletop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameRuleConfig::CopyFrom(const ProGXGDYGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameRuleConfig::IsInitialized() const {

  return true;
}

void ProGXGDYGameRuleConfig::Swap(ProGXGDYGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_bottom_king_, other->have_bottom_king_);
    std::swap(have_mai_lei_, other->have_mai_lei_);
    std::swap(hava_hui_tou_, other->hava_hui_tou_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(bbawangfanbei_, other->bbawangfanbei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(gametype_, other->gametype_);
    std::swap(isjingdian_, other->isjingdian_);
    std::swap(isopenteammate_, other->isopenteammate_);
    std::swap(bissendsinglecard_, other->bissendsinglecard_);
    std::swap(nmultipletop_, other->nmultipletop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameRuleConfig_descriptor_;
  metadata.reflection = ProGXGDYGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenStatus_MSGID_descriptor_;
}
bool ProGXGDYGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameBrokenStatus_MSGID ProGXGDYGameBrokenStatus::ID;
const ProGXGDYGameBrokenStatus_MSGID ProGXGDYGameBrokenStatus::MSGID_MIN;
const ProGXGDYGameBrokenStatus_MSGID ProGXGDYGameBrokenStatus::MSGID_MAX;
const int ProGXGDYGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProGXGDYGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProGXGDYGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameBrokenStatus::ProGXGDYGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameBrokenStatus::InitAsDefaultInstance() {
}

ProGXGDYGameBrokenStatus::ProGXGDYGameBrokenStatus(const ProGXGDYGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameBrokenStatus::~ProGXGDYGameBrokenStatus() {
  SharedDtor();
}

void ProGXGDYGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBrokenStatus_descriptor_;
}

const ProGXGDYGameBrokenStatus& ProGXGDYGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameBrokenStatus* ProGXGDYGameBrokenStatus::default_instance_ = NULL;

ProGXGDYGameBrokenStatus* ProGXGDYGameBrokenStatus::New() const {
  return new ProGXGDYGameBrokenStatus;
}

void ProGXGDYGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameBrokenStatus::MergeFrom(const ProGXGDYGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameBrokenStatus::CopyFrom(const ProGXGDYGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProGXGDYGameBrokenStatus::Swap(ProGXGDYGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameBrokenStatus_descriptor_;
  metadata.reflection = ProGXGDYGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDataResp_MSGID_descriptor_;
}
bool ProGXGDYGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameDataResp_MSGID ProGXGDYGameDataResp::ID;
const ProGXGDYGameDataResp_MSGID ProGXGDYGameDataResp::MSGID_MIN;
const ProGXGDYGameDataResp_MSGID ProGXGDYGameDataResp::MSGID_MAX;
const int ProGXGDYGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameDataResp::kTotalScoreFieldNumber;
const int ProGXGDYGameDataResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameDataResp::ProGXGDYGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameDataResp::InitAsDefaultInstance() {
}

ProGXGDYGameDataResp::ProGXGDYGameDataResp(const ProGXGDYGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameDataResp::~ProGXGDYGameDataResp() {
  SharedDtor();
}

void ProGXGDYGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameDataResp_descriptor_;
}

const ProGXGDYGameDataResp& ProGXGDYGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameDataResp* ProGXGDYGameDataResp::default_instance_ = NULL;

ProGXGDYGameDataResp* ProGXGDYGameDataResp::New() const {
  return new ProGXGDYGameDataResp;
}

void ProGXGDYGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameDataResp::MergeFrom(const ProGXGDYGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameDataResp::CopyFrom(const ProGXGDYGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameDataResp::IsInitialized() const {

  return true;
}

void ProGXGDYGameDataResp::Swap(ProGXGDYGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameDataResp_descriptor_;
  metadata.reflection = ProGXGDYGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameRecordRequest_MSGID_descriptor_;
}
bool ProGXGDYGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameRecordRequest_MSGID ProGXGDYGameRecordRequest::ID;
const ProGXGDYGameRecordRequest_MSGID ProGXGDYGameRecordRequest::MSGID_MIN;
const ProGXGDYGameRecordRequest_MSGID ProGXGDYGameRecordRequest::MSGID_MAX;
const int ProGXGDYGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameRecordRequest::kSeatIdFieldNumber;
const int ProGXGDYGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameRecordRequest::ProGXGDYGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameRecordRequest::InitAsDefaultInstance() {
}

ProGXGDYGameRecordRequest::ProGXGDYGameRecordRequest(const ProGXGDYGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameRecordRequest::~ProGXGDYGameRecordRequest() {
  SharedDtor();
}

void ProGXGDYGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProGXGDYGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameRecordRequest_descriptor_;
}

const ProGXGDYGameRecordRequest& ProGXGDYGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameRecordRequest* ProGXGDYGameRecordRequest::default_instance_ = NULL;

ProGXGDYGameRecordRequest* ProGXGDYGameRecordRequest::New() const {
  return new ProGXGDYGameRecordRequest;
}

void ProGXGDYGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameRecordRequest::MergeFrom(const ProGXGDYGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameRecordRequest::CopyFrom(const ProGXGDYGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameRecordRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameRecordRequest::Swap(ProGXGDYGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameRecordRequest_descriptor_;
  metadata.reflection = ProGXGDYGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameRecordResponse_MSGID_descriptor_;
}
bool ProGXGDYGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameRecordResponse_MSGID ProGXGDYGameRecordResponse::ID;
const ProGXGDYGameRecordResponse_MSGID ProGXGDYGameRecordResponse::MSGID_MIN;
const ProGXGDYGameRecordResponse_MSGID ProGXGDYGameRecordResponse::MSGID_MAX;
const int ProGXGDYGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameRecordResponse::kSeatIdFieldNumber;
const int ProGXGDYGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameRecordResponse::ProGXGDYGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameRecordResponse::InitAsDefaultInstance() {
}

ProGXGDYGameRecordResponse::ProGXGDYGameRecordResponse(const ProGXGDYGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameRecordResponse::~ProGXGDYGameRecordResponse() {
  SharedDtor();
}

void ProGXGDYGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProGXGDYGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameRecordResponse_descriptor_;
}

const ProGXGDYGameRecordResponse& ProGXGDYGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameRecordResponse* ProGXGDYGameRecordResponse::default_instance_ = NULL;

ProGXGDYGameRecordResponse* ProGXGDYGameRecordResponse::New() const {
  return new ProGXGDYGameRecordResponse;
}

void ProGXGDYGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameRecordResponse::MergeFrom(const ProGXGDYGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameRecordResponse::CopyFrom(const ProGXGDYGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameRecordResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameRecordResponse::Swap(ProGXGDYGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameRecordResponse_descriptor_;
  metadata.reflection = ProGXGDYGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserLocationRequest_MSGID_descriptor_;
}
bool ProGXGDYGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserLocationRequest_MSGID ProGXGDYGameUserLocationRequest::ID;
const ProGXGDYGameUserLocationRequest_MSGID ProGXGDYGameUserLocationRequest::MSGID_MIN;
const ProGXGDYGameUserLocationRequest_MSGID ProGXGDYGameUserLocationRequest::MSGID_MAX;
const int ProGXGDYGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserLocationRequest::kSeatIdFieldNumber;
const int ProGXGDYGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProGXGDYGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProGXGDYGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProGXGDYGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserLocationRequest::ProGXGDYGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserLocationRequest::InitAsDefaultInstance() {
}

ProGXGDYGameUserLocationRequest::ProGXGDYGameUserLocationRequest(const ProGXGDYGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserLocationRequest::~ProGXGDYGameUserLocationRequest() {
  SharedDtor();
}

void ProGXGDYGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserLocationRequest_descriptor_;
}

const ProGXGDYGameUserLocationRequest& ProGXGDYGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserLocationRequest* ProGXGDYGameUserLocationRequest::default_instance_ = NULL;

ProGXGDYGameUserLocationRequest* ProGXGDYGameUserLocationRequest::New() const {
  return new ProGXGDYGameUserLocationRequest;
}

void ProGXGDYGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserLocationRequest::MergeFrom(const ProGXGDYGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserLocationRequest::CopyFrom(const ProGXGDYGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserLocationRequest::Swap(ProGXGDYGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserLocationRequest_descriptor_;
  metadata.reflection = ProGXGDYGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSyncCardResponse_MSGID_descriptor_;
}
bool ProGXGDYGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameSyncCardResponse_MSGID ProGXGDYGameSyncCardResponse::ID;
const ProGXGDYGameSyncCardResponse_MSGID ProGXGDYGameSyncCardResponse::MSGID_MIN;
const ProGXGDYGameSyncCardResponse_MSGID ProGXGDYGameSyncCardResponse::MSGID_MAX;
const int ProGXGDYGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameSyncCardResponse::kSeatFieldNumber;
const int ProGXGDYGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameSyncCardResponse::ProGXGDYGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameSyncCardResponse::InitAsDefaultInstance() {
}

ProGXGDYGameSyncCardResponse::ProGXGDYGameSyncCardResponse(const ProGXGDYGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameSyncCardResponse::~ProGXGDYGameSyncCardResponse() {
  SharedDtor();
}

void ProGXGDYGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSyncCardResponse_descriptor_;
}

const ProGXGDYGameSyncCardResponse& ProGXGDYGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameSyncCardResponse* ProGXGDYGameSyncCardResponse::default_instance_ = NULL;

ProGXGDYGameSyncCardResponse* ProGXGDYGameSyncCardResponse::New() const {
  return new ProGXGDYGameSyncCardResponse;
}

void ProGXGDYGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameSyncCardResponse::MergeFrom(const ProGXGDYGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameSyncCardResponse::CopyFrom(const ProGXGDYGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameSyncCardResponse::Swap(ProGXGDYGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameSyncCardResponse_descriptor_;
  metadata.reflection = ProGXGDYGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProGXGDYGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserPhoneStatusRequest_MSGID ProGXGDYGameUserPhoneStatusRequest::ID;
const ProGXGDYGameUserPhoneStatusRequest_MSGID ProGXGDYGameUserPhoneStatusRequest::MSGID_MIN;
const ProGXGDYGameUserPhoneStatusRequest_MSGID ProGXGDYGameUserPhoneStatusRequest::MSGID_MAX;
const int ProGXGDYGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProGXGDYGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserPhoneStatusRequest::ProGXGDYGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProGXGDYGameUserPhoneStatusRequest::ProGXGDYGameUserPhoneStatusRequest(const ProGXGDYGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserPhoneStatusRequest::~ProGXGDYGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProGXGDYGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserPhoneStatusRequest_descriptor_;
}

const ProGXGDYGameUserPhoneStatusRequest& ProGXGDYGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserPhoneStatusRequest* ProGXGDYGameUserPhoneStatusRequest::default_instance_ = NULL;

ProGXGDYGameUserPhoneStatusRequest* ProGXGDYGameUserPhoneStatusRequest::New() const {
  return new ProGXGDYGameUserPhoneStatusRequest;
}

void ProGXGDYGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserPhoneStatusRequest::MergeFrom(const ProGXGDYGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserPhoneStatusRequest::CopyFrom(const ProGXGDYGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserPhoneStatusRequest::Swap(ProGXGDYGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProGXGDYGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProGXGDYGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserGiveUpRequest_MSGID ProGXGDYGameUserGiveUpRequest::ID;
const ProGXGDYGameUserGiveUpRequest_MSGID ProGXGDYGameUserGiveUpRequest::MSGID_MIN;
const ProGXGDYGameUserGiveUpRequest_MSGID ProGXGDYGameUserGiveUpRequest::MSGID_MAX;
const int ProGXGDYGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserGiveUpRequest::ProGXGDYGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProGXGDYGameUserGiveUpRequest::ProGXGDYGameUserGiveUpRequest(const ProGXGDYGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserGiveUpRequest::~ProGXGDYGameUserGiveUpRequest() {
  SharedDtor();
}

void ProGXGDYGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserGiveUpRequest_descriptor_;
}

const ProGXGDYGameUserGiveUpRequest& ProGXGDYGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserGiveUpRequest* ProGXGDYGameUserGiveUpRequest::default_instance_ = NULL;

ProGXGDYGameUserGiveUpRequest* ProGXGDYGameUserGiveUpRequest::New() const {
  return new ProGXGDYGameUserGiveUpRequest;
}

void ProGXGDYGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserGiveUpRequest::MergeFrom(const ProGXGDYGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserGiveUpRequest::CopyFrom(const ProGXGDYGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserGiveUpRequest::Swap(ProGXGDYGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProGXGDYGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserHintRequest_MSGID_descriptor_;
}
bool ProGXGDYGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserHintRequest_MSGID ProGXGDYGameUserHintRequest::ID;
const ProGXGDYGameUserHintRequest_MSGID ProGXGDYGameUserHintRequest::MSGID_MIN;
const ProGXGDYGameUserHintRequest_MSGID ProGXGDYGameUserHintRequest::MSGID_MAX;
const int ProGXGDYGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserHintRequest::kBIsUserRequestFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserHintRequest::ProGXGDYGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserHintRequest::InitAsDefaultInstance() {
}

ProGXGDYGameUserHintRequest::ProGXGDYGameUserHintRequest(const ProGXGDYGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  bisuserrequest_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserHintRequest::~ProGXGDYGameUserHintRequest() {
  SharedDtor();
}

void ProGXGDYGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserHintRequest_descriptor_;
}

const ProGXGDYGameUserHintRequest& ProGXGDYGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserHintRequest* ProGXGDYGameUserHintRequest::default_instance_ = NULL;

ProGXGDYGameUserHintRequest* ProGXGDYGameUserHintRequest::New() const {
  return new ProGXGDYGameUserHintRequest;
}

void ProGXGDYGameUserHintRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bisuserrequest_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsUserRequest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisuserrequest_)));
          set_has_bisuserrequest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsUserRequest = 1;
  if (has_bisuserrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bisuserrequest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsUserRequest = 1;
  if (has_bisuserrequest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bisuserrequest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsUserRequest = 1;
    if (has_bisuserrequest()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserHintRequest::MergeFrom(const ProGXGDYGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bisuserrequest()) {
      set_bisuserrequest(from.bisuserrequest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserHintRequest::CopyFrom(const ProGXGDYGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserHintRequest::Swap(ProGXGDYGameUserHintRequest* other) {
  if (other != this) {
    std::swap(bisuserrequest_, other->bisuserrequest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserHintRequest_descriptor_;
  metadata.reflection = ProGXGDYGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserHintResponse_MSGID_descriptor_;
}
bool ProGXGDYGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserHintResponse_MSGID ProGXGDYGameUserHintResponse::ID;
const ProGXGDYGameUserHintResponse_MSGID ProGXGDYGameUserHintResponse::MSGID_MIN;
const ProGXGDYGameUserHintResponse_MSGID ProGXGDYGameUserHintResponse::MSGID_MAX;
const int ProGXGDYGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserHintResponse::kLenthFieldNumber;
const int ProGXGDYGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserHintResponse::ProGXGDYGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserHintResponse::InitAsDefaultInstance() {
}

ProGXGDYGameUserHintResponse::ProGXGDYGameUserHintResponse(const ProGXGDYGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserHintResponse::~ProGXGDYGameUserHintResponse() {
  SharedDtor();
}

void ProGXGDYGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserHintResponse_descriptor_;
}

const ProGXGDYGameUserHintResponse& ProGXGDYGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserHintResponse* ProGXGDYGameUserHintResponse::default_instance_ = NULL;

ProGXGDYGameUserHintResponse* ProGXGDYGameUserHintResponse::New() const {
  return new ProGXGDYGameUserHintResponse;
}

void ProGXGDYGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserHintResponse::MergeFrom(const ProGXGDYGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserHintResponse::CopyFrom(const ProGXGDYGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserHintResponse::Swap(ProGXGDYGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserHintResponse_descriptor_;
  metadata.reflection = ProGXGDYGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuNotify_MSGID_descriptor_;
}
bool ProGXGDYGameUserDaTuNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserDaTuNotify_MSGID ProGXGDYGameUserDaTuNotify::ID;
const ProGXGDYGameUserDaTuNotify_MSGID ProGXGDYGameUserDaTuNotify::MSGID_MIN;
const ProGXGDYGameUserDaTuNotify_MSGID ProGXGDYGameUserDaTuNotify::MSGID_MAX;
const int ProGXGDYGameUserDaTuNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserDaTuNotify::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserDaTuNotify::ProGXGDYGameUserDaTuNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserDaTuNotify::InitAsDefaultInstance() {
}

ProGXGDYGameUserDaTuNotify::ProGXGDYGameUserDaTuNotify(const ProGXGDYGameUserDaTuNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserDaTuNotify::~ProGXGDYGameUserDaTuNotify() {
  SharedDtor();
}

void ProGXGDYGameUserDaTuNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserDaTuNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuNotify_descriptor_;
}

const ProGXGDYGameUserDaTuNotify& ProGXGDYGameUserDaTuNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserDaTuNotify* ProGXGDYGameUserDaTuNotify::default_instance_ = NULL;

ProGXGDYGameUserDaTuNotify* ProGXGDYGameUserDaTuNotify::New() const {
  return new ProGXGDYGameUserDaTuNotify;
}

void ProGXGDYGameUserDaTuNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserDaTuNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserDaTuNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserDaTuNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserDaTuNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserDaTuNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserDaTuNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserDaTuNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserDaTuNotify::MergeFrom(const ProGXGDYGameUserDaTuNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserDaTuNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuNotify::CopyFrom(const ProGXGDYGameUserDaTuNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserDaTuNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserDaTuNotify::Swap(ProGXGDYGameUserDaTuNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserDaTuNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserDaTuNotify_descriptor_;
  metadata.reflection = ProGXGDYGameUserDaTuNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserTeammateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserTeammateRequest_MSGID_descriptor_;
}
bool ProGXGDYGameUserTeammateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserTeammateRequest_MSGID ProGXGDYGameUserTeammateRequest::ID;
const ProGXGDYGameUserTeammateRequest_MSGID ProGXGDYGameUserTeammateRequest::MSGID_MIN;
const ProGXGDYGameUserTeammateRequest_MSGID ProGXGDYGameUserTeammateRequest::MSGID_MAX;
const int ProGXGDYGameUserTeammateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserTeammateRequest::kBankerMateSeatFieldNumber;
const int ProGXGDYGameUserTeammateRequest::kMateCardFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserTeammateRequest::ProGXGDYGameUserTeammateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserTeammateRequest::InitAsDefaultInstance() {
}

ProGXGDYGameUserTeammateRequest::ProGXGDYGameUserTeammateRequest(const ProGXGDYGameUserTeammateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserTeammateRequest::SharedCtor() {
  _cached_size_ = 0;
  bankermateseat_ = 0;
  matecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserTeammateRequest::~ProGXGDYGameUserTeammateRequest() {
  SharedDtor();
}

void ProGXGDYGameUserTeammateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserTeammateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserTeammateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserTeammateRequest_descriptor_;
}

const ProGXGDYGameUserTeammateRequest& ProGXGDYGameUserTeammateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserTeammateRequest* ProGXGDYGameUserTeammateRequest::default_instance_ = NULL;

ProGXGDYGameUserTeammateRequest* ProGXGDYGameUserTeammateRequest::New() const {
  return new ProGXGDYGameUserTeammateRequest;
}

void ProGXGDYGameUserTeammateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankermateseat_ = 0;
    matecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserTeammateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerMateSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankermateseat_)));
          set_has_bankermateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mateCard;
        break;
      }

      // optional int32 mateCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matecard_)));
          set_has_matecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserTeammateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerMateSeat = 1;
  if (has_bankermateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankermateseat(), output);
  }

  // optional int32 mateCard = 2;
  if (has_matecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserTeammateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerMateSeat = 1;
  if (has_bankermateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankermateseat(), target);
  }

  // optional int32 mateCard = 2;
  if (has_matecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserTeammateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerMateSeat = 1;
    if (has_bankermateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankermateseat());
    }

    // optional int32 mateCard = 2;
    if (has_matecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserTeammateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserTeammateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserTeammateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserTeammateRequest::MergeFrom(const ProGXGDYGameUserTeammateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankermateseat()) {
      set_bankermateseat(from.bankermateseat());
    }
    if (from.has_matecard()) {
      set_matecard(from.matecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserTeammateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserTeammateRequest::CopyFrom(const ProGXGDYGameUserTeammateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserTeammateRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserTeammateRequest::Swap(ProGXGDYGameUserTeammateRequest* other) {
  if (other != this) {
    std::swap(bankermateseat_, other->bankermateseat_);
    std::swap(matecard_, other->matecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserTeammateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserTeammateRequest_descriptor_;
  metadata.reflection = ProGXGDYGameUserTeammateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuRequest_MSGID_descriptor_;
}
bool ProGXGDYGameUserDaTuRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserDaTuRequest_MSGID ProGXGDYGameUserDaTuRequest::ID;
const ProGXGDYGameUserDaTuRequest_MSGID ProGXGDYGameUserDaTuRequest::MSGID_MIN;
const ProGXGDYGameUserDaTuRequest_MSGID ProGXGDYGameUserDaTuRequest::MSGID_MAX;
const int ProGXGDYGameUserDaTuRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserDaTuRequest::kSeatFieldNumber;
const int ProGXGDYGameUserDaTuRequest::kBIsDaTuFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserDaTuRequest::ProGXGDYGameUserDaTuRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserDaTuRequest::InitAsDefaultInstance() {
}

ProGXGDYGameUserDaTuRequest::ProGXGDYGameUserDaTuRequest(const ProGXGDYGameUserDaTuRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserDaTuRequest::~ProGXGDYGameUserDaTuRequest() {
  SharedDtor();
}

void ProGXGDYGameUserDaTuRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserDaTuRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuRequest_descriptor_;
}

const ProGXGDYGameUserDaTuRequest& ProGXGDYGameUserDaTuRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserDaTuRequest* ProGXGDYGameUserDaTuRequest::default_instance_ = NULL;

ProGXGDYGameUserDaTuRequest* ProGXGDYGameUserDaTuRequest::New() const {
  return new ProGXGDYGameUserDaTuRequest;
}

void ProGXGDYGameUserDaTuRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserDaTuRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserDaTuRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserDaTuRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserDaTuRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserDaTuRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserDaTuRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserDaTuRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserDaTuRequest::MergeFrom(const ProGXGDYGameUserDaTuRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserDaTuRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuRequest::CopyFrom(const ProGXGDYGameUserDaTuRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserDaTuRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserDaTuRequest::Swap(ProGXGDYGameUserDaTuRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserDaTuRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserDaTuRequest_descriptor_;
  metadata.reflection = ProGXGDYGameUserDaTuRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuResponse_MSGID_descriptor_;
}
bool ProGXGDYGameUserDaTuResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserDaTuResponse_MSGID ProGXGDYGameUserDaTuResponse::ID;
const ProGXGDYGameUserDaTuResponse_MSGID ProGXGDYGameUserDaTuResponse::MSGID_MIN;
const ProGXGDYGameUserDaTuResponse_MSGID ProGXGDYGameUserDaTuResponse::MSGID_MAX;
const int ProGXGDYGameUserDaTuResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserDaTuResponse::kSeatFieldNumber;
const int ProGXGDYGameUserDaTuResponse::kBIsDaTuFieldNumber;
const int ProGXGDYGameUserDaTuResponse::kNextSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserDaTuResponse::ProGXGDYGameUserDaTuResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserDaTuResponse::InitAsDefaultInstance() {
}

ProGXGDYGameUserDaTuResponse::ProGXGDYGameUserDaTuResponse(const ProGXGDYGameUserDaTuResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  nextseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserDaTuResponse::~ProGXGDYGameUserDaTuResponse() {
  SharedDtor();
}

void ProGXGDYGameUserDaTuResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserDaTuResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuResponse_descriptor_;
}

const ProGXGDYGameUserDaTuResponse& ProGXGDYGameUserDaTuResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserDaTuResponse* ProGXGDYGameUserDaTuResponse::default_instance_ = NULL;

ProGXGDYGameUserDaTuResponse* ProGXGDYGameUserDaTuResponse::New() const {
  return new ProGXGDYGameUserDaTuResponse;
}

void ProGXGDYGameUserDaTuResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
    nextseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserDaTuResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextSeat;
        break;
      }

      // optional int32 nextSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextseat_)));
          set_has_nextseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserDaTuResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  // optional int32 nextSeat = 3;
  if (has_nextseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserDaTuResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  // optional int32 nextSeat = 3;
  if (has_nextseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserDaTuResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

    // optional int32 nextSeat = 3;
    if (has_nextseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserDaTuResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserDaTuResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserDaTuResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserDaTuResponse::MergeFrom(const ProGXGDYGameUserDaTuResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
    if (from.has_nextseat()) {
      set_nextseat(from.nextseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserDaTuResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuResponse::CopyFrom(const ProGXGDYGameUserDaTuResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserDaTuResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserDaTuResponse::Swap(ProGXGDYGameUserDaTuResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(nextseat_, other->nextseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserDaTuResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserDaTuResponse_descriptor_;
  metadata.reflection = ProGXGDYGameUserDaTuResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameUserDaTuResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuResult_MSGID_descriptor_;
}
bool ProGXGDYGameUserDaTuResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameUserDaTuResult_MSGID ProGXGDYGameUserDaTuResult::ID;
const ProGXGDYGameUserDaTuResult_MSGID ProGXGDYGameUserDaTuResult::MSGID_MIN;
const ProGXGDYGameUserDaTuResult_MSGID ProGXGDYGameUserDaTuResult::MSGID_MAX;
const int ProGXGDYGameUserDaTuResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameUserDaTuResult::kSeatFieldNumber;
const int ProGXGDYGameUserDaTuResult::kBIsDaTuFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameUserDaTuResult::ProGXGDYGameUserDaTuResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameUserDaTuResult::InitAsDefaultInstance() {
}

ProGXGDYGameUserDaTuResult::ProGXGDYGameUserDaTuResult(const ProGXGDYGameUserDaTuResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameUserDaTuResult::~ProGXGDYGameUserDaTuResult() {
  SharedDtor();
}

void ProGXGDYGameUserDaTuResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameUserDaTuResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameUserDaTuResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameUserDaTuResult_descriptor_;
}

const ProGXGDYGameUserDaTuResult& ProGXGDYGameUserDaTuResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameUserDaTuResult* ProGXGDYGameUserDaTuResult::default_instance_ = NULL;

ProGXGDYGameUserDaTuResult* ProGXGDYGameUserDaTuResult::New() const {
  return new ProGXGDYGameUserDaTuResult;
}

void ProGXGDYGameUserDaTuResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameUserDaTuResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameUserDaTuResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameUserDaTuResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameUserDaTuResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameUserDaTuResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameUserDaTuResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameUserDaTuResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameUserDaTuResult::MergeFrom(const ProGXGDYGameUserDaTuResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameUserDaTuResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameUserDaTuResult::CopyFrom(const ProGXGDYGameUserDaTuResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameUserDaTuResult::IsInitialized() const {

  return true;
}

void ProGXGDYGameUserDaTuResult::Swap(ProGXGDYGameUserDaTuResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameUserDaTuResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameUserDaTuResult_descriptor_;
  metadata.reflection = ProGXGDYGameUserDaTuResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShangYouResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShangYouResult_MSGID_descriptor_;
}
bool ProGXGDYGameShangYouResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShangYouResult_MSGID ProGXGDYGameShangYouResult::ID;
const ProGXGDYGameShangYouResult_MSGID ProGXGDYGameShangYouResult::MSGID_MIN;
const ProGXGDYGameShangYouResult_MSGID ProGXGDYGameShangYouResult::MSGID_MAX;
const int ProGXGDYGameShangYouResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameShangYouResult::kShangyouSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameShangYouResult::ProGXGDYGameShangYouResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShangYouResult::InitAsDefaultInstance() {
}

ProGXGDYGameShangYouResult::ProGXGDYGameShangYouResult(const ProGXGDYGameShangYouResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShangYouResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShangYouResult::~ProGXGDYGameShangYouResult() {
  SharedDtor();
}

void ProGXGDYGameShangYouResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShangYouResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShangYouResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShangYouResult_descriptor_;
}

const ProGXGDYGameShangYouResult& ProGXGDYGameShangYouResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShangYouResult* ProGXGDYGameShangYouResult::default_instance_ = NULL;

ProGXGDYGameShangYouResult* ProGXGDYGameShangYouResult::New() const {
  return new ProGXGDYGameShangYouResult;
}

void ProGXGDYGameShangYouResult::Clear() {
  shangyouseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShangYouResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shangyouSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shangyouSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_shangyouseat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shangyouseat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_shangyouSeat;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameShangYouResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 shangyouSeat = 1;
  for (int i = 0; i < this->shangyouseat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->shangyouseat(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShangYouResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 shangyouSeat = 1;
  for (int i = 0; i < this->shangyouseat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->shangyouseat(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShangYouResult::ByteSize() const {
  int total_size = 0;

  // repeated int32 shangyouSeat = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->shangyouseat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shangyouseat(i));
    }
    total_size += 1 * this->shangyouseat_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShangYouResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShangYouResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShangYouResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShangYouResult::MergeFrom(const ProGXGDYGameShangYouResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  shangyouseat_.MergeFrom(from.shangyouseat_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShangYouResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShangYouResult::CopyFrom(const ProGXGDYGameShangYouResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShangYouResult::IsInitialized() const {

  return true;
}

void ProGXGDYGameShangYouResult::Swap(ProGXGDYGameShangYouResult* other) {
  if (other != this) {
    shangyouseat_.Swap(&other->shangyouseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShangYouResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShangYouResult_descriptor_;
  metadata.reflection = ProGXGDYGameShangYouResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowFriendNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowFriendNotify_MSGID_descriptor_;
}
bool ProGXGDYGameShowFriendNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShowFriendNotify_MSGID ProGXGDYGameShowFriendNotify::ID;
const ProGXGDYGameShowFriendNotify_MSGID ProGXGDYGameShowFriendNotify::MSGID_MIN;
const ProGXGDYGameShowFriendNotify_MSGID ProGXGDYGameShowFriendNotify::MSGID_MAX;
const int ProGXGDYGameShowFriendNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameShowFriendNotify::kBShowFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameShowFriendNotify::ProGXGDYGameShowFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShowFriendNotify::InitAsDefaultInstance() {
}

ProGXGDYGameShowFriendNotify::ProGXGDYGameShowFriendNotify(const ProGXGDYGameShowFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShowFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  bshow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShowFriendNotify::~ProGXGDYGameShowFriendNotify() {
  SharedDtor();
}

void ProGXGDYGameShowFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShowFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShowFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowFriendNotify_descriptor_;
}

const ProGXGDYGameShowFriendNotify& ProGXGDYGameShowFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShowFriendNotify* ProGXGDYGameShowFriendNotify::default_instance_ = NULL;

ProGXGDYGameShowFriendNotify* ProGXGDYGameShowFriendNotify::New() const {
  return new ProGXGDYGameShowFriendNotify;
}

void ProGXGDYGameShowFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bshow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShowFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bShow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshow_)));
          set_has_bshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameShowFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bShow = 1;
  if (has_bshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bshow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShowFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bShow = 1;
  if (has_bshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bshow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShowFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bShow = 1;
    if (has_bshow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShowFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShowFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShowFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShowFriendNotify::MergeFrom(const ProGXGDYGameShowFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bshow()) {
      set_bshow(from.bshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShowFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShowFriendNotify::CopyFrom(const ProGXGDYGameShowFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShowFriendNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameShowFriendNotify::Swap(ProGXGDYGameShowFriendNotify* other) {
  if (other != this) {
    std::swap(bshow_, other->bshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShowFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShowFriendNotify_descriptor_;
  metadata.reflection = ProGXGDYGameShowFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameBoomNumNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBoomNumNotify_MSGID_descriptor_;
}
bool ProGXGDYGameBoomNumNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameBoomNumNotify_MSGID ProGXGDYGameBoomNumNotify::ID;
const ProGXGDYGameBoomNumNotify_MSGID ProGXGDYGameBoomNumNotify::MSGID_MIN;
const ProGXGDYGameBoomNumNotify_MSGID ProGXGDYGameBoomNumNotify::MSGID_MAX;
const int ProGXGDYGameBoomNumNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameBoomNumNotify::kNSeatFieldNumber;
const int ProGXGDYGameBoomNumNotify::kNBoomNumFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameBoomNumNotify::ProGXGDYGameBoomNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameBoomNumNotify::InitAsDefaultInstance() {
}

ProGXGDYGameBoomNumNotify::ProGXGDYGameBoomNumNotify(const ProGXGDYGameBoomNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameBoomNumNotify::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  nboomnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameBoomNumNotify::~ProGXGDYGameBoomNumNotify() {
  SharedDtor();
}

void ProGXGDYGameBoomNumNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameBoomNumNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameBoomNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameBoomNumNotify_descriptor_;
}

const ProGXGDYGameBoomNumNotify& ProGXGDYGameBoomNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameBoomNumNotify* ProGXGDYGameBoomNumNotify::default_instance_ = NULL;

ProGXGDYGameBoomNumNotify* ProGXGDYGameBoomNumNotify::New() const {
  return new ProGXGDYGameBoomNumNotify;
}

void ProGXGDYGameBoomNumNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    nboomnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameBoomNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nBoomNum;
        break;
      }

      // optional int32 nBoomNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBoomNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nboomnum_)));
          set_has_nboomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameBoomNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional int32 nBoomNum = 2;
  if (has_nboomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nboomnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameBoomNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional int32 nBoomNum = 2;
  if (has_nboomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nboomnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameBoomNumNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional int32 nBoomNum = 2;
    if (has_nboomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nboomnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameBoomNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameBoomNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameBoomNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameBoomNumNotify::MergeFrom(const ProGXGDYGameBoomNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_nboomnum()) {
      set_nboomnum(from.nboomnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameBoomNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameBoomNumNotify::CopyFrom(const ProGXGDYGameBoomNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameBoomNumNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameBoomNumNotify::Swap(ProGXGDYGameBoomNumNotify* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(nboomnum_, other->nboomnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameBoomNumNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameBoomNumNotify_descriptor_;
  metadata.reflection = ProGXGDYGameBoomNumNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomDataRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomDataRequest_MSGID_descriptor_;
}
bool ProGXGDYGameShowBoomDataRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2246:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShowBoomDataRequest_MSGID ProGXGDYGameShowBoomDataRequest::ID;
const ProGXGDYGameShowBoomDataRequest_MSGID ProGXGDYGameShowBoomDataRequest::MSGID_MIN;
const ProGXGDYGameShowBoomDataRequest_MSGID ProGXGDYGameShowBoomDataRequest::MSGID_MAX;
const int ProGXGDYGameShowBoomDataRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameShowBoomDataRequest::kNSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameShowBoomDataRequest::ProGXGDYGameShowBoomDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShowBoomDataRequest::InitAsDefaultInstance() {
}

ProGXGDYGameShowBoomDataRequest::ProGXGDYGameShowBoomDataRequest(const ProGXGDYGameShowBoomDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomDataRequest::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShowBoomDataRequest::~ProGXGDYGameShowBoomDataRequest() {
  SharedDtor();
}

void ProGXGDYGameShowBoomDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShowBoomDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomDataRequest_descriptor_;
}

const ProGXGDYGameShowBoomDataRequest& ProGXGDYGameShowBoomDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShowBoomDataRequest* ProGXGDYGameShowBoomDataRequest::default_instance_ = NULL;

ProGXGDYGameShowBoomDataRequest* ProGXGDYGameShowBoomDataRequest::New() const {
  return new ProGXGDYGameShowBoomDataRequest;
}

void ProGXGDYGameShowBoomDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShowBoomDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameShowBoomDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShowBoomDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShowBoomDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShowBoomDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShowBoomDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShowBoomDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShowBoomDataRequest::MergeFrom(const ProGXGDYGameShowBoomDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShowBoomDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomDataRequest::CopyFrom(const ProGXGDYGameShowBoomDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShowBoomDataRequest::IsInitialized() const {

  return true;
}

void ProGXGDYGameShowBoomDataRequest::Swap(ProGXGDYGameShowBoomDataRequest* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShowBoomDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShowBoomDataRequest_descriptor_;
  metadata.reflection = ProGXGDYGameShowBoomDataRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomDataResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomDataResponse_MSGID_descriptor_;
}
bool ProGXGDYGameShowBoomDataResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2247:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShowBoomDataResponse_MSGID ProGXGDYGameShowBoomDataResponse::ID;
const ProGXGDYGameShowBoomDataResponse_MSGID ProGXGDYGameShowBoomDataResponse::MSGID_MIN;
const ProGXGDYGameShowBoomDataResponse_MSGID ProGXGDYGameShowBoomDataResponse::MSGID_MAX;
const int ProGXGDYGameShowBoomDataResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameShowBoomDataResponse::kNSeatFieldNumber;
const int ProGXGDYGameShowBoomDataResponse::kBIsSendToAllFieldNumber;
const int ProGXGDYGameShowBoomDataResponse::kCbAwardCardDataFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameShowBoomDataResponse::ProGXGDYGameShowBoomDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShowBoomDataResponse::InitAsDefaultInstance() {
}

ProGXGDYGameShowBoomDataResponse::ProGXGDYGameShowBoomDataResponse(const ProGXGDYGameShowBoomDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomDataResponse::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bissendtoall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShowBoomDataResponse::~ProGXGDYGameShowBoomDataResponse() {
  SharedDtor();
}

void ProGXGDYGameShowBoomDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShowBoomDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomDataResponse_descriptor_;
}

const ProGXGDYGameShowBoomDataResponse& ProGXGDYGameShowBoomDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShowBoomDataResponse* ProGXGDYGameShowBoomDataResponse::default_instance_ = NULL;

ProGXGDYGameShowBoomDataResponse* ProGXGDYGameShowBoomDataResponse::New() const {
  return new ProGXGDYGameShowBoomDataResponse;
}

void ProGXGDYGameShowBoomDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bissendtoall_ = false;
  }
  cbawardcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShowBoomDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsSendToAll;
        break;
      }

      // optional bool bIsSendToAll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSendToAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissendtoall_)));
          set_has_bissendtoall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .GXGDYAwardList cbAwardCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbAwardCardData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameShowBoomDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsSendToAll = 2;
  if (has_bissendtoall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bissendtoall(), output);
  }

  // repeated .GXGDYAwardList cbAwardCardData = 3;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbawardcarddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShowBoomDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsSendToAll = 2;
  if (has_bissendtoall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bissendtoall(), target);
  }

  // repeated .GXGDYAwardList cbAwardCardData = 3;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbawardcarddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShowBoomDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsSendToAll = 2;
    if (has_bissendtoall()) {
      total_size += 1 + 1;
    }

  }
  // repeated .GXGDYAwardList cbAwardCardData = 3;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShowBoomDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShowBoomDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShowBoomDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShowBoomDataResponse::MergeFrom(const ProGXGDYGameShowBoomDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bissendtoall()) {
      set_bissendtoall(from.bissendtoall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShowBoomDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomDataResponse::CopyFrom(const ProGXGDYGameShowBoomDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShowBoomDataResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameShowBoomDataResponse::Swap(ProGXGDYGameShowBoomDataResponse* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bissendtoall_, other->bissendtoall_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShowBoomDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShowBoomDataResponse_descriptor_;
  metadata.reflection = ProGXGDYGameShowBoomDataResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameCardTypeSelect_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameCardTypeSelect_MSGID_descriptor_;
}
bool ProGXGDYGameCardTypeSelect_MSGID_IsValid(int value) {
  switch(value) {
    case 2248:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameCardTypeSelect_MSGID ProGXGDYGameCardTypeSelect::ID;
const ProGXGDYGameCardTypeSelect_MSGID ProGXGDYGameCardTypeSelect::MSGID_MIN;
const ProGXGDYGameCardTypeSelect_MSGID ProGXGDYGameCardTypeSelect::MSGID_MAX;
const int ProGXGDYGameCardTypeSelect::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameCardTypeSelect::kNSeatFieldNumber;
const int ProGXGDYGameCardTypeSelect::kCardTypeSelectDataFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameCardTypeSelect::ProGXGDYGameCardTypeSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameCardTypeSelect::InitAsDefaultInstance() {
}

ProGXGDYGameCardTypeSelect::ProGXGDYGameCardTypeSelect(const ProGXGDYGameCardTypeSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameCardTypeSelect::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameCardTypeSelect::~ProGXGDYGameCardTypeSelect() {
  SharedDtor();
}

void ProGXGDYGameCardTypeSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameCardTypeSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameCardTypeSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameCardTypeSelect_descriptor_;
}

const ProGXGDYGameCardTypeSelect& ProGXGDYGameCardTypeSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameCardTypeSelect* ProGXGDYGameCardTypeSelect::default_instance_ = NULL;

ProGXGDYGameCardTypeSelect* ProGXGDYGameCardTypeSelect::New() const {
  return new ProGXGDYGameCardTypeSelect;
}

void ProGXGDYGameCardTypeSelect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  cardtypeselectdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameCardTypeSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardTypeSelectData;
        break;
      }

      // repeated .GXGDYMahList CardTypeSelectData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardTypeSelectData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardtypeselectdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardTypeSelectData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameCardTypeSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // repeated .GXGDYMahList CardTypeSelectData = 2;
  for (int i = 0; i < this->cardtypeselectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cardtypeselectdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameCardTypeSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // repeated .GXGDYMahList CardTypeSelectData = 2;
  for (int i = 0; i < this->cardtypeselectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cardtypeselectdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameCardTypeSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  // repeated .GXGDYMahList CardTypeSelectData = 2;
  total_size += 1 * this->cardtypeselectdata_size();
  for (int i = 0; i < this->cardtypeselectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardtypeselectdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameCardTypeSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameCardTypeSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameCardTypeSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameCardTypeSelect::MergeFrom(const ProGXGDYGameCardTypeSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardtypeselectdata_.MergeFrom(from.cardtypeselectdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameCardTypeSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameCardTypeSelect::CopyFrom(const ProGXGDYGameCardTypeSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameCardTypeSelect::IsInitialized() const {

  return true;
}

void ProGXGDYGameCardTypeSelect::Swap(ProGXGDYGameCardTypeSelect* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    cardtypeselectdata_.Swap(&other->cardtypeselectdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameCardTypeSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameCardTypeSelect_descriptor_;
  metadata.reflection = ProGXGDYGameCardTypeSelect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsSurrenderSelect_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsSurrenderSelect_MSGID_descriptor_;
}
bool ProGXGDYGameIsSurrenderSelect_MSGID_IsValid(int value) {
  switch(value) {
    case 2249:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameIsSurrenderSelect_MSGID ProGXGDYGameIsSurrenderSelect::ID;
const ProGXGDYGameIsSurrenderSelect_MSGID ProGXGDYGameIsSurrenderSelect::MSGID_MIN;
const ProGXGDYGameIsSurrenderSelect_MSGID ProGXGDYGameIsSurrenderSelect::MSGID_MAX;
const int ProGXGDYGameIsSurrenderSelect::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameIsSurrenderSelect::kNSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameIsSurrenderSelect::ProGXGDYGameIsSurrenderSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameIsSurrenderSelect::InitAsDefaultInstance() {
}

ProGXGDYGameIsSurrenderSelect::ProGXGDYGameIsSurrenderSelect(const ProGXGDYGameIsSurrenderSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameIsSurrenderSelect::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameIsSurrenderSelect::~ProGXGDYGameIsSurrenderSelect() {
  SharedDtor();
}

void ProGXGDYGameIsSurrenderSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameIsSurrenderSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameIsSurrenderSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsSurrenderSelect_descriptor_;
}

const ProGXGDYGameIsSurrenderSelect& ProGXGDYGameIsSurrenderSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameIsSurrenderSelect* ProGXGDYGameIsSurrenderSelect::default_instance_ = NULL;

ProGXGDYGameIsSurrenderSelect* ProGXGDYGameIsSurrenderSelect::New() const {
  return new ProGXGDYGameIsSurrenderSelect;
}

void ProGXGDYGameIsSurrenderSelect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameIsSurrenderSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameIsSurrenderSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameIsSurrenderSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameIsSurrenderSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameIsSurrenderSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameIsSurrenderSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameIsSurrenderSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameIsSurrenderSelect::MergeFrom(const ProGXGDYGameIsSurrenderSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameIsSurrenderSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameIsSurrenderSelect::CopyFrom(const ProGXGDYGameIsSurrenderSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameIsSurrenderSelect::IsInitialized() const {

  return true;
}

void ProGXGDYGameIsSurrenderSelect::Swap(ProGXGDYGameIsSurrenderSelect* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameIsSurrenderSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameIsSurrenderSelect_descriptor_;
  metadata.reflection = ProGXGDYGameIsSurrenderSelect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsSurrenderOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsSurrenderOperate_MSGID_descriptor_;
}
bool ProGXGDYGameIsSurrenderOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2250:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameIsSurrenderOperate_MSGID ProGXGDYGameIsSurrenderOperate::ID;
const ProGXGDYGameIsSurrenderOperate_MSGID ProGXGDYGameIsSurrenderOperate::MSGID_MIN;
const ProGXGDYGameIsSurrenderOperate_MSGID ProGXGDYGameIsSurrenderOperate::MSGID_MAX;
const int ProGXGDYGameIsSurrenderOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameIsSurrenderOperate::kNSeatFieldNumber;
const int ProGXGDYGameIsSurrenderOperate::kBIsSurrenderFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameIsSurrenderOperate::ProGXGDYGameIsSurrenderOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameIsSurrenderOperate::InitAsDefaultInstance() {
}

ProGXGDYGameIsSurrenderOperate::ProGXGDYGameIsSurrenderOperate(const ProGXGDYGameIsSurrenderOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameIsSurrenderOperate::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bissurrender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameIsSurrenderOperate::~ProGXGDYGameIsSurrenderOperate() {
  SharedDtor();
}

void ProGXGDYGameIsSurrenderOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameIsSurrenderOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameIsSurrenderOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsSurrenderOperate_descriptor_;
}

const ProGXGDYGameIsSurrenderOperate& ProGXGDYGameIsSurrenderOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameIsSurrenderOperate* ProGXGDYGameIsSurrenderOperate::default_instance_ = NULL;

ProGXGDYGameIsSurrenderOperate* ProGXGDYGameIsSurrenderOperate::New() const {
  return new ProGXGDYGameIsSurrenderOperate;
}

void ProGXGDYGameIsSurrenderOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bissurrender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameIsSurrenderOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsSurrender;
        break;
      }

      // optional bool bIsSurrender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissurrender_)));
          set_has_bissurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameIsSurrenderOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsSurrender = 2;
  if (has_bissurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bissurrender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameIsSurrenderOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsSurrender = 2;
  if (has_bissurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bissurrender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameIsSurrenderOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsSurrender = 2;
    if (has_bissurrender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameIsSurrenderOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameIsSurrenderOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameIsSurrenderOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameIsSurrenderOperate::MergeFrom(const ProGXGDYGameIsSurrenderOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bissurrender()) {
      set_bissurrender(from.bissurrender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameIsSurrenderOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameIsSurrenderOperate::CopyFrom(const ProGXGDYGameIsSurrenderOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameIsSurrenderOperate::IsInitialized() const {

  return true;
}

void ProGXGDYGameIsSurrenderOperate::Swap(ProGXGDYGameIsSurrenderOperate* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bissurrender_, other->bissurrender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameIsSurrenderOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameIsSurrenderOperate_descriptor_;
  metadata.reflection = ProGXGDYGameIsSurrenderOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsAgreeSurrenderSelect_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsAgreeSurrenderSelect_MSGID_descriptor_;
}
bool ProGXGDYGameIsAgreeSurrenderSelect_MSGID_IsValid(int value) {
  switch(value) {
    case 2251:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameIsAgreeSurrenderSelect_MSGID ProGXGDYGameIsAgreeSurrenderSelect::ID;
const ProGXGDYGameIsAgreeSurrenderSelect_MSGID ProGXGDYGameIsAgreeSurrenderSelect::MSGID_MIN;
const ProGXGDYGameIsAgreeSurrenderSelect_MSGID ProGXGDYGameIsAgreeSurrenderSelect::MSGID_MAX;
const int ProGXGDYGameIsAgreeSurrenderSelect::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameIsAgreeSurrenderSelect::kNSurrenderSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameIsAgreeSurrenderSelect::ProGXGDYGameIsAgreeSurrenderSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameIsAgreeSurrenderSelect::InitAsDefaultInstance() {
}

ProGXGDYGameIsAgreeSurrenderSelect::ProGXGDYGameIsAgreeSurrenderSelect(const ProGXGDYGameIsAgreeSurrenderSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameIsAgreeSurrenderSelect::SharedCtor() {
  _cached_size_ = 0;
  nsurrenderseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameIsAgreeSurrenderSelect::~ProGXGDYGameIsAgreeSurrenderSelect() {
  SharedDtor();
}

void ProGXGDYGameIsAgreeSurrenderSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameIsAgreeSurrenderSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameIsAgreeSurrenderSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsAgreeSurrenderSelect_descriptor_;
}

const ProGXGDYGameIsAgreeSurrenderSelect& ProGXGDYGameIsAgreeSurrenderSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameIsAgreeSurrenderSelect* ProGXGDYGameIsAgreeSurrenderSelect::default_instance_ = NULL;

ProGXGDYGameIsAgreeSurrenderSelect* ProGXGDYGameIsAgreeSurrenderSelect::New() const {
  return new ProGXGDYGameIsAgreeSurrenderSelect;
}

void ProGXGDYGameIsAgreeSurrenderSelect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nsurrenderseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameIsAgreeSurrenderSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSurrenderSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsurrenderseat_)));
          set_has_nsurrenderseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameIsAgreeSurrenderSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSurrenderSeat = 1;
  if (has_nsurrenderseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nsurrenderseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameIsAgreeSurrenderSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSurrenderSeat = 1;
  if (has_nsurrenderseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nsurrenderseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameIsAgreeSurrenderSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSurrenderSeat = 1;
    if (has_nsurrenderseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsurrenderseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameIsAgreeSurrenderSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameIsAgreeSurrenderSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameIsAgreeSurrenderSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameIsAgreeSurrenderSelect::MergeFrom(const ProGXGDYGameIsAgreeSurrenderSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nsurrenderseat()) {
      set_nsurrenderseat(from.nsurrenderseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameIsAgreeSurrenderSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameIsAgreeSurrenderSelect::CopyFrom(const ProGXGDYGameIsAgreeSurrenderSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameIsAgreeSurrenderSelect::IsInitialized() const {

  return true;
}

void ProGXGDYGameIsAgreeSurrenderSelect::Swap(ProGXGDYGameIsAgreeSurrenderSelect* other) {
  if (other != this) {
    std::swap(nsurrenderseat_, other->nsurrenderseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameIsAgreeSurrenderSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameIsAgreeSurrenderSelect_descriptor_;
  metadata.reflection = ProGXGDYGameIsAgreeSurrenderSelect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsAgreeSurrenderOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsAgreeSurrenderOperate_MSGID_descriptor_;
}
bool ProGXGDYGameIsAgreeSurrenderOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2252:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameIsAgreeSurrenderOperate_MSGID ProGXGDYGameIsAgreeSurrenderOperate::ID;
const ProGXGDYGameIsAgreeSurrenderOperate_MSGID ProGXGDYGameIsAgreeSurrenderOperate::MSGID_MIN;
const ProGXGDYGameIsAgreeSurrenderOperate_MSGID ProGXGDYGameIsAgreeSurrenderOperate::MSGID_MAX;
const int ProGXGDYGameIsAgreeSurrenderOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameIsAgreeSurrenderOperate::kNSeatFieldNumber;
const int ProGXGDYGameIsAgreeSurrenderOperate::kBIsAgreeSurrenderFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameIsAgreeSurrenderOperate::ProGXGDYGameIsAgreeSurrenderOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameIsAgreeSurrenderOperate::InitAsDefaultInstance() {
}

ProGXGDYGameIsAgreeSurrenderOperate::ProGXGDYGameIsAgreeSurrenderOperate(const ProGXGDYGameIsAgreeSurrenderOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameIsAgreeSurrenderOperate::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bisagreesurrender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameIsAgreeSurrenderOperate::~ProGXGDYGameIsAgreeSurrenderOperate() {
  SharedDtor();
}

void ProGXGDYGameIsAgreeSurrenderOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameIsAgreeSurrenderOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameIsAgreeSurrenderOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsAgreeSurrenderOperate_descriptor_;
}

const ProGXGDYGameIsAgreeSurrenderOperate& ProGXGDYGameIsAgreeSurrenderOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameIsAgreeSurrenderOperate* ProGXGDYGameIsAgreeSurrenderOperate::default_instance_ = NULL;

ProGXGDYGameIsAgreeSurrenderOperate* ProGXGDYGameIsAgreeSurrenderOperate::New() const {
  return new ProGXGDYGameIsAgreeSurrenderOperate;
}

void ProGXGDYGameIsAgreeSurrenderOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bisagreesurrender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameIsAgreeSurrenderOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsAgreeSurrender;
        break;
      }

      // optional bool bIsAgreeSurrender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAgreeSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisagreesurrender_)));
          set_has_bisagreesurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameIsAgreeSurrenderOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisagreesurrender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameIsAgreeSurrenderOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisagreesurrender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameIsAgreeSurrenderOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsAgreeSurrender = 2;
    if (has_bisagreesurrender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameIsAgreeSurrenderOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameIsAgreeSurrenderOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameIsAgreeSurrenderOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameIsAgreeSurrenderOperate::MergeFrom(const ProGXGDYGameIsAgreeSurrenderOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bisagreesurrender()) {
      set_bisagreesurrender(from.bisagreesurrender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameIsAgreeSurrenderOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameIsAgreeSurrenderOperate::CopyFrom(const ProGXGDYGameIsAgreeSurrenderOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameIsAgreeSurrenderOperate::IsInitialized() const {

  return true;
}

void ProGXGDYGameIsAgreeSurrenderOperate::Swap(ProGXGDYGameIsAgreeSurrenderOperate* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bisagreesurrender_, other->bisagreesurrender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameIsAgreeSurrenderOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameIsAgreeSurrenderOperate_descriptor_;
  metadata.reflection = ProGXGDYGameIsAgreeSurrenderOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameIsAgreeSurrenderStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsAgreeSurrenderStatus_MSGID_descriptor_;
}
bool ProGXGDYGameIsAgreeSurrenderStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2253:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameIsAgreeSurrenderStatus_MSGID ProGXGDYGameIsAgreeSurrenderStatus::ID;
const ProGXGDYGameIsAgreeSurrenderStatus_MSGID ProGXGDYGameIsAgreeSurrenderStatus::MSGID_MIN;
const ProGXGDYGameIsAgreeSurrenderStatus_MSGID ProGXGDYGameIsAgreeSurrenderStatus::MSGID_MAX;
const int ProGXGDYGameIsAgreeSurrenderStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameIsAgreeSurrenderStatus::kNSeatFieldNumber;
const int ProGXGDYGameIsAgreeSurrenderStatus::kBIsAgreeSurrenderFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameIsAgreeSurrenderStatus::ProGXGDYGameIsAgreeSurrenderStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameIsAgreeSurrenderStatus::InitAsDefaultInstance() {
}

ProGXGDYGameIsAgreeSurrenderStatus::ProGXGDYGameIsAgreeSurrenderStatus(const ProGXGDYGameIsAgreeSurrenderStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameIsAgreeSurrenderStatus::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bisagreesurrender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameIsAgreeSurrenderStatus::~ProGXGDYGameIsAgreeSurrenderStatus() {
  SharedDtor();
}

void ProGXGDYGameIsAgreeSurrenderStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameIsAgreeSurrenderStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameIsAgreeSurrenderStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameIsAgreeSurrenderStatus_descriptor_;
}

const ProGXGDYGameIsAgreeSurrenderStatus& ProGXGDYGameIsAgreeSurrenderStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameIsAgreeSurrenderStatus* ProGXGDYGameIsAgreeSurrenderStatus::default_instance_ = NULL;

ProGXGDYGameIsAgreeSurrenderStatus* ProGXGDYGameIsAgreeSurrenderStatus::New() const {
  return new ProGXGDYGameIsAgreeSurrenderStatus;
}

void ProGXGDYGameIsAgreeSurrenderStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bisagreesurrender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameIsAgreeSurrenderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsAgreeSurrender;
        break;
      }

      // optional bool bIsAgreeSurrender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAgreeSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisagreesurrender_)));
          set_has_bisagreesurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameIsAgreeSurrenderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisagreesurrender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameIsAgreeSurrenderStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisagreesurrender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameIsAgreeSurrenderStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsAgreeSurrender = 2;
    if (has_bisagreesurrender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameIsAgreeSurrenderStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameIsAgreeSurrenderStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameIsAgreeSurrenderStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameIsAgreeSurrenderStatus::MergeFrom(const ProGXGDYGameIsAgreeSurrenderStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bisagreesurrender()) {
      set_bisagreesurrender(from.bisagreesurrender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameIsAgreeSurrenderStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameIsAgreeSurrenderStatus::CopyFrom(const ProGXGDYGameIsAgreeSurrenderStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameIsAgreeSurrenderStatus::IsInitialized() const {

  return true;
}

void ProGXGDYGameIsAgreeSurrenderStatus::Swap(ProGXGDYGameIsAgreeSurrenderStatus* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bisagreesurrender_, other->bisagreesurrender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameIsAgreeSurrenderStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameIsAgreeSurrenderStatus_descriptor_;
  metadata.reflection = ProGXGDYGameIsAgreeSurrenderStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameSurrenderResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSurrenderResult_MSGID_descriptor_;
}
bool ProGXGDYGameSurrenderResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2254:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameSurrenderResult_MSGID ProGXGDYGameSurrenderResult::ID;
const ProGXGDYGameSurrenderResult_MSGID ProGXGDYGameSurrenderResult::MSGID_MIN;
const ProGXGDYGameSurrenderResult_MSGID ProGXGDYGameSurrenderResult::MSGID_MAX;
const int ProGXGDYGameSurrenderResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameSurrenderResult::kBSurrenderResultFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameSurrenderResult::ProGXGDYGameSurrenderResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameSurrenderResult::InitAsDefaultInstance() {
}

ProGXGDYGameSurrenderResult::ProGXGDYGameSurrenderResult(const ProGXGDYGameSurrenderResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameSurrenderResult::SharedCtor() {
  _cached_size_ = 0;
  bsurrenderresult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameSurrenderResult::~ProGXGDYGameSurrenderResult() {
  SharedDtor();
}

void ProGXGDYGameSurrenderResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameSurrenderResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameSurrenderResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameSurrenderResult_descriptor_;
}

const ProGXGDYGameSurrenderResult& ProGXGDYGameSurrenderResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameSurrenderResult* ProGXGDYGameSurrenderResult::default_instance_ = NULL;

ProGXGDYGameSurrenderResult* ProGXGDYGameSurrenderResult::New() const {
  return new ProGXGDYGameSurrenderResult;
}

void ProGXGDYGameSurrenderResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bsurrenderresult_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameSurrenderResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bSurrenderResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsurrenderresult_)));
          set_has_bsurrenderresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameSurrenderResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bSurrenderResult = 1;
  if (has_bsurrenderresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsurrenderresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameSurrenderResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bSurrenderResult = 1;
  if (has_bsurrenderresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsurrenderresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameSurrenderResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bSurrenderResult = 1;
    if (has_bsurrenderresult()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameSurrenderResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameSurrenderResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameSurrenderResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameSurrenderResult::MergeFrom(const ProGXGDYGameSurrenderResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsurrenderresult()) {
      set_bsurrenderresult(from.bsurrenderresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameSurrenderResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameSurrenderResult::CopyFrom(const ProGXGDYGameSurrenderResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameSurrenderResult::IsInitialized() const {

  return true;
}

void ProGXGDYGameSurrenderResult::Swap(ProGXGDYGameSurrenderResult* other) {
  if (other != this) {
    std::swap(bsurrenderresult_, other->bsurrenderresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameSurrenderResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameSurrenderResult_descriptor_;
  metadata.reflection = ProGXGDYGameSurrenderResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomNotify_MSGID_descriptor_;
}
bool ProGXGDYGameShowBoomNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShowBoomNotify_MSGID ProGXGDYGameShowBoomNotify::ID;
const ProGXGDYGameShowBoomNotify_MSGID ProGXGDYGameShowBoomNotify::MSGID_MIN;
const ProGXGDYGameShowBoomNotify_MSGID ProGXGDYGameShowBoomNotify::MSGID_MAX;
const int ProGXGDYGameShowBoomNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProGXGDYGameShowBoomNotify::ProGXGDYGameShowBoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShowBoomNotify::InitAsDefaultInstance() {
}

ProGXGDYGameShowBoomNotify::ProGXGDYGameShowBoomNotify(const ProGXGDYGameShowBoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShowBoomNotify::~ProGXGDYGameShowBoomNotify() {
  SharedDtor();
}

void ProGXGDYGameShowBoomNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShowBoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomNotify_descriptor_;
}

const ProGXGDYGameShowBoomNotify& ProGXGDYGameShowBoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShowBoomNotify* ProGXGDYGameShowBoomNotify::default_instance_ = NULL;

ProGXGDYGameShowBoomNotify* ProGXGDYGameShowBoomNotify::New() const {
  return new ProGXGDYGameShowBoomNotify;
}

void ProGXGDYGameShowBoomNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShowBoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProGXGDYGameShowBoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShowBoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShowBoomNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShowBoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShowBoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShowBoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShowBoomNotify::MergeFrom(const ProGXGDYGameShowBoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShowBoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomNotify::CopyFrom(const ProGXGDYGameShowBoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShowBoomNotify::IsInitialized() const {

  return true;
}

void ProGXGDYGameShowBoomNotify::Swap(ProGXGDYGameShowBoomNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShowBoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShowBoomNotify_descriptor_;
  metadata.reflection = ProGXGDYGameShowBoomNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomOperate_MSGID_descriptor_;
}
bool ProGXGDYGameShowBoomOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2256:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShowBoomOperate_MSGID ProGXGDYGameShowBoomOperate::ID;
const ProGXGDYGameShowBoomOperate_MSGID ProGXGDYGameShowBoomOperate::MSGID_MIN;
const ProGXGDYGameShowBoomOperate_MSGID ProGXGDYGameShowBoomOperate::MSGID_MAX;
const int ProGXGDYGameShowBoomOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameShowBoomOperate::kNSeatFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameShowBoomOperate::ProGXGDYGameShowBoomOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShowBoomOperate::InitAsDefaultInstance() {
}

ProGXGDYGameShowBoomOperate::ProGXGDYGameShowBoomOperate(const ProGXGDYGameShowBoomOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomOperate::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShowBoomOperate::~ProGXGDYGameShowBoomOperate() {
  SharedDtor();
}

void ProGXGDYGameShowBoomOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShowBoomOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomOperate_descriptor_;
}

const ProGXGDYGameShowBoomOperate& ProGXGDYGameShowBoomOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShowBoomOperate* ProGXGDYGameShowBoomOperate::default_instance_ = NULL;

ProGXGDYGameShowBoomOperate* ProGXGDYGameShowBoomOperate::New() const {
  return new ProGXGDYGameShowBoomOperate;
}

void ProGXGDYGameShowBoomOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShowBoomOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameShowBoomOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShowBoomOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShowBoomOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShowBoomOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShowBoomOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShowBoomOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShowBoomOperate::MergeFrom(const ProGXGDYGameShowBoomOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShowBoomOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomOperate::CopyFrom(const ProGXGDYGameShowBoomOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShowBoomOperate::IsInitialized() const {

  return true;
}

void ProGXGDYGameShowBoomOperate::Swap(ProGXGDYGameShowBoomOperate* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShowBoomOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShowBoomOperate_descriptor_;
  metadata.reflection = ProGXGDYGameShowBoomOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGXGDYGameShowBoomResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomResponse_MSGID_descriptor_;
}
bool ProGXGDYGameShowBoomResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2257:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGXGDYGameShowBoomResponse_MSGID ProGXGDYGameShowBoomResponse::ID;
const ProGXGDYGameShowBoomResponse_MSGID ProGXGDYGameShowBoomResponse::MSGID_MIN;
const ProGXGDYGameShowBoomResponse_MSGID ProGXGDYGameShowBoomResponse::MSGID_MAX;
const int ProGXGDYGameShowBoomResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGXGDYGameShowBoomResponse::kNSeatFieldNumber;
const int ProGXGDYGameShowBoomResponse::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

ProGXGDYGameShowBoomResponse::ProGXGDYGameShowBoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGXGDYGameShowBoomResponse::InitAsDefaultInstance() {
}

ProGXGDYGameShowBoomResponse::ProGXGDYGameShowBoomResponse(const ProGXGDYGameShowBoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomResponse::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGXGDYGameShowBoomResponse::~ProGXGDYGameShowBoomResponse() {
  SharedDtor();
}

void ProGXGDYGameShowBoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGXGDYGameShowBoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGXGDYGameShowBoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGXGDYGameShowBoomResponse_descriptor_;
}

const ProGXGDYGameShowBoomResponse& ProGXGDYGameShowBoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GxGdyPk_2eproto();
  return *default_instance_;
}

ProGXGDYGameShowBoomResponse* ProGXGDYGameShowBoomResponse::default_instance_ = NULL;

ProGXGDYGameShowBoomResponse* ProGXGDYGameShowBoomResponse::New() const {
  return new ProGXGDYGameShowBoomResponse;
}

void ProGXGDYGameShowBoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    awardscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGXGDYGameShowBoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardScore;
        break;
      }

      // optional int32 AwardScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGXGDYGameShowBoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional int32 AwardScore = 2;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGXGDYGameShowBoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional int32 AwardScore = 2;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGXGDYGameShowBoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional int32 AwardScore = 2;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGXGDYGameShowBoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGXGDYGameShowBoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGXGDYGameShowBoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGXGDYGameShowBoomResponse::MergeFrom(const ProGXGDYGameShowBoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGXGDYGameShowBoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGXGDYGameShowBoomResponse::CopyFrom(const ProGXGDYGameShowBoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGXGDYGameShowBoomResponse::IsInitialized() const {

  return true;
}

void ProGXGDYGameShowBoomResponse::Swap(ProGXGDYGameShowBoomResponse* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGXGDYGameShowBoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGXGDYGameShowBoomResponse_descriptor_;
  metadata.reflection = ProGXGDYGameShowBoomResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
