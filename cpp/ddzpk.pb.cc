// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ddzpk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ddzpk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProDDZGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DDZMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDZMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DDZScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDZScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DDZAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDZAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DDZWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDZWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DDZWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDZWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserCallScoreResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserCallScoreResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallScoreResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserCallScoreRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserCallScoreRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallScoreRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameCallNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameCallNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameCallNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameQiangNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameQiangNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameQiangNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserCallLandlordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserCallLandlordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallLandlordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserCallLandlordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserCallLandlordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallLandlordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserQinagLandlordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserQinagLandlordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserQinagLandlordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserQiangLandlordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserQiangLandlordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserQiangLandlordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameSendLastCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameSendLastCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameSendLastCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserMingPaiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserMingPaiRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserMingPaiRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameUserMingPaiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameUserMingPaiResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameUserMingPaiResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameMingNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameMingNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameMingNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProDDZGameStartAgain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProDDZGameStartAgain_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProDDZGameStartAgain_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DDZGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DDZSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DDZKIGN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DDZBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DDZBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DDZBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ddzpk_2eproto() {
  protobuf_AddDesc_ddzpk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ddzpk.proto");
  GOOGLE_CHECK(file != NULL);
  ProDDZGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProDDZGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStatusResponse, status_),
  };
  ProDDZGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameStatusResponse_descriptor_,
      ProDDZGameStatusResponse::default_instance_,
      ProDDZGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameStatusResponse));
  ProDDZGameStatusResponse_MSGID_descriptor_ = ProDDZGameStatusResponse_descriptor_->enum_type(0);
  ProDDZGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProDDZGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDeskInfoResponse, cellscore_),
  };
  ProDDZGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameDeskInfoResponse_descriptor_,
      ProDDZGameDeskInfoResponse::default_instance_,
      ProDDZGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameDeskInfoResponse));
  ProDDZGameDeskInfoResponse_MSGID_descriptor_ = ProDDZGameDeskInfoResponse_descriptor_->enum_type(0);
  ProDDZGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProDDZGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyNotify, time_),
  };
  ProDDZGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameReadyNotify_descriptor_,
      ProDDZGameReadyNotify::default_instance_,
      ProDDZGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameReadyNotify));
  ProDDZGameReadyNotify_MSGID_descriptor_ = ProDDZGameReadyNotify_descriptor_->enum_type(0);
  ProDDZGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProDDZGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyRequest, seat_),
  };
  ProDDZGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameReadyRequest_descriptor_,
      ProDDZGameReadyRequest::default_instance_,
      ProDDZGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameReadyRequest));
  ProDDZGameReadyRequest_MSGID_descriptor_ = ProDDZGameReadyRequest_descriptor_->enum_type(0);
  ProDDZGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProDDZGameReadyResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyResponse, ismingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyResponse, mingpaitag_),
  };
  ProDDZGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameReadyResponse_descriptor_,
      ProDDZGameReadyResponse::default_instance_,
      ProDDZGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameReadyResponse));
  ProDDZGameReadyResponse_MSGID_descriptor_ = ProDDZGameReadyResponse_descriptor_->enum_type(0);
  ProDDZGameStart_descriptor_ = file->message_type(5);
  static const int ProDDZGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStart, outcardtimes_),
  };
  ProDDZGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameStart_descriptor_,
      ProDDZGameStart::default_instance_,
      ProDDZGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameStart));
  ProDDZGameStart_MSGID_descriptor_ = ProDDZGameStart_descriptor_->enum_type(0);
  ProDDZGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProDDZGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceNotify, dicecount_),
  };
  ProDDZGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameDiceNotify_descriptor_,
      ProDDZGameDiceNotify::default_instance_,
      ProDDZGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameDiceNotify));
  ProDDZGameDiceNotify_MSGID_descriptor_ = ProDDZGameDiceNotify_descriptor_->enum_type(0);
  ProDDZGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProDDZGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceRequest, dicecount_),
  };
  ProDDZGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameDiceRequest_descriptor_,
      ProDDZGameDiceRequest::default_instance_,
      ProDDZGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameDiceRequest));
  ProDDZGameDiceRequest_MSGID_descriptor_ = ProDDZGameDiceRequest_descriptor_->enum_type(0);
  ProDDZGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProDDZGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceResult, dicecount_),
  };
  ProDDZGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameDiceResult_descriptor_,
      ProDDZGameDiceResult::default_instance_,
      ProDDZGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameDiceResult));
  ProDDZGameDiceResult_MSGID_descriptor_ = ProDDZGameDiceResult_descriptor_->enum_type(0);
  ProDDZGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProDDZGameSendMahs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, cbleftcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, offlinetag_),
  };
  ProDDZGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameSendMahs_descriptor_,
      ProDDZGameSendMahs::default_instance_,
      ProDDZGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameSendMahs));
  ProDDZGameSendMahs_MSGID_descriptor_ = ProDDZGameSendMahs_descriptor_->enum_type(0);
  ProDDZGameKingData_descriptor_ = file->message_type(10);
  static const int ProDDZGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, cbbawangking_),
  };
  ProDDZGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameKingData_descriptor_,
      ProDDZGameKingData::default_instance_,
      ProDDZGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameKingData));
  ProDDZGameKingData_MSGID_descriptor_ = ProDDZGameKingData_descriptor_->enum_type(0);
  ProDDZGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProDDZGameOutMahsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, nochangemahs_),
  };
  ProDDZGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameOutMahsResponse_descriptor_,
      ProDDZGameOutMahsResponse::default_instance_,
      ProDDZGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameOutMahsResponse));
  ProDDZGameOutMahsResponse_MSGID_descriptor_ = ProDDZGameOutMahsResponse_descriptor_->enum_type(0);
  ProDDZGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProDDZGameTimerPower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, outcardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, lastcardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, lastpoint_),
  };
  ProDDZGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameTimerPower_descriptor_,
      ProDDZGameTimerPower::default_instance_,
      ProDDZGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameTimerPower));
  ProDDZGameTimerPower_MSGID_descriptor_ = ProDDZGameTimerPower_descriptor_->enum_type(0);
  ProDDZGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProDDZGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, operateseat_),
  };
  ProDDZGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameOperateNotify_descriptor_,
      ProDDZGameOperateNotify::default_instance_,
      ProDDZGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameOperateNotify));
  ProDDZGameOperateNotify_MSGID_descriptor_ = ProDDZGameOperateNotify_descriptor_->enum_type(0);
  ProDDZGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProDDZGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, handcount_),
  };
  ProDDZGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameOperateResult_descriptor_,
      ProDDZGameOperateResult::default_instance_,
      ProDDZGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameOperateResult));
  ProDDZGameOperateResult_MSGID_descriptor_ = ProDDZGameOperateResult_descriptor_->enum_type(0);
  ProDDZGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProDDZGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateRequest, cboperatecard_),
  };
  ProDDZGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameOperateRequest_descriptor_,
      ProDDZGameOperateRequest::default_instance_,
      ProDDZGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameOperateRequest));
  ProDDZGameOperateRequest_MSGID_descriptor_ = ProDDZGameOperateRequest_descriptor_->enum_type(0);
  ProDDZGameTrust_descriptor_ = file->message_type(16);
  static const int ProDDZGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTrust, istrust_),
  };
  ProDDZGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameTrust_descriptor_,
      ProDDZGameTrust::default_instance_,
      ProDDZGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameTrust));
  ProDDZGameTrust_MSGID_descriptor_ = ProDDZGameTrust_descriptor_->enum_type(0);
  ProDDZGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProDDZGameOutMahRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahRequest, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahRequest, nochangemahs_),
  };
  ProDDZGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameOutMahRequest_descriptor_,
      ProDDZGameOutMahRequest::default_instance_,
      ProDDZGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameOutMahRequest));
  ProDDZGameOutMahRequest_MSGID_descriptor_ = ProDDZGameOutMahRequest_descriptor_->enum_type(0);
  ProDDZGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProDDZGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, cbleftcount_),
  };
  ProDDZGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameCatchCard_descriptor_,
      ProDDZGameCatchCard::default_instance_,
      ProDDZGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameCatchCard));
  ProDDZGameCatchCard_MSGID_descriptor_ = ProDDZGameCatchCard_descriptor_->enum_type(0);
  DDZMahList_descriptor_ = file->message_type(19);
  static const int DDZMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZMahList, mahs_),
  };
  DDZMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DDZMahList_descriptor_,
      DDZMahList::default_instance_,
      DDZMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DDZMahList));
  DDZScoreList_descriptor_ = file->message_type(20);
  static const int DDZScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZScoreList, roundscore_),
  };
  DDZScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DDZScoreList_descriptor_,
      DDZScoreList::default_instance_,
      DDZScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DDZScoreList));
  DDZAwardList_descriptor_ = file->message_type(21);
  static const int DDZAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZAwardList, awardscore_),
  };
  DDZAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DDZAwardList_descriptor_,
      DDZAwardList::default_instance_,
      DDZAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DDZAwardList));
  ProDDZGameEnd_descriptor_ = file->message_type(22);
  static const int ProDDZGameEnd_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, detailedscores_),
  };
  ProDDZGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameEnd_descriptor_,
      ProDDZGameEnd::default_instance_,
      ProDDZGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameEnd));
  ProDDZGameEnd_MSGID_descriptor_ = ProDDZGameEnd_descriptor_->enum_type(0);
  ProDDZGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProDDZGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundRequest, text_),
  };
  ProDDZGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameQuickSoundRequest_descriptor_,
      ProDDZGameQuickSoundRequest::default_instance_,
      ProDDZGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameQuickSoundRequest));
  ProDDZGameQuickSoundRequest_MSGID_descriptor_ = ProDDZGameQuickSoundRequest_descriptor_->enum_type(0);
  ProDDZGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProDDZGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundResponse, text_),
  };
  ProDDZGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameQuickSoundResponse_descriptor_,
      ProDDZGameQuickSoundResponse::default_instance_,
      ProDDZGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameQuickSoundResponse));
  ProDDZGameQuickSoundResponse_MSGID_descriptor_ = ProDDZGameQuickSoundResponse_descriptor_->enum_type(0);
  ProDDZGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProDDZGameSendDiscardMahs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendDiscardMahs, deskcount_),
  };
  ProDDZGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameSendDiscardMahs_descriptor_,
      ProDDZGameSendDiscardMahs::default_instance_,
      ProDDZGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameSendDiscardMahs));
  ProDDZGameSendDiscardMahs_MSGID_descriptor_ = ProDDZGameSendDiscardMahs_descriptor_->enum_type(0);
  DDZWeaveItem_descriptor_ = file->message_type(26);
  static const int DDZWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItem, cardsize_),
  };
  DDZWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DDZWeaveItem_descriptor_,
      DDZWeaveItem::default_instance_,
      DDZWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DDZWeaveItem));
  DDZWeaveItems_descriptor_ = file->message_type(27);
  static const int DDZWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItems, items_),
  };
  DDZWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DDZWeaveItems_descriptor_,
      DDZWeaveItems::default_instance_,
      DDZWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDZWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DDZWeaveItems));
  ProDDZGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProDDZGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendActionMahs, weaves_),
  };
  ProDDZGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameSendActionMahs_descriptor_,
      ProDDZGameSendActionMahs::default_instance_,
      ProDDZGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameSendActionMahs));
  ProDDZGameSendActionMahs_MSGID_descriptor_ = ProDDZGameSendActionMahs_descriptor_->enum_type(0);
  ProDDZGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProDDZGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenRequest, time_),
  };
  ProDDZGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameBrokenRequest_descriptor_,
      ProDDZGameBrokenRequest::default_instance_,
      ProDDZGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameBrokenRequest));
  ProDDZGameBrokenRequest_MSGID_descriptor_ = ProDDZGameBrokenRequest_descriptor_->enum_type(0);
  ProDDZGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProDDZGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenOperate, result_),
  };
  ProDDZGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameBrokenOperate_descriptor_,
      ProDDZGameBrokenOperate::default_instance_,
      ProDDZGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameBrokenOperate));
  ProDDZGameBrokenOperate_MSGID_descriptor_ = ProDDZGameBrokenOperate_descriptor_->enum_type(0);
  ProDDZGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProDDZGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenNotify, operate_code_),
  };
  ProDDZGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameBrokenNotify_descriptor_,
      ProDDZGameBrokenNotify::default_instance_,
      ProDDZGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameBrokenNotify));
  ProDDZGameBrokenNotify_MSGID_descriptor_ = ProDDZGameBrokenNotify_descriptor_->enum_type(0);
  ProDDZGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProDDZGameRuleConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, have_bottom_king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, have_mai_lei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, hava_hui_tou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, bbawangfanbei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, splaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, nselfseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, bjingdian_),
  };
  ProDDZGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameRuleConfig_descriptor_,
      ProDDZGameRuleConfig::default_instance_,
      ProDDZGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameRuleConfig));
  ProDDZGameRuleConfig_MSGID_descriptor_ = ProDDZGameRuleConfig_descriptor_->enum_type(0);
  ProDDZGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProDDZGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenStatus, left_time_),
  };
  ProDDZGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameBrokenStatus_descriptor_,
      ProDDZGameBrokenStatus::default_instance_,
      ProDDZGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameBrokenStatus));
  ProDDZGameBrokenStatus_MSGID_descriptor_ = ProDDZGameBrokenStatus_descriptor_->enum_type(0);
  ProDDZGameDataResp_descriptor_ = file->message_type(34);
  static const int ProDDZGameDataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDataResp, type_),
  };
  ProDDZGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameDataResp_descriptor_,
      ProDDZGameDataResp::default_instance_,
      ProDDZGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameDataResp));
  ProDDZGameDataResp_MSGID_descriptor_ = ProDDZGameDataResp_descriptor_->enum_type(0);
  ProDDZGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProDDZGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordRequest, url_),
  };
  ProDDZGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameRecordRequest_descriptor_,
      ProDDZGameRecordRequest::default_instance_,
      ProDDZGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameRecordRequest));
  ProDDZGameRecordRequest_MSGID_descriptor_ = ProDDZGameRecordRequest_descriptor_->enum_type(0);
  ProDDZGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProDDZGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordResponse, url_),
  };
  ProDDZGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameRecordResponse_descriptor_,
      ProDDZGameRecordResponse::default_instance_,
      ProDDZGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameRecordResponse));
  ProDDZGameRecordResponse_MSGID_descriptor_ = ProDDZGameRecordResponse_descriptor_->enum_type(0);
  ProDDZGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProDDZGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, strstreetname_),
  };
  ProDDZGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserLocationRequest_descriptor_,
      ProDDZGameUserLocationRequest::default_instance_,
      ProDDZGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserLocationRequest));
  ProDDZGameUserLocationRequest_MSGID_descriptor_ = ProDDZGameUserLocationRequest_descriptor_->enum_type(0);
  ProDDZGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProDDZGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSyncCardResponse, handmahs_),
  };
  ProDDZGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameSyncCardResponse_descriptor_,
      ProDDZGameSyncCardResponse::default_instance_,
      ProDDZGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameSyncCardResponse));
  ProDDZGameSyncCardResponse_MSGID_descriptor_ = ProDDZGameSyncCardResponse_descriptor_->enum_type(0);
  ProDDZGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProDDZGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserPhoneStatusRequest, userstatus_),
  };
  ProDDZGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserPhoneStatusRequest_descriptor_,
      ProDDZGameUserPhoneStatusRequest::default_instance_,
      ProDDZGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserPhoneStatusRequest));
  ProDDZGameUserPhoneStatusRequest_MSGID_descriptor_ = ProDDZGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProDDZGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProDDZGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserGiveUpRequest, seat_id_),
  };
  ProDDZGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserGiveUpRequest_descriptor_,
      ProDDZGameUserGiveUpRequest::default_instance_,
      ProDDZGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserGiveUpRequest));
  ProDDZGameUserGiveUpRequest_MSGID_descriptor_ = ProDDZGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProDDZGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProDDZGameUserHintRequest_offsets_[1] = {
  };
  ProDDZGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserHintRequest_descriptor_,
      ProDDZGameUserHintRequest::default_instance_,
      ProDDZGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserHintRequest));
  ProDDZGameUserHintRequest_MSGID_descriptor_ = ProDDZGameUserHintRequest_descriptor_->enum_type(0);
  ProDDZGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProDDZGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserHintResponse, outmahs_),
  };
  ProDDZGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserHintResponse_descriptor_,
      ProDDZGameUserHintResponse::default_instance_,
      ProDDZGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserHintResponse));
  ProDDZGameUserHintResponse_MSGID_descriptor_ = ProDDZGameUserHintResponse_descriptor_->enum_type(0);
  ProDDZGameUserCallScoreResponse_descriptor_ = file->message_type(43);
  static const int ProDDZGameUserCallScoreResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreResponse, usercallscore_),
  };
  ProDDZGameUserCallScoreResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserCallScoreResponse_descriptor_,
      ProDDZGameUserCallScoreResponse::default_instance_,
      ProDDZGameUserCallScoreResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserCallScoreResponse));
  ProDDZGameUserCallScoreResponse_MSGID_descriptor_ = ProDDZGameUserCallScoreResponse_descriptor_->enum_type(0);
  ProDDZGameUserCallScoreRequest_descriptor_ = file->message_type(44);
  static const int ProDDZGameUserCallScoreRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreRequest, usercallscore_),
  };
  ProDDZGameUserCallScoreRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserCallScoreRequest_descriptor_,
      ProDDZGameUserCallScoreRequest::default_instance_,
      ProDDZGameUserCallScoreRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallScoreRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserCallScoreRequest));
  ProDDZGameUserCallScoreRequest_MSGID_descriptor_ = ProDDZGameUserCallScoreRequest_descriptor_->enum_type(0);
  ProDDZGameCallNotify_descriptor_ = file->message_type(45);
  static const int ProDDZGameCallNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCallNotify, seat_),
  };
  ProDDZGameCallNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameCallNotify_descriptor_,
      ProDDZGameCallNotify::default_instance_,
      ProDDZGameCallNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCallNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameCallNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameCallNotify));
  ProDDZGameCallNotify_MSGID_descriptor_ = ProDDZGameCallNotify_descriptor_->enum_type(0);
  ProDDZGameQiangNotify_descriptor_ = file->message_type(46);
  static const int ProDDZGameQiangNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQiangNotify, seat_),
  };
  ProDDZGameQiangNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameQiangNotify_descriptor_,
      ProDDZGameQiangNotify::default_instance_,
      ProDDZGameQiangNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQiangNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameQiangNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameQiangNotify));
  ProDDZGameQiangNotify_MSGID_descriptor_ = ProDDZGameQiangNotify_descriptor_->enum_type(0);
  ProDDZGameUserCallLandlordResponse_descriptor_ = file->message_type(47);
  static const int ProDDZGameUserCallLandlordResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, iscallandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, landlordseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, issoundcall_),
  };
  ProDDZGameUserCallLandlordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserCallLandlordResponse_descriptor_,
      ProDDZGameUserCallLandlordResponse::default_instance_,
      ProDDZGameUserCallLandlordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserCallLandlordResponse));
  ProDDZGameUserCallLandlordResponse_MSGID_descriptor_ = ProDDZGameUserCallLandlordResponse_descriptor_->enum_type(0);
  ProDDZGameUserCallLandlordRequest_descriptor_ = file->message_type(48);
  static const int ProDDZGameUserCallLandlordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordRequest, iscallandlord_),
  };
  ProDDZGameUserCallLandlordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserCallLandlordRequest_descriptor_,
      ProDDZGameUserCallLandlordRequest::default_instance_,
      ProDDZGameUserCallLandlordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserCallLandlordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserCallLandlordRequest));
  ProDDZGameUserCallLandlordRequest_MSGID_descriptor_ = ProDDZGameUserCallLandlordRequest_descriptor_->enum_type(0);
  ProDDZGameUserQinagLandlordResponse_descriptor_ = file->message_type(49);
  static const int ProDDZGameUserQinagLandlordResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQinagLandlordResponse, isqianglandlord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQinagLandlordResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQinagLandlordResponse, landlordseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQinagLandlordResponse, seat_),
  };
  ProDDZGameUserQinagLandlordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserQinagLandlordResponse_descriptor_,
      ProDDZGameUserQinagLandlordResponse::default_instance_,
      ProDDZGameUserQinagLandlordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQinagLandlordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQinagLandlordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserQinagLandlordResponse));
  ProDDZGameUserQinagLandlordResponse_MSGID_descriptor_ = ProDDZGameUserQinagLandlordResponse_descriptor_->enum_type(0);
  ProDDZGameUserQiangLandlordRequest_descriptor_ = file->message_type(50);
  static const int ProDDZGameUserQiangLandlordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQiangLandlordRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQiangLandlordRequest, isqianglandlord_),
  };
  ProDDZGameUserQiangLandlordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserQiangLandlordRequest_descriptor_,
      ProDDZGameUserQiangLandlordRequest::default_instance_,
      ProDDZGameUserQiangLandlordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQiangLandlordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserQiangLandlordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserQiangLandlordRequest));
  ProDDZGameUserQiangLandlordRequest_MSGID_descriptor_ = ProDDZGameUserQiangLandlordRequest_descriptor_->enum_type(0);
  ProDDZGameSendLastCard_descriptor_ = file->message_type(51);
  static const int ProDDZGameSendLastCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, lastmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, laizi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, isrecome_),
  };
  ProDDZGameSendLastCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameSendLastCard_descriptor_,
      ProDDZGameSendLastCard::default_instance_,
      ProDDZGameSendLastCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameSendLastCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameSendLastCard));
  ProDDZGameSendLastCard_MSGID_descriptor_ = ProDDZGameSendLastCard_descriptor_->enum_type(0);
  ProDDZGameUserMingPaiRequest_descriptor_ = file->message_type(52);
  static const int ProDDZGameUserMingPaiRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiRequest, ismingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiRequest, beilv_),
  };
  ProDDZGameUserMingPaiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserMingPaiRequest_descriptor_,
      ProDDZGameUserMingPaiRequest::default_instance_,
      ProDDZGameUserMingPaiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserMingPaiRequest));
  ProDDZGameUserMingPaiRequest_MSGID_descriptor_ = ProDDZGameUserMingPaiRequest_descriptor_->enum_type(0);
  ProDDZGameUserMingPaiResponse_descriptor_ = file->message_type(53);
  static const int ProDDZGameUserMingPaiResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiResponse, ismingpai_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiResponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiResponse, mingtag_),
  };
  ProDDZGameUserMingPaiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameUserMingPaiResponse_descriptor_,
      ProDDZGameUserMingPaiResponse::default_instance_,
      ProDDZGameUserMingPaiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameUserMingPaiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameUserMingPaiResponse));
  ProDDZGameUserMingPaiResponse_MSGID_descriptor_ = ProDDZGameUserMingPaiResponse_descriptor_->enum_type(0);
  ProDDZGameMingNotify_descriptor_ = file->message_type(54);
  static const int ProDDZGameMingNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameMingNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameMingNotify, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameMingNotify, time_),
  };
  ProDDZGameMingNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameMingNotify_descriptor_,
      ProDDZGameMingNotify::default_instance_,
      ProDDZGameMingNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameMingNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameMingNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameMingNotify));
  ProDDZGameMingNotify_MSGID_descriptor_ = ProDDZGameMingNotify_descriptor_->enum_type(0);
  ProDDZGameStartAgain_descriptor_ = file->message_type(55);
  static const int ProDDZGameStartAgain_offsets_[1] = {
  };
  ProDDZGameStartAgain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProDDZGameStartAgain_descriptor_,
      ProDDZGameStartAgain::default_instance_,
      ProDDZGameStartAgain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStartAgain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProDDZGameStartAgain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProDDZGameStartAgain));
  ProDDZGameStartAgain_MSGID_descriptor_ = ProDDZGameStartAgain_descriptor_->enum_type(0);
  DDZGameState_descriptor_ = file->enum_type(0);
  DDZSEND_TYPE_descriptor_ = file->enum_type(1);
  DDZKIGN_TYPE_descriptor_ = file->enum_type(2);
  DDZBROKEN_TYPE_descriptor_ = file->enum_type(3);
  DDZBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  DDZBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ddzpk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameStatusResponse_descriptor_, &ProDDZGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameDeskInfoResponse_descriptor_, &ProDDZGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameReadyNotify_descriptor_, &ProDDZGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameReadyRequest_descriptor_, &ProDDZGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameReadyResponse_descriptor_, &ProDDZGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameStart_descriptor_, &ProDDZGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameDiceNotify_descriptor_, &ProDDZGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameDiceRequest_descriptor_, &ProDDZGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameDiceResult_descriptor_, &ProDDZGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameSendMahs_descriptor_, &ProDDZGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameKingData_descriptor_, &ProDDZGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameOutMahsResponse_descriptor_, &ProDDZGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameTimerPower_descriptor_, &ProDDZGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameOperateNotify_descriptor_, &ProDDZGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameOperateResult_descriptor_, &ProDDZGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameOperateRequest_descriptor_, &ProDDZGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameTrust_descriptor_, &ProDDZGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameOutMahRequest_descriptor_, &ProDDZGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameCatchCard_descriptor_, &ProDDZGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DDZMahList_descriptor_, &DDZMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DDZScoreList_descriptor_, &DDZScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DDZAwardList_descriptor_, &DDZAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameEnd_descriptor_, &ProDDZGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameQuickSoundRequest_descriptor_, &ProDDZGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameQuickSoundResponse_descriptor_, &ProDDZGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameSendDiscardMahs_descriptor_, &ProDDZGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DDZWeaveItem_descriptor_, &DDZWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DDZWeaveItems_descriptor_, &DDZWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameSendActionMahs_descriptor_, &ProDDZGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameBrokenRequest_descriptor_, &ProDDZGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameBrokenOperate_descriptor_, &ProDDZGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameBrokenNotify_descriptor_, &ProDDZGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameRuleConfig_descriptor_, &ProDDZGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameBrokenStatus_descriptor_, &ProDDZGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameDataResp_descriptor_, &ProDDZGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameRecordRequest_descriptor_, &ProDDZGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameRecordResponse_descriptor_, &ProDDZGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserLocationRequest_descriptor_, &ProDDZGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameSyncCardResponse_descriptor_, &ProDDZGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserPhoneStatusRequest_descriptor_, &ProDDZGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserGiveUpRequest_descriptor_, &ProDDZGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserHintRequest_descriptor_, &ProDDZGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserHintResponse_descriptor_, &ProDDZGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserCallScoreResponse_descriptor_, &ProDDZGameUserCallScoreResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserCallScoreRequest_descriptor_, &ProDDZGameUserCallScoreRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameCallNotify_descriptor_, &ProDDZGameCallNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameQiangNotify_descriptor_, &ProDDZGameQiangNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserCallLandlordResponse_descriptor_, &ProDDZGameUserCallLandlordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserCallLandlordRequest_descriptor_, &ProDDZGameUserCallLandlordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserQinagLandlordResponse_descriptor_, &ProDDZGameUserQinagLandlordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserQiangLandlordRequest_descriptor_, &ProDDZGameUserQiangLandlordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameSendLastCard_descriptor_, &ProDDZGameSendLastCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserMingPaiRequest_descriptor_, &ProDDZGameUserMingPaiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameUserMingPaiResponse_descriptor_, &ProDDZGameUserMingPaiResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameMingNotify_descriptor_, &ProDDZGameMingNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProDDZGameStartAgain_descriptor_, &ProDDZGameStartAgain::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ddzpk_2eproto() {
  delete ProDDZGameStatusResponse::default_instance_;
  delete ProDDZGameStatusResponse_reflection_;
  delete ProDDZGameDeskInfoResponse::default_instance_;
  delete ProDDZGameDeskInfoResponse_reflection_;
  delete ProDDZGameReadyNotify::default_instance_;
  delete ProDDZGameReadyNotify_reflection_;
  delete ProDDZGameReadyRequest::default_instance_;
  delete ProDDZGameReadyRequest_reflection_;
  delete ProDDZGameReadyResponse::default_instance_;
  delete ProDDZGameReadyResponse_reflection_;
  delete ProDDZGameStart::default_instance_;
  delete ProDDZGameStart_reflection_;
  delete ProDDZGameDiceNotify::default_instance_;
  delete ProDDZGameDiceNotify_reflection_;
  delete ProDDZGameDiceRequest::default_instance_;
  delete ProDDZGameDiceRequest_reflection_;
  delete ProDDZGameDiceResult::default_instance_;
  delete ProDDZGameDiceResult_reflection_;
  delete ProDDZGameSendMahs::default_instance_;
  delete ProDDZGameSendMahs_reflection_;
  delete ProDDZGameKingData::default_instance_;
  delete ProDDZGameKingData_reflection_;
  delete ProDDZGameOutMahsResponse::default_instance_;
  delete ProDDZGameOutMahsResponse_reflection_;
  delete ProDDZGameTimerPower::default_instance_;
  delete ProDDZGameTimerPower_reflection_;
  delete ProDDZGameOperateNotify::default_instance_;
  delete ProDDZGameOperateNotify_reflection_;
  delete ProDDZGameOperateResult::default_instance_;
  delete ProDDZGameOperateResult_reflection_;
  delete ProDDZGameOperateRequest::default_instance_;
  delete ProDDZGameOperateRequest_reflection_;
  delete ProDDZGameTrust::default_instance_;
  delete ProDDZGameTrust_reflection_;
  delete ProDDZGameOutMahRequest::default_instance_;
  delete ProDDZGameOutMahRequest_reflection_;
  delete ProDDZGameCatchCard::default_instance_;
  delete ProDDZGameCatchCard_reflection_;
  delete DDZMahList::default_instance_;
  delete DDZMahList_reflection_;
  delete DDZScoreList::default_instance_;
  delete DDZScoreList_reflection_;
  delete DDZAwardList::default_instance_;
  delete DDZAwardList_reflection_;
  delete ProDDZGameEnd::default_instance_;
  delete ProDDZGameEnd_reflection_;
  delete ProDDZGameQuickSoundRequest::default_instance_;
  delete ProDDZGameQuickSoundRequest_reflection_;
  delete ProDDZGameQuickSoundResponse::default_instance_;
  delete ProDDZGameQuickSoundResponse_reflection_;
  delete ProDDZGameSendDiscardMahs::default_instance_;
  delete ProDDZGameSendDiscardMahs_reflection_;
  delete DDZWeaveItem::default_instance_;
  delete DDZWeaveItem_reflection_;
  delete DDZWeaveItems::default_instance_;
  delete DDZWeaveItems_reflection_;
  delete ProDDZGameSendActionMahs::default_instance_;
  delete ProDDZGameSendActionMahs_reflection_;
  delete ProDDZGameBrokenRequest::default_instance_;
  delete ProDDZGameBrokenRequest_reflection_;
  delete ProDDZGameBrokenOperate::default_instance_;
  delete ProDDZGameBrokenOperate_reflection_;
  delete ProDDZGameBrokenNotify::default_instance_;
  delete ProDDZGameBrokenNotify_reflection_;
  delete ProDDZGameRuleConfig::default_instance_;
  delete ProDDZGameRuleConfig_reflection_;
  delete ProDDZGameBrokenStatus::default_instance_;
  delete ProDDZGameBrokenStatus_reflection_;
  delete ProDDZGameDataResp::default_instance_;
  delete ProDDZGameDataResp_reflection_;
  delete ProDDZGameRecordRequest::default_instance_;
  delete ProDDZGameRecordRequest_reflection_;
  delete ProDDZGameRecordResponse::default_instance_;
  delete ProDDZGameRecordResponse_reflection_;
  delete ProDDZGameUserLocationRequest::default_instance_;
  delete ProDDZGameUserLocationRequest_reflection_;
  delete ProDDZGameSyncCardResponse::default_instance_;
  delete ProDDZGameSyncCardResponse_reflection_;
  delete ProDDZGameUserPhoneStatusRequest::default_instance_;
  delete ProDDZGameUserPhoneStatusRequest_reflection_;
  delete ProDDZGameUserGiveUpRequest::default_instance_;
  delete ProDDZGameUserGiveUpRequest_reflection_;
  delete ProDDZGameUserHintRequest::default_instance_;
  delete ProDDZGameUserHintRequest_reflection_;
  delete ProDDZGameUserHintResponse::default_instance_;
  delete ProDDZGameUserHintResponse_reflection_;
  delete ProDDZGameUserCallScoreResponse::default_instance_;
  delete ProDDZGameUserCallScoreResponse_reflection_;
  delete ProDDZGameUserCallScoreRequest::default_instance_;
  delete ProDDZGameUserCallScoreRequest_reflection_;
  delete ProDDZGameCallNotify::default_instance_;
  delete ProDDZGameCallNotify_reflection_;
  delete ProDDZGameQiangNotify::default_instance_;
  delete ProDDZGameQiangNotify_reflection_;
  delete ProDDZGameUserCallLandlordResponse::default_instance_;
  delete ProDDZGameUserCallLandlordResponse_reflection_;
  delete ProDDZGameUserCallLandlordRequest::default_instance_;
  delete ProDDZGameUserCallLandlordRequest_reflection_;
  delete ProDDZGameUserQinagLandlordResponse::default_instance_;
  delete ProDDZGameUserQinagLandlordResponse_reflection_;
  delete ProDDZGameUserQiangLandlordRequest::default_instance_;
  delete ProDDZGameUserQiangLandlordRequest_reflection_;
  delete ProDDZGameSendLastCard::default_instance_;
  delete ProDDZGameSendLastCard_reflection_;
  delete ProDDZGameUserMingPaiRequest::default_instance_;
  delete ProDDZGameUserMingPaiRequest_reflection_;
  delete ProDDZGameUserMingPaiResponse::default_instance_;
  delete ProDDZGameUserMingPaiResponse_reflection_;
  delete ProDDZGameMingNotify::default_instance_;
  delete ProDDZGameMingNotify_reflection_;
  delete ProDDZGameStartAgain::default_instance_;
  delete ProDDZGameStartAgain_reflection_;
}

void protobuf_AddDesc_ddzpk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013ddzpk.proto\032\nbase.proto\"K\n\030ProDDZGameS"
    "tatusResponse\022\035\n\006status\030\002 \001(\0162\r.DDZGameS"
    "tate\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"A\n\032ProDDZGameDesk"
    "InfoResponse\022\021\n\tCellScore\030\002 \001(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\231\021\"E\n\025ProDDZGameReadyNotify\022\014\n\004se"
    "at\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\232\021"
    "\"8\n\026ProDDZGameReadyRequest\022\014\n\004seat\030\002 \001(\005"
    "\"\020\n\005MSGID\022\007\n\002ID\020\233\021\"`\n\027ProDDZGameReadyRes"
    "ponse\022\014\n\004seat\030\002 \001(\005\022\021\n\tisMingPai\030\003 \001(\010\022\022"
    "\n\nMingPaiTag\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\234\021\"`\n\017"
    "ProDDZGameStart\022\022\n\nbankerseat\030\002 \001(\005\022\021\n\tg"
    "amecount\030\003 \001(\005\022\024\n\014outCardtimes\030\004 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\235\021\"W\n\024ProDDZGameDiceNotify\022\014"
    "\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\021\n\tdicecount\030"
    "\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\236\021\"J\n\025ProDDZGameDic"
    "eRequest\022\014\n\004seat\030\002 \001(\005\022\021\n\tdicecount\030\003 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\237\021\"Y\n\024ProDDZGameDiceRes"
    "ult\022\014\n\004seat\030\002 \001(\005\022\016\n\006result\030\003 \003(\005\022\021\n\tdic"
    "ecount\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\240\021\"\225\001\n\022ProDD"
    "ZGameSendMahs\022\014\n\004seat\030\002 \001(\005\022#\n\016cbHandCar"
    "dData\030\003 \003(\0132\013.DDZMahList\022\021\n\tmahscount\030\004 "
    "\003(\005\022\023\n\013cbLeftCount\030\005 \001(\005\022\022\n\nofflineTag\030\006"
    " \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\241\021\"\216\002\n\022ProDDZGameKin"
    "gData\022\014\n\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\025\n\rdow"
    "nKingScore\030\004 \003(\005\022\021\n\tkingcount\030\005 \003(\005\022\020\n\010v"
    "iceking\030\006 \003(\005\0223\n\013notify_type\030\007 \001(\0162\r.DDZ"
    "SEND_TYPE:\017DDZ_NORMAL_SEND\022-\n\tking_type\030"
    "\010 \001(\0162\r.DDZKIGN_TYPE:\013DDZ_KING_UP\022\024\n\014cbC"
    "hongGuang\030\t \003(\005\022\024\n\014cbBaWangKing\030\n \003(\005\"\020\n"
    "\005MSGID\022\007\n\002ID\020\242\021\"\231\001\n\031ProDDZGameOutMahsRes"
    "ponse\022\014\n\004seat\030\002 \001(\005\022\017\n\007outMahs\030\003 \003(\005\022\020\n\010"
    "handmahs\030\004 \003(\005\022\021\n\tcardCount\030\005 \001(\005\022\020\n\010car"
    "dType\030\006 \001(\005\022\024\n\014noChangeMahs\030\007 \003(\005\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\243\021\"\202\001\n\024ProDDZGameTimerPower\022\014\n\004"
    "seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\023\n\013outcardTime\030"
    "\004 \001(\005\022\024\n\014lastCardType\030\005 \001(\005\022\021\n\tlastPoint"
    "\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\244\021\"\212\001\n\027ProDDZGameO"
    "perateNotify\022\022\n\nresumeSeat\030\002 \001(\005\022\022\n\nActi"
    "onMask\030\003 \001(\005\022\022\n\nActionCard\030\004 \001(\005\022\014\n\004time"
    "\030\005 \001(\005\022\023\n\013operateseat\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002"
    "ID\020\245\021\"\251\001\n\027ProDDZGameOperateResult\022\024\n\014wOp"
    "erateUser\030\002 \001(\005\022\024\n\014wProvideUser\030\003 \001(\005\022\024\n"
    "\014wOperateCode\030\004 \001(\005\022\025\n\rcbOperateCard\030\005 \001"
    "(\005\022\020\n\010handmahs\030\006 \003(\005\022\021\n\thandcount\030\007 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\246\021\"g\n\030ProDDZGameOperateRe"
    "quest\022\014\n\004seat\030\002 \001(\005\022\024\n\014wOperateCode\030\003 \001("
    "\005\022\025\n\rcbOperateCard\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\247\021\"B\n\017ProDDZGameTrust\022\014\n\004seat\030\002 \001(\005\022\017\n\007i"
    "sTrust\030\003 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\250\021\"`\n\027ProDDZ"
    "GameOutMahRequest\022\014\n\004seat\030\002 \001(\005\022\017\n\007outMa"
    "hs\030\003 \003(\005\022\024\n\014noChangeMahs\030\004 \003(\005\"\020\n\005MSGID\022"
    "\007\n\002ID\020\251\021\"\210\001\n\023ProDDZGameCatchCard\022\014\n\004seat"
    "\030\002 \001(\005\022\022\n\ncbCardData\030\003 \001(\005\022\023\n\013wActionMas"
    "k\030\004 \001(\005\022\023\n\013cbIsNotGang\030\005 \001(\010\022\023\n\013cbLeftCo"
    "unt\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\252\021\"\032\n\nDDZMahLis"
    "t\022\014\n\004Mahs\030\001 \003(\005\"\"\n\014DDZScoreList\022\022\n\nround"
    "Score\030\001 \003(\005\"C\n\014DDZAwardList\022\014\n\004seat\030\001 \001("
    "\005\022\021\n\tCardsData\030\002 \003(\005\022\022\n\nawardScore\030\003 \001(\005"
    "\"\377\003\n\rProDDZGameEnd\022\020\n\010lGameTax\030\002 \001(\005\022\024\n\014"
    "cbChongGuang\030\003 \003(\005\022\024\n\014cbBaWangKing\030\004 \003(\005"
    "\022\024\n\014wProvideUser\030\005 \001(\005\022\023\n\013cbChiHuCard\030\006 "
    "\001(\005\022\023\n\013dwChiHuKind\030\007 \003(\005\022\024\n\014dwChiHuRight"
    "\030\010 \003(\005\022\030\n\020lTotaslGameScore\030\t \003(\005\022\031\n\021lCur"
    "rentGameScore\030\n \003(\005\022\032\n\022lCurrentPointScor"
    "e\030\013 \003(\005\022\024\n\014lAttachScore\030\014 \003(\005\022#\n\016cbHandC"
    "ardData\030\r \003(\0132\013.DDZMahList\022&\n\017cbAwardCar"
    "dData\030\016 \003(\0132\r.DDZAwardList\022\025\n\rlOnlyWinSc"
    "ore\030\017 \003(\005\022\021\n\tbRoundEnd\030\020 \001(\010\022\024\n\014lHuiTouS"
    "core\030\021 \003(\005\022\022\n\nbZhuangWin\030\022 \001(\010\022\031\n\021cbJian"
    "gMaCardData\030\023 \003(\005\022%\n\016detailedScores\030\024 \003("
    "\0132\r.DDZScoreList\"\020\n\005MSGID\022\007\n\002ID\020\253\021\"q\n\033Pr"
    "oDDZGameQuickSoundRequest\022\017\n\007desk_id\030\002 \001"
    "(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n"
    "\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\254\021\"r\n\034ProDDZG"
    "ameQuickSoundResponse\022\017\n\007desk_id\030\002 \001(\005\022\017"
    "\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004tex"
    "t\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\255\021\"r\n\031ProDDZGameS"
    "endDiscardMahs\022\017\n\007seat_id\030\002 \001(\005\022\037\n\ncbCar"
    "dData\030\003 \003(\0132\013.DDZMahList\022\021\n\tdeskCount\030\004 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\256\021\"\\\n\014DDZWeaveItem\022\021\n"
    "\tweaveKind\030\001 \001(\005\022\022\n\ncentercard\030\002 \001(\005\022\023\n\013"
    "provideUser\030\003 \001(\005\022\020\n\010cardsize\030\004 \001(\005\"-\n\rD"
    "DZWeaveItems\022\034\n\005items\030\001 \003(\0132\r.DDZWeaveIt"
    "em\"]\n\030ProDDZGameSendActionMahs\022\017\n\007seat_i"
    "d\030\002 \001(\005\022\036\n\006weaves\030\003 \003(\0132\016.DDZWeaveItems\""
    "\020\n\005MSGID\022\007\n\002ID\020\257\021\"i\n\027ProDDZGameBrokenReq"
    "uest\022\017\n\007seat_id\030\002 \001(\005\022\035\n\004type\030\003 \001(\0162\017.DD"
    "ZBROKEN_TYPE\022\014\n\004time\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002I"
    "D\020\260\021\"q\n\027ProDDZGameBrokenOperate\022\017\n\007seat_"
    "id\030\002 \001(\005\0223\n\006result\030\003 \001(\0162\022.DDZBROKEN_OPE"
    "RATE:\017DDZ_BO_DISAGREE\"\020\n\005MSGID\022\007\n\002ID\020\261\021\""
    "r\n\026ProDDZGameBrokenNotify\022\017\n\007seat_id\030\002 \001"
    "(\005\0225\n\014operate_code\030\003 \001(\0162\017.DDZBROKEN_COD"
    "E:\016DDZ_BC_SUCCESS\"\020\n\005MSGID\022\007\n\002ID\020\262\021\"\350\002\n\024"
    "ProDDZGameRuleConfig\022\022\n\ngame_round\030\001 \001(\005"
    "\022\021\n\tneed_card\030\002 \001(\005\022\030\n\020have_bottom_king\030"
    "\003 \001(\010\022\024\n\014have_mai_lei\030\004 \001(\010\022\024\n\014hava_hui_"
    "tou\030\005 \001(\010\022\023\n\013nMasterSeat\030\006 \001(\005\022\032\n\022curren"
    "t_game_count\030\007 \001(\005\022\023\n\013have_jianma\030\010 \001(\010\022"
    "\025\n\rnChongguanNum\030\t \001(\005\022\025\n\rbbawangfanbei\030"
    "\n \001(\010\022\022\n\nnPlayerNum\030\013 \001(\005\022\020\n\010sRoomNum\030\014 "
    "\001(\014\022\021\n\tsPlayTime\030\r \001(\014\022\021\n\tnselfSeat\030\016 \001("
    "\005\022\021\n\tbJingDian\030\017 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\263\021\"i"
    "\n\026ProDDZGameBrokenStatus\022\023\n\013broken_seat\030"
    "\001 \001(\005\022\025\n\rbroken_status\030\002 \003(\010\022\021\n\tleft_tim"
    "e\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\264\021\"I\n\022ProDDZGameD"
    "ataResp\022\023\n\013total_score\030\001 \003(\005\022\014\n\004type\030\002 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\265\021\"I\n\027ProDDZGameRecord"
    "Request\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n"
    "\005MSGID\022\007\n\002ID\020\266\021\"J\n\030ProDDZGameRecordRespo"
    "nse\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\267\021\"\227\001\n\035ProDDZGameUserLocationRe"
    "quest\022\017\n\007seat_id\030\001 \001(\005\022\023\n\013dwlongitude\030\002 "
    "\001(\001\022\022\n\ndwlatitude\030\003 \001(\001\022\023\n\013strDistrict\030\004"
    " \001(\014\022\025\n\rstrStreetName\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002"
    "ID\020\270\021\"N\n\032ProDDZGameSyncCardResponse\022\014\n\004s"
    "eat\030\002 \001(\005\022\020\n\010handmahs\030\003 \003(\005\"\020\n\005MSGID\022\007\n\002"
    "ID\020\271\021\"Y\n ProDDZGameUserPhoneStatusReques"
    "t\022\017\n\007seat_id\030\001 \001(\005\022\022\n\nuserstatus\030\002 \001(\005\"\020"
    "\n\005MSGID\022\007\n\002ID\020\272\021\"@\n\033ProDDZGameUserGiveUp"
    "Request\022\017\n\007seat_id\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\273\021\"-\n\031ProDDZGameUserHintRequest\"\020\n\005MSGID"
    "\022\007\n\002ID\020\274\021\"N\n\032ProDDZGameUserHintResponse\022"
    "\r\n\005lenth\030\001 \001(\005\022\017\n\007outMahs\030\002 \003(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\275\021\"X\n\037ProDDZGameUserCallScoreResp"
    "onse\022\014\n\004seat\030\001 \001(\005\022\025\n\rusercallscore\030\002 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\276\021\"W\n\036ProDDZGameUserCal"
    "lScoreRequest\022\014\n\004seat\030\001 \001(\005\022\025\n\rusercalls"
    "core\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\277\021\"6\n\024ProDDZGa"
    "meCallNotify\022\014\n\004seat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002I"
    "D\020\304\021\"7\n\025ProDDZGameQiangNotify\022\014\n\004seat\030\001 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\305\021\"\225\001\n\"ProDDZGameUser"
    "CallLandlordResponse\022\025\n\riscallandlord\030\001 "
    "\001(\005\022\r\n\005score\030\002 \001(\005\022\024\n\014landlordSeat\030\003 \001(\005"
    "\022\014\n\004seat\030\004 \001(\005\022\023\n\013isSoundCall\030\005 \001(\010\"\020\n\005M"
    "SGID\022\007\n\002ID\020\300\021\"Z\n!ProDDZGameUserCallLandl"
    "ordRequest\022\014\n\004seat\030\001 \001(\005\022\025\n\riscallandlor"
    "d\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\301\021\"\203\001\n#ProDDZGame"
    "UserQinagLandlordResponse\022\027\n\017isQiangLand"
    "lord\030\001 \001(\005\022\r\n\005score\030\002 \001(\005\022\024\n\014landlordSea"
    "t\030\003 \001(\005\022\014\n\004seat\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\302\021\""
    "]\n\"ProDDZGameUserQiangLandlordRequest\022\014\n"
    "\004seat\030\001 \001(\005\022\027\n\017isQiangLandlord\030\002 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\303\021\"\220\001\n\026ProDDZGameSendLastCar"
    "d\022\014\n\004seat\030\001 \001(\005\022#\n\016cbHandCardData\030\002 \003(\0132"
    "\013.DDZMahList\022\020\n\010lastmahs\030\003 \003(\005\022\r\n\005laizi\030"
    "\004 \001(\005\022\020\n\010isReCome\030\005 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\306"
    "\021\"`\n\034ProDDZGameUserMingPaiRequest\022\014\n\004sea"
    "t\030\001 \001(\005\022\021\n\tisMingPai\030\002 \001(\010\022\r\n\005beilv\030\003 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\307\021\"r\n\035ProDDZGameUserMin"
    "gPaiResponse\022\014\n\004seat\030\001 \001(\005\022\021\n\tisMingPai\030"
    "\002 \001(\010\022\r\n\005score\030\003 \001(\005\022\017\n\007mingtag\030\004 \001(\005\"\020\n"
    "\005MSGID\022\007\n\002ID\020\310\021\"Q\n\024ProDDZGameMingNotify\022"
    "\014\n\004seat\030\001 \001(\005\022\013\n\003tag\030\002 \001(\005\022\014\n\004time\030\003 \001(\002"
    "\"\020\n\005MSGID\022\007\n\002ID\020\311\021\"(\n\024ProDDZGameStartAga"
    "in\"\020\n\005MSGID\022\007\n\002ID\020\312\021*\260\001\n\014DDZGameState\022\021\n"
    "\rDDZ_GAME_IDLE\020\001\022\026\n\022DDZ_GAME_DICE_BANK\020\002"
    "\022\021\n\rDDZ_GAME_SEND\020\003\022\026\n\022DDZ_GAME_DICE_KIN"
    "G\020\004\022\021\n\rDDZ_GAME_CALL\020\005\022\022\n\016DDZ_GAME_QIANG"
    "\020\006\022\021\n\rDDZ_GAME_PLAY\020\007\022\020\n\014DDZ_GAME_END\020\010*"
    "8\n\014DDZSEND_TYPE\022\023\n\017DDZ_NORMAL_SEND\020\001\022\023\n\017"
    "DDZ_RECOME_SEND\020\002*I\n\014DDZKIGN_TYPE\022\017\n\013DDZ"
    "_KING_UP\020\001\022\023\n\017DDZ_KING_HUITOU\020\002\022\023\n\017DDZ_K"
    "ING_MAILEI\020\003*Q\n\016DDZBROKEN_TYPE\022\026\n\022DDZ_BT"
    "_MASTER_QUIT\020\000\022\024\n\020DDZ_BT_USER_QUIT\020\001\022\021\n\r"
    "DDZ_BT_BROKEN\020\002*:\n\021DDZBROKEN_OPERATE\022\023\n\017"
    "DDZ_BO_DISAGREE\020\000\022\020\n\014DDZ_BO_AGREE\020\001*h\n\016D"
    "DZBROKEN_CODE\022\022\n\016DDZ_BC_SUCCESS\020\000\022\023\n\017DDZ"
    "_BC_DISAGREE\020\001\022\027\n\023DDZ_BC_QUIT_SUCCESS\020\002\022"
    "\024\n\020DDZ_BC_EXCEPTION\020\003", 6781);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ddzpk.proto", &protobuf_RegisterTypes);
  ProDDZGameStatusResponse::default_instance_ = new ProDDZGameStatusResponse();
  ProDDZGameDeskInfoResponse::default_instance_ = new ProDDZGameDeskInfoResponse();
  ProDDZGameReadyNotify::default_instance_ = new ProDDZGameReadyNotify();
  ProDDZGameReadyRequest::default_instance_ = new ProDDZGameReadyRequest();
  ProDDZGameReadyResponse::default_instance_ = new ProDDZGameReadyResponse();
  ProDDZGameStart::default_instance_ = new ProDDZGameStart();
  ProDDZGameDiceNotify::default_instance_ = new ProDDZGameDiceNotify();
  ProDDZGameDiceRequest::default_instance_ = new ProDDZGameDiceRequest();
  ProDDZGameDiceResult::default_instance_ = new ProDDZGameDiceResult();
  ProDDZGameSendMahs::default_instance_ = new ProDDZGameSendMahs();
  ProDDZGameKingData::default_instance_ = new ProDDZGameKingData();
  ProDDZGameOutMahsResponse::default_instance_ = new ProDDZGameOutMahsResponse();
  ProDDZGameTimerPower::default_instance_ = new ProDDZGameTimerPower();
  ProDDZGameOperateNotify::default_instance_ = new ProDDZGameOperateNotify();
  ProDDZGameOperateResult::default_instance_ = new ProDDZGameOperateResult();
  ProDDZGameOperateRequest::default_instance_ = new ProDDZGameOperateRequest();
  ProDDZGameTrust::default_instance_ = new ProDDZGameTrust();
  ProDDZGameOutMahRequest::default_instance_ = new ProDDZGameOutMahRequest();
  ProDDZGameCatchCard::default_instance_ = new ProDDZGameCatchCard();
  DDZMahList::default_instance_ = new DDZMahList();
  DDZScoreList::default_instance_ = new DDZScoreList();
  DDZAwardList::default_instance_ = new DDZAwardList();
  ProDDZGameEnd::default_instance_ = new ProDDZGameEnd();
  ProDDZGameQuickSoundRequest::default_instance_ = new ProDDZGameQuickSoundRequest();
  ProDDZGameQuickSoundResponse::default_instance_ = new ProDDZGameQuickSoundResponse();
  ProDDZGameSendDiscardMahs::default_instance_ = new ProDDZGameSendDiscardMahs();
  DDZWeaveItem::default_instance_ = new DDZWeaveItem();
  DDZWeaveItems::default_instance_ = new DDZWeaveItems();
  ProDDZGameSendActionMahs::default_instance_ = new ProDDZGameSendActionMahs();
  ProDDZGameBrokenRequest::default_instance_ = new ProDDZGameBrokenRequest();
  ProDDZGameBrokenOperate::default_instance_ = new ProDDZGameBrokenOperate();
  ProDDZGameBrokenNotify::default_instance_ = new ProDDZGameBrokenNotify();
  ProDDZGameRuleConfig::default_instance_ = new ProDDZGameRuleConfig();
  ProDDZGameBrokenStatus::default_instance_ = new ProDDZGameBrokenStatus();
  ProDDZGameDataResp::default_instance_ = new ProDDZGameDataResp();
  ProDDZGameRecordRequest::default_instance_ = new ProDDZGameRecordRequest();
  ProDDZGameRecordResponse::default_instance_ = new ProDDZGameRecordResponse();
  ProDDZGameUserLocationRequest::default_instance_ = new ProDDZGameUserLocationRequest();
  ProDDZGameSyncCardResponse::default_instance_ = new ProDDZGameSyncCardResponse();
  ProDDZGameUserPhoneStatusRequest::default_instance_ = new ProDDZGameUserPhoneStatusRequest();
  ProDDZGameUserGiveUpRequest::default_instance_ = new ProDDZGameUserGiveUpRequest();
  ProDDZGameUserHintRequest::default_instance_ = new ProDDZGameUserHintRequest();
  ProDDZGameUserHintResponse::default_instance_ = new ProDDZGameUserHintResponse();
  ProDDZGameUserCallScoreResponse::default_instance_ = new ProDDZGameUserCallScoreResponse();
  ProDDZGameUserCallScoreRequest::default_instance_ = new ProDDZGameUserCallScoreRequest();
  ProDDZGameCallNotify::default_instance_ = new ProDDZGameCallNotify();
  ProDDZGameQiangNotify::default_instance_ = new ProDDZGameQiangNotify();
  ProDDZGameUserCallLandlordResponse::default_instance_ = new ProDDZGameUserCallLandlordResponse();
  ProDDZGameUserCallLandlordRequest::default_instance_ = new ProDDZGameUserCallLandlordRequest();
  ProDDZGameUserQinagLandlordResponse::default_instance_ = new ProDDZGameUserQinagLandlordResponse();
  ProDDZGameUserQiangLandlordRequest::default_instance_ = new ProDDZGameUserQiangLandlordRequest();
  ProDDZGameSendLastCard::default_instance_ = new ProDDZGameSendLastCard();
  ProDDZGameUserMingPaiRequest::default_instance_ = new ProDDZGameUserMingPaiRequest();
  ProDDZGameUserMingPaiResponse::default_instance_ = new ProDDZGameUserMingPaiResponse();
  ProDDZGameMingNotify::default_instance_ = new ProDDZGameMingNotify();
  ProDDZGameStartAgain::default_instance_ = new ProDDZGameStartAgain();
  ProDDZGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameStart::default_instance_->InitAsDefaultInstance();
  ProDDZGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProDDZGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProDDZGameKingData::default_instance_->InitAsDefaultInstance();
  ProDDZGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProDDZGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProDDZGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameTrust::default_instance_->InitAsDefaultInstance();
  ProDDZGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameCatchCard::default_instance_->InitAsDefaultInstance();
  DDZMahList::default_instance_->InitAsDefaultInstance();
  DDZScoreList::default_instance_->InitAsDefaultInstance();
  DDZAwardList::default_instance_->InitAsDefaultInstance();
  ProDDZGameEnd::default_instance_->InitAsDefaultInstance();
  ProDDZGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  DDZWeaveItem::default_instance_->InitAsDefaultInstance();
  DDZWeaveItems::default_instance_->InitAsDefaultInstance();
  ProDDZGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProDDZGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProDDZGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProDDZGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProDDZGameDataResp::default_instance_->InitAsDefaultInstance();
  ProDDZGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserCallScoreResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserCallScoreRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameCallNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameQiangNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserCallLandlordResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserCallLandlordRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserQinagLandlordResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserQiangLandlordRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameSendLastCard::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserMingPaiRequest::default_instance_->InitAsDefaultInstance();
  ProDDZGameUserMingPaiResponse::default_instance_->InitAsDefaultInstance();
  ProDDZGameMingNotify::default_instance_->InitAsDefaultInstance();
  ProDDZGameStartAgain::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ddzpk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ddzpk_2eproto {
  StaticDescriptorInitializer_ddzpk_2eproto() {
    protobuf_AddDesc_ddzpk_2eproto();
  }
} static_descriptor_initializer_ddzpk_2eproto_;
const ::google::protobuf::EnumDescriptor* DDZGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZGameState_descriptor_;
}
bool DDZGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DDZSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZSEND_TYPE_descriptor_;
}
bool DDZSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DDZKIGN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZKIGN_TYPE_descriptor_;
}
bool DDZKIGN_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DDZBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZBROKEN_TYPE_descriptor_;
}
bool DDZBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DDZBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZBROKEN_OPERATE_descriptor_;
}
bool DDZBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DDZBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZBROKEN_CODE_descriptor_;
}
bool DDZBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameStatusResponse_MSGID_descriptor_;
}
bool ProDDZGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameStatusResponse_MSGID ProDDZGameStatusResponse::ID;
const ProDDZGameStatusResponse_MSGID ProDDZGameStatusResponse::MSGID_MIN;
const ProDDZGameStatusResponse_MSGID ProDDZGameStatusResponse::MSGID_MAX;
const int ProDDZGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProDDZGameStatusResponse::ProDDZGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameStatusResponse::InitAsDefaultInstance() {
}

ProDDZGameStatusResponse::ProDDZGameStatusResponse(const ProDDZGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameStatusResponse::~ProDDZGameStatusResponse() {
  SharedDtor();
}

void ProDDZGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameStatusResponse_descriptor_;
}

const ProDDZGameStatusResponse& ProDDZGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameStatusResponse* ProDDZGameStatusResponse::default_instance_ = NULL;

ProDDZGameStatusResponse* ProDDZGameStatusResponse::New() const {
  return new ProDDZGameStatusResponse;
}

void ProDDZGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DDZGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DDZGameState_IsValid(value)) {
            set_status(static_cast< ::DDZGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DDZGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DDZGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DDZGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameStatusResponse::MergeFrom(const ProDDZGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameStatusResponse::CopyFrom(const ProDDZGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameStatusResponse::IsInitialized() const {

  return true;
}

void ProDDZGameStatusResponse::Swap(ProDDZGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameStatusResponse_descriptor_;
  metadata.reflection = ProDDZGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProDDZGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameDeskInfoResponse_MSGID ProDDZGameDeskInfoResponse::ID;
const ProDDZGameDeskInfoResponse_MSGID ProDDZGameDeskInfoResponse::MSGID_MIN;
const ProDDZGameDeskInfoResponse_MSGID ProDDZGameDeskInfoResponse::MSGID_MAX;
const int ProDDZGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProDDZGameDeskInfoResponse::ProDDZGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProDDZGameDeskInfoResponse::ProDDZGameDeskInfoResponse(const ProDDZGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameDeskInfoResponse::~ProDDZGameDeskInfoResponse() {
  SharedDtor();
}

void ProDDZGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDeskInfoResponse_descriptor_;
}

const ProDDZGameDeskInfoResponse& ProDDZGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameDeskInfoResponse* ProDDZGameDeskInfoResponse::default_instance_ = NULL;

ProDDZGameDeskInfoResponse* ProDDZGameDeskInfoResponse::New() const {
  return new ProDDZGameDeskInfoResponse;
}

void ProDDZGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameDeskInfoResponse::MergeFrom(const ProDDZGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameDeskInfoResponse::CopyFrom(const ProDDZGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProDDZGameDeskInfoResponse::Swap(ProDDZGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProDDZGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameReadyNotify_MSGID_descriptor_;
}
bool ProDDZGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameReadyNotify_MSGID ProDDZGameReadyNotify::ID;
const ProDDZGameReadyNotify_MSGID ProDDZGameReadyNotify::MSGID_MIN;
const ProDDZGameReadyNotify_MSGID ProDDZGameReadyNotify::MSGID_MAX;
const int ProDDZGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameReadyNotify::kSeatFieldNumber;
const int ProDDZGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameReadyNotify::ProDDZGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameReadyNotify::InitAsDefaultInstance() {
}

ProDDZGameReadyNotify::ProDDZGameReadyNotify(const ProDDZGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameReadyNotify::~ProDDZGameReadyNotify() {
  SharedDtor();
}

void ProDDZGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameReadyNotify_descriptor_;
}

const ProDDZGameReadyNotify& ProDDZGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameReadyNotify* ProDDZGameReadyNotify::default_instance_ = NULL;

ProDDZGameReadyNotify* ProDDZGameReadyNotify::New() const {
  return new ProDDZGameReadyNotify;
}

void ProDDZGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameReadyNotify::MergeFrom(const ProDDZGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameReadyNotify::CopyFrom(const ProDDZGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameReadyNotify::IsInitialized() const {

  return true;
}

void ProDDZGameReadyNotify::Swap(ProDDZGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameReadyNotify_descriptor_;
  metadata.reflection = ProDDZGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameReadyRequest_MSGID_descriptor_;
}
bool ProDDZGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameReadyRequest_MSGID ProDDZGameReadyRequest::ID;
const ProDDZGameReadyRequest_MSGID ProDDZGameReadyRequest::MSGID_MIN;
const ProDDZGameReadyRequest_MSGID ProDDZGameReadyRequest::MSGID_MAX;
const int ProDDZGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProDDZGameReadyRequest::ProDDZGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameReadyRequest::InitAsDefaultInstance() {
}

ProDDZGameReadyRequest::ProDDZGameReadyRequest(const ProDDZGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameReadyRequest::~ProDDZGameReadyRequest() {
  SharedDtor();
}

void ProDDZGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameReadyRequest_descriptor_;
}

const ProDDZGameReadyRequest& ProDDZGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameReadyRequest* ProDDZGameReadyRequest::default_instance_ = NULL;

ProDDZGameReadyRequest* ProDDZGameReadyRequest::New() const {
  return new ProDDZGameReadyRequest;
}

void ProDDZGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameReadyRequest::MergeFrom(const ProDDZGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameReadyRequest::CopyFrom(const ProDDZGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameReadyRequest::IsInitialized() const {

  return true;
}

void ProDDZGameReadyRequest::Swap(ProDDZGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameReadyRequest_descriptor_;
  metadata.reflection = ProDDZGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameReadyResponse_MSGID_descriptor_;
}
bool ProDDZGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameReadyResponse_MSGID ProDDZGameReadyResponse::ID;
const ProDDZGameReadyResponse_MSGID ProDDZGameReadyResponse::MSGID_MIN;
const ProDDZGameReadyResponse_MSGID ProDDZGameReadyResponse::MSGID_MAX;
const int ProDDZGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameReadyResponse::kSeatFieldNumber;
const int ProDDZGameReadyResponse::kIsMingPaiFieldNumber;
const int ProDDZGameReadyResponse::kMingPaiTagFieldNumber;
#endif  // !_MSC_VER

ProDDZGameReadyResponse::ProDDZGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameReadyResponse::InitAsDefaultInstance() {
}

ProDDZGameReadyResponse::ProDDZGameReadyResponse(const ProDDZGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ismingpai_ = false;
  mingpaitag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameReadyResponse::~ProDDZGameReadyResponse() {
  SharedDtor();
}

void ProDDZGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameReadyResponse_descriptor_;
}

const ProDDZGameReadyResponse& ProDDZGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameReadyResponse* ProDDZGameReadyResponse::default_instance_ = NULL;

ProDDZGameReadyResponse* ProDDZGameReadyResponse::New() const {
  return new ProDDZGameReadyResponse;
}

void ProDDZGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    ismingpai_ = false;
    mingpaitag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isMingPai;
        break;
      }

      // optional bool isMingPai = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMingPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismingpai_)));
          set_has_ismingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MingPaiTag;
        break;
      }

      // optional int32 MingPaiTag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MingPaiTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingpaitag_)));
          set_has_mingpaitag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isMingPai = 3;
  if (has_ismingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ismingpai(), output);
  }

  // optional int32 MingPaiTag = 4;
  if (has_mingpaitag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mingpaitag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isMingPai = 3;
  if (has_ismingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ismingpai(), target);
  }

  // optional int32 MingPaiTag = 4;
  if (has_mingpaitag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mingpaitag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isMingPai = 3;
    if (has_ismingpai()) {
      total_size += 1 + 1;
    }

    // optional int32 MingPaiTag = 4;
    if (has_mingpaitag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingpaitag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameReadyResponse::MergeFrom(const ProDDZGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_ismingpai()) {
      set_ismingpai(from.ismingpai());
    }
    if (from.has_mingpaitag()) {
      set_mingpaitag(from.mingpaitag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameReadyResponse::CopyFrom(const ProDDZGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameReadyResponse::IsInitialized() const {

  return true;
}

void ProDDZGameReadyResponse::Swap(ProDDZGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(ismingpai_, other->ismingpai_);
    std::swap(mingpaitag_, other->mingpaitag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameReadyResponse_descriptor_;
  metadata.reflection = ProDDZGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameStart_MSGID_descriptor_;
}
bool ProDDZGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameStart_MSGID ProDDZGameStart::ID;
const ProDDZGameStart_MSGID ProDDZGameStart::MSGID_MIN;
const ProDDZGameStart_MSGID ProDDZGameStart::MSGID_MAX;
const int ProDDZGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameStart::kBankerseatFieldNumber;
const int ProDDZGameStart::kGamecountFieldNumber;
const int ProDDZGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProDDZGameStart::ProDDZGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameStart::InitAsDefaultInstance() {
}

ProDDZGameStart::ProDDZGameStart(const ProDDZGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameStart::~ProDDZGameStart() {
  SharedDtor();
}

void ProDDZGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameStart_descriptor_;
}

const ProDDZGameStart& ProDDZGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameStart* ProDDZGameStart::default_instance_ = NULL;

ProDDZGameStart* ProDDZGameStart::New() const {
  return new ProDDZGameStart;
}

void ProDDZGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameStart::MergeFrom(const ProDDZGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameStart::CopyFrom(const ProDDZGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameStart::IsInitialized() const {

  return true;
}

void ProDDZGameStart::Swap(ProDDZGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameStart_descriptor_;
  metadata.reflection = ProDDZGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDiceNotify_MSGID_descriptor_;
}
bool ProDDZGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameDiceNotify_MSGID ProDDZGameDiceNotify::ID;
const ProDDZGameDiceNotify_MSGID ProDDZGameDiceNotify::MSGID_MIN;
const ProDDZGameDiceNotify_MSGID ProDDZGameDiceNotify::MSGID_MAX;
const int ProDDZGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameDiceNotify::kSeatFieldNumber;
const int ProDDZGameDiceNotify::kTimeFieldNumber;
const int ProDDZGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProDDZGameDiceNotify::ProDDZGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameDiceNotify::InitAsDefaultInstance() {
}

ProDDZGameDiceNotify::ProDDZGameDiceNotify(const ProDDZGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameDiceNotify::~ProDDZGameDiceNotify() {
  SharedDtor();
}

void ProDDZGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDiceNotify_descriptor_;
}

const ProDDZGameDiceNotify& ProDDZGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameDiceNotify* ProDDZGameDiceNotify::default_instance_ = NULL;

ProDDZGameDiceNotify* ProDDZGameDiceNotify::New() const {
  return new ProDDZGameDiceNotify;
}

void ProDDZGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameDiceNotify::MergeFrom(const ProDDZGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameDiceNotify::CopyFrom(const ProDDZGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameDiceNotify::IsInitialized() const {

  return true;
}

void ProDDZGameDiceNotify::Swap(ProDDZGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameDiceNotify_descriptor_;
  metadata.reflection = ProDDZGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDiceRequest_MSGID_descriptor_;
}
bool ProDDZGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameDiceRequest_MSGID ProDDZGameDiceRequest::ID;
const ProDDZGameDiceRequest_MSGID ProDDZGameDiceRequest::MSGID_MIN;
const ProDDZGameDiceRequest_MSGID ProDDZGameDiceRequest::MSGID_MAX;
const int ProDDZGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameDiceRequest::kSeatFieldNumber;
const int ProDDZGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProDDZGameDiceRequest::ProDDZGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameDiceRequest::InitAsDefaultInstance() {
}

ProDDZGameDiceRequest::ProDDZGameDiceRequest(const ProDDZGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameDiceRequest::~ProDDZGameDiceRequest() {
  SharedDtor();
}

void ProDDZGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDiceRequest_descriptor_;
}

const ProDDZGameDiceRequest& ProDDZGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameDiceRequest* ProDDZGameDiceRequest::default_instance_ = NULL;

ProDDZGameDiceRequest* ProDDZGameDiceRequest::New() const {
  return new ProDDZGameDiceRequest;
}

void ProDDZGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameDiceRequest::MergeFrom(const ProDDZGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameDiceRequest::CopyFrom(const ProDDZGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameDiceRequest::IsInitialized() const {

  return true;
}

void ProDDZGameDiceRequest::Swap(ProDDZGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameDiceRequest_descriptor_;
  metadata.reflection = ProDDZGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDiceResult_MSGID_descriptor_;
}
bool ProDDZGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameDiceResult_MSGID ProDDZGameDiceResult::ID;
const ProDDZGameDiceResult_MSGID ProDDZGameDiceResult::MSGID_MIN;
const ProDDZGameDiceResult_MSGID ProDDZGameDiceResult::MSGID_MAX;
const int ProDDZGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameDiceResult::kSeatFieldNumber;
const int ProDDZGameDiceResult::kResultFieldNumber;
const int ProDDZGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProDDZGameDiceResult::ProDDZGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameDiceResult::InitAsDefaultInstance() {
}

ProDDZGameDiceResult::ProDDZGameDiceResult(const ProDDZGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameDiceResult::~ProDDZGameDiceResult() {
  SharedDtor();
}

void ProDDZGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDiceResult_descriptor_;
}

const ProDDZGameDiceResult& ProDDZGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameDiceResult* ProDDZGameDiceResult::default_instance_ = NULL;

ProDDZGameDiceResult* ProDDZGameDiceResult::New() const {
  return new ProDDZGameDiceResult;
}

void ProDDZGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameDiceResult::MergeFrom(const ProDDZGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameDiceResult::CopyFrom(const ProDDZGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameDiceResult::IsInitialized() const {

  return true;
}

void ProDDZGameDiceResult::Swap(ProDDZGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameDiceResult_descriptor_;
  metadata.reflection = ProDDZGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendMahs_MSGID_descriptor_;
}
bool ProDDZGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameSendMahs_MSGID ProDDZGameSendMahs::ID;
const ProDDZGameSendMahs_MSGID ProDDZGameSendMahs::MSGID_MIN;
const ProDDZGameSendMahs_MSGID ProDDZGameSendMahs::MSGID_MAX;
const int ProDDZGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameSendMahs::kSeatFieldNumber;
const int ProDDZGameSendMahs::kCbHandCardDataFieldNumber;
const int ProDDZGameSendMahs::kMahscountFieldNumber;
const int ProDDZGameSendMahs::kCbLeftCountFieldNumber;
const int ProDDZGameSendMahs::kOfflineTagFieldNumber;
#endif  // !_MSC_VER

ProDDZGameSendMahs::ProDDZGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameSendMahs::InitAsDefaultInstance() {
}

ProDDZGameSendMahs::ProDDZGameSendMahs(const ProDDZGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  offlinetag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameSendMahs::~ProDDZGameSendMahs() {
  SharedDtor();
}

void ProDDZGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendMahs_descriptor_;
}

const ProDDZGameSendMahs& ProDDZGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameSendMahs* ProDDZGameSendMahs::default_instance_ = NULL;

ProDDZGameSendMahs* ProDDZGameSendMahs::New() const {
  return new ProDDZGameSendMahs;
}

void ProDDZGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
    offlinetag_ = 0;
  }
  cbhandcarddata_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbHandCardData;
        break;
      }

      // repeated .DDZMahList cbHandCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbHandCardData;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_offlineTag;
        break;
      }

      // optional int32 offlineTag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offlinetag_)));
          set_has_offlinetag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated .DDZMahList cbHandCardData = 3;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbhandcarddata(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  // optional int32 offlineTag = 6;
  if (has_offlinetag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->offlinetag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated .DDZMahList cbHandCardData = 3;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbhandcarddata(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  // optional int32 offlineTag = 6;
  if (has_offlinetag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->offlinetag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

    // optional int32 offlineTag = 6;
    if (has_offlinetag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offlinetag());
    }

  }
  // repeated .DDZMahList cbHandCardData = 3;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameSendMahs::MergeFrom(const ProDDZGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
    if (from.has_offlinetag()) {
      set_offlinetag(from.offlinetag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameSendMahs::CopyFrom(const ProDDZGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameSendMahs::IsInitialized() const {

  return true;
}

void ProDDZGameSendMahs::Swap(ProDDZGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(offlinetag_, other->offlinetag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameSendMahs_descriptor_;
  metadata.reflection = ProDDZGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameKingData_MSGID_descriptor_;
}
bool ProDDZGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameKingData_MSGID ProDDZGameKingData::ID;
const ProDDZGameKingData_MSGID ProDDZGameKingData::MSGID_MIN;
const ProDDZGameKingData_MSGID ProDDZGameKingData::MSGID_MAX;
const int ProDDZGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameKingData::kSeatFieldNumber;
const int ProDDZGameKingData::kMahsFieldNumber;
const int ProDDZGameKingData::kDownKingScoreFieldNumber;
const int ProDDZGameKingData::kKingcountFieldNumber;
const int ProDDZGameKingData::kVicekingFieldNumber;
const int ProDDZGameKingData::kNotifyTypeFieldNumber;
const int ProDDZGameKingData::kKingTypeFieldNumber;
const int ProDDZGameKingData::kCbChongGuangFieldNumber;
const int ProDDZGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProDDZGameKingData::ProDDZGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameKingData::InitAsDefaultInstance() {
}

ProDDZGameKingData::ProDDZGameKingData(const ProDDZGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameKingData::~ProDDZGameKingData() {
  SharedDtor();
}

void ProDDZGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameKingData_descriptor_;
}

const ProDDZGameKingData& ProDDZGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameKingData* ProDDZGameKingData::default_instance_ = NULL;

ProDDZGameKingData* ProDDZGameKingData::New() const {
  return new ProDDZGameKingData;
}

void ProDDZGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .DDZSEND_TYPE notify_type = 7 [default = DDZ_NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DDZSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::DDZSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .DDZKIGN_TYPE king_type = 8 [default = DDZ_KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DDZKIGN_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::DDZKIGN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .DDZSEND_TYPE notify_type = 7 [default = DDZ_NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .DDZKIGN_TYPE king_type = 8 [default = DDZ_KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .DDZSEND_TYPE notify_type = 7 [default = DDZ_NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .DDZKIGN_TYPE king_type = 8 [default = DDZ_KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .DDZSEND_TYPE notify_type = 7 [default = DDZ_NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .DDZKIGN_TYPE king_type = 8 [default = DDZ_KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameKingData::MergeFrom(const ProDDZGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameKingData::CopyFrom(const ProDDZGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameKingData::IsInitialized() const {

  return true;
}

void ProDDZGameKingData::Swap(ProDDZGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameKingData_descriptor_;
  metadata.reflection = ProDDZGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOutMahsResponse_MSGID_descriptor_;
}
bool ProDDZGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameOutMahsResponse_MSGID ProDDZGameOutMahsResponse::ID;
const ProDDZGameOutMahsResponse_MSGID ProDDZGameOutMahsResponse::MSGID_MIN;
const ProDDZGameOutMahsResponse_MSGID ProDDZGameOutMahsResponse::MSGID_MAX;
const int ProDDZGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameOutMahsResponse::kSeatFieldNumber;
const int ProDDZGameOutMahsResponse::kOutMahsFieldNumber;
const int ProDDZGameOutMahsResponse::kHandmahsFieldNumber;
const int ProDDZGameOutMahsResponse::kCardCountFieldNumber;
const int ProDDZGameOutMahsResponse::kCardTypeFieldNumber;
const int ProDDZGameOutMahsResponse::kNoChangeMahsFieldNumber;
#endif  // !_MSC_VER

ProDDZGameOutMahsResponse::ProDDZGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameOutMahsResponse::InitAsDefaultInstance() {
}

ProDDZGameOutMahsResponse::ProDDZGameOutMahsResponse(const ProDDZGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameOutMahsResponse::~ProDDZGameOutMahsResponse() {
  SharedDtor();
}

void ProDDZGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOutMahsResponse_descriptor_;
}

const ProDDZGameOutMahsResponse& ProDDZGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameOutMahsResponse* ProDDZGameOutMahsResponse::default_instance_ = NULL;

ProDDZGameOutMahsResponse* ProDDZGameOutMahsResponse::New() const {
  return new ProDDZGameOutMahsResponse;
}

void ProDDZGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_noChangeMahs;
        break;
      }

      // repeated int32 noChangeMahs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noChangeMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_noChangeMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // repeated int32 noChangeMahs = 7;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->nochangemahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // repeated int32 noChangeMahs = 7;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->nochangemahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  // repeated int32 noChangeMahs = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameOutMahsResponse::MergeFrom(const ProDDZGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameOutMahsResponse::CopyFrom(const ProDDZGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProDDZGameOutMahsResponse::Swap(ProDDZGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameOutMahsResponse_descriptor_;
  metadata.reflection = ProDDZGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameTimerPower_MSGID_descriptor_;
}
bool ProDDZGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameTimerPower_MSGID ProDDZGameTimerPower::ID;
const ProDDZGameTimerPower_MSGID ProDDZGameTimerPower::MSGID_MIN;
const ProDDZGameTimerPower_MSGID ProDDZGameTimerPower::MSGID_MAX;
const int ProDDZGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameTimerPower::kSeatFieldNumber;
const int ProDDZGameTimerPower::kTimeFieldNumber;
const int ProDDZGameTimerPower::kOutcardTimeFieldNumber;
const int ProDDZGameTimerPower::kLastCardTypeFieldNumber;
const int ProDDZGameTimerPower::kLastPointFieldNumber;
#endif  // !_MSC_VER

ProDDZGameTimerPower::ProDDZGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameTimerPower::InitAsDefaultInstance() {
}

ProDDZGameTimerPower::ProDDZGameTimerPower(const ProDDZGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  lastcardtype_ = 0;
  lastpoint_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameTimerPower::~ProDDZGameTimerPower() {
  SharedDtor();
}

void ProDDZGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameTimerPower_descriptor_;
}

const ProDDZGameTimerPower& ProDDZGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameTimerPower* ProDDZGameTimerPower::default_instance_ = NULL;

ProDDZGameTimerPower* ProDDZGameTimerPower::New() const {
  return new ProDDZGameTimerPower;
}

void ProDDZGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
    lastcardtype_ = 0;
    lastpoint_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastCardType;
        break;
      }

      // optional int32 lastCardType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastCardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastcardtype_)));
          set_has_lastcardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastPoint;
        break;
      }

      // optional int32 lastPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastpoint_)));
          set_has_lastpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  // optional int32 lastCardType = 5;
  if (has_lastcardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastcardtype(), output);
  }

  // optional int32 lastPoint = 6;
  if (has_lastpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  // optional int32 lastCardType = 5;
  if (has_lastcardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastcardtype(), target);
  }

  // optional int32 lastPoint = 6;
  if (has_lastpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

    // optional int32 lastCardType = 5;
    if (has_lastcardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastcardtype());
    }

    // optional int32 lastPoint = 6;
    if (has_lastpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameTimerPower::MergeFrom(const ProDDZGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
    if (from.has_lastcardtype()) {
      set_lastcardtype(from.lastcardtype());
    }
    if (from.has_lastpoint()) {
      set_lastpoint(from.lastpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameTimerPower::CopyFrom(const ProDDZGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameTimerPower::IsInitialized() const {

  return true;
}

void ProDDZGameTimerPower::Swap(ProDDZGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(lastcardtype_, other->lastcardtype_);
    std::swap(lastpoint_, other->lastpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameTimerPower_descriptor_;
  metadata.reflection = ProDDZGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOperateNotify_MSGID_descriptor_;
}
bool ProDDZGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameOperateNotify_MSGID ProDDZGameOperateNotify::ID;
const ProDDZGameOperateNotify_MSGID ProDDZGameOperateNotify::MSGID_MIN;
const ProDDZGameOperateNotify_MSGID ProDDZGameOperateNotify::MSGID_MAX;
const int ProDDZGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameOperateNotify::kResumeSeatFieldNumber;
const int ProDDZGameOperateNotify::kActionMaskFieldNumber;
const int ProDDZGameOperateNotify::kActionCardFieldNumber;
const int ProDDZGameOperateNotify::kTimeFieldNumber;
const int ProDDZGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProDDZGameOperateNotify::ProDDZGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameOperateNotify::InitAsDefaultInstance() {
}

ProDDZGameOperateNotify::ProDDZGameOperateNotify(const ProDDZGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameOperateNotify::~ProDDZGameOperateNotify() {
  SharedDtor();
}

void ProDDZGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOperateNotify_descriptor_;
}

const ProDDZGameOperateNotify& ProDDZGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameOperateNotify* ProDDZGameOperateNotify::default_instance_ = NULL;

ProDDZGameOperateNotify* ProDDZGameOperateNotify::New() const {
  return new ProDDZGameOperateNotify;
}

void ProDDZGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameOperateNotify::MergeFrom(const ProDDZGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameOperateNotify::CopyFrom(const ProDDZGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameOperateNotify::IsInitialized() const {

  return true;
}

void ProDDZGameOperateNotify::Swap(ProDDZGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameOperateNotify_descriptor_;
  metadata.reflection = ProDDZGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOperateResult_MSGID_descriptor_;
}
bool ProDDZGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameOperateResult_MSGID ProDDZGameOperateResult::ID;
const ProDDZGameOperateResult_MSGID ProDDZGameOperateResult::MSGID_MIN;
const ProDDZGameOperateResult_MSGID ProDDZGameOperateResult::MSGID_MAX;
const int ProDDZGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameOperateResult::kWOperateUserFieldNumber;
const int ProDDZGameOperateResult::kWProvideUserFieldNumber;
const int ProDDZGameOperateResult::kWOperateCodeFieldNumber;
const int ProDDZGameOperateResult::kCbOperateCardFieldNumber;
const int ProDDZGameOperateResult::kHandmahsFieldNumber;
const int ProDDZGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProDDZGameOperateResult::ProDDZGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameOperateResult::InitAsDefaultInstance() {
}

ProDDZGameOperateResult::ProDDZGameOperateResult(const ProDDZGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameOperateResult::~ProDDZGameOperateResult() {
  SharedDtor();
}

void ProDDZGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOperateResult_descriptor_;
}

const ProDDZGameOperateResult& ProDDZGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameOperateResult* ProDDZGameOperateResult::default_instance_ = NULL;

ProDDZGameOperateResult* ProDDZGameOperateResult::New() const {
  return new ProDDZGameOperateResult;
}

void ProDDZGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameOperateResult::MergeFrom(const ProDDZGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameOperateResult::CopyFrom(const ProDDZGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameOperateResult::IsInitialized() const {

  return true;
}

void ProDDZGameOperateResult::Swap(ProDDZGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameOperateResult_descriptor_;
  metadata.reflection = ProDDZGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOperateRequest_MSGID_descriptor_;
}
bool ProDDZGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameOperateRequest_MSGID ProDDZGameOperateRequest::ID;
const ProDDZGameOperateRequest_MSGID ProDDZGameOperateRequest::MSGID_MIN;
const ProDDZGameOperateRequest_MSGID ProDDZGameOperateRequest::MSGID_MAX;
const int ProDDZGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameOperateRequest::kSeatFieldNumber;
const int ProDDZGameOperateRequest::kWOperateCodeFieldNumber;
const int ProDDZGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProDDZGameOperateRequest::ProDDZGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameOperateRequest::InitAsDefaultInstance() {
}

ProDDZGameOperateRequest::ProDDZGameOperateRequest(const ProDDZGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameOperateRequest::~ProDDZGameOperateRequest() {
  SharedDtor();
}

void ProDDZGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOperateRequest_descriptor_;
}

const ProDDZGameOperateRequest& ProDDZGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameOperateRequest* ProDDZGameOperateRequest::default_instance_ = NULL;

ProDDZGameOperateRequest* ProDDZGameOperateRequest::New() const {
  return new ProDDZGameOperateRequest;
}

void ProDDZGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameOperateRequest::MergeFrom(const ProDDZGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameOperateRequest::CopyFrom(const ProDDZGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameOperateRequest::IsInitialized() const {

  return true;
}

void ProDDZGameOperateRequest::Swap(ProDDZGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameOperateRequest_descriptor_;
  metadata.reflection = ProDDZGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameTrust_MSGID_descriptor_;
}
bool ProDDZGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameTrust_MSGID ProDDZGameTrust::ID;
const ProDDZGameTrust_MSGID ProDDZGameTrust::MSGID_MIN;
const ProDDZGameTrust_MSGID ProDDZGameTrust::MSGID_MAX;
const int ProDDZGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameTrust::kSeatFieldNumber;
const int ProDDZGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProDDZGameTrust::ProDDZGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameTrust::InitAsDefaultInstance() {
}

ProDDZGameTrust::ProDDZGameTrust(const ProDDZGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameTrust::~ProDDZGameTrust() {
  SharedDtor();
}

void ProDDZGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameTrust_descriptor_;
}

const ProDDZGameTrust& ProDDZGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameTrust* ProDDZGameTrust::default_instance_ = NULL;

ProDDZGameTrust* ProDDZGameTrust::New() const {
  return new ProDDZGameTrust;
}

void ProDDZGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameTrust::MergeFrom(const ProDDZGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameTrust::CopyFrom(const ProDDZGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameTrust::IsInitialized() const {

  return true;
}

void ProDDZGameTrust::Swap(ProDDZGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameTrust_descriptor_;
  metadata.reflection = ProDDZGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOutMahRequest_MSGID_descriptor_;
}
bool ProDDZGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameOutMahRequest_MSGID ProDDZGameOutMahRequest::ID;
const ProDDZGameOutMahRequest_MSGID ProDDZGameOutMahRequest::MSGID_MIN;
const ProDDZGameOutMahRequest_MSGID ProDDZGameOutMahRequest::MSGID_MAX;
const int ProDDZGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameOutMahRequest::kSeatFieldNumber;
const int ProDDZGameOutMahRequest::kOutMahsFieldNumber;
const int ProDDZGameOutMahRequest::kNoChangeMahsFieldNumber;
#endif  // !_MSC_VER

ProDDZGameOutMahRequest::ProDDZGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameOutMahRequest::InitAsDefaultInstance() {
}

ProDDZGameOutMahRequest::ProDDZGameOutMahRequest(const ProDDZGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameOutMahRequest::~ProDDZGameOutMahRequest() {
  SharedDtor();
}

void ProDDZGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameOutMahRequest_descriptor_;
}

const ProDDZGameOutMahRequest& ProDDZGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameOutMahRequest* ProDDZGameOutMahRequest::default_instance_ = NULL;

ProDDZGameOutMahRequest* ProDDZGameOutMahRequest::New() const {
  return new ProDDZGameOutMahRequest;
}

void ProDDZGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  outmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_noChangeMahs;
        break;
      }

      // repeated int32 noChangeMahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noChangeMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_noChangeMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 noChangeMahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->nochangemahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 noChangeMahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->nochangemahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 noChangeMahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameOutMahRequest::MergeFrom(const ProDDZGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameOutMahRequest::CopyFrom(const ProDDZGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProDDZGameOutMahRequest::Swap(ProDDZGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameOutMahRequest_descriptor_;
  metadata.reflection = ProDDZGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameCatchCard_MSGID_descriptor_;
}
bool ProDDZGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameCatchCard_MSGID ProDDZGameCatchCard::ID;
const ProDDZGameCatchCard_MSGID ProDDZGameCatchCard::MSGID_MIN;
const ProDDZGameCatchCard_MSGID ProDDZGameCatchCard::MSGID_MAX;
const int ProDDZGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameCatchCard::kSeatFieldNumber;
const int ProDDZGameCatchCard::kCbCardDataFieldNumber;
const int ProDDZGameCatchCard::kWActionMaskFieldNumber;
const int ProDDZGameCatchCard::kCbIsNotGangFieldNumber;
const int ProDDZGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProDDZGameCatchCard::ProDDZGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameCatchCard::InitAsDefaultInstance() {
}

ProDDZGameCatchCard::ProDDZGameCatchCard(const ProDDZGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameCatchCard::~ProDDZGameCatchCard() {
  SharedDtor();
}

void ProDDZGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameCatchCard_descriptor_;
}

const ProDDZGameCatchCard& ProDDZGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameCatchCard* ProDDZGameCatchCard::default_instance_ = NULL;

ProDDZGameCatchCard* ProDDZGameCatchCard::New() const {
  return new ProDDZGameCatchCard;
}

void ProDDZGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameCatchCard::MergeFrom(const ProDDZGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameCatchCard::CopyFrom(const ProDDZGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameCatchCard::IsInitialized() const {

  return true;
}

void ProDDZGameCatchCard::Swap(ProDDZGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameCatchCard_descriptor_;
  metadata.reflection = ProDDZGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DDZMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

DDZMahList::DDZMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DDZMahList::InitAsDefaultInstance() {
}

DDZMahList::DDZMahList(const DDZMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DDZMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DDZMahList::~DDZMahList() {
  SharedDtor();
}

void DDZMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DDZMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDZMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZMahList_descriptor_;
}

const DDZMahList& DDZMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

DDZMahList* DDZMahList::default_instance_ = NULL;

DDZMahList* DDZMahList::New() const {
  return new DDZMahList;
}

void DDZMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DDZMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DDZMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DDZMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DDZMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDZMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DDZMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DDZMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DDZMahList::MergeFrom(const DDZMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DDZMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDZMahList::CopyFrom(const DDZMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDZMahList::IsInitialized() const {

  return true;
}

void DDZMahList::Swap(DDZMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DDZMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDZMahList_descriptor_;
  metadata.reflection = DDZMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DDZScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

DDZScoreList::DDZScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DDZScoreList::InitAsDefaultInstance() {
}

DDZScoreList::DDZScoreList(const DDZScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DDZScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DDZScoreList::~DDZScoreList() {
  SharedDtor();
}

void DDZScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DDZScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDZScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZScoreList_descriptor_;
}

const DDZScoreList& DDZScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

DDZScoreList* DDZScoreList::default_instance_ = NULL;

DDZScoreList* DDZScoreList::New() const {
  return new DDZScoreList;
}

void DDZScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DDZScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DDZScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DDZScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DDZScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDZScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DDZScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DDZScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DDZScoreList::MergeFrom(const DDZScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DDZScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDZScoreList::CopyFrom(const DDZScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDZScoreList::IsInitialized() const {

  return true;
}

void DDZScoreList::Swap(DDZScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DDZScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDZScoreList_descriptor_;
  metadata.reflection = DDZScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DDZAwardList::kSeatFieldNumber;
const int DDZAwardList::kCardsDataFieldNumber;
const int DDZAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

DDZAwardList::DDZAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DDZAwardList::InitAsDefaultInstance() {
}

DDZAwardList::DDZAwardList(const DDZAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DDZAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DDZAwardList::~DDZAwardList() {
  SharedDtor();
}

void DDZAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DDZAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDZAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZAwardList_descriptor_;
}

const DDZAwardList& DDZAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

DDZAwardList* DDZAwardList::default_instance_ = NULL;

DDZAwardList* DDZAwardList::New() const {
  return new DDZAwardList;
}

void DDZAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DDZAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DDZAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DDZAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DDZAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDZAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DDZAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DDZAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DDZAwardList::MergeFrom(const DDZAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DDZAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDZAwardList::CopyFrom(const DDZAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDZAwardList::IsInitialized() const {

  return true;
}

void DDZAwardList::Swap(DDZAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DDZAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDZAwardList_descriptor_;
  metadata.reflection = DDZAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameEnd_MSGID_descriptor_;
}
bool ProDDZGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameEnd_MSGID ProDDZGameEnd::ID;
const ProDDZGameEnd_MSGID ProDDZGameEnd::MSGID_MIN;
const ProDDZGameEnd_MSGID ProDDZGameEnd::MSGID_MAX;
const int ProDDZGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameEnd::kLGameTaxFieldNumber;
const int ProDDZGameEnd::kCbChongGuangFieldNumber;
const int ProDDZGameEnd::kCbBaWangKingFieldNumber;
const int ProDDZGameEnd::kWProvideUserFieldNumber;
const int ProDDZGameEnd::kCbChiHuCardFieldNumber;
const int ProDDZGameEnd::kDwChiHuKindFieldNumber;
const int ProDDZGameEnd::kDwChiHuRightFieldNumber;
const int ProDDZGameEnd::kLTotaslGameScoreFieldNumber;
const int ProDDZGameEnd::kLCurrentGameScoreFieldNumber;
const int ProDDZGameEnd::kLCurrentPointScoreFieldNumber;
const int ProDDZGameEnd::kLAttachScoreFieldNumber;
const int ProDDZGameEnd::kCbHandCardDataFieldNumber;
const int ProDDZGameEnd::kCbAwardCardDataFieldNumber;
const int ProDDZGameEnd::kLOnlyWinScoreFieldNumber;
const int ProDDZGameEnd::kBRoundEndFieldNumber;
const int ProDDZGameEnd::kLHuiTouScoreFieldNumber;
const int ProDDZGameEnd::kBZhuangWinFieldNumber;
const int ProDDZGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProDDZGameEnd::kDetailedScoresFieldNumber;
#endif  // !_MSC_VER

ProDDZGameEnd::ProDDZGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameEnd::InitAsDefaultInstance() {
}

ProDDZGameEnd::ProDDZGameEnd(const ProDDZGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameEnd::~ProDDZGameEnd() {
  SharedDtor();
}

void ProDDZGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameEnd_descriptor_;
}

const ProDDZGameEnd& ProDDZGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameEnd* ProDDZGameEnd::default_instance_ = NULL;

ProDDZGameEnd* ProDDZGameEnd::New() const {
  return new ProDDZGameEnd;
}

void ProDDZGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .DDZMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .DDZAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .DDZScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .DDZMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .DDZAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .DDZScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .DDZMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .DDZAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .DDZScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .DDZMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .DDZAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .DDZScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameEnd::MergeFrom(const ProDDZGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameEnd::CopyFrom(const ProDDZGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameEnd::IsInitialized() const {

  return true;
}

void ProDDZGameEnd::Swap(ProDDZGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameEnd_descriptor_;
  metadata.reflection = ProDDZGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProDDZGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameQuickSoundRequest_MSGID ProDDZGameQuickSoundRequest::ID;
const ProDDZGameQuickSoundRequest_MSGID ProDDZGameQuickSoundRequest::MSGID_MIN;
const ProDDZGameQuickSoundRequest_MSGID ProDDZGameQuickSoundRequest::MSGID_MAX;
const int ProDDZGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProDDZGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProDDZGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProDDZGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProDDZGameQuickSoundRequest::ProDDZGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProDDZGameQuickSoundRequest::ProDDZGameQuickSoundRequest(const ProDDZGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameQuickSoundRequest::~ProDDZGameQuickSoundRequest() {
  SharedDtor();
}

void ProDDZGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProDDZGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameQuickSoundRequest_descriptor_;
}

const ProDDZGameQuickSoundRequest& ProDDZGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameQuickSoundRequest* ProDDZGameQuickSoundRequest::default_instance_ = NULL;

ProDDZGameQuickSoundRequest* ProDDZGameQuickSoundRequest::New() const {
  return new ProDDZGameQuickSoundRequest;
}

void ProDDZGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameQuickSoundRequest::MergeFrom(const ProDDZGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameQuickSoundRequest::CopyFrom(const ProDDZGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProDDZGameQuickSoundRequest::Swap(ProDDZGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProDDZGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProDDZGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameQuickSoundResponse_MSGID ProDDZGameQuickSoundResponse::ID;
const ProDDZGameQuickSoundResponse_MSGID ProDDZGameQuickSoundResponse::MSGID_MIN;
const ProDDZGameQuickSoundResponse_MSGID ProDDZGameQuickSoundResponse::MSGID_MAX;
const int ProDDZGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProDDZGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProDDZGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProDDZGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProDDZGameQuickSoundResponse::ProDDZGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProDDZGameQuickSoundResponse::ProDDZGameQuickSoundResponse(const ProDDZGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameQuickSoundResponse::~ProDDZGameQuickSoundResponse() {
  SharedDtor();
}

void ProDDZGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProDDZGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameQuickSoundResponse_descriptor_;
}

const ProDDZGameQuickSoundResponse& ProDDZGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameQuickSoundResponse* ProDDZGameQuickSoundResponse::default_instance_ = NULL;

ProDDZGameQuickSoundResponse* ProDDZGameQuickSoundResponse::New() const {
  return new ProDDZGameQuickSoundResponse;
}

void ProDDZGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameQuickSoundResponse::MergeFrom(const ProDDZGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameQuickSoundResponse::CopyFrom(const ProDDZGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProDDZGameQuickSoundResponse::Swap(ProDDZGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProDDZGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProDDZGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameSendDiscardMahs_MSGID ProDDZGameSendDiscardMahs::ID;
const ProDDZGameSendDiscardMahs_MSGID ProDDZGameSendDiscardMahs::MSGID_MIN;
const ProDDZGameSendDiscardMahs_MSGID ProDDZGameSendDiscardMahs::MSGID_MAX;
const int ProDDZGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProDDZGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProDDZGameSendDiscardMahs::kDeskCountFieldNumber;
#endif  // !_MSC_VER

ProDDZGameSendDiscardMahs::ProDDZGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProDDZGameSendDiscardMahs::ProDDZGameSendDiscardMahs(const ProDDZGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameSendDiscardMahs::~ProDDZGameSendDiscardMahs() {
  SharedDtor();
}

void ProDDZGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendDiscardMahs_descriptor_;
}

const ProDDZGameSendDiscardMahs& ProDDZGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameSendDiscardMahs* ProDDZGameSendDiscardMahs::default_instance_ = NULL;

ProDDZGameSendDiscardMahs* ProDDZGameSendDiscardMahs::New() const {
  return new ProDDZGameSendDiscardMahs;
}

void ProDDZGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .DDZMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(32)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .DDZMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deskcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .DDZMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deskcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 4;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .DDZMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameSendDiscardMahs::MergeFrom(const ProDDZGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameSendDiscardMahs::CopyFrom(const ProDDZGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProDDZGameSendDiscardMahs::Swap(ProDDZGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    std::swap(deskcount_, other->deskcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProDDZGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DDZWeaveItem::kWeaveKindFieldNumber;
const int DDZWeaveItem::kCentercardFieldNumber;
const int DDZWeaveItem::kProvideUserFieldNumber;
const int DDZWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

DDZWeaveItem::DDZWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DDZWeaveItem::InitAsDefaultInstance() {
}

DDZWeaveItem::DDZWeaveItem(const DDZWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DDZWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DDZWeaveItem::~DDZWeaveItem() {
  SharedDtor();
}

void DDZWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DDZWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDZWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZWeaveItem_descriptor_;
}

const DDZWeaveItem& DDZWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

DDZWeaveItem* DDZWeaveItem::default_instance_ = NULL;

DDZWeaveItem* DDZWeaveItem::New() const {
  return new DDZWeaveItem;
}

void DDZWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DDZWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DDZWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DDZWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DDZWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDZWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DDZWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DDZWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DDZWeaveItem::MergeFrom(const DDZWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DDZWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDZWeaveItem::CopyFrom(const DDZWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDZWeaveItem::IsInitialized() const {

  return true;
}

void DDZWeaveItem::Swap(DDZWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DDZWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDZWeaveItem_descriptor_;
  metadata.reflection = DDZWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DDZWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

DDZWeaveItems::DDZWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DDZWeaveItems::InitAsDefaultInstance() {
}

DDZWeaveItems::DDZWeaveItems(const DDZWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DDZWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DDZWeaveItems::~DDZWeaveItems() {
  SharedDtor();
}

void DDZWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DDZWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDZWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDZWeaveItems_descriptor_;
}

const DDZWeaveItems& DDZWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

DDZWeaveItems* DDZWeaveItems::default_instance_ = NULL;

DDZWeaveItems* DDZWeaveItems::New() const {
  return new DDZWeaveItems;
}

void DDZWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DDZWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .DDZWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DDZWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .DDZWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DDZWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .DDZWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DDZWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .DDZWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDZWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DDZWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DDZWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DDZWeaveItems::MergeFrom(const DDZWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DDZWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDZWeaveItems::CopyFrom(const DDZWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDZWeaveItems::IsInitialized() const {

  return true;
}

void DDZWeaveItems::Swap(DDZWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DDZWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDZWeaveItems_descriptor_;
  metadata.reflection = DDZWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendActionMahs_MSGID_descriptor_;
}
bool ProDDZGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameSendActionMahs_MSGID ProDDZGameSendActionMahs::ID;
const ProDDZGameSendActionMahs_MSGID ProDDZGameSendActionMahs::MSGID_MIN;
const ProDDZGameSendActionMahs_MSGID ProDDZGameSendActionMahs::MSGID_MAX;
const int ProDDZGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameSendActionMahs::kSeatIdFieldNumber;
const int ProDDZGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProDDZGameSendActionMahs::ProDDZGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameSendActionMahs::InitAsDefaultInstance() {
}

ProDDZGameSendActionMahs::ProDDZGameSendActionMahs(const ProDDZGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameSendActionMahs::~ProDDZGameSendActionMahs() {
  SharedDtor();
}

void ProDDZGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendActionMahs_descriptor_;
}

const ProDDZGameSendActionMahs& ProDDZGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameSendActionMahs* ProDDZGameSendActionMahs::default_instance_ = NULL;

ProDDZGameSendActionMahs* ProDDZGameSendActionMahs::New() const {
  return new ProDDZGameSendActionMahs;
}

void ProDDZGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .DDZWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .DDZWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .DDZWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .DDZWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameSendActionMahs::MergeFrom(const ProDDZGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameSendActionMahs::CopyFrom(const ProDDZGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProDDZGameSendActionMahs::Swap(ProDDZGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameSendActionMahs_descriptor_;
  metadata.reflection = ProDDZGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenRequest_MSGID_descriptor_;
}
bool ProDDZGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameBrokenRequest_MSGID ProDDZGameBrokenRequest::ID;
const ProDDZGameBrokenRequest_MSGID ProDDZGameBrokenRequest::MSGID_MIN;
const ProDDZGameBrokenRequest_MSGID ProDDZGameBrokenRequest::MSGID_MAX;
const int ProDDZGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameBrokenRequest::kSeatIdFieldNumber;
const int ProDDZGameBrokenRequest::kTypeFieldNumber;
const int ProDDZGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameBrokenRequest::ProDDZGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameBrokenRequest::InitAsDefaultInstance() {
}

ProDDZGameBrokenRequest::ProDDZGameBrokenRequest(const ProDDZGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameBrokenRequest::~ProDDZGameBrokenRequest() {
  SharedDtor();
}

void ProDDZGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenRequest_descriptor_;
}

const ProDDZGameBrokenRequest& ProDDZGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameBrokenRequest* ProDDZGameBrokenRequest::default_instance_ = NULL;

ProDDZGameBrokenRequest* ProDDZGameBrokenRequest::New() const {
  return new ProDDZGameBrokenRequest;
}

void ProDDZGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .DDZBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DDZBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::DDZBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .DDZBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .DDZBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .DDZBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameBrokenRequest::MergeFrom(const ProDDZGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameBrokenRequest::CopyFrom(const ProDDZGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProDDZGameBrokenRequest::Swap(ProDDZGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameBrokenRequest_descriptor_;
  metadata.reflection = ProDDZGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenOperate_MSGID_descriptor_;
}
bool ProDDZGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameBrokenOperate_MSGID ProDDZGameBrokenOperate::ID;
const ProDDZGameBrokenOperate_MSGID ProDDZGameBrokenOperate::MSGID_MIN;
const ProDDZGameBrokenOperate_MSGID ProDDZGameBrokenOperate::MSGID_MAX;
const int ProDDZGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameBrokenOperate::kSeatIdFieldNumber;
const int ProDDZGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProDDZGameBrokenOperate::ProDDZGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameBrokenOperate::InitAsDefaultInstance() {
}

ProDDZGameBrokenOperate::ProDDZGameBrokenOperate(const ProDDZGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameBrokenOperate::~ProDDZGameBrokenOperate() {
  SharedDtor();
}

void ProDDZGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenOperate_descriptor_;
}

const ProDDZGameBrokenOperate& ProDDZGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameBrokenOperate* ProDDZGameBrokenOperate::default_instance_ = NULL;

ProDDZGameBrokenOperate* ProDDZGameBrokenOperate::New() const {
  return new ProDDZGameBrokenOperate;
}

void ProDDZGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .DDZBROKEN_OPERATE result = 3 [default = DDZ_BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DDZBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::DDZBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .DDZBROKEN_OPERATE result = 3 [default = DDZ_BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .DDZBROKEN_OPERATE result = 3 [default = DDZ_BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .DDZBROKEN_OPERATE result = 3 [default = DDZ_BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameBrokenOperate::MergeFrom(const ProDDZGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameBrokenOperate::CopyFrom(const ProDDZGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProDDZGameBrokenOperate::Swap(ProDDZGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameBrokenOperate_descriptor_;
  metadata.reflection = ProDDZGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenNotify_MSGID_descriptor_;
}
bool ProDDZGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameBrokenNotify_MSGID ProDDZGameBrokenNotify::ID;
const ProDDZGameBrokenNotify_MSGID ProDDZGameBrokenNotify::MSGID_MIN;
const ProDDZGameBrokenNotify_MSGID ProDDZGameBrokenNotify::MSGID_MAX;
const int ProDDZGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameBrokenNotify::kSeatIdFieldNumber;
const int ProDDZGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameBrokenNotify::ProDDZGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameBrokenNotify::InitAsDefaultInstance() {
}

ProDDZGameBrokenNotify::ProDDZGameBrokenNotify(const ProDDZGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameBrokenNotify::~ProDDZGameBrokenNotify() {
  SharedDtor();
}

void ProDDZGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenNotify_descriptor_;
}

const ProDDZGameBrokenNotify& ProDDZGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameBrokenNotify* ProDDZGameBrokenNotify::default_instance_ = NULL;

ProDDZGameBrokenNotify* ProDDZGameBrokenNotify::New() const {
  return new ProDDZGameBrokenNotify;
}

void ProDDZGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .DDZBROKEN_CODE operate_code = 3 [default = DDZ_BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::DDZBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::DDZBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .DDZBROKEN_CODE operate_code = 3 [default = DDZ_BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .DDZBROKEN_CODE operate_code = 3 [default = DDZ_BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .DDZBROKEN_CODE operate_code = 3 [default = DDZ_BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameBrokenNotify::MergeFrom(const ProDDZGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameBrokenNotify::CopyFrom(const ProDDZGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProDDZGameBrokenNotify::Swap(ProDDZGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameBrokenNotify_descriptor_;
  metadata.reflection = ProDDZGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameRuleConfig_MSGID_descriptor_;
}
bool ProDDZGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameRuleConfig_MSGID ProDDZGameRuleConfig::ID;
const ProDDZGameRuleConfig_MSGID ProDDZGameRuleConfig::MSGID_MIN;
const ProDDZGameRuleConfig_MSGID ProDDZGameRuleConfig::MSGID_MAX;
const int ProDDZGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameRuleConfig::kGameRoundFieldNumber;
const int ProDDZGameRuleConfig::kNeedCardFieldNumber;
const int ProDDZGameRuleConfig::kHaveBottomKingFieldNumber;
const int ProDDZGameRuleConfig::kHaveMaiLeiFieldNumber;
const int ProDDZGameRuleConfig::kHavaHuiTouFieldNumber;
const int ProDDZGameRuleConfig::kNMasterSeatFieldNumber;
const int ProDDZGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProDDZGameRuleConfig::kHaveJianmaFieldNumber;
const int ProDDZGameRuleConfig::kNChongguanNumFieldNumber;
const int ProDDZGameRuleConfig::kBbawangfanbeiFieldNumber;
const int ProDDZGameRuleConfig::kNPlayerNumFieldNumber;
const int ProDDZGameRuleConfig::kSRoomNumFieldNumber;
const int ProDDZGameRuleConfig::kSPlayTimeFieldNumber;
const int ProDDZGameRuleConfig::kNselfSeatFieldNumber;
const int ProDDZGameRuleConfig::kBJingDianFieldNumber;
#endif  // !_MSC_VER

ProDDZGameRuleConfig::ProDDZGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameRuleConfig::InitAsDefaultInstance() {
}

ProDDZGameRuleConfig::ProDDZGameRuleConfig(const ProDDZGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_bottom_king_ = false;
  have_mai_lei_ = false;
  hava_hui_tou_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  bbawangfanbei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nselfseat_ = 0;
  bjingdian_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameRuleConfig::~ProDDZGameRuleConfig() {
  SharedDtor();
}

void ProDDZGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProDDZGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameRuleConfig_descriptor_;
}

const ProDDZGameRuleConfig& ProDDZGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameRuleConfig* ProDDZGameRuleConfig::default_instance_ = NULL;

ProDDZGameRuleConfig* ProDDZGameRuleConfig::New() const {
  return new ProDDZGameRuleConfig;
}

void ProDDZGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_bottom_king_ = false;
    have_mai_lei_ = false;
    hava_hui_tou_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    bbawangfanbei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
    nselfseat_ = 0;
    bjingdian_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_bottom_king;
        break;
      }

      // optional bool have_bottom_king = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_bottom_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_bottom_king_)));
          set_has_have_bottom_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_mai_lei;
        break;
      }

      // optional bool have_mai_lei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_mai_lei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_mai_lei_)));
          set_has_have_mai_lei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_hui_tou;
        break;
      }

      // optional bool hava_hui_tou = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_hui_tou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_hui_tou_)));
          set_has_hava_hui_tou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bbawangfanbei;
        break;
      }

      // optional bool bbawangfanbei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbawangfanbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbawangfanbei_)));
          set_has_bbawangfanbei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nselfSeat;
        break;
      }

      // optional int32 nselfSeat = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nselfSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nselfseat_)));
          set_has_nselfseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bJingDian;
        break;
      }

      // optional bool bJingDian = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bJingDian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bjingdian_)));
          set_has_bjingdian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_bottom_king(), output);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_mai_lei(), output);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_hui_tou(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbawangfanbei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  // optional int32 nselfSeat = 14;
  if (has_nselfseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nselfseat(), output);
  }

  // optional bool bJingDian = 15;
  if (has_bjingdian()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->bjingdian(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_bottom_king(), target);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_mai_lei(), target);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_hui_tou(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbawangfanbei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  // optional int32 nselfSeat = 14;
  if (has_nselfseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nselfseat(), target);
  }

  // optional bool bJingDian = 15;
  if (has_bjingdian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->bjingdian(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_bottom_king = 3;
    if (has_have_bottom_king()) {
      total_size += 1 + 1;
    }

    // optional bool have_mai_lei = 4;
    if (has_have_mai_lei()) {
      total_size += 1 + 1;
    }

    // optional bool hava_hui_tou = 5;
    if (has_hava_hui_tou()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool bbawangfanbei = 10;
    if (has_bbawangfanbei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

    // optional int32 nselfSeat = 14;
    if (has_nselfseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nselfseat());
    }

    // optional bool bJingDian = 15;
    if (has_bjingdian()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameRuleConfig::MergeFrom(const ProDDZGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_bottom_king()) {
      set_have_bottom_king(from.have_bottom_king());
    }
    if (from.has_have_mai_lei()) {
      set_have_mai_lei(from.have_mai_lei());
    }
    if (from.has_hava_hui_tou()) {
      set_hava_hui_tou(from.hava_hui_tou());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_bbawangfanbei()) {
      set_bbawangfanbei(from.bbawangfanbei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
    if (from.has_nselfseat()) {
      set_nselfseat(from.nselfseat());
    }
    if (from.has_bjingdian()) {
      set_bjingdian(from.bjingdian());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameRuleConfig::CopyFrom(const ProDDZGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameRuleConfig::IsInitialized() const {

  return true;
}

void ProDDZGameRuleConfig::Swap(ProDDZGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_bottom_king_, other->have_bottom_king_);
    std::swap(have_mai_lei_, other->have_mai_lei_);
    std::swap(hava_hui_tou_, other->hava_hui_tou_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(bbawangfanbei_, other->bbawangfanbei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(nselfseat_, other->nselfseat_);
    std::swap(bjingdian_, other->bjingdian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameRuleConfig_descriptor_;
  metadata.reflection = ProDDZGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenStatus_MSGID_descriptor_;
}
bool ProDDZGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameBrokenStatus_MSGID ProDDZGameBrokenStatus::ID;
const ProDDZGameBrokenStatus_MSGID ProDDZGameBrokenStatus::MSGID_MIN;
const ProDDZGameBrokenStatus_MSGID ProDDZGameBrokenStatus::MSGID_MAX;
const int ProDDZGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProDDZGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProDDZGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameBrokenStatus::ProDDZGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameBrokenStatus::InitAsDefaultInstance() {
}

ProDDZGameBrokenStatus::ProDDZGameBrokenStatus(const ProDDZGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameBrokenStatus::~ProDDZGameBrokenStatus() {
  SharedDtor();
}

void ProDDZGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameBrokenStatus_descriptor_;
}

const ProDDZGameBrokenStatus& ProDDZGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameBrokenStatus* ProDDZGameBrokenStatus::default_instance_ = NULL;

ProDDZGameBrokenStatus* ProDDZGameBrokenStatus::New() const {
  return new ProDDZGameBrokenStatus;
}

void ProDDZGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameBrokenStatus::MergeFrom(const ProDDZGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameBrokenStatus::CopyFrom(const ProDDZGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProDDZGameBrokenStatus::Swap(ProDDZGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameBrokenStatus_descriptor_;
  metadata.reflection = ProDDZGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDataResp_MSGID_descriptor_;
}
bool ProDDZGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameDataResp_MSGID ProDDZGameDataResp::ID;
const ProDDZGameDataResp_MSGID ProDDZGameDataResp::MSGID_MIN;
const ProDDZGameDataResp_MSGID ProDDZGameDataResp::MSGID_MAX;
const int ProDDZGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameDataResp::kTotalScoreFieldNumber;
const int ProDDZGameDataResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameDataResp::ProDDZGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameDataResp::InitAsDefaultInstance() {
}

ProDDZGameDataResp::ProDDZGameDataResp(const ProDDZGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameDataResp::~ProDDZGameDataResp() {
  SharedDtor();
}

void ProDDZGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameDataResp_descriptor_;
}

const ProDDZGameDataResp& ProDDZGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameDataResp* ProDDZGameDataResp::default_instance_ = NULL;

ProDDZGameDataResp* ProDDZGameDataResp::New() const {
  return new ProDDZGameDataResp;
}

void ProDDZGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameDataResp::MergeFrom(const ProDDZGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameDataResp::CopyFrom(const ProDDZGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameDataResp::IsInitialized() const {

  return true;
}

void ProDDZGameDataResp::Swap(ProDDZGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameDataResp_descriptor_;
  metadata.reflection = ProDDZGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameRecordRequest_MSGID_descriptor_;
}
bool ProDDZGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameRecordRequest_MSGID ProDDZGameRecordRequest::ID;
const ProDDZGameRecordRequest_MSGID ProDDZGameRecordRequest::MSGID_MIN;
const ProDDZGameRecordRequest_MSGID ProDDZGameRecordRequest::MSGID_MAX;
const int ProDDZGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameRecordRequest::kSeatIdFieldNumber;
const int ProDDZGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProDDZGameRecordRequest::ProDDZGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameRecordRequest::InitAsDefaultInstance() {
}

ProDDZGameRecordRequest::ProDDZGameRecordRequest(const ProDDZGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameRecordRequest::~ProDDZGameRecordRequest() {
  SharedDtor();
}

void ProDDZGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProDDZGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameRecordRequest_descriptor_;
}

const ProDDZGameRecordRequest& ProDDZGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameRecordRequest* ProDDZGameRecordRequest::default_instance_ = NULL;

ProDDZGameRecordRequest* ProDDZGameRecordRequest::New() const {
  return new ProDDZGameRecordRequest;
}

void ProDDZGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameRecordRequest::MergeFrom(const ProDDZGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameRecordRequest::CopyFrom(const ProDDZGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameRecordRequest::IsInitialized() const {

  return true;
}

void ProDDZGameRecordRequest::Swap(ProDDZGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameRecordRequest_descriptor_;
  metadata.reflection = ProDDZGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameRecordResponse_MSGID_descriptor_;
}
bool ProDDZGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameRecordResponse_MSGID ProDDZGameRecordResponse::ID;
const ProDDZGameRecordResponse_MSGID ProDDZGameRecordResponse::MSGID_MIN;
const ProDDZGameRecordResponse_MSGID ProDDZGameRecordResponse::MSGID_MAX;
const int ProDDZGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameRecordResponse::kSeatIdFieldNumber;
const int ProDDZGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProDDZGameRecordResponse::ProDDZGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameRecordResponse::InitAsDefaultInstance() {
}

ProDDZGameRecordResponse::ProDDZGameRecordResponse(const ProDDZGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameRecordResponse::~ProDDZGameRecordResponse() {
  SharedDtor();
}

void ProDDZGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProDDZGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameRecordResponse_descriptor_;
}

const ProDDZGameRecordResponse& ProDDZGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameRecordResponse* ProDDZGameRecordResponse::default_instance_ = NULL;

ProDDZGameRecordResponse* ProDDZGameRecordResponse::New() const {
  return new ProDDZGameRecordResponse;
}

void ProDDZGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameRecordResponse::MergeFrom(const ProDDZGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameRecordResponse::CopyFrom(const ProDDZGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameRecordResponse::IsInitialized() const {

  return true;
}

void ProDDZGameRecordResponse::Swap(ProDDZGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameRecordResponse_descriptor_;
  metadata.reflection = ProDDZGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserLocationRequest_MSGID_descriptor_;
}
bool ProDDZGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserLocationRequest_MSGID ProDDZGameUserLocationRequest::ID;
const ProDDZGameUserLocationRequest_MSGID ProDDZGameUserLocationRequest::MSGID_MIN;
const ProDDZGameUserLocationRequest_MSGID ProDDZGameUserLocationRequest::MSGID_MAX;
const int ProDDZGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserLocationRequest::kSeatIdFieldNumber;
const int ProDDZGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProDDZGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProDDZGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProDDZGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserLocationRequest::ProDDZGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserLocationRequest::InitAsDefaultInstance() {
}

ProDDZGameUserLocationRequest::ProDDZGameUserLocationRequest(const ProDDZGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserLocationRequest::~ProDDZGameUserLocationRequest() {
  SharedDtor();
}

void ProDDZGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProDDZGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserLocationRequest_descriptor_;
}

const ProDDZGameUserLocationRequest& ProDDZGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserLocationRequest* ProDDZGameUserLocationRequest::default_instance_ = NULL;

ProDDZGameUserLocationRequest* ProDDZGameUserLocationRequest::New() const {
  return new ProDDZGameUserLocationRequest;
}

void ProDDZGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserLocationRequest::MergeFrom(const ProDDZGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserLocationRequest::CopyFrom(const ProDDZGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserLocationRequest::Swap(ProDDZGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserLocationRequest_descriptor_;
  metadata.reflection = ProDDZGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSyncCardResponse_MSGID_descriptor_;
}
bool ProDDZGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameSyncCardResponse_MSGID ProDDZGameSyncCardResponse::ID;
const ProDDZGameSyncCardResponse_MSGID ProDDZGameSyncCardResponse::MSGID_MIN;
const ProDDZGameSyncCardResponse_MSGID ProDDZGameSyncCardResponse::MSGID_MAX;
const int ProDDZGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameSyncCardResponse::kSeatFieldNumber;
const int ProDDZGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProDDZGameSyncCardResponse::ProDDZGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameSyncCardResponse::InitAsDefaultInstance() {
}

ProDDZGameSyncCardResponse::ProDDZGameSyncCardResponse(const ProDDZGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameSyncCardResponse::~ProDDZGameSyncCardResponse() {
  SharedDtor();
}

void ProDDZGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSyncCardResponse_descriptor_;
}

const ProDDZGameSyncCardResponse& ProDDZGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameSyncCardResponse* ProDDZGameSyncCardResponse::default_instance_ = NULL;

ProDDZGameSyncCardResponse* ProDDZGameSyncCardResponse::New() const {
  return new ProDDZGameSyncCardResponse;
}

void ProDDZGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameSyncCardResponse::MergeFrom(const ProDDZGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameSyncCardResponse::CopyFrom(const ProDDZGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProDDZGameSyncCardResponse::Swap(ProDDZGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameSyncCardResponse_descriptor_;
  metadata.reflection = ProDDZGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProDDZGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserPhoneStatusRequest_MSGID ProDDZGameUserPhoneStatusRequest::ID;
const ProDDZGameUserPhoneStatusRequest_MSGID ProDDZGameUserPhoneStatusRequest::MSGID_MIN;
const ProDDZGameUserPhoneStatusRequest_MSGID ProDDZGameUserPhoneStatusRequest::MSGID_MAX;
const int ProDDZGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProDDZGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserPhoneStatusRequest::ProDDZGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProDDZGameUserPhoneStatusRequest::ProDDZGameUserPhoneStatusRequest(const ProDDZGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserPhoneStatusRequest::~ProDDZGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProDDZGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserPhoneStatusRequest_descriptor_;
}

const ProDDZGameUserPhoneStatusRequest& ProDDZGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserPhoneStatusRequest* ProDDZGameUserPhoneStatusRequest::default_instance_ = NULL;

ProDDZGameUserPhoneStatusRequest* ProDDZGameUserPhoneStatusRequest::New() const {
  return new ProDDZGameUserPhoneStatusRequest;
}

void ProDDZGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserPhoneStatusRequest::MergeFrom(const ProDDZGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserPhoneStatusRequest::CopyFrom(const ProDDZGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserPhoneStatusRequest::Swap(ProDDZGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProDDZGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProDDZGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserGiveUpRequest_MSGID ProDDZGameUserGiveUpRequest::ID;
const ProDDZGameUserGiveUpRequest_MSGID ProDDZGameUserGiveUpRequest::MSGID_MIN;
const ProDDZGameUserGiveUpRequest_MSGID ProDDZGameUserGiveUpRequest::MSGID_MAX;
const int ProDDZGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserGiveUpRequest::ProDDZGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProDDZGameUserGiveUpRequest::ProDDZGameUserGiveUpRequest(const ProDDZGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserGiveUpRequest::~ProDDZGameUserGiveUpRequest() {
  SharedDtor();
}

void ProDDZGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserGiveUpRequest_descriptor_;
}

const ProDDZGameUserGiveUpRequest& ProDDZGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserGiveUpRequest* ProDDZGameUserGiveUpRequest::default_instance_ = NULL;

ProDDZGameUserGiveUpRequest* ProDDZGameUserGiveUpRequest::New() const {
  return new ProDDZGameUserGiveUpRequest;
}

void ProDDZGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserGiveUpRequest::MergeFrom(const ProDDZGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserGiveUpRequest::CopyFrom(const ProDDZGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserGiveUpRequest::Swap(ProDDZGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProDDZGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserHintRequest_MSGID_descriptor_;
}
bool ProDDZGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserHintRequest_MSGID ProDDZGameUserHintRequest::ID;
const ProDDZGameUserHintRequest_MSGID ProDDZGameUserHintRequest::MSGID_MIN;
const ProDDZGameUserHintRequest_MSGID ProDDZGameUserHintRequest::MSGID_MAX;
const int ProDDZGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProDDZGameUserHintRequest::ProDDZGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserHintRequest::InitAsDefaultInstance() {
}

ProDDZGameUserHintRequest::ProDDZGameUserHintRequest(const ProDDZGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserHintRequest::~ProDDZGameUserHintRequest() {
  SharedDtor();
}

void ProDDZGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserHintRequest_descriptor_;
}

const ProDDZGameUserHintRequest& ProDDZGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserHintRequest* ProDDZGameUserHintRequest::default_instance_ = NULL;

ProDDZGameUserHintRequest* ProDDZGameUserHintRequest::New() const {
  return new ProDDZGameUserHintRequest;
}

void ProDDZGameUserHintRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProDDZGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserHintRequest::MergeFrom(const ProDDZGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserHintRequest::CopyFrom(const ProDDZGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserHintRequest::Swap(ProDDZGameUserHintRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserHintRequest_descriptor_;
  metadata.reflection = ProDDZGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserHintResponse_MSGID_descriptor_;
}
bool ProDDZGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserHintResponse_MSGID ProDDZGameUserHintResponse::ID;
const ProDDZGameUserHintResponse_MSGID ProDDZGameUserHintResponse::MSGID_MIN;
const ProDDZGameUserHintResponse_MSGID ProDDZGameUserHintResponse::MSGID_MAX;
const int ProDDZGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserHintResponse::kLenthFieldNumber;
const int ProDDZGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserHintResponse::ProDDZGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserHintResponse::InitAsDefaultInstance() {
}

ProDDZGameUserHintResponse::ProDDZGameUserHintResponse(const ProDDZGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserHintResponse::~ProDDZGameUserHintResponse() {
  SharedDtor();
}

void ProDDZGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserHintResponse_descriptor_;
}

const ProDDZGameUserHintResponse& ProDDZGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserHintResponse* ProDDZGameUserHintResponse::default_instance_ = NULL;

ProDDZGameUserHintResponse* ProDDZGameUserHintResponse::New() const {
  return new ProDDZGameUserHintResponse;
}

void ProDDZGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserHintResponse::MergeFrom(const ProDDZGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserHintResponse::CopyFrom(const ProDDZGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProDDZGameUserHintResponse::Swap(ProDDZGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserHintResponse_descriptor_;
  metadata.reflection = ProDDZGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallScoreResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallScoreResponse_MSGID_descriptor_;
}
bool ProDDZGameUserCallScoreResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserCallScoreResponse_MSGID ProDDZGameUserCallScoreResponse::ID;
const ProDDZGameUserCallScoreResponse_MSGID ProDDZGameUserCallScoreResponse::MSGID_MIN;
const ProDDZGameUserCallScoreResponse_MSGID ProDDZGameUserCallScoreResponse::MSGID_MAX;
const int ProDDZGameUserCallScoreResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserCallScoreResponse::kSeatFieldNumber;
const int ProDDZGameUserCallScoreResponse::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserCallScoreResponse::ProDDZGameUserCallScoreResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserCallScoreResponse::InitAsDefaultInstance() {
}

ProDDZGameUserCallScoreResponse::ProDDZGameUserCallScoreResponse(const ProDDZGameUserCallScoreResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserCallScoreResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserCallScoreResponse::~ProDDZGameUserCallScoreResponse() {
  SharedDtor();
}

void ProDDZGameUserCallScoreResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserCallScoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserCallScoreResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallScoreResponse_descriptor_;
}

const ProDDZGameUserCallScoreResponse& ProDDZGameUserCallScoreResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserCallScoreResponse* ProDDZGameUserCallScoreResponse::default_instance_ = NULL;

ProDDZGameUserCallScoreResponse* ProDDZGameUserCallScoreResponse::New() const {
  return new ProDDZGameUserCallScoreResponse;
}

void ProDDZGameUserCallScoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserCallScoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserCallScoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserCallScoreResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserCallScoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserCallScoreResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserCallScoreResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserCallScoreResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserCallScoreResponse::MergeFrom(const ProDDZGameUserCallScoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserCallScoreResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserCallScoreResponse::CopyFrom(const ProDDZGameUserCallScoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserCallScoreResponse::IsInitialized() const {

  return true;
}

void ProDDZGameUserCallScoreResponse::Swap(ProDDZGameUserCallScoreResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserCallScoreResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserCallScoreResponse_descriptor_;
  metadata.reflection = ProDDZGameUserCallScoreResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallScoreRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallScoreRequest_MSGID_descriptor_;
}
bool ProDDZGameUserCallScoreRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserCallScoreRequest_MSGID ProDDZGameUserCallScoreRequest::ID;
const ProDDZGameUserCallScoreRequest_MSGID ProDDZGameUserCallScoreRequest::MSGID_MIN;
const ProDDZGameUserCallScoreRequest_MSGID ProDDZGameUserCallScoreRequest::MSGID_MAX;
const int ProDDZGameUserCallScoreRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserCallScoreRequest::kSeatFieldNumber;
const int ProDDZGameUserCallScoreRequest::kUsercallscoreFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserCallScoreRequest::ProDDZGameUserCallScoreRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserCallScoreRequest::InitAsDefaultInstance() {
}

ProDDZGameUserCallScoreRequest::ProDDZGameUserCallScoreRequest(const ProDDZGameUserCallScoreRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserCallScoreRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  usercallscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserCallScoreRequest::~ProDDZGameUserCallScoreRequest() {
  SharedDtor();
}

void ProDDZGameUserCallScoreRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserCallScoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserCallScoreRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallScoreRequest_descriptor_;
}

const ProDDZGameUserCallScoreRequest& ProDDZGameUserCallScoreRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserCallScoreRequest* ProDDZGameUserCallScoreRequest::default_instance_ = NULL;

ProDDZGameUserCallScoreRequest* ProDDZGameUserCallScoreRequest::New() const {
  return new ProDDZGameUserCallScoreRequest;
}

void ProDDZGameUserCallScoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    usercallscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserCallScoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_usercallscore;
        break;
      }

      // optional int32 usercallscore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usercallscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usercallscore_)));
          set_has_usercallscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserCallScoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usercallscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserCallScoreRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 usercallscore = 2;
  if (has_usercallscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usercallscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserCallScoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 usercallscore = 2;
    if (has_usercallscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usercallscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserCallScoreRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserCallScoreRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserCallScoreRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserCallScoreRequest::MergeFrom(const ProDDZGameUserCallScoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_usercallscore()) {
      set_usercallscore(from.usercallscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserCallScoreRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserCallScoreRequest::CopyFrom(const ProDDZGameUserCallScoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserCallScoreRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserCallScoreRequest::Swap(ProDDZGameUserCallScoreRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(usercallscore_, other->usercallscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserCallScoreRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserCallScoreRequest_descriptor_;
  metadata.reflection = ProDDZGameUserCallScoreRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameCallNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameCallNotify_MSGID_descriptor_;
}
bool ProDDZGameCallNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameCallNotify_MSGID ProDDZGameCallNotify::ID;
const ProDDZGameCallNotify_MSGID ProDDZGameCallNotify::MSGID_MIN;
const ProDDZGameCallNotify_MSGID ProDDZGameCallNotify::MSGID_MAX;
const int ProDDZGameCallNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameCallNotify::kSeatFieldNumber;
#endif  // !_MSC_VER

ProDDZGameCallNotify::ProDDZGameCallNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameCallNotify::InitAsDefaultInstance() {
}

ProDDZGameCallNotify::ProDDZGameCallNotify(const ProDDZGameCallNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameCallNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameCallNotify::~ProDDZGameCallNotify() {
  SharedDtor();
}

void ProDDZGameCallNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameCallNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameCallNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameCallNotify_descriptor_;
}

const ProDDZGameCallNotify& ProDDZGameCallNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameCallNotify* ProDDZGameCallNotify::default_instance_ = NULL;

ProDDZGameCallNotify* ProDDZGameCallNotify::New() const {
  return new ProDDZGameCallNotify;
}

void ProDDZGameCallNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameCallNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameCallNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameCallNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameCallNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameCallNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameCallNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameCallNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameCallNotify::MergeFrom(const ProDDZGameCallNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameCallNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameCallNotify::CopyFrom(const ProDDZGameCallNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameCallNotify::IsInitialized() const {

  return true;
}

void ProDDZGameCallNotify::Swap(ProDDZGameCallNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameCallNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameCallNotify_descriptor_;
  metadata.reflection = ProDDZGameCallNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameQiangNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameQiangNotify_MSGID_descriptor_;
}
bool ProDDZGameQiangNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameQiangNotify_MSGID ProDDZGameQiangNotify::ID;
const ProDDZGameQiangNotify_MSGID ProDDZGameQiangNotify::MSGID_MIN;
const ProDDZGameQiangNotify_MSGID ProDDZGameQiangNotify::MSGID_MAX;
const int ProDDZGameQiangNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameQiangNotify::kSeatFieldNumber;
#endif  // !_MSC_VER

ProDDZGameQiangNotify::ProDDZGameQiangNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameQiangNotify::InitAsDefaultInstance() {
}

ProDDZGameQiangNotify::ProDDZGameQiangNotify(const ProDDZGameQiangNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameQiangNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameQiangNotify::~ProDDZGameQiangNotify() {
  SharedDtor();
}

void ProDDZGameQiangNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameQiangNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameQiangNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameQiangNotify_descriptor_;
}

const ProDDZGameQiangNotify& ProDDZGameQiangNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameQiangNotify* ProDDZGameQiangNotify::default_instance_ = NULL;

ProDDZGameQiangNotify* ProDDZGameQiangNotify::New() const {
  return new ProDDZGameQiangNotify;
}

void ProDDZGameQiangNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameQiangNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameQiangNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameQiangNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameQiangNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameQiangNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameQiangNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameQiangNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameQiangNotify::MergeFrom(const ProDDZGameQiangNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameQiangNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameQiangNotify::CopyFrom(const ProDDZGameQiangNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameQiangNotify::IsInitialized() const {

  return true;
}

void ProDDZGameQiangNotify::Swap(ProDDZGameQiangNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameQiangNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameQiangNotify_descriptor_;
  metadata.reflection = ProDDZGameQiangNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallLandlordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallLandlordResponse_MSGID_descriptor_;
}
bool ProDDZGameUserCallLandlordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserCallLandlordResponse_MSGID ProDDZGameUserCallLandlordResponse::ID;
const ProDDZGameUserCallLandlordResponse_MSGID ProDDZGameUserCallLandlordResponse::MSGID_MIN;
const ProDDZGameUserCallLandlordResponse_MSGID ProDDZGameUserCallLandlordResponse::MSGID_MAX;
const int ProDDZGameUserCallLandlordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserCallLandlordResponse::kIscallandlordFieldNumber;
const int ProDDZGameUserCallLandlordResponse::kScoreFieldNumber;
const int ProDDZGameUserCallLandlordResponse::kLandlordSeatFieldNumber;
const int ProDDZGameUserCallLandlordResponse::kSeatFieldNumber;
const int ProDDZGameUserCallLandlordResponse::kIsSoundCallFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserCallLandlordResponse::ProDDZGameUserCallLandlordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserCallLandlordResponse::InitAsDefaultInstance() {
}

ProDDZGameUserCallLandlordResponse::ProDDZGameUserCallLandlordResponse(const ProDDZGameUserCallLandlordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserCallLandlordResponse::SharedCtor() {
  _cached_size_ = 0;
  iscallandlord_ = 0;
  score_ = 0;
  landlordseat_ = 0;
  seat_ = 0;
  issoundcall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserCallLandlordResponse::~ProDDZGameUserCallLandlordResponse() {
  SharedDtor();
}

void ProDDZGameUserCallLandlordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserCallLandlordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserCallLandlordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallLandlordResponse_descriptor_;
}

const ProDDZGameUserCallLandlordResponse& ProDDZGameUserCallLandlordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserCallLandlordResponse* ProDDZGameUserCallLandlordResponse::default_instance_ = NULL;

ProDDZGameUserCallLandlordResponse* ProDDZGameUserCallLandlordResponse::New() const {
  return new ProDDZGameUserCallLandlordResponse;
}

void ProDDZGameUserCallLandlordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iscallandlord_ = 0;
    score_ = 0;
    landlordseat_ = 0;
    seat_ = 0;
    issoundcall_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserCallLandlordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iscallandlord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscallandlord_)));
          set_has_iscallandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landlordSeat;
        break;
      }

      // optional int32 landlordSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordseat_)));
          set_has_landlordseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seat;
        break;
      }

      // optional int32 seat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isSoundCall;
        break;
      }

      // optional bool isSoundCall = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSoundCall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issoundcall_)));
          set_has_issoundcall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserCallLandlordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iscallandlord = 1;
  if (has_iscallandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iscallandlord(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->landlordseat(), output);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seat(), output);
  }

  // optional bool isSoundCall = 5;
  if (has_issoundcall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->issoundcall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserCallLandlordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iscallandlord = 1;
  if (has_iscallandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iscallandlord(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->landlordseat(), target);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seat(), target);
  }

  // optional bool isSoundCall = 5;
  if (has_issoundcall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->issoundcall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserCallLandlordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iscallandlord = 1;
    if (has_iscallandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscallandlord());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 landlordSeat = 3;
    if (has_landlordseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordseat());
    }

    // optional int32 seat = 4;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isSoundCall = 5;
    if (has_issoundcall()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserCallLandlordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserCallLandlordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserCallLandlordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserCallLandlordResponse::MergeFrom(const ProDDZGameUserCallLandlordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscallandlord()) {
      set_iscallandlord(from.iscallandlord());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_landlordseat()) {
      set_landlordseat(from.landlordseat());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_issoundcall()) {
      set_issoundcall(from.issoundcall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserCallLandlordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserCallLandlordResponse::CopyFrom(const ProDDZGameUserCallLandlordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserCallLandlordResponse::IsInitialized() const {

  return true;
}

void ProDDZGameUserCallLandlordResponse::Swap(ProDDZGameUserCallLandlordResponse* other) {
  if (other != this) {
    std::swap(iscallandlord_, other->iscallandlord_);
    std::swap(score_, other->score_);
    std::swap(landlordseat_, other->landlordseat_);
    std::swap(seat_, other->seat_);
    std::swap(issoundcall_, other->issoundcall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserCallLandlordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserCallLandlordResponse_descriptor_;
  metadata.reflection = ProDDZGameUserCallLandlordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserCallLandlordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallLandlordRequest_MSGID_descriptor_;
}
bool ProDDZGameUserCallLandlordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserCallLandlordRequest_MSGID ProDDZGameUserCallLandlordRequest::ID;
const ProDDZGameUserCallLandlordRequest_MSGID ProDDZGameUserCallLandlordRequest::MSGID_MIN;
const ProDDZGameUserCallLandlordRequest_MSGID ProDDZGameUserCallLandlordRequest::MSGID_MAX;
const int ProDDZGameUserCallLandlordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserCallLandlordRequest::kSeatFieldNumber;
const int ProDDZGameUserCallLandlordRequest::kIscallandlordFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserCallLandlordRequest::ProDDZGameUserCallLandlordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserCallLandlordRequest::InitAsDefaultInstance() {
}

ProDDZGameUserCallLandlordRequest::ProDDZGameUserCallLandlordRequest(const ProDDZGameUserCallLandlordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserCallLandlordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  iscallandlord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserCallLandlordRequest::~ProDDZGameUserCallLandlordRequest() {
  SharedDtor();
}

void ProDDZGameUserCallLandlordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserCallLandlordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserCallLandlordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserCallLandlordRequest_descriptor_;
}

const ProDDZGameUserCallLandlordRequest& ProDDZGameUserCallLandlordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserCallLandlordRequest* ProDDZGameUserCallLandlordRequest::default_instance_ = NULL;

ProDDZGameUserCallLandlordRequest* ProDDZGameUserCallLandlordRequest::New() const {
  return new ProDDZGameUserCallLandlordRequest;
}

void ProDDZGameUserCallLandlordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    iscallandlord_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserCallLandlordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iscallandlord;
        break;
      }

      // optional int32 iscallandlord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iscallandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscallandlord_)));
          set_has_iscallandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserCallLandlordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 iscallandlord = 2;
  if (has_iscallandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iscallandlord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserCallLandlordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 iscallandlord = 2;
  if (has_iscallandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iscallandlord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserCallLandlordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 iscallandlord = 2;
    if (has_iscallandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscallandlord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserCallLandlordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserCallLandlordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserCallLandlordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserCallLandlordRequest::MergeFrom(const ProDDZGameUserCallLandlordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_iscallandlord()) {
      set_iscallandlord(from.iscallandlord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserCallLandlordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserCallLandlordRequest::CopyFrom(const ProDDZGameUserCallLandlordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserCallLandlordRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserCallLandlordRequest::Swap(ProDDZGameUserCallLandlordRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(iscallandlord_, other->iscallandlord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserCallLandlordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserCallLandlordRequest_descriptor_;
  metadata.reflection = ProDDZGameUserCallLandlordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserQinagLandlordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserQinagLandlordResponse_MSGID_descriptor_;
}
bool ProDDZGameUserQinagLandlordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserQinagLandlordResponse_MSGID ProDDZGameUserQinagLandlordResponse::ID;
const ProDDZGameUserQinagLandlordResponse_MSGID ProDDZGameUserQinagLandlordResponse::MSGID_MIN;
const ProDDZGameUserQinagLandlordResponse_MSGID ProDDZGameUserQinagLandlordResponse::MSGID_MAX;
const int ProDDZGameUserQinagLandlordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserQinagLandlordResponse::kIsQiangLandlordFieldNumber;
const int ProDDZGameUserQinagLandlordResponse::kScoreFieldNumber;
const int ProDDZGameUserQinagLandlordResponse::kLandlordSeatFieldNumber;
const int ProDDZGameUserQinagLandlordResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserQinagLandlordResponse::ProDDZGameUserQinagLandlordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserQinagLandlordResponse::InitAsDefaultInstance() {
}

ProDDZGameUserQinagLandlordResponse::ProDDZGameUserQinagLandlordResponse(const ProDDZGameUserQinagLandlordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserQinagLandlordResponse::SharedCtor() {
  _cached_size_ = 0;
  isqianglandlord_ = 0;
  score_ = 0;
  landlordseat_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserQinagLandlordResponse::~ProDDZGameUserQinagLandlordResponse() {
  SharedDtor();
}

void ProDDZGameUserQinagLandlordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserQinagLandlordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserQinagLandlordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserQinagLandlordResponse_descriptor_;
}

const ProDDZGameUserQinagLandlordResponse& ProDDZGameUserQinagLandlordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserQinagLandlordResponse* ProDDZGameUserQinagLandlordResponse::default_instance_ = NULL;

ProDDZGameUserQinagLandlordResponse* ProDDZGameUserQinagLandlordResponse::New() const {
  return new ProDDZGameUserQinagLandlordResponse;
}

void ProDDZGameUserQinagLandlordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isqianglandlord_ = 0;
    score_ = 0;
    landlordseat_ = 0;
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserQinagLandlordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 isQiangLandlord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqianglandlord_)));
          set_has_isqianglandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_landlordSeat;
        break;
      }

      // optional int32 landlordSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_landlordSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordseat_)));
          set_has_landlordseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seat;
        break;
      }

      // optional int32 seat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserQinagLandlordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 isQiangLandlord = 1;
  if (has_isqianglandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isqianglandlord(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->landlordseat(), output);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserQinagLandlordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 isQiangLandlord = 1;
  if (has_isqianglandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isqianglandlord(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 landlordSeat = 3;
  if (has_landlordseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->landlordseat(), target);
  }

  // optional int32 seat = 4;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserQinagLandlordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 isQiangLandlord = 1;
    if (has_isqianglandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqianglandlord());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 landlordSeat = 3;
    if (has_landlordseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordseat());
    }

    // optional int32 seat = 4;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserQinagLandlordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserQinagLandlordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserQinagLandlordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserQinagLandlordResponse::MergeFrom(const ProDDZGameUserQinagLandlordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isqianglandlord()) {
      set_isqianglandlord(from.isqianglandlord());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_landlordseat()) {
      set_landlordseat(from.landlordseat());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserQinagLandlordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserQinagLandlordResponse::CopyFrom(const ProDDZGameUserQinagLandlordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserQinagLandlordResponse::IsInitialized() const {

  return true;
}

void ProDDZGameUserQinagLandlordResponse::Swap(ProDDZGameUserQinagLandlordResponse* other) {
  if (other != this) {
    std::swap(isqianglandlord_, other->isqianglandlord_);
    std::swap(score_, other->score_);
    std::swap(landlordseat_, other->landlordseat_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserQinagLandlordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserQinagLandlordResponse_descriptor_;
  metadata.reflection = ProDDZGameUserQinagLandlordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserQiangLandlordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserQiangLandlordRequest_MSGID_descriptor_;
}
bool ProDDZGameUserQiangLandlordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserQiangLandlordRequest_MSGID ProDDZGameUserQiangLandlordRequest::ID;
const ProDDZGameUserQiangLandlordRequest_MSGID ProDDZGameUserQiangLandlordRequest::MSGID_MIN;
const ProDDZGameUserQiangLandlordRequest_MSGID ProDDZGameUserQiangLandlordRequest::MSGID_MAX;
const int ProDDZGameUserQiangLandlordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserQiangLandlordRequest::kSeatFieldNumber;
const int ProDDZGameUserQiangLandlordRequest::kIsQiangLandlordFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserQiangLandlordRequest::ProDDZGameUserQiangLandlordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserQiangLandlordRequest::InitAsDefaultInstance() {
}

ProDDZGameUserQiangLandlordRequest::ProDDZGameUserQiangLandlordRequest(const ProDDZGameUserQiangLandlordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserQiangLandlordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  isqianglandlord_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserQiangLandlordRequest::~ProDDZGameUserQiangLandlordRequest() {
  SharedDtor();
}

void ProDDZGameUserQiangLandlordRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserQiangLandlordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserQiangLandlordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserQiangLandlordRequest_descriptor_;
}

const ProDDZGameUserQiangLandlordRequest& ProDDZGameUserQiangLandlordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserQiangLandlordRequest* ProDDZGameUserQiangLandlordRequest::default_instance_ = NULL;

ProDDZGameUserQiangLandlordRequest* ProDDZGameUserQiangLandlordRequest::New() const {
  return new ProDDZGameUserQiangLandlordRequest;
}

void ProDDZGameUserQiangLandlordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    isqianglandlord_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserQiangLandlordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isQiangLandlord;
        break;
      }

      // optional int32 isQiangLandlord = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isQiangLandlord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isqianglandlord_)));
          set_has_isqianglandlord();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserQiangLandlordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 isQiangLandlord = 2;
  if (has_isqianglandlord()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isqianglandlord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserQiangLandlordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 isQiangLandlord = 2;
  if (has_isqianglandlord()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isqianglandlord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserQiangLandlordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 isQiangLandlord = 2;
    if (has_isqianglandlord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isqianglandlord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserQiangLandlordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserQiangLandlordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserQiangLandlordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserQiangLandlordRequest::MergeFrom(const ProDDZGameUserQiangLandlordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_isqianglandlord()) {
      set_isqianglandlord(from.isqianglandlord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserQiangLandlordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserQiangLandlordRequest::CopyFrom(const ProDDZGameUserQiangLandlordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserQiangLandlordRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserQiangLandlordRequest::Swap(ProDDZGameUserQiangLandlordRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(isqianglandlord_, other->isqianglandlord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserQiangLandlordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserQiangLandlordRequest_descriptor_;
  metadata.reflection = ProDDZGameUserQiangLandlordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameSendLastCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendLastCard_MSGID_descriptor_;
}
bool ProDDZGameSendLastCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2246:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameSendLastCard_MSGID ProDDZGameSendLastCard::ID;
const ProDDZGameSendLastCard_MSGID ProDDZGameSendLastCard::MSGID_MIN;
const ProDDZGameSendLastCard_MSGID ProDDZGameSendLastCard::MSGID_MAX;
const int ProDDZGameSendLastCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameSendLastCard::kSeatFieldNumber;
const int ProDDZGameSendLastCard::kCbHandCardDataFieldNumber;
const int ProDDZGameSendLastCard::kLastmahsFieldNumber;
const int ProDDZGameSendLastCard::kLaiziFieldNumber;
const int ProDDZGameSendLastCard::kIsReComeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameSendLastCard::ProDDZGameSendLastCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameSendLastCard::InitAsDefaultInstance() {
}

ProDDZGameSendLastCard::ProDDZGameSendLastCard(const ProDDZGameSendLastCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameSendLastCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  laizi_ = 0;
  isrecome_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameSendLastCard::~ProDDZGameSendLastCard() {
  SharedDtor();
}

void ProDDZGameSendLastCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameSendLastCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameSendLastCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameSendLastCard_descriptor_;
}

const ProDDZGameSendLastCard& ProDDZGameSendLastCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameSendLastCard* ProDDZGameSendLastCard::default_instance_ = NULL;

ProDDZGameSendLastCard* ProDDZGameSendLastCard::New() const {
  return new ProDDZGameSendLastCard;
}

void ProDDZGameSendLastCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    laizi_ = 0;
    isrecome_ = false;
  }
  cbhandcarddata_.Clear();
  lastmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameSendLastCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cbHandCardData;
        break;
      }

      // repeated .DDZMahList cbHandCardData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cbHandCardData;
        if (input->ExpectTag(24)) goto parse_lastmahs;
        break;
      }

      // repeated int32 lastmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lastmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lastmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastmahs;
        if (input->ExpectTag(32)) goto parse_laizi;
        break;
      }

      // optional int32 laizi = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_laizi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laizi_)));
          set_has_laizi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isReCome;
        break;
      }

      // optional bool isReCome = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isReCome:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrecome_)));
          set_has_isrecome();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameSendLastCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated .DDZMahList cbHandCardData = 2;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cbhandcarddata(i), output);
  }

  // repeated int32 lastmahs = 3;
  for (int i = 0; i < this->lastmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lastmahs(i), output);
  }

  // optional int32 laizi = 4;
  if (has_laizi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->laizi(), output);
  }

  // optional bool isReCome = 5;
  if (has_isrecome()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isrecome(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameSendLastCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated .DDZMahList cbHandCardData = 2;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cbhandcarddata(i), target);
  }

  // repeated int32 lastmahs = 3;
  for (int i = 0; i < this->lastmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lastmahs(i), target);
  }

  // optional int32 laizi = 4;
  if (has_laizi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->laizi(), target);
  }

  // optional bool isReCome = 5;
  if (has_isrecome()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isrecome(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameSendLastCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 laizi = 4;
    if (has_laizi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->laizi());
    }

    // optional bool isReCome = 5;
    if (has_isrecome()) {
      total_size += 1 + 1;
    }

  }
  // repeated .DDZMahList cbHandCardData = 2;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated int32 lastmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lastmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lastmahs(i));
    }
    total_size += 1 * this->lastmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameSendLastCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameSendLastCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameSendLastCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameSendLastCard::MergeFrom(const ProDDZGameSendLastCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  lastmahs_.MergeFrom(from.lastmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_laizi()) {
      set_laizi(from.laizi());
    }
    if (from.has_isrecome()) {
      set_isrecome(from.isrecome());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameSendLastCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameSendLastCard::CopyFrom(const ProDDZGameSendLastCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameSendLastCard::IsInitialized() const {

  return true;
}

void ProDDZGameSendLastCard::Swap(ProDDZGameSendLastCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    lastmahs_.Swap(&other->lastmahs_);
    std::swap(laizi_, other->laizi_);
    std::swap(isrecome_, other->isrecome_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameSendLastCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameSendLastCard_descriptor_;
  metadata.reflection = ProDDZGameSendLastCard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserMingPaiRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserMingPaiRequest_MSGID_descriptor_;
}
bool ProDDZGameUserMingPaiRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2247:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserMingPaiRequest_MSGID ProDDZGameUserMingPaiRequest::ID;
const ProDDZGameUserMingPaiRequest_MSGID ProDDZGameUserMingPaiRequest::MSGID_MIN;
const ProDDZGameUserMingPaiRequest_MSGID ProDDZGameUserMingPaiRequest::MSGID_MAX;
const int ProDDZGameUserMingPaiRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserMingPaiRequest::kSeatFieldNumber;
const int ProDDZGameUserMingPaiRequest::kIsMingPaiFieldNumber;
const int ProDDZGameUserMingPaiRequest::kBeilvFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserMingPaiRequest::ProDDZGameUserMingPaiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserMingPaiRequest::InitAsDefaultInstance() {
}

ProDDZGameUserMingPaiRequest::ProDDZGameUserMingPaiRequest(const ProDDZGameUserMingPaiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserMingPaiRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ismingpai_ = false;
  beilv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserMingPaiRequest::~ProDDZGameUserMingPaiRequest() {
  SharedDtor();
}

void ProDDZGameUserMingPaiRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserMingPaiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserMingPaiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserMingPaiRequest_descriptor_;
}

const ProDDZGameUserMingPaiRequest& ProDDZGameUserMingPaiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserMingPaiRequest* ProDDZGameUserMingPaiRequest::default_instance_ = NULL;

ProDDZGameUserMingPaiRequest* ProDDZGameUserMingPaiRequest::New() const {
  return new ProDDZGameUserMingPaiRequest;
}

void ProDDZGameUserMingPaiRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    ismingpai_ = false;
    beilv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserMingPaiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMingPai;
        break;
      }

      // optional bool isMingPai = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMingPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismingpai_)));
          set_has_ismingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beilv;
        break;
      }

      // optional int32 beilv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beilv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beilv_)));
          set_has_beilv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserMingPaiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismingpai(), output);
  }

  // optional int32 beilv = 3;
  if (has_beilv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beilv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserMingPaiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismingpai(), target);
  }

  // optional int32 beilv = 3;
  if (has_beilv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beilv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserMingPaiRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isMingPai = 2;
    if (has_ismingpai()) {
      total_size += 1 + 1;
    }

    // optional int32 beilv = 3;
    if (has_beilv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beilv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserMingPaiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserMingPaiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserMingPaiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserMingPaiRequest::MergeFrom(const ProDDZGameUserMingPaiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_ismingpai()) {
      set_ismingpai(from.ismingpai());
    }
    if (from.has_beilv()) {
      set_beilv(from.beilv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserMingPaiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserMingPaiRequest::CopyFrom(const ProDDZGameUserMingPaiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserMingPaiRequest::IsInitialized() const {

  return true;
}

void ProDDZGameUserMingPaiRequest::Swap(ProDDZGameUserMingPaiRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(ismingpai_, other->ismingpai_);
    std::swap(beilv_, other->beilv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserMingPaiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserMingPaiRequest_descriptor_;
  metadata.reflection = ProDDZGameUserMingPaiRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameUserMingPaiResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserMingPaiResponse_MSGID_descriptor_;
}
bool ProDDZGameUserMingPaiResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2248:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameUserMingPaiResponse_MSGID ProDDZGameUserMingPaiResponse::ID;
const ProDDZGameUserMingPaiResponse_MSGID ProDDZGameUserMingPaiResponse::MSGID_MIN;
const ProDDZGameUserMingPaiResponse_MSGID ProDDZGameUserMingPaiResponse::MSGID_MAX;
const int ProDDZGameUserMingPaiResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameUserMingPaiResponse::kSeatFieldNumber;
const int ProDDZGameUserMingPaiResponse::kIsMingPaiFieldNumber;
const int ProDDZGameUserMingPaiResponse::kScoreFieldNumber;
const int ProDDZGameUserMingPaiResponse::kMingtagFieldNumber;
#endif  // !_MSC_VER

ProDDZGameUserMingPaiResponse::ProDDZGameUserMingPaiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameUserMingPaiResponse::InitAsDefaultInstance() {
}

ProDDZGameUserMingPaiResponse::ProDDZGameUserMingPaiResponse(const ProDDZGameUserMingPaiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameUserMingPaiResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ismingpai_ = false;
  score_ = 0;
  mingtag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameUserMingPaiResponse::~ProDDZGameUserMingPaiResponse() {
  SharedDtor();
}

void ProDDZGameUserMingPaiResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameUserMingPaiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameUserMingPaiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameUserMingPaiResponse_descriptor_;
}

const ProDDZGameUserMingPaiResponse& ProDDZGameUserMingPaiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameUserMingPaiResponse* ProDDZGameUserMingPaiResponse::default_instance_ = NULL;

ProDDZGameUserMingPaiResponse* ProDDZGameUserMingPaiResponse::New() const {
  return new ProDDZGameUserMingPaiResponse;
}

void ProDDZGameUserMingPaiResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    ismingpai_ = false;
    score_ = 0;
    mingtag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameUserMingPaiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isMingPai;
        break;
      }

      // optional bool isMingPai = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMingPai:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismingpai_)));
          set_has_ismingpai();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mingtag;
        break;
      }

      // optional int32 mingtag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mingtag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mingtag_)));
          set_has_mingtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameUserMingPaiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ismingpai(), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // optional int32 mingtag = 4;
  if (has_mingtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mingtag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameUserMingPaiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool isMingPai = 2;
  if (has_ismingpai()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ismingpai(), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // optional int32 mingtag = 4;
  if (has_mingtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mingtag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameUserMingPaiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isMingPai = 2;
    if (has_ismingpai()) {
      total_size += 1 + 1;
    }

    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 mingtag = 4;
    if (has_mingtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mingtag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameUserMingPaiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameUserMingPaiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameUserMingPaiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameUserMingPaiResponse::MergeFrom(const ProDDZGameUserMingPaiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_ismingpai()) {
      set_ismingpai(from.ismingpai());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_mingtag()) {
      set_mingtag(from.mingtag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameUserMingPaiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameUserMingPaiResponse::CopyFrom(const ProDDZGameUserMingPaiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameUserMingPaiResponse::IsInitialized() const {

  return true;
}

void ProDDZGameUserMingPaiResponse::Swap(ProDDZGameUserMingPaiResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(ismingpai_, other->ismingpai_);
    std::swap(score_, other->score_);
    std::swap(mingtag_, other->mingtag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameUserMingPaiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameUserMingPaiResponse_descriptor_;
  metadata.reflection = ProDDZGameUserMingPaiResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameMingNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameMingNotify_MSGID_descriptor_;
}
bool ProDDZGameMingNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2249:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameMingNotify_MSGID ProDDZGameMingNotify::ID;
const ProDDZGameMingNotify_MSGID ProDDZGameMingNotify::MSGID_MIN;
const ProDDZGameMingNotify_MSGID ProDDZGameMingNotify::MSGID_MAX;
const int ProDDZGameMingNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProDDZGameMingNotify::kSeatFieldNumber;
const int ProDDZGameMingNotify::kTagFieldNumber;
const int ProDDZGameMingNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProDDZGameMingNotify::ProDDZGameMingNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameMingNotify::InitAsDefaultInstance() {
}

ProDDZGameMingNotify::ProDDZGameMingNotify(const ProDDZGameMingNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameMingNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  tag_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameMingNotify::~ProDDZGameMingNotify() {
  SharedDtor();
}

void ProDDZGameMingNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameMingNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameMingNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameMingNotify_descriptor_;
}

const ProDDZGameMingNotify& ProDDZGameMingNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameMingNotify* ProDDZGameMingNotify::default_instance_ = NULL;

ProDDZGameMingNotify* ProDDZGameMingNotify::New() const {
  return new ProDDZGameMingNotify;
}

void ProDDZGameMingNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    tag_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameMingNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tag;
        break;
      }

      // optional int32 tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_time;
        break;
      }

      // optional float time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProDDZGameMingNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional int32 tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tag(), output);
  }

  // optional float time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameMingNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional int32 tag = 2;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tag(), target);
  }

  // optional float time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameMingNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional float time = 3;
    if (has_time()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameMingNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameMingNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameMingNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameMingNotify::MergeFrom(const ProDDZGameMingNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameMingNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameMingNotify::CopyFrom(const ProDDZGameMingNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameMingNotify::IsInitialized() const {

  return true;
}

void ProDDZGameMingNotify::Swap(ProDDZGameMingNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(tag_, other->tag_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameMingNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameMingNotify_descriptor_;
  metadata.reflection = ProDDZGameMingNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProDDZGameStartAgain_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameStartAgain_MSGID_descriptor_;
}
bool ProDDZGameStartAgain_MSGID_IsValid(int value) {
  switch(value) {
    case 2250:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProDDZGameStartAgain_MSGID ProDDZGameStartAgain::ID;
const ProDDZGameStartAgain_MSGID ProDDZGameStartAgain::MSGID_MIN;
const ProDDZGameStartAgain_MSGID ProDDZGameStartAgain::MSGID_MAX;
const int ProDDZGameStartAgain::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProDDZGameStartAgain::ProDDZGameStartAgain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProDDZGameStartAgain::InitAsDefaultInstance() {
}

ProDDZGameStartAgain::ProDDZGameStartAgain(const ProDDZGameStartAgain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProDDZGameStartAgain::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProDDZGameStartAgain::~ProDDZGameStartAgain() {
  SharedDtor();
}

void ProDDZGameStartAgain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProDDZGameStartAgain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProDDZGameStartAgain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProDDZGameStartAgain_descriptor_;
}

const ProDDZGameStartAgain& ProDDZGameStartAgain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ddzpk_2eproto();
  return *default_instance_;
}

ProDDZGameStartAgain* ProDDZGameStartAgain::default_instance_ = NULL;

ProDDZGameStartAgain* ProDDZGameStartAgain::New() const {
  return new ProDDZGameStartAgain;
}

void ProDDZGameStartAgain::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProDDZGameStartAgain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProDDZGameStartAgain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProDDZGameStartAgain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProDDZGameStartAgain::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProDDZGameStartAgain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProDDZGameStartAgain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProDDZGameStartAgain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProDDZGameStartAgain::MergeFrom(const ProDDZGameStartAgain& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProDDZGameStartAgain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProDDZGameStartAgain::CopyFrom(const ProDDZGameStartAgain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProDDZGameStartAgain::IsInitialized() const {

  return true;
}

void ProDDZGameStartAgain::Swap(ProDDZGameStartAgain* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProDDZGameStartAgain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProDDZGameStartAgain_descriptor_;
  metadata.reflection = ProDDZGameStartAgain_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
