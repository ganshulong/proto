// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lkpk.proto

#ifndef PROTOBUF_lkpk_2eproto__INCLUDED
#define PROTOBUF_lkpk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lkpk_2eproto();
void protobuf_AssignDesc_lkpk_2eproto();
void protobuf_ShutdownFile_lkpk_2eproto();

class ProPKGameStatusResponse;
class ProPKGameDeskInfoResponse;
class ProPKGameReadyNotify;
class ProPKGameReadyRequest;
class ProPKGameReadyResponse;
class ProPKGameStart;
class ProPKGameDiceNotify;
class ProPKGameDiceRequest;
class ProPKGameDiceResult;
class ProPKGameSendMahs;
class ProPKGameKingData;
class ProPKGameOutMahsResponse;
class ProPKGameTimerPower;
class ProPKGameOperateNotify;
class ProPKGameOperateResult;
class ProPKGameOperateRequest;
class ProPKGameTrust;
class ProPKGameOutMahRequest;
class ProPKGameCatchCard;
class PKMahList;
class PKScoreList;
class PKAwardList;
class ProPKGameEnd;
class ProPKGameQuickSoundRequest;
class ProPKGameQuickSoundResponse;
class ProPKGameSendDiscardMahs;
class PKWeaveItem;
class PKWeaveItems;
class ProPKGameSendActionMahs;
class ProPKGameBrokenRequest;
class ProPKGameBrokenOperate;
class ProPKGameBrokenNotify;
class ProPKGameRuleConfig;
class ProPKGameBrokenStatus;
class ProPKGameDataResp;
class ProPKGameRecordRequest;
class ProPKGameRecordResponse;
class ProPKGameUserLocationRequest;
class ProPKGameSyncCardResponse;
class ProPKGameUserPhoneStatusRequest;
class ProPKGameUserGiveUpRequest;
class ProPKGameUserHintRequest;
class ProPKGameUserHintResponse;
class ProPKGameUserCallScoreResponse;
class ProPKGameUserCallScoreRequest;

enum ProPKGameStatusResponse_MSGID {
  ProPKGameStatusResponse_MSGID_ID = 2200
};
bool ProPKGameStatusResponse_MSGID_IsValid(int value);
const ProPKGameStatusResponse_MSGID ProPKGameStatusResponse_MSGID_MSGID_MIN = ProPKGameStatusResponse_MSGID_ID;
const ProPKGameStatusResponse_MSGID ProPKGameStatusResponse_MSGID_MSGID_MAX = ProPKGameStatusResponse_MSGID_ID;
const int ProPKGameStatusResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameStatusResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameStatusResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameStatusResponse_MSGID_Name(ProPKGameStatusResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameStatusResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameStatusResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameStatusResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameStatusResponse_MSGID>(
    ProPKGameStatusResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameDeskInfoResponse_MSGID {
  ProPKGameDeskInfoResponse_MSGID_ID = 2201
};
bool ProPKGameDeskInfoResponse_MSGID_IsValid(int value);
const ProPKGameDeskInfoResponse_MSGID ProPKGameDeskInfoResponse_MSGID_MSGID_MIN = ProPKGameDeskInfoResponse_MSGID_ID;
const ProPKGameDeskInfoResponse_MSGID ProPKGameDeskInfoResponse_MSGID_MSGID_MAX = ProPKGameDeskInfoResponse_MSGID_ID;
const int ProPKGameDeskInfoResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameDeskInfoResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameDeskInfoResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameDeskInfoResponse_MSGID_Name(ProPKGameDeskInfoResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameDeskInfoResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameDeskInfoResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameDeskInfoResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameDeskInfoResponse_MSGID>(
    ProPKGameDeskInfoResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameReadyNotify_MSGID {
  ProPKGameReadyNotify_MSGID_ID = 2202
};
bool ProPKGameReadyNotify_MSGID_IsValid(int value);
const ProPKGameReadyNotify_MSGID ProPKGameReadyNotify_MSGID_MSGID_MIN = ProPKGameReadyNotify_MSGID_ID;
const ProPKGameReadyNotify_MSGID ProPKGameReadyNotify_MSGID_MSGID_MAX = ProPKGameReadyNotify_MSGID_ID;
const int ProPKGameReadyNotify_MSGID_MSGID_ARRAYSIZE = ProPKGameReadyNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameReadyNotify_MSGID_descriptor();
inline const ::std::string& ProPKGameReadyNotify_MSGID_Name(ProPKGameReadyNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameReadyNotify_MSGID_descriptor(), value);
}
inline bool ProPKGameReadyNotify_MSGID_Parse(
    const ::std::string& name, ProPKGameReadyNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameReadyNotify_MSGID>(
    ProPKGameReadyNotify_MSGID_descriptor(), name, value);
}
enum ProPKGameReadyRequest_MSGID {
  ProPKGameReadyRequest_MSGID_ID = 2203
};
bool ProPKGameReadyRequest_MSGID_IsValid(int value);
const ProPKGameReadyRequest_MSGID ProPKGameReadyRequest_MSGID_MSGID_MIN = ProPKGameReadyRequest_MSGID_ID;
const ProPKGameReadyRequest_MSGID ProPKGameReadyRequest_MSGID_MSGID_MAX = ProPKGameReadyRequest_MSGID_ID;
const int ProPKGameReadyRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameReadyRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameReadyRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameReadyRequest_MSGID_Name(ProPKGameReadyRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameReadyRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameReadyRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameReadyRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameReadyRequest_MSGID>(
    ProPKGameReadyRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameReadyResponse_MSGID {
  ProPKGameReadyResponse_MSGID_ID = 2204
};
bool ProPKGameReadyResponse_MSGID_IsValid(int value);
const ProPKGameReadyResponse_MSGID ProPKGameReadyResponse_MSGID_MSGID_MIN = ProPKGameReadyResponse_MSGID_ID;
const ProPKGameReadyResponse_MSGID ProPKGameReadyResponse_MSGID_MSGID_MAX = ProPKGameReadyResponse_MSGID_ID;
const int ProPKGameReadyResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameReadyResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameReadyResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameReadyResponse_MSGID_Name(ProPKGameReadyResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameReadyResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameReadyResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameReadyResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameReadyResponse_MSGID>(
    ProPKGameReadyResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameStart_MSGID {
  ProPKGameStart_MSGID_ID = 2205
};
bool ProPKGameStart_MSGID_IsValid(int value);
const ProPKGameStart_MSGID ProPKGameStart_MSGID_MSGID_MIN = ProPKGameStart_MSGID_ID;
const ProPKGameStart_MSGID ProPKGameStart_MSGID_MSGID_MAX = ProPKGameStart_MSGID_ID;
const int ProPKGameStart_MSGID_MSGID_ARRAYSIZE = ProPKGameStart_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameStart_MSGID_descriptor();
inline const ::std::string& ProPKGameStart_MSGID_Name(ProPKGameStart_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameStart_MSGID_descriptor(), value);
}
inline bool ProPKGameStart_MSGID_Parse(
    const ::std::string& name, ProPKGameStart_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameStart_MSGID>(
    ProPKGameStart_MSGID_descriptor(), name, value);
}
enum ProPKGameDiceNotify_MSGID {
  ProPKGameDiceNotify_MSGID_ID = 2206
};
bool ProPKGameDiceNotify_MSGID_IsValid(int value);
const ProPKGameDiceNotify_MSGID ProPKGameDiceNotify_MSGID_MSGID_MIN = ProPKGameDiceNotify_MSGID_ID;
const ProPKGameDiceNotify_MSGID ProPKGameDiceNotify_MSGID_MSGID_MAX = ProPKGameDiceNotify_MSGID_ID;
const int ProPKGameDiceNotify_MSGID_MSGID_ARRAYSIZE = ProPKGameDiceNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameDiceNotify_MSGID_descriptor();
inline const ::std::string& ProPKGameDiceNotify_MSGID_Name(ProPKGameDiceNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameDiceNotify_MSGID_descriptor(), value);
}
inline bool ProPKGameDiceNotify_MSGID_Parse(
    const ::std::string& name, ProPKGameDiceNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameDiceNotify_MSGID>(
    ProPKGameDiceNotify_MSGID_descriptor(), name, value);
}
enum ProPKGameDiceRequest_MSGID {
  ProPKGameDiceRequest_MSGID_ID = 2207
};
bool ProPKGameDiceRequest_MSGID_IsValid(int value);
const ProPKGameDiceRequest_MSGID ProPKGameDiceRequest_MSGID_MSGID_MIN = ProPKGameDiceRequest_MSGID_ID;
const ProPKGameDiceRequest_MSGID ProPKGameDiceRequest_MSGID_MSGID_MAX = ProPKGameDiceRequest_MSGID_ID;
const int ProPKGameDiceRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameDiceRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameDiceRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameDiceRequest_MSGID_Name(ProPKGameDiceRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameDiceRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameDiceRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameDiceRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameDiceRequest_MSGID>(
    ProPKGameDiceRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameDiceResult_MSGID {
  ProPKGameDiceResult_MSGID_ID = 2208
};
bool ProPKGameDiceResult_MSGID_IsValid(int value);
const ProPKGameDiceResult_MSGID ProPKGameDiceResult_MSGID_MSGID_MIN = ProPKGameDiceResult_MSGID_ID;
const ProPKGameDiceResult_MSGID ProPKGameDiceResult_MSGID_MSGID_MAX = ProPKGameDiceResult_MSGID_ID;
const int ProPKGameDiceResult_MSGID_MSGID_ARRAYSIZE = ProPKGameDiceResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameDiceResult_MSGID_descriptor();
inline const ::std::string& ProPKGameDiceResult_MSGID_Name(ProPKGameDiceResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameDiceResult_MSGID_descriptor(), value);
}
inline bool ProPKGameDiceResult_MSGID_Parse(
    const ::std::string& name, ProPKGameDiceResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameDiceResult_MSGID>(
    ProPKGameDiceResult_MSGID_descriptor(), name, value);
}
enum ProPKGameSendMahs_MSGID {
  ProPKGameSendMahs_MSGID_ID = 2209
};
bool ProPKGameSendMahs_MSGID_IsValid(int value);
const ProPKGameSendMahs_MSGID ProPKGameSendMahs_MSGID_MSGID_MIN = ProPKGameSendMahs_MSGID_ID;
const ProPKGameSendMahs_MSGID ProPKGameSendMahs_MSGID_MSGID_MAX = ProPKGameSendMahs_MSGID_ID;
const int ProPKGameSendMahs_MSGID_MSGID_ARRAYSIZE = ProPKGameSendMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameSendMahs_MSGID_descriptor();
inline const ::std::string& ProPKGameSendMahs_MSGID_Name(ProPKGameSendMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameSendMahs_MSGID_descriptor(), value);
}
inline bool ProPKGameSendMahs_MSGID_Parse(
    const ::std::string& name, ProPKGameSendMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameSendMahs_MSGID>(
    ProPKGameSendMahs_MSGID_descriptor(), name, value);
}
enum ProPKGameKingData_MSGID {
  ProPKGameKingData_MSGID_ID = 2210
};
bool ProPKGameKingData_MSGID_IsValid(int value);
const ProPKGameKingData_MSGID ProPKGameKingData_MSGID_MSGID_MIN = ProPKGameKingData_MSGID_ID;
const ProPKGameKingData_MSGID ProPKGameKingData_MSGID_MSGID_MAX = ProPKGameKingData_MSGID_ID;
const int ProPKGameKingData_MSGID_MSGID_ARRAYSIZE = ProPKGameKingData_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameKingData_MSGID_descriptor();
inline const ::std::string& ProPKGameKingData_MSGID_Name(ProPKGameKingData_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameKingData_MSGID_descriptor(), value);
}
inline bool ProPKGameKingData_MSGID_Parse(
    const ::std::string& name, ProPKGameKingData_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameKingData_MSGID>(
    ProPKGameKingData_MSGID_descriptor(), name, value);
}
enum ProPKGameOutMahsResponse_MSGID {
  ProPKGameOutMahsResponse_MSGID_ID = 2211
};
bool ProPKGameOutMahsResponse_MSGID_IsValid(int value);
const ProPKGameOutMahsResponse_MSGID ProPKGameOutMahsResponse_MSGID_MSGID_MIN = ProPKGameOutMahsResponse_MSGID_ID;
const ProPKGameOutMahsResponse_MSGID ProPKGameOutMahsResponse_MSGID_MSGID_MAX = ProPKGameOutMahsResponse_MSGID_ID;
const int ProPKGameOutMahsResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameOutMahsResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameOutMahsResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameOutMahsResponse_MSGID_Name(ProPKGameOutMahsResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameOutMahsResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameOutMahsResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameOutMahsResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameOutMahsResponse_MSGID>(
    ProPKGameOutMahsResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameTimerPower_MSGID {
  ProPKGameTimerPower_MSGID_ID = 2212
};
bool ProPKGameTimerPower_MSGID_IsValid(int value);
const ProPKGameTimerPower_MSGID ProPKGameTimerPower_MSGID_MSGID_MIN = ProPKGameTimerPower_MSGID_ID;
const ProPKGameTimerPower_MSGID ProPKGameTimerPower_MSGID_MSGID_MAX = ProPKGameTimerPower_MSGID_ID;
const int ProPKGameTimerPower_MSGID_MSGID_ARRAYSIZE = ProPKGameTimerPower_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameTimerPower_MSGID_descriptor();
inline const ::std::string& ProPKGameTimerPower_MSGID_Name(ProPKGameTimerPower_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameTimerPower_MSGID_descriptor(), value);
}
inline bool ProPKGameTimerPower_MSGID_Parse(
    const ::std::string& name, ProPKGameTimerPower_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameTimerPower_MSGID>(
    ProPKGameTimerPower_MSGID_descriptor(), name, value);
}
enum ProPKGameOperateNotify_MSGID {
  ProPKGameOperateNotify_MSGID_ID = 2213
};
bool ProPKGameOperateNotify_MSGID_IsValid(int value);
const ProPKGameOperateNotify_MSGID ProPKGameOperateNotify_MSGID_MSGID_MIN = ProPKGameOperateNotify_MSGID_ID;
const ProPKGameOperateNotify_MSGID ProPKGameOperateNotify_MSGID_MSGID_MAX = ProPKGameOperateNotify_MSGID_ID;
const int ProPKGameOperateNotify_MSGID_MSGID_ARRAYSIZE = ProPKGameOperateNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameOperateNotify_MSGID_descriptor();
inline const ::std::string& ProPKGameOperateNotify_MSGID_Name(ProPKGameOperateNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameOperateNotify_MSGID_descriptor(), value);
}
inline bool ProPKGameOperateNotify_MSGID_Parse(
    const ::std::string& name, ProPKGameOperateNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameOperateNotify_MSGID>(
    ProPKGameOperateNotify_MSGID_descriptor(), name, value);
}
enum ProPKGameOperateResult_MSGID {
  ProPKGameOperateResult_MSGID_ID = 2214
};
bool ProPKGameOperateResult_MSGID_IsValid(int value);
const ProPKGameOperateResult_MSGID ProPKGameOperateResult_MSGID_MSGID_MIN = ProPKGameOperateResult_MSGID_ID;
const ProPKGameOperateResult_MSGID ProPKGameOperateResult_MSGID_MSGID_MAX = ProPKGameOperateResult_MSGID_ID;
const int ProPKGameOperateResult_MSGID_MSGID_ARRAYSIZE = ProPKGameOperateResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameOperateResult_MSGID_descriptor();
inline const ::std::string& ProPKGameOperateResult_MSGID_Name(ProPKGameOperateResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameOperateResult_MSGID_descriptor(), value);
}
inline bool ProPKGameOperateResult_MSGID_Parse(
    const ::std::string& name, ProPKGameOperateResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameOperateResult_MSGID>(
    ProPKGameOperateResult_MSGID_descriptor(), name, value);
}
enum ProPKGameOperateRequest_MSGID {
  ProPKGameOperateRequest_MSGID_ID = 2215
};
bool ProPKGameOperateRequest_MSGID_IsValid(int value);
const ProPKGameOperateRequest_MSGID ProPKGameOperateRequest_MSGID_MSGID_MIN = ProPKGameOperateRequest_MSGID_ID;
const ProPKGameOperateRequest_MSGID ProPKGameOperateRequest_MSGID_MSGID_MAX = ProPKGameOperateRequest_MSGID_ID;
const int ProPKGameOperateRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameOperateRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameOperateRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameOperateRequest_MSGID_Name(ProPKGameOperateRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameOperateRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameOperateRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameOperateRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameOperateRequest_MSGID>(
    ProPKGameOperateRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameTrust_MSGID {
  ProPKGameTrust_MSGID_ID = 2216
};
bool ProPKGameTrust_MSGID_IsValid(int value);
const ProPKGameTrust_MSGID ProPKGameTrust_MSGID_MSGID_MIN = ProPKGameTrust_MSGID_ID;
const ProPKGameTrust_MSGID ProPKGameTrust_MSGID_MSGID_MAX = ProPKGameTrust_MSGID_ID;
const int ProPKGameTrust_MSGID_MSGID_ARRAYSIZE = ProPKGameTrust_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameTrust_MSGID_descriptor();
inline const ::std::string& ProPKGameTrust_MSGID_Name(ProPKGameTrust_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameTrust_MSGID_descriptor(), value);
}
inline bool ProPKGameTrust_MSGID_Parse(
    const ::std::string& name, ProPKGameTrust_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameTrust_MSGID>(
    ProPKGameTrust_MSGID_descriptor(), name, value);
}
enum ProPKGameOutMahRequest_MSGID {
  ProPKGameOutMahRequest_MSGID_ID = 2217
};
bool ProPKGameOutMahRequest_MSGID_IsValid(int value);
const ProPKGameOutMahRequest_MSGID ProPKGameOutMahRequest_MSGID_MSGID_MIN = ProPKGameOutMahRequest_MSGID_ID;
const ProPKGameOutMahRequest_MSGID ProPKGameOutMahRequest_MSGID_MSGID_MAX = ProPKGameOutMahRequest_MSGID_ID;
const int ProPKGameOutMahRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameOutMahRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameOutMahRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameOutMahRequest_MSGID_Name(ProPKGameOutMahRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameOutMahRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameOutMahRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameOutMahRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameOutMahRequest_MSGID>(
    ProPKGameOutMahRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameCatchCard_MSGID {
  ProPKGameCatchCard_MSGID_ID = 2218
};
bool ProPKGameCatchCard_MSGID_IsValid(int value);
const ProPKGameCatchCard_MSGID ProPKGameCatchCard_MSGID_MSGID_MIN = ProPKGameCatchCard_MSGID_ID;
const ProPKGameCatchCard_MSGID ProPKGameCatchCard_MSGID_MSGID_MAX = ProPKGameCatchCard_MSGID_ID;
const int ProPKGameCatchCard_MSGID_MSGID_ARRAYSIZE = ProPKGameCatchCard_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameCatchCard_MSGID_descriptor();
inline const ::std::string& ProPKGameCatchCard_MSGID_Name(ProPKGameCatchCard_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameCatchCard_MSGID_descriptor(), value);
}
inline bool ProPKGameCatchCard_MSGID_Parse(
    const ::std::string& name, ProPKGameCatchCard_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameCatchCard_MSGID>(
    ProPKGameCatchCard_MSGID_descriptor(), name, value);
}
enum ProPKGameEnd_MSGID {
  ProPKGameEnd_MSGID_ID = 2219
};
bool ProPKGameEnd_MSGID_IsValid(int value);
const ProPKGameEnd_MSGID ProPKGameEnd_MSGID_MSGID_MIN = ProPKGameEnd_MSGID_ID;
const ProPKGameEnd_MSGID ProPKGameEnd_MSGID_MSGID_MAX = ProPKGameEnd_MSGID_ID;
const int ProPKGameEnd_MSGID_MSGID_ARRAYSIZE = ProPKGameEnd_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameEnd_MSGID_descriptor();
inline const ::std::string& ProPKGameEnd_MSGID_Name(ProPKGameEnd_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameEnd_MSGID_descriptor(), value);
}
inline bool ProPKGameEnd_MSGID_Parse(
    const ::std::string& name, ProPKGameEnd_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameEnd_MSGID>(
    ProPKGameEnd_MSGID_descriptor(), name, value);
}
enum ProPKGameQuickSoundRequest_MSGID {
  ProPKGameQuickSoundRequest_MSGID_ID = 2220
};
bool ProPKGameQuickSoundRequest_MSGID_IsValid(int value);
const ProPKGameQuickSoundRequest_MSGID ProPKGameQuickSoundRequest_MSGID_MSGID_MIN = ProPKGameQuickSoundRequest_MSGID_ID;
const ProPKGameQuickSoundRequest_MSGID ProPKGameQuickSoundRequest_MSGID_MSGID_MAX = ProPKGameQuickSoundRequest_MSGID_ID;
const int ProPKGameQuickSoundRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameQuickSoundRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameQuickSoundRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameQuickSoundRequest_MSGID_Name(ProPKGameQuickSoundRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameQuickSoundRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameQuickSoundRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameQuickSoundRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameQuickSoundRequest_MSGID>(
    ProPKGameQuickSoundRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameQuickSoundResponse_MSGID {
  ProPKGameQuickSoundResponse_MSGID_ID = 2221
};
bool ProPKGameQuickSoundResponse_MSGID_IsValid(int value);
const ProPKGameQuickSoundResponse_MSGID ProPKGameQuickSoundResponse_MSGID_MSGID_MIN = ProPKGameQuickSoundResponse_MSGID_ID;
const ProPKGameQuickSoundResponse_MSGID ProPKGameQuickSoundResponse_MSGID_MSGID_MAX = ProPKGameQuickSoundResponse_MSGID_ID;
const int ProPKGameQuickSoundResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameQuickSoundResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameQuickSoundResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameQuickSoundResponse_MSGID_Name(ProPKGameQuickSoundResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameQuickSoundResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameQuickSoundResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameQuickSoundResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameQuickSoundResponse_MSGID>(
    ProPKGameQuickSoundResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameSendDiscardMahs_MSGID {
  ProPKGameSendDiscardMahs_MSGID_ID = 2222
};
bool ProPKGameSendDiscardMahs_MSGID_IsValid(int value);
const ProPKGameSendDiscardMahs_MSGID ProPKGameSendDiscardMahs_MSGID_MSGID_MIN = ProPKGameSendDiscardMahs_MSGID_ID;
const ProPKGameSendDiscardMahs_MSGID ProPKGameSendDiscardMahs_MSGID_MSGID_MAX = ProPKGameSendDiscardMahs_MSGID_ID;
const int ProPKGameSendDiscardMahs_MSGID_MSGID_ARRAYSIZE = ProPKGameSendDiscardMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameSendDiscardMahs_MSGID_descriptor();
inline const ::std::string& ProPKGameSendDiscardMahs_MSGID_Name(ProPKGameSendDiscardMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameSendDiscardMahs_MSGID_descriptor(), value);
}
inline bool ProPKGameSendDiscardMahs_MSGID_Parse(
    const ::std::string& name, ProPKGameSendDiscardMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameSendDiscardMahs_MSGID>(
    ProPKGameSendDiscardMahs_MSGID_descriptor(), name, value);
}
enum ProPKGameSendActionMahs_MSGID {
  ProPKGameSendActionMahs_MSGID_ID = 2223
};
bool ProPKGameSendActionMahs_MSGID_IsValid(int value);
const ProPKGameSendActionMahs_MSGID ProPKGameSendActionMahs_MSGID_MSGID_MIN = ProPKGameSendActionMahs_MSGID_ID;
const ProPKGameSendActionMahs_MSGID ProPKGameSendActionMahs_MSGID_MSGID_MAX = ProPKGameSendActionMahs_MSGID_ID;
const int ProPKGameSendActionMahs_MSGID_MSGID_ARRAYSIZE = ProPKGameSendActionMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameSendActionMahs_MSGID_descriptor();
inline const ::std::string& ProPKGameSendActionMahs_MSGID_Name(ProPKGameSendActionMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameSendActionMahs_MSGID_descriptor(), value);
}
inline bool ProPKGameSendActionMahs_MSGID_Parse(
    const ::std::string& name, ProPKGameSendActionMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameSendActionMahs_MSGID>(
    ProPKGameSendActionMahs_MSGID_descriptor(), name, value);
}
enum ProPKGameBrokenRequest_MSGID {
  ProPKGameBrokenRequest_MSGID_ID = 2224
};
bool ProPKGameBrokenRequest_MSGID_IsValid(int value);
const ProPKGameBrokenRequest_MSGID ProPKGameBrokenRequest_MSGID_MSGID_MIN = ProPKGameBrokenRequest_MSGID_ID;
const ProPKGameBrokenRequest_MSGID ProPKGameBrokenRequest_MSGID_MSGID_MAX = ProPKGameBrokenRequest_MSGID_ID;
const int ProPKGameBrokenRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameBrokenRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameBrokenRequest_MSGID_Name(ProPKGameBrokenRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameBrokenRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameBrokenRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameBrokenRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameBrokenRequest_MSGID>(
    ProPKGameBrokenRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameBrokenOperate_MSGID {
  ProPKGameBrokenOperate_MSGID_ID = 2225
};
bool ProPKGameBrokenOperate_MSGID_IsValid(int value);
const ProPKGameBrokenOperate_MSGID ProPKGameBrokenOperate_MSGID_MSGID_MIN = ProPKGameBrokenOperate_MSGID_ID;
const ProPKGameBrokenOperate_MSGID ProPKGameBrokenOperate_MSGID_MSGID_MAX = ProPKGameBrokenOperate_MSGID_ID;
const int ProPKGameBrokenOperate_MSGID_MSGID_ARRAYSIZE = ProPKGameBrokenOperate_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenOperate_MSGID_descriptor();
inline const ::std::string& ProPKGameBrokenOperate_MSGID_Name(ProPKGameBrokenOperate_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameBrokenOperate_MSGID_descriptor(), value);
}
inline bool ProPKGameBrokenOperate_MSGID_Parse(
    const ::std::string& name, ProPKGameBrokenOperate_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameBrokenOperate_MSGID>(
    ProPKGameBrokenOperate_MSGID_descriptor(), name, value);
}
enum ProPKGameBrokenNotify_MSGID {
  ProPKGameBrokenNotify_MSGID_ID = 2226
};
bool ProPKGameBrokenNotify_MSGID_IsValid(int value);
const ProPKGameBrokenNotify_MSGID ProPKGameBrokenNotify_MSGID_MSGID_MIN = ProPKGameBrokenNotify_MSGID_ID;
const ProPKGameBrokenNotify_MSGID ProPKGameBrokenNotify_MSGID_MSGID_MAX = ProPKGameBrokenNotify_MSGID_ID;
const int ProPKGameBrokenNotify_MSGID_MSGID_ARRAYSIZE = ProPKGameBrokenNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenNotify_MSGID_descriptor();
inline const ::std::string& ProPKGameBrokenNotify_MSGID_Name(ProPKGameBrokenNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameBrokenNotify_MSGID_descriptor(), value);
}
inline bool ProPKGameBrokenNotify_MSGID_Parse(
    const ::std::string& name, ProPKGameBrokenNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameBrokenNotify_MSGID>(
    ProPKGameBrokenNotify_MSGID_descriptor(), name, value);
}
enum ProPKGameRuleConfig_MSGID {
  ProPKGameRuleConfig_MSGID_ID = 2227
};
bool ProPKGameRuleConfig_MSGID_IsValid(int value);
const ProPKGameRuleConfig_MSGID ProPKGameRuleConfig_MSGID_MSGID_MIN = ProPKGameRuleConfig_MSGID_ID;
const ProPKGameRuleConfig_MSGID ProPKGameRuleConfig_MSGID_MSGID_MAX = ProPKGameRuleConfig_MSGID_ID;
const int ProPKGameRuleConfig_MSGID_MSGID_ARRAYSIZE = ProPKGameRuleConfig_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameRuleConfig_MSGID_descriptor();
inline const ::std::string& ProPKGameRuleConfig_MSGID_Name(ProPKGameRuleConfig_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameRuleConfig_MSGID_descriptor(), value);
}
inline bool ProPKGameRuleConfig_MSGID_Parse(
    const ::std::string& name, ProPKGameRuleConfig_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameRuleConfig_MSGID>(
    ProPKGameRuleConfig_MSGID_descriptor(), name, value);
}
enum ProPKGameBrokenStatus_MSGID {
  ProPKGameBrokenStatus_MSGID_ID = 2228
};
bool ProPKGameBrokenStatus_MSGID_IsValid(int value);
const ProPKGameBrokenStatus_MSGID ProPKGameBrokenStatus_MSGID_MSGID_MIN = ProPKGameBrokenStatus_MSGID_ID;
const ProPKGameBrokenStatus_MSGID ProPKGameBrokenStatus_MSGID_MSGID_MAX = ProPKGameBrokenStatus_MSGID_ID;
const int ProPKGameBrokenStatus_MSGID_MSGID_ARRAYSIZE = ProPKGameBrokenStatus_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameBrokenStatus_MSGID_descriptor();
inline const ::std::string& ProPKGameBrokenStatus_MSGID_Name(ProPKGameBrokenStatus_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameBrokenStatus_MSGID_descriptor(), value);
}
inline bool ProPKGameBrokenStatus_MSGID_Parse(
    const ::std::string& name, ProPKGameBrokenStatus_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameBrokenStatus_MSGID>(
    ProPKGameBrokenStatus_MSGID_descriptor(), name, value);
}
enum ProPKGameDataResp_MSGID {
  ProPKGameDataResp_MSGID_ID = 2229
};
bool ProPKGameDataResp_MSGID_IsValid(int value);
const ProPKGameDataResp_MSGID ProPKGameDataResp_MSGID_MSGID_MIN = ProPKGameDataResp_MSGID_ID;
const ProPKGameDataResp_MSGID ProPKGameDataResp_MSGID_MSGID_MAX = ProPKGameDataResp_MSGID_ID;
const int ProPKGameDataResp_MSGID_MSGID_ARRAYSIZE = ProPKGameDataResp_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameDataResp_MSGID_descriptor();
inline const ::std::string& ProPKGameDataResp_MSGID_Name(ProPKGameDataResp_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameDataResp_MSGID_descriptor(), value);
}
inline bool ProPKGameDataResp_MSGID_Parse(
    const ::std::string& name, ProPKGameDataResp_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameDataResp_MSGID>(
    ProPKGameDataResp_MSGID_descriptor(), name, value);
}
enum ProPKGameRecordRequest_MSGID {
  ProPKGameRecordRequest_MSGID_ID = 2230
};
bool ProPKGameRecordRequest_MSGID_IsValid(int value);
const ProPKGameRecordRequest_MSGID ProPKGameRecordRequest_MSGID_MSGID_MIN = ProPKGameRecordRequest_MSGID_ID;
const ProPKGameRecordRequest_MSGID ProPKGameRecordRequest_MSGID_MSGID_MAX = ProPKGameRecordRequest_MSGID_ID;
const int ProPKGameRecordRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameRecordRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameRecordRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameRecordRequest_MSGID_Name(ProPKGameRecordRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameRecordRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameRecordRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameRecordRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameRecordRequest_MSGID>(
    ProPKGameRecordRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameRecordResponse_MSGID {
  ProPKGameRecordResponse_MSGID_ID = 2231
};
bool ProPKGameRecordResponse_MSGID_IsValid(int value);
const ProPKGameRecordResponse_MSGID ProPKGameRecordResponse_MSGID_MSGID_MIN = ProPKGameRecordResponse_MSGID_ID;
const ProPKGameRecordResponse_MSGID ProPKGameRecordResponse_MSGID_MSGID_MAX = ProPKGameRecordResponse_MSGID_ID;
const int ProPKGameRecordResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameRecordResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameRecordResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameRecordResponse_MSGID_Name(ProPKGameRecordResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameRecordResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameRecordResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameRecordResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameRecordResponse_MSGID>(
    ProPKGameRecordResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameUserLocationRequest_MSGID {
  ProPKGameUserLocationRequest_MSGID_ID = 2232
};
bool ProPKGameUserLocationRequest_MSGID_IsValid(int value);
const ProPKGameUserLocationRequest_MSGID ProPKGameUserLocationRequest_MSGID_MSGID_MIN = ProPKGameUserLocationRequest_MSGID_ID;
const ProPKGameUserLocationRequest_MSGID ProPKGameUserLocationRequest_MSGID_MSGID_MAX = ProPKGameUserLocationRequest_MSGID_ID;
const int ProPKGameUserLocationRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameUserLocationRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserLocationRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameUserLocationRequest_MSGID_Name(ProPKGameUserLocationRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserLocationRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameUserLocationRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameUserLocationRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserLocationRequest_MSGID>(
    ProPKGameUserLocationRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameSyncCardResponse_MSGID {
  ProPKGameSyncCardResponse_MSGID_ID = 2233
};
bool ProPKGameSyncCardResponse_MSGID_IsValid(int value);
const ProPKGameSyncCardResponse_MSGID ProPKGameSyncCardResponse_MSGID_MSGID_MIN = ProPKGameSyncCardResponse_MSGID_ID;
const ProPKGameSyncCardResponse_MSGID ProPKGameSyncCardResponse_MSGID_MSGID_MAX = ProPKGameSyncCardResponse_MSGID_ID;
const int ProPKGameSyncCardResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameSyncCardResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameSyncCardResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameSyncCardResponse_MSGID_Name(ProPKGameSyncCardResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameSyncCardResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameSyncCardResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameSyncCardResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameSyncCardResponse_MSGID>(
    ProPKGameSyncCardResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameUserPhoneStatusRequest_MSGID {
  ProPKGameUserPhoneStatusRequest_MSGID_ID = 2234
};
bool ProPKGameUserPhoneStatusRequest_MSGID_IsValid(int value);
const ProPKGameUserPhoneStatusRequest_MSGID ProPKGameUserPhoneStatusRequest_MSGID_MSGID_MIN = ProPKGameUserPhoneStatusRequest_MSGID_ID;
const ProPKGameUserPhoneStatusRequest_MSGID ProPKGameUserPhoneStatusRequest_MSGID_MSGID_MAX = ProPKGameUserPhoneStatusRequest_MSGID_ID;
const int ProPKGameUserPhoneStatusRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameUserPhoneStatusRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserPhoneStatusRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameUserPhoneStatusRequest_MSGID_Name(ProPKGameUserPhoneStatusRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserPhoneStatusRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameUserPhoneStatusRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameUserPhoneStatusRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserPhoneStatusRequest_MSGID>(
    ProPKGameUserPhoneStatusRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameUserGiveUpRequest_MSGID {
  ProPKGameUserGiveUpRequest_MSGID_ID = 2235
};
bool ProPKGameUserGiveUpRequest_MSGID_IsValid(int value);
const ProPKGameUserGiveUpRequest_MSGID ProPKGameUserGiveUpRequest_MSGID_MSGID_MIN = ProPKGameUserGiveUpRequest_MSGID_ID;
const ProPKGameUserGiveUpRequest_MSGID ProPKGameUserGiveUpRequest_MSGID_MSGID_MAX = ProPKGameUserGiveUpRequest_MSGID_ID;
const int ProPKGameUserGiveUpRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameUserGiveUpRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserGiveUpRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameUserGiveUpRequest_MSGID_Name(ProPKGameUserGiveUpRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserGiveUpRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameUserGiveUpRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameUserGiveUpRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserGiveUpRequest_MSGID>(
    ProPKGameUserGiveUpRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameUserHintRequest_MSGID {
  ProPKGameUserHintRequest_MSGID_ID = 2236
};
bool ProPKGameUserHintRequest_MSGID_IsValid(int value);
const ProPKGameUserHintRequest_MSGID ProPKGameUserHintRequest_MSGID_MSGID_MIN = ProPKGameUserHintRequest_MSGID_ID;
const ProPKGameUserHintRequest_MSGID ProPKGameUserHintRequest_MSGID_MSGID_MAX = ProPKGameUserHintRequest_MSGID_ID;
const int ProPKGameUserHintRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameUserHintRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserHintRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameUserHintRequest_MSGID_Name(ProPKGameUserHintRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserHintRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameUserHintRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameUserHintRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserHintRequest_MSGID>(
    ProPKGameUserHintRequest_MSGID_descriptor(), name, value);
}
enum ProPKGameUserHintResponse_MSGID {
  ProPKGameUserHintResponse_MSGID_ID = 2237
};
bool ProPKGameUserHintResponse_MSGID_IsValid(int value);
const ProPKGameUserHintResponse_MSGID ProPKGameUserHintResponse_MSGID_MSGID_MIN = ProPKGameUserHintResponse_MSGID_ID;
const ProPKGameUserHintResponse_MSGID ProPKGameUserHintResponse_MSGID_MSGID_MAX = ProPKGameUserHintResponse_MSGID_ID;
const int ProPKGameUserHintResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameUserHintResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserHintResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameUserHintResponse_MSGID_Name(ProPKGameUserHintResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserHintResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameUserHintResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameUserHintResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserHintResponse_MSGID>(
    ProPKGameUserHintResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameUserCallScoreResponse_MSGID {
  ProPKGameUserCallScoreResponse_MSGID_ID = 2238
};
bool ProPKGameUserCallScoreResponse_MSGID_IsValid(int value);
const ProPKGameUserCallScoreResponse_MSGID ProPKGameUserCallScoreResponse_MSGID_MSGID_MIN = ProPKGameUserCallScoreResponse_MSGID_ID;
const ProPKGameUserCallScoreResponse_MSGID ProPKGameUserCallScoreResponse_MSGID_MSGID_MAX = ProPKGameUserCallScoreResponse_MSGID_ID;
const int ProPKGameUserCallScoreResponse_MSGID_MSGID_ARRAYSIZE = ProPKGameUserCallScoreResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserCallScoreResponse_MSGID_descriptor();
inline const ::std::string& ProPKGameUserCallScoreResponse_MSGID_Name(ProPKGameUserCallScoreResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserCallScoreResponse_MSGID_descriptor(), value);
}
inline bool ProPKGameUserCallScoreResponse_MSGID_Parse(
    const ::std::string& name, ProPKGameUserCallScoreResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserCallScoreResponse_MSGID>(
    ProPKGameUserCallScoreResponse_MSGID_descriptor(), name, value);
}
enum ProPKGameUserCallScoreRequest_MSGID {
  ProPKGameUserCallScoreRequest_MSGID_ID = 2239
};
bool ProPKGameUserCallScoreRequest_MSGID_IsValid(int value);
const ProPKGameUserCallScoreRequest_MSGID ProPKGameUserCallScoreRequest_MSGID_MSGID_MIN = ProPKGameUserCallScoreRequest_MSGID_ID;
const ProPKGameUserCallScoreRequest_MSGID ProPKGameUserCallScoreRequest_MSGID_MSGID_MAX = ProPKGameUserCallScoreRequest_MSGID_ID;
const int ProPKGameUserCallScoreRequest_MSGID_MSGID_ARRAYSIZE = ProPKGameUserCallScoreRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProPKGameUserCallScoreRequest_MSGID_descriptor();
inline const ::std::string& ProPKGameUserCallScoreRequest_MSGID_Name(ProPKGameUserCallScoreRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProPKGameUserCallScoreRequest_MSGID_descriptor(), value);
}
inline bool ProPKGameUserCallScoreRequest_MSGID_Parse(
    const ::std::string& name, ProPKGameUserCallScoreRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProPKGameUserCallScoreRequest_MSGID>(
    ProPKGameUserCallScoreRequest_MSGID_descriptor(), name, value);
}
enum PKGameState {
  PK_GAME_IDLE = 1,
  PK_GAME_DICE_BANK = 2,
  PK_GAME_SEND = 3,
  PK_GAME_DICE_KING = 4,
  PK_GAME_PLAY = 5,
  PK_GAME_END = 6
};
bool PKGameState_IsValid(int value);
const PKGameState PKGameState_MIN = PK_GAME_IDLE;
const PKGameState PKGameState_MAX = PK_GAME_END;
const int PKGameState_ARRAYSIZE = PKGameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PKGameState_descriptor();
inline const ::std::string& PKGameState_Name(PKGameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PKGameState_descriptor(), value);
}
inline bool PKGameState_Parse(
    const ::std::string& name, PKGameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PKGameState>(
    PKGameState_descriptor(), name, value);
}
enum PKSEND_TYPE {
  NORMAL_SEND = 1,
  RECOME_SEND = 2
};
bool PKSEND_TYPE_IsValid(int value);
const PKSEND_TYPE PKSEND_TYPE_MIN = NORMAL_SEND;
const PKSEND_TYPE PKSEND_TYPE_MAX = RECOME_SEND;
const int PKSEND_TYPE_ARRAYSIZE = PKSEND_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PKSEND_TYPE_descriptor();
inline const ::std::string& PKSEND_TYPE_Name(PKSEND_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PKSEND_TYPE_descriptor(), value);
}
inline bool PKSEND_TYPE_Parse(
    const ::std::string& name, PKSEND_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PKSEND_TYPE>(
    PKSEND_TYPE_descriptor(), name, value);
}
enum PKKIGN_TYPE {
  KING_UP = 1,
  KING_HUITOU = 2,
  KING_MAILEI = 3
};
bool PKKIGN_TYPE_IsValid(int value);
const PKKIGN_TYPE PKKIGN_TYPE_MIN = KING_UP;
const PKKIGN_TYPE PKKIGN_TYPE_MAX = KING_MAILEI;
const int PKKIGN_TYPE_ARRAYSIZE = PKKIGN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PKKIGN_TYPE_descriptor();
inline const ::std::string& PKKIGN_TYPE_Name(PKKIGN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PKKIGN_TYPE_descriptor(), value);
}
inline bool PKKIGN_TYPE_Parse(
    const ::std::string& name, PKKIGN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PKKIGN_TYPE>(
    PKKIGN_TYPE_descriptor(), name, value);
}
enum PKBROKEN_TYPE {
  BT_MASTER_QUIT = 0,
  BT_USER_QUIT = 1,
  BT_BROKEN = 2
};
bool PKBROKEN_TYPE_IsValid(int value);
const PKBROKEN_TYPE PKBROKEN_TYPE_MIN = BT_MASTER_QUIT;
const PKBROKEN_TYPE PKBROKEN_TYPE_MAX = BT_BROKEN;
const int PKBROKEN_TYPE_ARRAYSIZE = PKBROKEN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PKBROKEN_TYPE_descriptor();
inline const ::std::string& PKBROKEN_TYPE_Name(PKBROKEN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PKBROKEN_TYPE_descriptor(), value);
}
inline bool PKBROKEN_TYPE_Parse(
    const ::std::string& name, PKBROKEN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PKBROKEN_TYPE>(
    PKBROKEN_TYPE_descriptor(), name, value);
}
enum PKBROKEN_OPERATE {
  BO_DISAGREE = 0,
  BO_AGREE = 1
};
bool PKBROKEN_OPERATE_IsValid(int value);
const PKBROKEN_OPERATE PKBROKEN_OPERATE_MIN = BO_DISAGREE;
const PKBROKEN_OPERATE PKBROKEN_OPERATE_MAX = BO_AGREE;
const int PKBROKEN_OPERATE_ARRAYSIZE = PKBROKEN_OPERATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PKBROKEN_OPERATE_descriptor();
inline const ::std::string& PKBROKEN_OPERATE_Name(PKBROKEN_OPERATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PKBROKEN_OPERATE_descriptor(), value);
}
inline bool PKBROKEN_OPERATE_Parse(
    const ::std::string& name, PKBROKEN_OPERATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PKBROKEN_OPERATE>(
    PKBROKEN_OPERATE_descriptor(), name, value);
}
enum PKBROKEN_CODE {
  BC_SUCCESS = 0,
  BC_DISAGREE = 1,
  BC_QUIT_SUCCESS = 2,
  BC_EXCEPTION = 3
};
bool PKBROKEN_CODE_IsValid(int value);
const PKBROKEN_CODE PKBROKEN_CODE_MIN = BC_SUCCESS;
const PKBROKEN_CODE PKBROKEN_CODE_MAX = BC_EXCEPTION;
const int PKBROKEN_CODE_ARRAYSIZE = PKBROKEN_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* PKBROKEN_CODE_descriptor();
inline const ::std::string& PKBROKEN_CODE_Name(PKBROKEN_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    PKBROKEN_CODE_descriptor(), value);
}
inline bool PKBROKEN_CODE_Parse(
    const ::std::string& name, PKBROKEN_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PKBROKEN_CODE>(
    PKBROKEN_CODE_descriptor(), name, value);
}
// ===================================================================

class ProPKGameStatusResponse : public ::google::protobuf::Message {
 public:
  ProPKGameStatusResponse();
  virtual ~ProPKGameStatusResponse();

  ProPKGameStatusResponse(const ProPKGameStatusResponse& from);

  inline ProPKGameStatusResponse& operator=(const ProPKGameStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameStatusResponse& default_instance();

  void Swap(ProPKGameStatusResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameStatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameStatusResponse& from);
  void MergeFrom(const ProPKGameStatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameStatusResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameStatusResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameStatusResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameStatusResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameStatusResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameStatusResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameStatusResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameStatusResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameStatusResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PKGameState status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::PKGameState status() const;
  inline void set_status(::PKGameState value);

  // @@protoc_insertion_point(class_scope:ProPKGameStatusResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameDeskInfoResponse : public ::google::protobuf::Message {
 public:
  ProPKGameDeskInfoResponse();
  virtual ~ProPKGameDeskInfoResponse();

  ProPKGameDeskInfoResponse(const ProPKGameDeskInfoResponse& from);

  inline ProPKGameDeskInfoResponse& operator=(const ProPKGameDeskInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameDeskInfoResponse& default_instance();

  void Swap(ProPKGameDeskInfoResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameDeskInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameDeskInfoResponse& from);
  void MergeFrom(const ProPKGameDeskInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameDeskInfoResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameDeskInfoResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameDeskInfoResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameDeskInfoResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameDeskInfoResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameDeskInfoResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameDeskInfoResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameDeskInfoResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameDeskInfoResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 CellScore = 2;
  inline bool has_cellscore() const;
  inline void clear_cellscore();
  static const int kCellScoreFieldNumber = 2;
  inline ::google::protobuf::int32 cellscore() const;
  inline void set_cellscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameDeskInfoResponse)
 private:
  inline void set_has_cellscore();
  inline void clear_has_cellscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cellscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameDeskInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameReadyNotify : public ::google::protobuf::Message {
 public:
  ProPKGameReadyNotify();
  virtual ~ProPKGameReadyNotify();

  ProPKGameReadyNotify(const ProPKGameReadyNotify& from);

  inline ProPKGameReadyNotify& operator=(const ProPKGameReadyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameReadyNotify& default_instance();

  void Swap(ProPKGameReadyNotify* other);

  // implements Message ----------------------------------------------

  ProPKGameReadyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameReadyNotify& from);
  void MergeFrom(const ProPKGameReadyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameReadyNotify_MSGID MSGID;
  static const MSGID ID = ProPKGameReadyNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameReadyNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameReadyNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameReadyNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameReadyNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameReadyNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameReadyNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameReadyNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameReadyNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameReadyNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameReadyRequest : public ::google::protobuf::Message {
 public:
  ProPKGameReadyRequest();
  virtual ~ProPKGameReadyRequest();

  ProPKGameReadyRequest(const ProPKGameReadyRequest& from);

  inline ProPKGameReadyRequest& operator=(const ProPKGameReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameReadyRequest& default_instance();

  void Swap(ProPKGameReadyRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameReadyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameReadyRequest& from);
  void MergeFrom(const ProPKGameReadyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameReadyRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameReadyRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameReadyRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameReadyRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameReadyRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameReadyRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameReadyRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameReadyRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameReadyRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameReadyRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameReadyRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameReadyResponse : public ::google::protobuf::Message {
 public:
  ProPKGameReadyResponse();
  virtual ~ProPKGameReadyResponse();

  ProPKGameReadyResponse(const ProPKGameReadyResponse& from);

  inline ProPKGameReadyResponse& operator=(const ProPKGameReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameReadyResponse& default_instance();

  void Swap(ProPKGameReadyResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameReadyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameReadyResponse& from);
  void MergeFrom(const ProPKGameReadyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameReadyResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameReadyResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameReadyResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameReadyResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameReadyResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameReadyResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameReadyResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameReadyResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameReadyResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameReadyResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameReadyResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameStart : public ::google::protobuf::Message {
 public:
  ProPKGameStart();
  virtual ~ProPKGameStart();

  ProPKGameStart(const ProPKGameStart& from);

  inline ProPKGameStart& operator=(const ProPKGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameStart& default_instance();

  void Swap(ProPKGameStart* other);

  // implements Message ----------------------------------------------

  ProPKGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameStart& from);
  void MergeFrom(const ProPKGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameStart_MSGID MSGID;
  static const MSGID ID = ProPKGameStart_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameStart_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameStart_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameStart_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameStart_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameStart_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameStart_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameStart_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 bankerseat = 2;
  inline bool has_bankerseat() const;
  inline void clear_bankerseat();
  static const int kBankerseatFieldNumber = 2;
  inline ::google::protobuf::int32 bankerseat() const;
  inline void set_bankerseat(::google::protobuf::int32 value);

  // optional int32 gamecount = 3;
  inline bool has_gamecount() const;
  inline void clear_gamecount();
  static const int kGamecountFieldNumber = 3;
  inline ::google::protobuf::int32 gamecount() const;
  inline void set_gamecount(::google::protobuf::int32 value);

  // optional int32 outCardtimes = 4;
  inline bool has_outcardtimes() const;
  inline void clear_outcardtimes();
  static const int kOutCardtimesFieldNumber = 4;
  inline ::google::protobuf::int32 outcardtimes() const;
  inline void set_outcardtimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameStart)
 private:
  inline void set_has_bankerseat();
  inline void clear_has_bankerseat();
  inline void set_has_gamecount();
  inline void clear_has_gamecount();
  inline void set_has_outcardtimes();
  inline void clear_has_outcardtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bankerseat_;
  ::google::protobuf::int32 gamecount_;
  ::google::protobuf::int32 outcardtimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameStart* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameDiceNotify : public ::google::protobuf::Message {
 public:
  ProPKGameDiceNotify();
  virtual ~ProPKGameDiceNotify();

  ProPKGameDiceNotify(const ProPKGameDiceNotify& from);

  inline ProPKGameDiceNotify& operator=(const ProPKGameDiceNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameDiceNotify& default_instance();

  void Swap(ProPKGameDiceNotify* other);

  // implements Message ----------------------------------------------

  ProPKGameDiceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameDiceNotify& from);
  void MergeFrom(const ProPKGameDiceNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameDiceNotify_MSGID MSGID;
  static const MSGID ID = ProPKGameDiceNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameDiceNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameDiceNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameDiceNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameDiceNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameDiceNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameDiceNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameDiceNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 dicecount = 4;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 4;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameDiceNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameDiceNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameDiceRequest : public ::google::protobuf::Message {
 public:
  ProPKGameDiceRequest();
  virtual ~ProPKGameDiceRequest();

  ProPKGameDiceRequest(const ProPKGameDiceRequest& from);

  inline ProPKGameDiceRequest& operator=(const ProPKGameDiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameDiceRequest& default_instance();

  void Swap(ProPKGameDiceRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameDiceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameDiceRequest& from);
  void MergeFrom(const ProPKGameDiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameDiceRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameDiceRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameDiceRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameDiceRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameDiceRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameDiceRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameDiceRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameDiceRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameDiceRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 dicecount = 3;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 3;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameDiceRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameDiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameDiceResult : public ::google::protobuf::Message {
 public:
  ProPKGameDiceResult();
  virtual ~ProPKGameDiceResult();

  ProPKGameDiceResult(const ProPKGameDiceResult& from);

  inline ProPKGameDiceResult& operator=(const ProPKGameDiceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameDiceResult& default_instance();

  void Swap(ProPKGameDiceResult* other);

  // implements Message ----------------------------------------------

  ProPKGameDiceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameDiceResult& from);
  void MergeFrom(const ProPKGameDiceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameDiceResult_MSGID MSGID;
  static const MSGID ID = ProPKGameDiceResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameDiceResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameDiceResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameDiceResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameDiceResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameDiceResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameDiceResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameDiceResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result(int index) const;
  inline void set_result(int index, ::google::protobuf::int32 value);
  inline void add_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result();

  // optional int32 dicecount = 4;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 4;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameDiceResult)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameDiceResult* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameSendMahs : public ::google::protobuf::Message {
 public:
  ProPKGameSendMahs();
  virtual ~ProPKGameSendMahs();

  ProPKGameSendMahs(const ProPKGameSendMahs& from);

  inline ProPKGameSendMahs& operator=(const ProPKGameSendMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameSendMahs& default_instance();

  void Swap(ProPKGameSendMahs* other);

  // implements Message ----------------------------------------------

  ProPKGameSendMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameSendMahs& from);
  void MergeFrom(const ProPKGameSendMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameSendMahs_MSGID MSGID;
  static const MSGID ID = ProPKGameSendMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameSendMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameSendMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameSendMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameSendMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameSendMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameSendMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameSendMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 mahs = 3;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 3;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // repeated int32 mahscount = 4;
  inline int mahscount_size() const;
  inline void clear_mahscount();
  static const int kMahscountFieldNumber = 4;
  inline ::google::protobuf::int32 mahscount(int index) const;
  inline void set_mahscount(int index, ::google::protobuf::int32 value);
  inline void add_mahscount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahscount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahscount();

  // optional int32 cbLeftCount = 5;
  inline bool has_cbleftcount() const;
  inline void clear_cbleftcount();
  static const int kCbLeftCountFieldNumber = 5;
  inline ::google::protobuf::int32 cbleftcount() const;
  inline void set_cbleftcount(::google::protobuf::int32 value);

  // optional int32 magicCardLogicValue = 6;
  inline bool has_magiccardlogicvalue() const;
  inline void clear_magiccardlogicvalue();
  static const int kMagicCardLogicValueFieldNumber = 6;
  inline ::google::protobuf::int32 magiccardlogicvalue() const;
  inline void set_magiccardlogicvalue(::google::protobuf::int32 value);

  // optional bool bRecome = 7;
  inline bool has_brecome() const;
  inline void clear_brecome();
  static const int kBRecomeFieldNumber = 7;
  inline bool brecome() const;
  inline void set_brecome(bool value);

  // @@protoc_insertion_point(class_scope:ProPKGameSendMahs)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cbleftcount();
  inline void clear_has_cbleftcount();
  inline void set_has_magiccardlogicvalue();
  inline void clear_has_magiccardlogicvalue();
  inline void set_has_brecome();
  inline void clear_has_brecome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cbleftcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahscount_;
  ::google::protobuf::int32 magiccardlogicvalue_;
  bool brecome_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameSendMahs* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameKingData : public ::google::protobuf::Message {
 public:
  ProPKGameKingData();
  virtual ~ProPKGameKingData();

  ProPKGameKingData(const ProPKGameKingData& from);

  inline ProPKGameKingData& operator=(const ProPKGameKingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameKingData& default_instance();

  void Swap(ProPKGameKingData* other);

  // implements Message ----------------------------------------------

  ProPKGameKingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameKingData& from);
  void MergeFrom(const ProPKGameKingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameKingData_MSGID MSGID;
  static const MSGID ID = ProPKGameKingData_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameKingData_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameKingData_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameKingData_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameKingData_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameKingData_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameKingData_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameKingData_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 mahs = 3;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 3;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // repeated int32 downKingScore = 4;
  inline int downkingscore_size() const;
  inline void clear_downkingscore();
  static const int kDownKingScoreFieldNumber = 4;
  inline ::google::protobuf::int32 downkingscore(int index) const;
  inline void set_downkingscore(int index, ::google::protobuf::int32 value);
  inline void add_downkingscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      downkingscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_downkingscore();

  // repeated int32 kingcount = 5;
  inline int kingcount_size() const;
  inline void clear_kingcount();
  static const int kKingcountFieldNumber = 5;
  inline ::google::protobuf::int32 kingcount(int index) const;
  inline void set_kingcount(int index, ::google::protobuf::int32 value);
  inline void add_kingcount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kingcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kingcount();

  // repeated int32 viceking = 6;
  inline int viceking_size() const;
  inline void clear_viceking();
  static const int kVicekingFieldNumber = 6;
  inline ::google::protobuf::int32 viceking(int index) const;
  inline void set_viceking(int index, ::google::protobuf::int32 value);
  inline void add_viceking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      viceking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_viceking();

  // optional .PKSEND_TYPE notify_type = 7 [default = NORMAL_SEND];
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 7;
  inline ::PKSEND_TYPE notify_type() const;
  inline void set_notify_type(::PKSEND_TYPE value);

  // optional .PKKIGN_TYPE king_type = 8 [default = KING_UP];
  inline bool has_king_type() const;
  inline void clear_king_type();
  static const int kKingTypeFieldNumber = 8;
  inline ::PKKIGN_TYPE king_type() const;
  inline void set_king_type(::PKKIGN_TYPE value);

  // repeated int32 cbChongGuang = 9;
  inline int cbchongguang_size() const;
  inline void clear_cbchongguang();
  static const int kCbChongGuangFieldNumber = 9;
  inline ::google::protobuf::int32 cbchongguang(int index) const;
  inline void set_cbchongguang(int index, ::google::protobuf::int32 value);
  inline void add_cbchongguang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbchongguang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbchongguang();

  // repeated int32 cbBaWangKing = 10;
  inline int cbbawangking_size() const;
  inline void clear_cbbawangking();
  static const int kCbBaWangKingFieldNumber = 10;
  inline ::google::protobuf::int32 cbbawangking(int index) const;
  inline void set_cbbawangking(int index, ::google::protobuf::int32 value);
  inline void add_cbbawangking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbbawangking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbbawangking();

  // @@protoc_insertion_point(class_scope:ProPKGameKingData)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_king_type();
  inline void clear_has_king_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > downkingscore_;
  ::google::protobuf::int32 seat_;
  int notify_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kingcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > viceking_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbchongguang_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbbawangking_;
  int king_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameKingData* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameOutMahsResponse : public ::google::protobuf::Message {
 public:
  ProPKGameOutMahsResponse();
  virtual ~ProPKGameOutMahsResponse();

  ProPKGameOutMahsResponse(const ProPKGameOutMahsResponse& from);

  inline ProPKGameOutMahsResponse& operator=(const ProPKGameOutMahsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameOutMahsResponse& default_instance();

  void Swap(ProPKGameOutMahsResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameOutMahsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameOutMahsResponse& from);
  void MergeFrom(const ProPKGameOutMahsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameOutMahsResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameOutMahsResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameOutMahsResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameOutMahsResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameOutMahsResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameOutMahsResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameOutMahsResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameOutMahsResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameOutMahsResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 outMahs = 3;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 3;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // repeated int32 handmahs = 4;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 4;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // optional int32 cardCount = 5;
  inline bool has_cardcount() const;
  inline void clear_cardcount();
  static const int kCardCountFieldNumber = 5;
  inline ::google::protobuf::int32 cardcount() const;
  inline void set_cardcount(::google::protobuf::int32 value);

  // optional int32 cardType = 6;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 6;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // optional int32 seriesFlag = 7;
  inline bool has_seriesflag() const;
  inline void clear_seriesflag();
  static const int kSeriesFlagFieldNumber = 7;
  inline ::google::protobuf::int32 seriesflag() const;
  inline void set_seriesflag(::google::protobuf::int32 value);

  // optional int32 seriesNums = 8;
  inline bool has_seriesnums() const;
  inline void clear_seriesnums();
  static const int kSeriesNumsFieldNumber = 8;
  inline ::google::protobuf::int32 seriesnums() const;
  inline void set_seriesnums(::google::protobuf::int32 value);

  // optional int32 point = 9;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 9;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameOutMahsResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cardcount();
  inline void clear_has_cardcount();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_seriesflag();
  inline void clear_has_seriesflag();
  inline void set_has_seriesnums();
  inline void clear_has_seriesnums();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cardcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 seriesflag_;
  ::google::protobuf::int32 seriesnums_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameOutMahsResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameTimerPower : public ::google::protobuf::Message {
 public:
  ProPKGameTimerPower();
  virtual ~ProPKGameTimerPower();

  ProPKGameTimerPower(const ProPKGameTimerPower& from);

  inline ProPKGameTimerPower& operator=(const ProPKGameTimerPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameTimerPower& default_instance();

  void Swap(ProPKGameTimerPower* other);

  // implements Message ----------------------------------------------

  ProPKGameTimerPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameTimerPower& from);
  void MergeFrom(const ProPKGameTimerPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameTimerPower_MSGID MSGID;
  static const MSGID ID = ProPKGameTimerPower_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameTimerPower_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameTimerPower_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameTimerPower_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameTimerPower_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameTimerPower_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameTimerPower_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameTimerPower_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 outcardTime = 4;
  inline bool has_outcardtime() const;
  inline void clear_outcardtime();
  static const int kOutcardTimeFieldNumber = 4;
  inline ::google::protobuf::int32 outcardtime() const;
  inline void set_outcardtime(::google::protobuf::int32 value);

  // optional int32 lastoutcardnum = 5;
  inline bool has_lastoutcardnum() const;
  inline void clear_lastoutcardnum();
  static const int kLastoutcardnumFieldNumber = 5;
  inline ::google::protobuf::int32 lastoutcardnum() const;
  inline void set_lastoutcardnum(::google::protobuf::int32 value);

  // optional int32 lastoutcardtype = 6;
  inline bool has_lastoutcardtype() const;
  inline void clear_lastoutcardtype();
  static const int kLastoutcardtypeFieldNumber = 6;
  inline ::google::protobuf::int32 lastoutcardtype() const;
  inline void set_lastoutcardtype(::google::protobuf::int32 value);

  // optional int32 lastoutcardseriesflag = 7;
  inline bool has_lastoutcardseriesflag() const;
  inline void clear_lastoutcardseriesflag();
  static const int kLastoutcardseriesflagFieldNumber = 7;
  inline ::google::protobuf::int32 lastoutcardseriesflag() const;
  inline void set_lastoutcardseriesflag(::google::protobuf::int32 value);

  // optional int32 lastoutcardseriesnums = 8;
  inline bool has_lastoutcardseriesnums() const;
  inline void clear_lastoutcardseriesnums();
  static const int kLastoutcardseriesnumsFieldNumber = 8;
  inline ::google::protobuf::int32 lastoutcardseriesnums() const;
  inline void set_lastoutcardseriesnums(::google::protobuf::int32 value);

  // optional int32 lastoutcardpoint = 9;
  inline bool has_lastoutcardpoint() const;
  inline void clear_lastoutcardpoint();
  static const int kLastoutcardpointFieldNumber = 9;
  inline ::google::protobuf::int32 lastoutcardpoint() const;
  inline void set_lastoutcardpoint(::google::protobuf::int32 value);

  // optional bool lastmagic4boom = 10;
  inline bool has_lastmagic4boom() const;
  inline void clear_lastmagic4boom();
  static const int kLastmagic4BoomFieldNumber = 10;
  inline bool lastmagic4boom() const;
  inline void set_lastmagic4boom(bool value);

  // @@protoc_insertion_point(class_scope:ProPKGameTimerPower)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_outcardtime();
  inline void clear_has_outcardtime();
  inline void set_has_lastoutcardnum();
  inline void clear_has_lastoutcardnum();
  inline void set_has_lastoutcardtype();
  inline void clear_has_lastoutcardtype();
  inline void set_has_lastoutcardseriesflag();
  inline void clear_has_lastoutcardseriesflag();
  inline void set_has_lastoutcardseriesnums();
  inline void clear_has_lastoutcardseriesnums();
  inline void set_has_lastoutcardpoint();
  inline void clear_has_lastoutcardpoint();
  inline void set_has_lastmagic4boom();
  inline void clear_has_lastmagic4boom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 outcardtime_;
  ::google::protobuf::int32 lastoutcardnum_;
  ::google::protobuf::int32 lastoutcardtype_;
  ::google::protobuf::int32 lastoutcardseriesflag_;
  ::google::protobuf::int32 lastoutcardseriesnums_;
  ::google::protobuf::int32 lastoutcardpoint_;
  bool lastmagic4boom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameTimerPower* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameOperateNotify : public ::google::protobuf::Message {
 public:
  ProPKGameOperateNotify();
  virtual ~ProPKGameOperateNotify();

  ProPKGameOperateNotify(const ProPKGameOperateNotify& from);

  inline ProPKGameOperateNotify& operator=(const ProPKGameOperateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameOperateNotify& default_instance();

  void Swap(ProPKGameOperateNotify* other);

  // implements Message ----------------------------------------------

  ProPKGameOperateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameOperateNotify& from);
  void MergeFrom(const ProPKGameOperateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameOperateNotify_MSGID MSGID;
  static const MSGID ID = ProPKGameOperateNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameOperateNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameOperateNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameOperateNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameOperateNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameOperateNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameOperateNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameOperateNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 resumeSeat = 2;
  inline bool has_resumeseat() const;
  inline void clear_resumeseat();
  static const int kResumeSeatFieldNumber = 2;
  inline ::google::protobuf::int32 resumeseat() const;
  inline void set_resumeseat(::google::protobuf::int32 value);

  // optional int32 ActionMask = 3;
  inline bool has_actionmask() const;
  inline void clear_actionmask();
  static const int kActionMaskFieldNumber = 3;
  inline ::google::protobuf::int32 actionmask() const;
  inline void set_actionmask(::google::protobuf::int32 value);

  // optional int32 ActionCard = 4;
  inline bool has_actioncard() const;
  inline void clear_actioncard();
  static const int kActionCardFieldNumber = 4;
  inline ::google::protobuf::int32 actioncard() const;
  inline void set_actioncard(::google::protobuf::int32 value);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 operateseat = 6;
  inline bool has_operateseat() const;
  inline void clear_operateseat();
  static const int kOperateseatFieldNumber = 6;
  inline ::google::protobuf::int32 operateseat() const;
  inline void set_operateseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameOperateNotify)
 private:
  inline void set_has_resumeseat();
  inline void clear_has_resumeseat();
  inline void set_has_actionmask();
  inline void clear_has_actionmask();
  inline void set_has_actioncard();
  inline void clear_has_actioncard();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_operateseat();
  inline void clear_has_operateseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resumeseat_;
  ::google::protobuf::int32 actionmask_;
  ::google::protobuf::int32 actioncard_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 operateseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameOperateNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameOperateResult : public ::google::protobuf::Message {
 public:
  ProPKGameOperateResult();
  virtual ~ProPKGameOperateResult();

  ProPKGameOperateResult(const ProPKGameOperateResult& from);

  inline ProPKGameOperateResult& operator=(const ProPKGameOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameOperateResult& default_instance();

  void Swap(ProPKGameOperateResult* other);

  // implements Message ----------------------------------------------

  ProPKGameOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameOperateResult& from);
  void MergeFrom(const ProPKGameOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameOperateResult_MSGID MSGID;
  static const MSGID ID = ProPKGameOperateResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameOperateResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameOperateResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameOperateResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameOperateResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameOperateResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameOperateResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameOperateResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 wOperateUser = 2;
  inline bool has_woperateuser() const;
  inline void clear_woperateuser();
  static const int kWOperateUserFieldNumber = 2;
  inline ::google::protobuf::int32 woperateuser() const;
  inline void set_woperateuser(::google::protobuf::int32 value);

  // optional int32 wProvideUser = 3;
  inline bool has_wprovideuser() const;
  inline void clear_wprovideuser();
  static const int kWProvideUserFieldNumber = 3;
  inline ::google::protobuf::int32 wprovideuser() const;
  inline void set_wprovideuser(::google::protobuf::int32 value);

  // optional int32 wOperateCode = 4;
  inline bool has_woperatecode() const;
  inline void clear_woperatecode();
  static const int kWOperateCodeFieldNumber = 4;
  inline ::google::protobuf::int32 woperatecode() const;
  inline void set_woperatecode(::google::protobuf::int32 value);

  // optional int32 cbOperateCard = 5;
  inline bool has_cboperatecard() const;
  inline void clear_cboperatecard();
  static const int kCbOperateCardFieldNumber = 5;
  inline ::google::protobuf::int32 cboperatecard() const;
  inline void set_cboperatecard(::google::protobuf::int32 value);

  // repeated int32 handmahs = 6;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 6;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // optional int32 handcount = 7;
  inline bool has_handcount() const;
  inline void clear_handcount();
  static const int kHandcountFieldNumber = 7;
  inline ::google::protobuf::int32 handcount() const;
  inline void set_handcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameOperateResult)
 private:
  inline void set_has_woperateuser();
  inline void clear_has_woperateuser();
  inline void set_has_wprovideuser();
  inline void clear_has_wprovideuser();
  inline void set_has_woperatecode();
  inline void clear_has_woperatecode();
  inline void set_has_cboperatecard();
  inline void clear_has_cboperatecard();
  inline void set_has_handcount();
  inline void clear_has_handcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 woperateuser_;
  ::google::protobuf::int32 wprovideuser_;
  ::google::protobuf::int32 woperatecode_;
  ::google::protobuf::int32 cboperatecard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 handcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameOperateResult* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameOperateRequest : public ::google::protobuf::Message {
 public:
  ProPKGameOperateRequest();
  virtual ~ProPKGameOperateRequest();

  ProPKGameOperateRequest(const ProPKGameOperateRequest& from);

  inline ProPKGameOperateRequest& operator=(const ProPKGameOperateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameOperateRequest& default_instance();

  void Swap(ProPKGameOperateRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameOperateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameOperateRequest& from);
  void MergeFrom(const ProPKGameOperateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameOperateRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameOperateRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameOperateRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameOperateRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameOperateRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameOperateRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameOperateRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameOperateRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameOperateRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 wOperateCode = 3;
  inline bool has_woperatecode() const;
  inline void clear_woperatecode();
  static const int kWOperateCodeFieldNumber = 3;
  inline ::google::protobuf::int32 woperatecode() const;
  inline void set_woperatecode(::google::protobuf::int32 value);

  // optional int32 cbOperateCard = 4;
  inline bool has_cboperatecard() const;
  inline void clear_cboperatecard();
  static const int kCbOperateCardFieldNumber = 4;
  inline ::google::protobuf::int32 cboperatecard() const;
  inline void set_cboperatecard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameOperateRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_woperatecode();
  inline void clear_has_woperatecode();
  inline void set_has_cboperatecard();
  inline void clear_has_cboperatecard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 woperatecode_;
  ::google::protobuf::int32 cboperatecard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameOperateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameTrust : public ::google::protobuf::Message {
 public:
  ProPKGameTrust();
  virtual ~ProPKGameTrust();

  ProPKGameTrust(const ProPKGameTrust& from);

  inline ProPKGameTrust& operator=(const ProPKGameTrust& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameTrust& default_instance();

  void Swap(ProPKGameTrust* other);

  // implements Message ----------------------------------------------

  ProPKGameTrust* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameTrust& from);
  void MergeFrom(const ProPKGameTrust& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameTrust_MSGID MSGID;
  static const MSGID ID = ProPKGameTrust_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameTrust_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameTrust_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameTrust_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameTrust_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameTrust_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameTrust_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameTrust_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional bool isTrust = 3;
  inline bool has_istrust() const;
  inline void clear_istrust();
  static const int kIsTrustFieldNumber = 3;
  inline bool istrust() const;
  inline void set_istrust(bool value);

  // @@protoc_insertion_point(class_scope:ProPKGameTrust)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_istrust();
  inline void clear_has_istrust();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  bool istrust_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameTrust* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameOutMahRequest : public ::google::protobuf::Message {
 public:
  ProPKGameOutMahRequest();
  virtual ~ProPKGameOutMahRequest();

  ProPKGameOutMahRequest(const ProPKGameOutMahRequest& from);

  inline ProPKGameOutMahRequest& operator=(const ProPKGameOutMahRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameOutMahRequest& default_instance();

  void Swap(ProPKGameOutMahRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameOutMahRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameOutMahRequest& from);
  void MergeFrom(const ProPKGameOutMahRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameOutMahRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameOutMahRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameOutMahRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameOutMahRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameOutMahRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameOutMahRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameOutMahRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameOutMahRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameOutMahRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 outMahs = 3;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 3;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // optional int32 outcardnum = 4;
  inline bool has_outcardnum() const;
  inline void clear_outcardnum();
  static const int kOutcardnumFieldNumber = 4;
  inline ::google::protobuf::int32 outcardnum() const;
  inline void set_outcardnum(::google::protobuf::int32 value);

  // optional int32 outcardtype = 5;
  inline bool has_outcardtype() const;
  inline void clear_outcardtype();
  static const int kOutcardtypeFieldNumber = 5;
  inline ::google::protobuf::int32 outcardtype() const;
  inline void set_outcardtype(::google::protobuf::int32 value);

  // optional int32 outcardseriesflag = 6;
  inline bool has_outcardseriesflag() const;
  inline void clear_outcardseriesflag();
  static const int kOutcardseriesflagFieldNumber = 6;
  inline ::google::protobuf::int32 outcardseriesflag() const;
  inline void set_outcardseriesflag(::google::protobuf::int32 value);

  // optional int32 outcardseriesnums = 7;
  inline bool has_outcardseriesnums() const;
  inline void clear_outcardseriesnums();
  static const int kOutcardseriesnumsFieldNumber = 7;
  inline ::google::protobuf::int32 outcardseriesnums() const;
  inline void set_outcardseriesnums(::google::protobuf::int32 value);

  // optional int32 outcardpoint = 8;
  inline bool has_outcardpoint() const;
  inline void clear_outcardpoint();
  static const int kOutcardpointFieldNumber = 8;
  inline ::google::protobuf::int32 outcardpoint() const;
  inline void set_outcardpoint(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameOutMahRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_outcardnum();
  inline void clear_has_outcardnum();
  inline void set_has_outcardtype();
  inline void clear_has_outcardtype();
  inline void set_has_outcardseriesflag();
  inline void clear_has_outcardseriesflag();
  inline void set_has_outcardseriesnums();
  inline void clear_has_outcardseriesnums();
  inline void set_has_outcardpoint();
  inline void clear_has_outcardpoint();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 outcardnum_;
  ::google::protobuf::int32 outcardtype_;
  ::google::protobuf::int32 outcardseriesflag_;
  ::google::protobuf::int32 outcardseriesnums_;
  ::google::protobuf::int32 outcardpoint_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameOutMahRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameCatchCard : public ::google::protobuf::Message {
 public:
  ProPKGameCatchCard();
  virtual ~ProPKGameCatchCard();

  ProPKGameCatchCard(const ProPKGameCatchCard& from);

  inline ProPKGameCatchCard& operator=(const ProPKGameCatchCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameCatchCard& default_instance();

  void Swap(ProPKGameCatchCard* other);

  // implements Message ----------------------------------------------

  ProPKGameCatchCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameCatchCard& from);
  void MergeFrom(const ProPKGameCatchCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameCatchCard_MSGID MSGID;
  static const MSGID ID = ProPKGameCatchCard_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameCatchCard_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameCatchCard_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameCatchCard_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameCatchCard_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameCatchCard_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameCatchCard_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameCatchCard_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 cbCardData = 3;
  inline bool has_cbcarddata() const;
  inline void clear_cbcarddata();
  static const int kCbCardDataFieldNumber = 3;
  inline ::google::protobuf::int32 cbcarddata() const;
  inline void set_cbcarddata(::google::protobuf::int32 value);

  // optional int32 wActionMask = 4;
  inline bool has_wactionmask() const;
  inline void clear_wactionmask();
  static const int kWActionMaskFieldNumber = 4;
  inline ::google::protobuf::int32 wactionmask() const;
  inline void set_wactionmask(::google::protobuf::int32 value);

  // optional bool cbIsNotGang = 5;
  inline bool has_cbisnotgang() const;
  inline void clear_cbisnotgang();
  static const int kCbIsNotGangFieldNumber = 5;
  inline bool cbisnotgang() const;
  inline void set_cbisnotgang(bool value);

  // optional int32 cbLeftCount = 6;
  inline bool has_cbleftcount() const;
  inline void clear_cbleftcount();
  static const int kCbLeftCountFieldNumber = 6;
  inline ::google::protobuf::int32 cbleftcount() const;
  inline void set_cbleftcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameCatchCard)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cbcarddata();
  inline void clear_has_cbcarddata();
  inline void set_has_wactionmask();
  inline void clear_has_wactionmask();
  inline void set_has_cbisnotgang();
  inline void clear_has_cbisnotgang();
  inline void set_has_cbleftcount();
  inline void clear_has_cbleftcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cbcarddata_;
  ::google::protobuf::int32 wactionmask_;
  bool cbisnotgang_;
  ::google::protobuf::int32 cbleftcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameCatchCard* default_instance_;
};
// -------------------------------------------------------------------

class PKMahList : public ::google::protobuf::Message {
 public:
  PKMahList();
  virtual ~PKMahList();

  PKMahList(const PKMahList& from);

  inline PKMahList& operator=(const PKMahList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PKMahList& default_instance();

  void Swap(PKMahList* other);

  // implements Message ----------------------------------------------

  PKMahList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PKMahList& from);
  void MergeFrom(const PKMahList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Mahs = 1;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 1;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // @@protoc_insertion_point(class_scope:PKMahList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static PKMahList* default_instance_;
};
// -------------------------------------------------------------------

class PKScoreList : public ::google::protobuf::Message {
 public:
  PKScoreList();
  virtual ~PKScoreList();

  PKScoreList(const PKScoreList& from);

  inline PKScoreList& operator=(const PKScoreList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PKScoreList& default_instance();

  void Swap(PKScoreList* other);

  // implements Message ----------------------------------------------

  PKScoreList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PKScoreList& from);
  void MergeFrom(const PKScoreList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 roundScore = 1;
  inline int roundscore_size() const;
  inline void clear_roundscore();
  static const int kRoundScoreFieldNumber = 1;
  inline ::google::protobuf::int32 roundscore(int index) const;
  inline void set_roundscore(int index, ::google::protobuf::int32 value);
  inline void add_roundscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roundscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roundscore();

  // @@protoc_insertion_point(class_scope:PKScoreList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roundscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static PKScoreList* default_instance_;
};
// -------------------------------------------------------------------

class PKAwardList : public ::google::protobuf::Message {
 public:
  PKAwardList();
  virtual ~PKAwardList();

  PKAwardList(const PKAwardList& from);

  inline PKAwardList& operator=(const PKAwardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PKAwardList& default_instance();

  void Swap(PKAwardList* other);

  // implements Message ----------------------------------------------

  PKAwardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PKAwardList& from);
  void MergeFrom(const PKAwardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 CardsData = 2;
  inline int cardsdata_size() const;
  inline void clear_cardsdata();
  static const int kCardsDataFieldNumber = 2;
  inline ::google::protobuf::int32 cardsdata(int index) const;
  inline void set_cardsdata(int index, ::google::protobuf::int32 value);
  inline void add_cardsdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardsdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardsdata();

  // optional int32 awardScore = 3;
  inline bool has_awardscore() const;
  inline void clear_awardscore();
  static const int kAwardScoreFieldNumber = 3;
  inline ::google::protobuf::int32 awardscore() const;
  inline void set_awardscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKAwardList)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_awardscore();
  inline void clear_has_awardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardsdata_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 awardscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static PKAwardList* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameEnd : public ::google::protobuf::Message {
 public:
  ProPKGameEnd();
  virtual ~ProPKGameEnd();

  ProPKGameEnd(const ProPKGameEnd& from);

  inline ProPKGameEnd& operator=(const ProPKGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameEnd& default_instance();

  void Swap(ProPKGameEnd* other);

  // implements Message ----------------------------------------------

  ProPKGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameEnd& from);
  void MergeFrom(const ProPKGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameEnd_MSGID MSGID;
  static const MSGID ID = ProPKGameEnd_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameEnd_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameEnd_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameEnd_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameEnd_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameEnd_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameEnd_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameEnd_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 lGameTax = 2;
  inline bool has_lgametax() const;
  inline void clear_lgametax();
  static const int kLGameTaxFieldNumber = 2;
  inline ::google::protobuf::int32 lgametax() const;
  inline void set_lgametax(::google::protobuf::int32 value);

  // repeated int32 cbChongGuang = 3;
  inline int cbchongguang_size() const;
  inline void clear_cbchongguang();
  static const int kCbChongGuangFieldNumber = 3;
  inline ::google::protobuf::int32 cbchongguang(int index) const;
  inline void set_cbchongguang(int index, ::google::protobuf::int32 value);
  inline void add_cbchongguang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbchongguang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbchongguang();

  // repeated int32 cbBaWangKing = 4;
  inline int cbbawangking_size() const;
  inline void clear_cbbawangking();
  static const int kCbBaWangKingFieldNumber = 4;
  inline ::google::protobuf::int32 cbbawangking(int index) const;
  inline void set_cbbawangking(int index, ::google::protobuf::int32 value);
  inline void add_cbbawangking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbbawangking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbbawangking();

  // optional int32 wProvideUser = 5;
  inline bool has_wprovideuser() const;
  inline void clear_wprovideuser();
  static const int kWProvideUserFieldNumber = 5;
  inline ::google::protobuf::int32 wprovideuser() const;
  inline void set_wprovideuser(::google::protobuf::int32 value);

  // optional int32 cbChiHuCard = 6;
  inline bool has_cbchihucard() const;
  inline void clear_cbchihucard();
  static const int kCbChiHuCardFieldNumber = 6;
  inline ::google::protobuf::int32 cbchihucard() const;
  inline void set_cbchihucard(::google::protobuf::int32 value);

  // repeated int32 dwChiHuKind = 7;
  inline int dwchihukind_size() const;
  inline void clear_dwchihukind();
  static const int kDwChiHuKindFieldNumber = 7;
  inline ::google::protobuf::int32 dwchihukind(int index) const;
  inline void set_dwchihukind(int index, ::google::protobuf::int32 value);
  inline void add_dwchihukind(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwchihukind() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwchihukind();

  // repeated int32 dwChiHuRight = 8;
  inline int dwchihuright_size() const;
  inline void clear_dwchihuright();
  static const int kDwChiHuRightFieldNumber = 8;
  inline ::google::protobuf::int32 dwchihuright(int index) const;
  inline void set_dwchihuright(int index, ::google::protobuf::int32 value);
  inline void add_dwchihuright(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwchihuright() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwchihuright();

  // repeated int32 lTotaslGameScore = 9;
  inline int ltotaslgamescore_size() const;
  inline void clear_ltotaslgamescore();
  static const int kLTotaslGameScoreFieldNumber = 9;
  inline ::google::protobuf::int32 ltotaslgamescore(int index) const;
  inline void set_ltotaslgamescore(int index, ::google::protobuf::int32 value);
  inline void add_ltotaslgamescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ltotaslgamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ltotaslgamescore();

  // repeated int32 lCurrentGameScore = 10;
  inline int lcurrentgamescore_size() const;
  inline void clear_lcurrentgamescore();
  static const int kLCurrentGameScoreFieldNumber = 10;
  inline ::google::protobuf::int32 lcurrentgamescore(int index) const;
  inline void set_lcurrentgamescore(int index, ::google::protobuf::int32 value);
  inline void add_lcurrentgamescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lcurrentgamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lcurrentgamescore();

  // repeated int32 lCurrentPointScore = 11;
  inline int lcurrentpointscore_size() const;
  inline void clear_lcurrentpointscore();
  static const int kLCurrentPointScoreFieldNumber = 11;
  inline ::google::protobuf::int32 lcurrentpointscore(int index) const;
  inline void set_lcurrentpointscore(int index, ::google::protobuf::int32 value);
  inline void add_lcurrentpointscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lcurrentpointscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lcurrentpointscore();

  // repeated int32 lAttachScore = 12;
  inline int lattachscore_size() const;
  inline void clear_lattachscore();
  static const int kLAttachScoreFieldNumber = 12;
  inline ::google::protobuf::int32 lattachscore(int index) const;
  inline void set_lattachscore(int index, ::google::protobuf::int32 value);
  inline void add_lattachscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lattachscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lattachscore();

  // repeated .PKMahList cbHandCardData = 13;
  inline int cbhandcarddata_size() const;
  inline void clear_cbhandcarddata();
  static const int kCbHandCardDataFieldNumber = 13;
  inline const ::PKMahList& cbhandcarddata(int index) const;
  inline ::PKMahList* mutable_cbhandcarddata(int index);
  inline ::PKMahList* add_cbhandcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::PKMahList >&
      cbhandcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKMahList >*
      mutable_cbhandcarddata();

  // repeated .PKAwardList cbAwardCardData = 14;
  inline int cbawardcarddata_size() const;
  inline void clear_cbawardcarddata();
  static const int kCbAwardCardDataFieldNumber = 14;
  inline const ::PKAwardList& cbawardcarddata(int index) const;
  inline ::PKAwardList* mutable_cbawardcarddata(int index);
  inline ::PKAwardList* add_cbawardcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::PKAwardList >&
      cbawardcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKAwardList >*
      mutable_cbawardcarddata();

  // repeated int32 lOnlyWinScore = 15;
  inline int lonlywinscore_size() const;
  inline void clear_lonlywinscore();
  static const int kLOnlyWinScoreFieldNumber = 15;
  inline ::google::protobuf::int32 lonlywinscore(int index) const;
  inline void set_lonlywinscore(int index, ::google::protobuf::int32 value);
  inline void add_lonlywinscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lonlywinscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lonlywinscore();

  // optional bool bRoundEnd = 16;
  inline bool has_broundend() const;
  inline void clear_broundend();
  static const int kBRoundEndFieldNumber = 16;
  inline bool broundend() const;
  inline void set_broundend(bool value);

  // repeated int32 lHuiTouScore = 17;
  inline int lhuitouscore_size() const;
  inline void clear_lhuitouscore();
  static const int kLHuiTouScoreFieldNumber = 17;
  inline ::google::protobuf::int32 lhuitouscore(int index) const;
  inline void set_lhuitouscore(int index, ::google::protobuf::int32 value);
  inline void add_lhuitouscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lhuitouscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lhuitouscore();

  // optional bool bZhuangWin = 18;
  inline bool has_bzhuangwin() const;
  inline void clear_bzhuangwin();
  static const int kBZhuangWinFieldNumber = 18;
  inline bool bzhuangwin() const;
  inline void set_bzhuangwin(bool value);

  // repeated int32 cbJiangMaCardData = 19;
  inline int cbjiangmacarddata_size() const;
  inline void clear_cbjiangmacarddata();
  static const int kCbJiangMaCardDataFieldNumber = 19;
  inline ::google::protobuf::int32 cbjiangmacarddata(int index) const;
  inline void set_cbjiangmacarddata(int index, ::google::protobuf::int32 value);
  inline void add_cbjiangmacarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbjiangmacarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbjiangmacarddata();

  // repeated .PKScoreList detailedScores = 20;
  inline int detailedscores_size() const;
  inline void clear_detailedscores();
  static const int kDetailedScoresFieldNumber = 20;
  inline const ::PKScoreList& detailedscores(int index) const;
  inline ::PKScoreList* mutable_detailedscores(int index);
  inline ::PKScoreList* add_detailedscores();
  inline const ::google::protobuf::RepeatedPtrField< ::PKScoreList >&
      detailedscores() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKScoreList >*
      mutable_detailedscores();

  // optional int32 fangShuiSaet = 21;
  inline bool has_fangshuisaet() const;
  inline void clear_fangshuisaet();
  static const int kFangShuiSaetFieldNumber = 21;
  inline ::google::protobuf::int32 fangshuisaet() const;
  inline void set_fangshuisaet(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameEnd)
 private:
  inline void set_has_lgametax();
  inline void clear_has_lgametax();
  inline void set_has_wprovideuser();
  inline void clear_has_wprovideuser();
  inline void set_has_cbchihucard();
  inline void clear_has_cbchihucard();
  inline void set_has_broundend();
  inline void clear_has_broundend();
  inline void set_has_bzhuangwin();
  inline void clear_has_bzhuangwin();
  inline void set_has_fangshuisaet();
  inline void clear_has_fangshuisaet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbchongguang_;
  ::google::protobuf::int32 lgametax_;
  ::google::protobuf::int32 wprovideuser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbbawangking_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwchihukind_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwchihuright_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ltotaslgamescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lcurrentgamescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lcurrentpointscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lattachscore_;
  ::google::protobuf::RepeatedPtrField< ::PKMahList > cbhandcarddata_;
  ::google::protobuf::int32 cbchihucard_;
  bool broundend_;
  bool bzhuangwin_;
  ::google::protobuf::RepeatedPtrField< ::PKAwardList > cbawardcarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lonlywinscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lhuitouscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbjiangmacarddata_;
  ::google::protobuf::RepeatedPtrField< ::PKScoreList > detailedscores_;
  ::google::protobuf::int32 fangshuisaet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameQuickSoundRequest : public ::google::protobuf::Message {
 public:
  ProPKGameQuickSoundRequest();
  virtual ~ProPKGameQuickSoundRequest();

  ProPKGameQuickSoundRequest(const ProPKGameQuickSoundRequest& from);

  inline ProPKGameQuickSoundRequest& operator=(const ProPKGameQuickSoundRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameQuickSoundRequest& default_instance();

  void Swap(ProPKGameQuickSoundRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameQuickSoundRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameQuickSoundRequest& from);
  void MergeFrom(const ProPKGameQuickSoundRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameQuickSoundRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameQuickSoundRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameQuickSoundRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameQuickSoundRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameQuickSoundRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameQuickSoundRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameQuickSoundRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameQuickSoundRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameQuickSoundRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 desk_id = 2;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 desk_id() const;
  inline void set_desk_id(::google::protobuf::int32 value);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 sound_id = 4;
  inline bool has_sound_id() const;
  inline void clear_sound_id();
  static const int kSoundIdFieldNumber = 4;
  inline ::google::protobuf::int32 sound_id() const;
  inline void set_sound_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ProPKGameQuickSoundRequest)
 private:
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_sound_id();
  inline void clear_has_sound_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 desk_id_;
  ::google::protobuf::int32 seat_id_;
  ::std::string* text_;
  ::google::protobuf::int32 sound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameQuickSoundRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameQuickSoundResponse : public ::google::protobuf::Message {
 public:
  ProPKGameQuickSoundResponse();
  virtual ~ProPKGameQuickSoundResponse();

  ProPKGameQuickSoundResponse(const ProPKGameQuickSoundResponse& from);

  inline ProPKGameQuickSoundResponse& operator=(const ProPKGameQuickSoundResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameQuickSoundResponse& default_instance();

  void Swap(ProPKGameQuickSoundResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameQuickSoundResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameQuickSoundResponse& from);
  void MergeFrom(const ProPKGameQuickSoundResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameQuickSoundResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameQuickSoundResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameQuickSoundResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameQuickSoundResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameQuickSoundResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameQuickSoundResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameQuickSoundResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameQuickSoundResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameQuickSoundResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 desk_id = 2;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 desk_id() const;
  inline void set_desk_id(::google::protobuf::int32 value);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 sound_id = 4;
  inline bool has_sound_id() const;
  inline void clear_sound_id();
  static const int kSoundIdFieldNumber = 4;
  inline ::google::protobuf::int32 sound_id() const;
  inline void set_sound_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ProPKGameQuickSoundResponse)
 private:
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_sound_id();
  inline void clear_has_sound_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 desk_id_;
  ::google::protobuf::int32 seat_id_;
  ::std::string* text_;
  ::google::protobuf::int32 sound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameQuickSoundResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameSendDiscardMahs : public ::google::protobuf::Message {
 public:
  ProPKGameSendDiscardMahs();
  virtual ~ProPKGameSendDiscardMahs();

  ProPKGameSendDiscardMahs(const ProPKGameSendDiscardMahs& from);

  inline ProPKGameSendDiscardMahs& operator=(const ProPKGameSendDiscardMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameSendDiscardMahs& default_instance();

  void Swap(ProPKGameSendDiscardMahs* other);

  // implements Message ----------------------------------------------

  ProPKGameSendDiscardMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameSendDiscardMahs& from);
  void MergeFrom(const ProPKGameSendDiscardMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameSendDiscardMahs_MSGID MSGID;
  static const MSGID ID = ProPKGameSendDiscardMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameSendDiscardMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameSendDiscardMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameSendDiscardMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameSendDiscardMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameSendDiscardMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameSendDiscardMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameSendDiscardMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // repeated .PKMahList cbCardData = 3;
  inline int cbcarddata_size() const;
  inline void clear_cbcarddata();
  static const int kCbCardDataFieldNumber = 3;
  inline const ::PKMahList& cbcarddata(int index) const;
  inline ::PKMahList* mutable_cbcarddata(int index);
  inline ::PKMahList* add_cbcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::PKMahList >&
      cbcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKMahList >*
      mutable_cbcarddata();

  // optional int32 deskCount = 4;
  inline bool has_deskcount() const;
  inline void clear_deskcount();
  static const int kDeskCountFieldNumber = 4;
  inline ::google::protobuf::int32 deskcount() const;
  inline void set_deskcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameSendDiscardMahs)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_deskcount();
  inline void clear_has_deskcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PKMahList > cbcarddata_;
  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 deskcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameSendDiscardMahs* default_instance_;
};
// -------------------------------------------------------------------

class PKWeaveItem : public ::google::protobuf::Message {
 public:
  PKWeaveItem();
  virtual ~PKWeaveItem();

  PKWeaveItem(const PKWeaveItem& from);

  inline PKWeaveItem& operator=(const PKWeaveItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PKWeaveItem& default_instance();

  void Swap(PKWeaveItem* other);

  // implements Message ----------------------------------------------

  PKWeaveItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PKWeaveItem& from);
  void MergeFrom(const PKWeaveItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 weaveKind = 1;
  inline bool has_weavekind() const;
  inline void clear_weavekind();
  static const int kWeaveKindFieldNumber = 1;
  inline ::google::protobuf::int32 weavekind() const;
  inline void set_weavekind(::google::protobuf::int32 value);

  // optional int32 centercard = 2;
  inline bool has_centercard() const;
  inline void clear_centercard();
  static const int kCentercardFieldNumber = 2;
  inline ::google::protobuf::int32 centercard() const;
  inline void set_centercard(::google::protobuf::int32 value);

  // optional int32 provideUser = 3;
  inline bool has_provideuser() const;
  inline void clear_provideuser();
  static const int kProvideUserFieldNumber = 3;
  inline ::google::protobuf::int32 provideuser() const;
  inline void set_provideuser(::google::protobuf::int32 value);

  // optional int32 cardsize = 4;
  inline bool has_cardsize() const;
  inline void clear_cardsize();
  static const int kCardsizeFieldNumber = 4;
  inline ::google::protobuf::int32 cardsize() const;
  inline void set_cardsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PKWeaveItem)
 private:
  inline void set_has_weavekind();
  inline void clear_has_weavekind();
  inline void set_has_centercard();
  inline void clear_has_centercard();
  inline void set_has_provideuser();
  inline void clear_has_provideuser();
  inline void set_has_cardsize();
  inline void clear_has_cardsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 weavekind_;
  ::google::protobuf::int32 centercard_;
  ::google::protobuf::int32 provideuser_;
  ::google::protobuf::int32 cardsize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static PKWeaveItem* default_instance_;
};
// -------------------------------------------------------------------

class PKWeaveItems : public ::google::protobuf::Message {
 public:
  PKWeaveItems();
  virtual ~PKWeaveItems();

  PKWeaveItems(const PKWeaveItems& from);

  inline PKWeaveItems& operator=(const PKWeaveItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PKWeaveItems& default_instance();

  void Swap(PKWeaveItems* other);

  // implements Message ----------------------------------------------

  PKWeaveItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PKWeaveItems& from);
  void MergeFrom(const PKWeaveItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PKWeaveItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::PKWeaveItem& items(int index) const;
  inline ::PKWeaveItem* mutable_items(int index);
  inline ::PKWeaveItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::PKWeaveItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKWeaveItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:PKWeaveItems)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PKWeaveItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static PKWeaveItems* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameSendActionMahs : public ::google::protobuf::Message {
 public:
  ProPKGameSendActionMahs();
  virtual ~ProPKGameSendActionMahs();

  ProPKGameSendActionMahs(const ProPKGameSendActionMahs& from);

  inline ProPKGameSendActionMahs& operator=(const ProPKGameSendActionMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameSendActionMahs& default_instance();

  void Swap(ProPKGameSendActionMahs* other);

  // implements Message ----------------------------------------------

  ProPKGameSendActionMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameSendActionMahs& from);
  void MergeFrom(const ProPKGameSendActionMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameSendActionMahs_MSGID MSGID;
  static const MSGID ID = ProPKGameSendActionMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameSendActionMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameSendActionMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameSendActionMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameSendActionMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameSendActionMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameSendActionMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameSendActionMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // repeated .PKWeaveItems weaves = 3;
  inline int weaves_size() const;
  inline void clear_weaves();
  static const int kWeavesFieldNumber = 3;
  inline const ::PKWeaveItems& weaves(int index) const;
  inline ::PKWeaveItems* mutable_weaves(int index);
  inline ::PKWeaveItems* add_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::PKWeaveItems >&
      weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::PKWeaveItems >*
      mutable_weaves();

  // @@protoc_insertion_point(class_scope:ProPKGameSendActionMahs)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PKWeaveItems > weaves_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameSendActionMahs* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameBrokenRequest : public ::google::protobuf::Message {
 public:
  ProPKGameBrokenRequest();
  virtual ~ProPKGameBrokenRequest();

  ProPKGameBrokenRequest(const ProPKGameBrokenRequest& from);

  inline ProPKGameBrokenRequest& operator=(const ProPKGameBrokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameBrokenRequest& default_instance();

  void Swap(ProPKGameBrokenRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameBrokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameBrokenRequest& from);
  void MergeFrom(const ProPKGameBrokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameBrokenRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameBrokenRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameBrokenRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameBrokenRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameBrokenRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameBrokenRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameBrokenRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameBrokenRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameBrokenRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .PKBROKEN_TYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::PKBROKEN_TYPE type() const;
  inline void set_type(::PKBROKEN_TYPE value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameBrokenRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int type_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameBrokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameBrokenOperate : public ::google::protobuf::Message {
 public:
  ProPKGameBrokenOperate();
  virtual ~ProPKGameBrokenOperate();

  ProPKGameBrokenOperate(const ProPKGameBrokenOperate& from);

  inline ProPKGameBrokenOperate& operator=(const ProPKGameBrokenOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameBrokenOperate& default_instance();

  void Swap(ProPKGameBrokenOperate* other);

  // implements Message ----------------------------------------------

  ProPKGameBrokenOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameBrokenOperate& from);
  void MergeFrom(const ProPKGameBrokenOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameBrokenOperate_MSGID MSGID;
  static const MSGID ID = ProPKGameBrokenOperate_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameBrokenOperate_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameBrokenOperate_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameBrokenOperate_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameBrokenOperate_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameBrokenOperate_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameBrokenOperate_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameBrokenOperate_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .PKBROKEN_OPERATE result = 3 [default = BO_DISAGREE];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::PKBROKEN_OPERATE result() const;
  inline void set_result(::PKBROKEN_OPERATE value);

  // @@protoc_insertion_point(class_scope:ProPKGameBrokenOperate)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameBrokenOperate* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameBrokenNotify : public ::google::protobuf::Message {
 public:
  ProPKGameBrokenNotify();
  virtual ~ProPKGameBrokenNotify();

  ProPKGameBrokenNotify(const ProPKGameBrokenNotify& from);

  inline ProPKGameBrokenNotify& operator=(const ProPKGameBrokenNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameBrokenNotify& default_instance();

  void Swap(ProPKGameBrokenNotify* other);

  // implements Message ----------------------------------------------

  ProPKGameBrokenNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameBrokenNotify& from);
  void MergeFrom(const ProPKGameBrokenNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameBrokenNotify_MSGID MSGID;
  static const MSGID ID = ProPKGameBrokenNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameBrokenNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameBrokenNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameBrokenNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameBrokenNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameBrokenNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameBrokenNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameBrokenNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .PKBROKEN_CODE operate_code = 3 [default = BC_SUCCESS];
  inline bool has_operate_code() const;
  inline void clear_operate_code();
  static const int kOperateCodeFieldNumber = 3;
  inline ::PKBROKEN_CODE operate_code() const;
  inline void set_operate_code(::PKBROKEN_CODE value);

  // @@protoc_insertion_point(class_scope:ProPKGameBrokenNotify)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_operate_code();
  inline void clear_has_operate_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int operate_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameBrokenNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameRuleConfig : public ::google::protobuf::Message {
 public:
  ProPKGameRuleConfig();
  virtual ~ProPKGameRuleConfig();

  ProPKGameRuleConfig(const ProPKGameRuleConfig& from);

  inline ProPKGameRuleConfig& operator=(const ProPKGameRuleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameRuleConfig& default_instance();

  void Swap(ProPKGameRuleConfig* other);

  // implements Message ----------------------------------------------

  ProPKGameRuleConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameRuleConfig& from);
  void MergeFrom(const ProPKGameRuleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameRuleConfig_MSGID MSGID;
  static const MSGID ID = ProPKGameRuleConfig_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameRuleConfig_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameRuleConfig_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameRuleConfig_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameRuleConfig_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameRuleConfig_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameRuleConfig_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameRuleConfig_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 game_round = 1;
  inline bool has_game_round() const;
  inline void clear_game_round();
  static const int kGameRoundFieldNumber = 1;
  inline ::google::protobuf::int32 game_round() const;
  inline void set_game_round(::google::protobuf::int32 value);

  // optional int32 need_card = 2;
  inline bool has_need_card() const;
  inline void clear_need_card();
  static const int kNeedCardFieldNumber = 2;
  inline ::google::protobuf::int32 need_card() const;
  inline void set_need_card(::google::protobuf::int32 value);

  // optional bool have_MagicCard = 3;
  inline bool has_have_magiccard() const;
  inline void clear_have_magiccard();
  static const int kHaveMagicCardFieldNumber = 3;
  inline bool have_magiccard() const;
  inline void set_have_magiccard(bool value);

  // optional bool have_RedPeach3FirstOut = 4;
  inline bool has_have_redpeach3firstout() const;
  inline void clear_have_redpeach3firstout();
  static const int kHaveRedPeach3FirstOutFieldNumber = 4;
  inline bool have_redpeach3firstout() const;
  inline void set_have_redpeach3firstout(bool value);

  // optional bool hava_MustOutCard = 5;
  inline bool has_hava_mustoutcard() const;
  inline void clear_hava_mustoutcard();
  static const int kHavaMustOutCardFieldNumber = 5;
  inline bool hava_mustoutcard() const;
  inline void set_hava_mustoutcard(bool value);

  // optional int32 nMasterSeat = 6;
  inline bool has_nmasterseat() const;
  inline void clear_nmasterseat();
  static const int kNMasterSeatFieldNumber = 6;
  inline ::google::protobuf::int32 nmasterseat() const;
  inline void set_nmasterseat(::google::protobuf::int32 value);

  // optional int32 current_game_count = 7;
  inline bool has_current_game_count() const;
  inline void clear_current_game_count();
  static const int kCurrentGameCountFieldNumber = 7;
  inline ::google::protobuf::int32 current_game_count() const;
  inline void set_current_game_count(::google::protobuf::int32 value);

  // optional bool have_jianma = 8;
  inline bool has_have_jianma() const;
  inline void clear_have_jianma();
  static const int kHaveJianmaFieldNumber = 8;
  inline bool have_jianma() const;
  inline void set_have_jianma(bool value);

  // optional int32 nChongguanNum = 9;
  inline bool has_nchongguannum() const;
  inline void clear_nchongguannum();
  static const int kNChongguanNumFieldNumber = 9;
  inline ::google::protobuf::int32 nchongguannum() const;
  inline void set_nchongguannum(::google::protobuf::int32 value);

  // optional bool hava_BaoPei = 10;
  inline bool has_hava_baopei() const;
  inline void clear_hava_baopei();
  static const int kHavaBaoPeiFieldNumber = 10;
  inline bool hava_baopei() const;
  inline void set_hava_baopei(bool value);

  // optional int32 nPlayerNum = 11;
  inline bool has_nplayernum() const;
  inline void clear_nplayernum();
  static const int kNPlayerNumFieldNumber = 11;
  inline ::google::protobuf::int32 nplayernum() const;
  inline void set_nplayernum(::google::protobuf::int32 value);

  // optional bytes sRoomNum = 12;
  inline bool has_sroomnum() const;
  inline void clear_sroomnum();
  static const int kSRoomNumFieldNumber = 12;
  inline const ::std::string& sroomnum() const;
  inline void set_sroomnum(const ::std::string& value);
  inline void set_sroomnum(const char* value);
  inline void set_sroomnum(const void* value, size_t size);
  inline ::std::string* mutable_sroomnum();
  inline ::std::string* release_sroomnum();
  inline void set_allocated_sroomnum(::std::string* sroomnum);

  // optional bytes sPlayTime = 13;
  inline bool has_splaytime() const;
  inline void clear_splaytime();
  static const int kSPlayTimeFieldNumber = 13;
  inline const ::std::string& splaytime() const;
  inline void set_splaytime(const ::std::string& value);
  inline void set_splaytime(const char* value);
  inline void set_splaytime(const void* value, size_t size);
  inline ::std::string* mutable_splaytime();
  inline ::std::string* release_splaytime();
  inline void set_allocated_splaytime(::std::string* splaytime);

  // @@protoc_insertion_point(class_scope:ProPKGameRuleConfig)
 private:
  inline void set_has_game_round();
  inline void clear_has_game_round();
  inline void set_has_need_card();
  inline void clear_has_need_card();
  inline void set_has_have_magiccard();
  inline void clear_has_have_magiccard();
  inline void set_has_have_redpeach3firstout();
  inline void clear_has_have_redpeach3firstout();
  inline void set_has_hava_mustoutcard();
  inline void clear_has_hava_mustoutcard();
  inline void set_has_nmasterseat();
  inline void clear_has_nmasterseat();
  inline void set_has_current_game_count();
  inline void clear_has_current_game_count();
  inline void set_has_have_jianma();
  inline void clear_has_have_jianma();
  inline void set_has_nchongguannum();
  inline void clear_has_nchongguannum();
  inline void set_has_hava_baopei();
  inline void clear_has_hava_baopei();
  inline void set_has_nplayernum();
  inline void clear_has_nplayernum();
  inline void set_has_sroomnum();
  inline void clear_has_sroomnum();
  inline void set_has_splaytime();
  inline void clear_has_splaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_round_;
  ::google::protobuf::int32 need_card_;
  bool have_magiccard_;
  bool have_redpeach3firstout_;
  bool hava_mustoutcard_;
  bool have_jianma_;
  ::google::protobuf::int32 nmasterseat_;
  ::google::protobuf::int32 current_game_count_;
  ::google::protobuf::int32 nchongguannum_;
  bool hava_baopei_;
  ::google::protobuf::int32 nplayernum_;
  ::std::string* sroomnum_;
  ::std::string* splaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameRuleConfig* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameBrokenStatus : public ::google::protobuf::Message {
 public:
  ProPKGameBrokenStatus();
  virtual ~ProPKGameBrokenStatus();

  ProPKGameBrokenStatus(const ProPKGameBrokenStatus& from);

  inline ProPKGameBrokenStatus& operator=(const ProPKGameBrokenStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameBrokenStatus& default_instance();

  void Swap(ProPKGameBrokenStatus* other);

  // implements Message ----------------------------------------------

  ProPKGameBrokenStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameBrokenStatus& from);
  void MergeFrom(const ProPKGameBrokenStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameBrokenStatus_MSGID MSGID;
  static const MSGID ID = ProPKGameBrokenStatus_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameBrokenStatus_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameBrokenStatus_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameBrokenStatus_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameBrokenStatus_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameBrokenStatus_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameBrokenStatus_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameBrokenStatus_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 broken_seat = 1;
  inline bool has_broken_seat() const;
  inline void clear_broken_seat();
  static const int kBrokenSeatFieldNumber = 1;
  inline ::google::protobuf::int32 broken_seat() const;
  inline void set_broken_seat(::google::protobuf::int32 value);

  // repeated bool broken_status = 2;
  inline int broken_status_size() const;
  inline void clear_broken_status();
  static const int kBrokenStatusFieldNumber = 2;
  inline bool broken_status(int index) const;
  inline void set_broken_status(int index, bool value);
  inline void add_broken_status(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      broken_status() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_broken_status();

  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameBrokenStatus)
 private:
  inline void set_has_broken_seat();
  inline void clear_has_broken_seat();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > broken_status_;
  ::google::protobuf::int32 broken_seat_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameBrokenStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameDataResp : public ::google::protobuf::Message {
 public:
  ProPKGameDataResp();
  virtual ~ProPKGameDataResp();

  ProPKGameDataResp(const ProPKGameDataResp& from);

  inline ProPKGameDataResp& operator=(const ProPKGameDataResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameDataResp& default_instance();

  void Swap(ProPKGameDataResp* other);

  // implements Message ----------------------------------------------

  ProPKGameDataResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameDataResp& from);
  void MergeFrom(const ProPKGameDataResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameDataResp_MSGID MSGID;
  static const MSGID ID = ProPKGameDataResp_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameDataResp_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameDataResp_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameDataResp_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameDataResp_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameDataResp_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameDataResp_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameDataResp_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 total_score = 1;
  inline int total_score_size() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 1;
  inline ::google::protobuf::int32 total_score(int index) const;
  inline void set_total_score(int index, ::google::protobuf::int32 value);
  inline void add_total_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_score();

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameDataResp)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_score_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameDataResp* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameRecordRequest : public ::google::protobuf::Message {
 public:
  ProPKGameRecordRequest();
  virtual ~ProPKGameRecordRequest();

  ProPKGameRecordRequest(const ProPKGameRecordRequest& from);

  inline ProPKGameRecordRequest& operator=(const ProPKGameRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameRecordRequest& default_instance();

  void Swap(ProPKGameRecordRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameRecordRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameRecordRequest& from);
  void MergeFrom(const ProPKGameRecordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameRecordRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameRecordRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameRecordRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameRecordRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameRecordRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameRecordRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameRecordRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameRecordRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameRecordRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ProPKGameRecordRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameRecordRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameRecordResponse : public ::google::protobuf::Message {
 public:
  ProPKGameRecordResponse();
  virtual ~ProPKGameRecordResponse();

  ProPKGameRecordResponse(const ProPKGameRecordResponse& from);

  inline ProPKGameRecordResponse& operator=(const ProPKGameRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameRecordResponse& default_instance();

  void Swap(ProPKGameRecordResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameRecordResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameRecordResponse& from);
  void MergeFrom(const ProPKGameRecordResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameRecordResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameRecordResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameRecordResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameRecordResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameRecordResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameRecordResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameRecordResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameRecordResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameRecordResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ProPKGameRecordResponse)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameRecordResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserLocationRequest : public ::google::protobuf::Message {
 public:
  ProPKGameUserLocationRequest();
  virtual ~ProPKGameUserLocationRequest();

  ProPKGameUserLocationRequest(const ProPKGameUserLocationRequest& from);

  inline ProPKGameUserLocationRequest& operator=(const ProPKGameUserLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserLocationRequest& default_instance();

  void Swap(ProPKGameUserLocationRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameUserLocationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserLocationRequest& from);
  void MergeFrom(const ProPKGameUserLocationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserLocationRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameUserLocationRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserLocationRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserLocationRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserLocationRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserLocationRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserLocationRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserLocationRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserLocationRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional double dwlongitude = 2;
  inline bool has_dwlongitude() const;
  inline void clear_dwlongitude();
  static const int kDwlongitudeFieldNumber = 2;
  inline double dwlongitude() const;
  inline void set_dwlongitude(double value);

  // optional double dwlatitude = 3;
  inline bool has_dwlatitude() const;
  inline void clear_dwlatitude();
  static const int kDwlatitudeFieldNumber = 3;
  inline double dwlatitude() const;
  inline void set_dwlatitude(double value);

  // optional bytes strDistrict = 4;
  inline bool has_strdistrict() const;
  inline void clear_strdistrict();
  static const int kStrDistrictFieldNumber = 4;
  inline const ::std::string& strdistrict() const;
  inline void set_strdistrict(const ::std::string& value);
  inline void set_strdistrict(const char* value);
  inline void set_strdistrict(const void* value, size_t size);
  inline ::std::string* mutable_strdistrict();
  inline ::std::string* release_strdistrict();
  inline void set_allocated_strdistrict(::std::string* strdistrict);

  // optional bytes strStreetName = 5;
  inline bool has_strstreetname() const;
  inline void clear_strstreetname();
  static const int kStrStreetNameFieldNumber = 5;
  inline const ::std::string& strstreetname() const;
  inline void set_strstreetname(const ::std::string& value);
  inline void set_strstreetname(const char* value);
  inline void set_strstreetname(const void* value, size_t size);
  inline ::std::string* mutable_strstreetname();
  inline ::std::string* release_strstreetname();
  inline void set_allocated_strstreetname(::std::string* strstreetname);

  // @@protoc_insertion_point(class_scope:ProPKGameUserLocationRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_dwlongitude();
  inline void clear_has_dwlongitude();
  inline void set_has_dwlatitude();
  inline void clear_has_dwlatitude();
  inline void set_has_strdistrict();
  inline void clear_has_strdistrict();
  inline void set_has_strstreetname();
  inline void clear_has_strstreetname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double dwlongitude_;
  double dwlatitude_;
  ::std::string* strdistrict_;
  ::std::string* strstreetname_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserLocationRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameSyncCardResponse : public ::google::protobuf::Message {
 public:
  ProPKGameSyncCardResponse();
  virtual ~ProPKGameSyncCardResponse();

  ProPKGameSyncCardResponse(const ProPKGameSyncCardResponse& from);

  inline ProPKGameSyncCardResponse& operator=(const ProPKGameSyncCardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameSyncCardResponse& default_instance();

  void Swap(ProPKGameSyncCardResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameSyncCardResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameSyncCardResponse& from);
  void MergeFrom(const ProPKGameSyncCardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameSyncCardResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameSyncCardResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameSyncCardResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameSyncCardResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameSyncCardResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameSyncCardResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameSyncCardResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameSyncCardResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameSyncCardResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 handmahs = 3;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 3;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // @@protoc_insertion_point(class_scope:ProPKGameSyncCardResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameSyncCardResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserPhoneStatusRequest : public ::google::protobuf::Message {
 public:
  ProPKGameUserPhoneStatusRequest();
  virtual ~ProPKGameUserPhoneStatusRequest();

  ProPKGameUserPhoneStatusRequest(const ProPKGameUserPhoneStatusRequest& from);

  inline ProPKGameUserPhoneStatusRequest& operator=(const ProPKGameUserPhoneStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserPhoneStatusRequest& default_instance();

  void Swap(ProPKGameUserPhoneStatusRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameUserPhoneStatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserPhoneStatusRequest& from);
  void MergeFrom(const ProPKGameUserPhoneStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserPhoneStatusRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameUserPhoneStatusRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserPhoneStatusRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserPhoneStatusRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserPhoneStatusRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserPhoneStatusRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserPhoneStatusRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserPhoneStatusRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserPhoneStatusRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 userstatus = 2;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserstatusFieldNumber = 2;
  inline ::google::protobuf::int32 userstatus() const;
  inline void set_userstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameUserPhoneStatusRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 userstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserPhoneStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserGiveUpRequest : public ::google::protobuf::Message {
 public:
  ProPKGameUserGiveUpRequest();
  virtual ~ProPKGameUserGiveUpRequest();

  ProPKGameUserGiveUpRequest(const ProPKGameUserGiveUpRequest& from);

  inline ProPKGameUserGiveUpRequest& operator=(const ProPKGameUserGiveUpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserGiveUpRequest& default_instance();

  void Swap(ProPKGameUserGiveUpRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameUserGiveUpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserGiveUpRequest& from);
  void MergeFrom(const ProPKGameUserGiveUpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserGiveUpRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameUserGiveUpRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserGiveUpRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserGiveUpRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserGiveUpRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserGiveUpRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserGiveUpRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserGiveUpRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserGiveUpRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameUserGiveUpRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserGiveUpRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserHintRequest : public ::google::protobuf::Message {
 public:
  ProPKGameUserHintRequest();
  virtual ~ProPKGameUserHintRequest();

  ProPKGameUserHintRequest(const ProPKGameUserHintRequest& from);

  inline ProPKGameUserHintRequest& operator=(const ProPKGameUserHintRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserHintRequest& default_instance();

  void Swap(ProPKGameUserHintRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameUserHintRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserHintRequest& from);
  void MergeFrom(const ProPKGameUserHintRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserHintRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameUserHintRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserHintRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserHintRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserHintRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserHintRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserHintRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserHintRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserHintRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProPKGameUserHintRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserHintRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserHintResponse : public ::google::protobuf::Message {
 public:
  ProPKGameUserHintResponse();
  virtual ~ProPKGameUserHintResponse();

  ProPKGameUserHintResponse(const ProPKGameUserHintResponse& from);

  inline ProPKGameUserHintResponse& operator=(const ProPKGameUserHintResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserHintResponse& default_instance();

  void Swap(ProPKGameUserHintResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameUserHintResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserHintResponse& from);
  void MergeFrom(const ProPKGameUserHintResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserHintResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameUserHintResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserHintResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserHintResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserHintResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserHintResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserHintResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserHintResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserHintResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 lenth = 1;
  inline bool has_lenth() const;
  inline void clear_lenth();
  static const int kLenthFieldNumber = 1;
  inline ::google::protobuf::int32 lenth() const;
  inline void set_lenth(::google::protobuf::int32 value);

  // repeated int32 outMahs = 2;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 2;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // @@protoc_insertion_point(class_scope:ProPKGameUserHintResponse)
 private:
  inline void set_has_lenth();
  inline void clear_has_lenth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 lenth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserHintResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserCallScoreResponse : public ::google::protobuf::Message {
 public:
  ProPKGameUserCallScoreResponse();
  virtual ~ProPKGameUserCallScoreResponse();

  ProPKGameUserCallScoreResponse(const ProPKGameUserCallScoreResponse& from);

  inline ProPKGameUserCallScoreResponse& operator=(const ProPKGameUserCallScoreResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserCallScoreResponse& default_instance();

  void Swap(ProPKGameUserCallScoreResponse* other);

  // implements Message ----------------------------------------------

  ProPKGameUserCallScoreResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserCallScoreResponse& from);
  void MergeFrom(const ProPKGameUserCallScoreResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserCallScoreResponse_MSGID MSGID;
  static const MSGID ID = ProPKGameUserCallScoreResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserCallScoreResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserCallScoreResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserCallScoreResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserCallScoreResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserCallScoreResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserCallScoreResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserCallScoreResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 usercallscore = 2;
  inline bool has_usercallscore() const;
  inline void clear_usercallscore();
  static const int kUsercallscoreFieldNumber = 2;
  inline ::google::protobuf::int32 usercallscore() const;
  inline void set_usercallscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameUserCallScoreResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_usercallscore();
  inline void clear_has_usercallscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 usercallscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserCallScoreResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProPKGameUserCallScoreRequest : public ::google::protobuf::Message {
 public:
  ProPKGameUserCallScoreRequest();
  virtual ~ProPKGameUserCallScoreRequest();

  ProPKGameUserCallScoreRequest(const ProPKGameUserCallScoreRequest& from);

  inline ProPKGameUserCallScoreRequest& operator=(const ProPKGameUserCallScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProPKGameUserCallScoreRequest& default_instance();

  void Swap(ProPKGameUserCallScoreRequest* other);

  // implements Message ----------------------------------------------

  ProPKGameUserCallScoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProPKGameUserCallScoreRequest& from);
  void MergeFrom(const ProPKGameUserCallScoreRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProPKGameUserCallScoreRequest_MSGID MSGID;
  static const MSGID ID = ProPKGameUserCallScoreRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProPKGameUserCallScoreRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProPKGameUserCallScoreRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProPKGameUserCallScoreRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProPKGameUserCallScoreRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProPKGameUserCallScoreRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProPKGameUserCallScoreRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProPKGameUserCallScoreRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 usercallscore = 2;
  inline bool has_usercallscore() const;
  inline void clear_usercallscore();
  static const int kUsercallscoreFieldNumber = 2;
  inline ::google::protobuf::int32 usercallscore() const;
  inline void set_usercallscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProPKGameUserCallScoreRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_usercallscore();
  inline void clear_has_usercallscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 usercallscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_lkpk_2eproto();
  friend void protobuf_AssignDesc_lkpk_2eproto();
  friend void protobuf_ShutdownFile_lkpk_2eproto();

  void InitAsDefaultInstance();
  static ProPKGameUserCallScoreRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ProPKGameStatusResponse

// optional .PKGameState status = 2;
inline bool ProPKGameStatusResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameStatusResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameStatusResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameStatusResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::PKGameState ProPKGameStatusResponse::status() const {
  return static_cast< ::PKGameState >(status_);
}
inline void ProPKGameStatusResponse::set_status(::PKGameState value) {
  assert(::PKGameState_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// ProPKGameDeskInfoResponse

// optional int32 CellScore = 2;
inline bool ProPKGameDeskInfoResponse::has_cellscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameDeskInfoResponse::set_has_cellscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameDeskInfoResponse::clear_has_cellscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameDeskInfoResponse::clear_cellscore() {
  cellscore_ = 0;
  clear_has_cellscore();
}
inline ::google::protobuf::int32 ProPKGameDeskInfoResponse::cellscore() const {
  return cellscore_;
}
inline void ProPKGameDeskInfoResponse::set_cellscore(::google::protobuf::int32 value) {
  set_has_cellscore();
  cellscore_ = value;
}

// -------------------------------------------------------------------

// ProPKGameReadyNotify

// optional int32 seat = 2;
inline bool ProPKGameReadyNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameReadyNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameReadyNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameReadyNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameReadyNotify::seat() const {
  return seat_;
}
inline void ProPKGameReadyNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProPKGameReadyNotify::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameReadyNotify::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameReadyNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameReadyNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProPKGameReadyNotify::time() const {
  return time_;
}
inline void ProPKGameReadyNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProPKGameReadyRequest

// optional int32 seat = 2;
inline bool ProPKGameReadyRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameReadyRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameReadyRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameReadyRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameReadyRequest::seat() const {
  return seat_;
}
inline void ProPKGameReadyRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProPKGameReadyResponse

// optional int32 seat = 2;
inline bool ProPKGameReadyResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameReadyResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameReadyResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameReadyResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameReadyResponse::seat() const {
  return seat_;
}
inline void ProPKGameReadyResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProPKGameStart

// optional int32 bankerseat = 2;
inline bool ProPKGameStart::has_bankerseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameStart::set_has_bankerseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameStart::clear_has_bankerseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameStart::clear_bankerseat() {
  bankerseat_ = 0;
  clear_has_bankerseat();
}
inline ::google::protobuf::int32 ProPKGameStart::bankerseat() const {
  return bankerseat_;
}
inline void ProPKGameStart::set_bankerseat(::google::protobuf::int32 value) {
  set_has_bankerseat();
  bankerseat_ = value;
}

// optional int32 gamecount = 3;
inline bool ProPKGameStart::has_gamecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameStart::set_has_gamecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameStart::clear_has_gamecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameStart::clear_gamecount() {
  gamecount_ = 0;
  clear_has_gamecount();
}
inline ::google::protobuf::int32 ProPKGameStart::gamecount() const {
  return gamecount_;
}
inline void ProPKGameStart::set_gamecount(::google::protobuf::int32 value) {
  set_has_gamecount();
  gamecount_ = value;
}

// optional int32 outCardtimes = 4;
inline bool ProPKGameStart::has_outcardtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameStart::set_has_outcardtimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameStart::clear_has_outcardtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameStart::clear_outcardtimes() {
  outcardtimes_ = 0;
  clear_has_outcardtimes();
}
inline ::google::protobuf::int32 ProPKGameStart::outcardtimes() const {
  return outcardtimes_;
}
inline void ProPKGameStart::set_outcardtimes(::google::protobuf::int32 value) {
  set_has_outcardtimes();
  outcardtimes_ = value;
}

// -------------------------------------------------------------------

// ProPKGameDiceNotify

// optional int32 seat = 2;
inline bool ProPKGameDiceNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameDiceNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameDiceNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameDiceNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameDiceNotify::seat() const {
  return seat_;
}
inline void ProPKGameDiceNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProPKGameDiceNotify::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameDiceNotify::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameDiceNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameDiceNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProPKGameDiceNotify::time() const {
  return time_;
}
inline void ProPKGameDiceNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 dicecount = 4;
inline bool ProPKGameDiceNotify::has_dicecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameDiceNotify::set_has_dicecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameDiceNotify::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameDiceNotify::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProPKGameDiceNotify::dicecount() const {
  return dicecount_;
}
inline void ProPKGameDiceNotify::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProPKGameDiceRequest

// optional int32 seat = 2;
inline bool ProPKGameDiceRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameDiceRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameDiceRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameDiceRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameDiceRequest::seat() const {
  return seat_;
}
inline void ProPKGameDiceRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 dicecount = 3;
inline bool ProPKGameDiceRequest::has_dicecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameDiceRequest::set_has_dicecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameDiceRequest::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameDiceRequest::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProPKGameDiceRequest::dicecount() const {
  return dicecount_;
}
inline void ProPKGameDiceRequest::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProPKGameDiceResult

// optional int32 seat = 2;
inline bool ProPKGameDiceResult::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameDiceResult::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameDiceResult::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameDiceResult::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameDiceResult::seat() const {
  return seat_;
}
inline void ProPKGameDiceResult::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 result = 3;
inline int ProPKGameDiceResult::result_size() const {
  return result_.size();
}
inline void ProPKGameDiceResult::clear_result() {
  result_.Clear();
}
inline ::google::protobuf::int32 ProPKGameDiceResult::result(int index) const {
  return result_.Get(index);
}
inline void ProPKGameDiceResult::set_result(int index, ::google::protobuf::int32 value) {
  result_.Set(index, value);
}
inline void ProPKGameDiceResult::add_result(::google::protobuf::int32 value) {
  result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameDiceResult::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameDiceResult::mutable_result() {
  return &result_;
}

// optional int32 dicecount = 4;
inline bool ProPKGameDiceResult::has_dicecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameDiceResult::set_has_dicecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameDiceResult::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameDiceResult::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProPKGameDiceResult::dicecount() const {
  return dicecount_;
}
inline void ProPKGameDiceResult::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProPKGameSendMahs

// optional int32 seat = 2;
inline bool ProPKGameSendMahs::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameSendMahs::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameSendMahs::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameSendMahs::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameSendMahs::seat() const {
  return seat_;
}
inline void ProPKGameSendMahs::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 mahs = 3;
inline int ProPKGameSendMahs::mahs_size() const {
  return mahs_.size();
}
inline void ProPKGameSendMahs::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameSendMahs::mahs(int index) const {
  return mahs_.Get(index);
}
inline void ProPKGameSendMahs::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void ProPKGameSendMahs::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameSendMahs::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameSendMahs::mutable_mahs() {
  return &mahs_;
}

// repeated int32 mahscount = 4;
inline int ProPKGameSendMahs::mahscount_size() const {
  return mahscount_.size();
}
inline void ProPKGameSendMahs::clear_mahscount() {
  mahscount_.Clear();
}
inline ::google::protobuf::int32 ProPKGameSendMahs::mahscount(int index) const {
  return mahscount_.Get(index);
}
inline void ProPKGameSendMahs::set_mahscount(int index, ::google::protobuf::int32 value) {
  mahscount_.Set(index, value);
}
inline void ProPKGameSendMahs::add_mahscount(::google::protobuf::int32 value) {
  mahscount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameSendMahs::mahscount() const {
  return mahscount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameSendMahs::mutable_mahscount() {
  return &mahscount_;
}

// optional int32 cbLeftCount = 5;
inline bool ProPKGameSendMahs::has_cbleftcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameSendMahs::set_has_cbleftcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameSendMahs::clear_has_cbleftcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameSendMahs::clear_cbleftcount() {
  cbleftcount_ = 0;
  clear_has_cbleftcount();
}
inline ::google::protobuf::int32 ProPKGameSendMahs::cbleftcount() const {
  return cbleftcount_;
}
inline void ProPKGameSendMahs::set_cbleftcount(::google::protobuf::int32 value) {
  set_has_cbleftcount();
  cbleftcount_ = value;
}

// optional int32 magicCardLogicValue = 6;
inline bool ProPKGameSendMahs::has_magiccardlogicvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameSendMahs::set_has_magiccardlogicvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameSendMahs::clear_has_magiccardlogicvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameSendMahs::clear_magiccardlogicvalue() {
  magiccardlogicvalue_ = 0;
  clear_has_magiccardlogicvalue();
}
inline ::google::protobuf::int32 ProPKGameSendMahs::magiccardlogicvalue() const {
  return magiccardlogicvalue_;
}
inline void ProPKGameSendMahs::set_magiccardlogicvalue(::google::protobuf::int32 value) {
  set_has_magiccardlogicvalue();
  magiccardlogicvalue_ = value;
}

// optional bool bRecome = 7;
inline bool ProPKGameSendMahs::has_brecome() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameSendMahs::set_has_brecome() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameSendMahs::clear_has_brecome() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameSendMahs::clear_brecome() {
  brecome_ = false;
  clear_has_brecome();
}
inline bool ProPKGameSendMahs::brecome() const {
  return brecome_;
}
inline void ProPKGameSendMahs::set_brecome(bool value) {
  set_has_brecome();
  brecome_ = value;
}

// -------------------------------------------------------------------

// ProPKGameKingData

// optional int32 seat = 2;
inline bool ProPKGameKingData::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameKingData::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameKingData::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameKingData::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameKingData::seat() const {
  return seat_;
}
inline void ProPKGameKingData::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 mahs = 3;
inline int ProPKGameKingData::mahs_size() const {
  return mahs_.size();
}
inline void ProPKGameKingData::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameKingData::mahs(int index) const {
  return mahs_.Get(index);
}
inline void ProPKGameKingData::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void ProPKGameKingData::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameKingData::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameKingData::mutable_mahs() {
  return &mahs_;
}

// repeated int32 downKingScore = 4;
inline int ProPKGameKingData::downkingscore_size() const {
  return downkingscore_.size();
}
inline void ProPKGameKingData::clear_downkingscore() {
  downkingscore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameKingData::downkingscore(int index) const {
  return downkingscore_.Get(index);
}
inline void ProPKGameKingData::set_downkingscore(int index, ::google::protobuf::int32 value) {
  downkingscore_.Set(index, value);
}
inline void ProPKGameKingData::add_downkingscore(::google::protobuf::int32 value) {
  downkingscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameKingData::downkingscore() const {
  return downkingscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameKingData::mutable_downkingscore() {
  return &downkingscore_;
}

// repeated int32 kingcount = 5;
inline int ProPKGameKingData::kingcount_size() const {
  return kingcount_.size();
}
inline void ProPKGameKingData::clear_kingcount() {
  kingcount_.Clear();
}
inline ::google::protobuf::int32 ProPKGameKingData::kingcount(int index) const {
  return kingcount_.Get(index);
}
inline void ProPKGameKingData::set_kingcount(int index, ::google::protobuf::int32 value) {
  kingcount_.Set(index, value);
}
inline void ProPKGameKingData::add_kingcount(::google::protobuf::int32 value) {
  kingcount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameKingData::kingcount() const {
  return kingcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameKingData::mutable_kingcount() {
  return &kingcount_;
}

// repeated int32 viceking = 6;
inline int ProPKGameKingData::viceking_size() const {
  return viceking_.size();
}
inline void ProPKGameKingData::clear_viceking() {
  viceking_.Clear();
}
inline ::google::protobuf::int32 ProPKGameKingData::viceking(int index) const {
  return viceking_.Get(index);
}
inline void ProPKGameKingData::set_viceking(int index, ::google::protobuf::int32 value) {
  viceking_.Set(index, value);
}
inline void ProPKGameKingData::add_viceking(::google::protobuf::int32 value) {
  viceking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameKingData::viceking() const {
  return viceking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameKingData::mutable_viceking() {
  return &viceking_;
}

// optional .PKSEND_TYPE notify_type = 7 [default = NORMAL_SEND];
inline bool ProPKGameKingData::has_notify_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameKingData::set_has_notify_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameKingData::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameKingData::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::PKSEND_TYPE ProPKGameKingData::notify_type() const {
  return static_cast< ::PKSEND_TYPE >(notify_type_);
}
inline void ProPKGameKingData::set_notify_type(::PKSEND_TYPE value) {
  assert(::PKSEND_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// optional .PKKIGN_TYPE king_type = 8 [default = KING_UP];
inline bool ProPKGameKingData::has_king_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProPKGameKingData::set_has_king_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProPKGameKingData::clear_has_king_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProPKGameKingData::clear_king_type() {
  king_type_ = 1;
  clear_has_king_type();
}
inline ::PKKIGN_TYPE ProPKGameKingData::king_type() const {
  return static_cast< ::PKKIGN_TYPE >(king_type_);
}
inline void ProPKGameKingData::set_king_type(::PKKIGN_TYPE value) {
  assert(::PKKIGN_TYPE_IsValid(value));
  set_has_king_type();
  king_type_ = value;
}

// repeated int32 cbChongGuang = 9;
inline int ProPKGameKingData::cbchongguang_size() const {
  return cbchongguang_.size();
}
inline void ProPKGameKingData::clear_cbchongguang() {
  cbchongguang_.Clear();
}
inline ::google::protobuf::int32 ProPKGameKingData::cbchongguang(int index) const {
  return cbchongguang_.Get(index);
}
inline void ProPKGameKingData::set_cbchongguang(int index, ::google::protobuf::int32 value) {
  cbchongguang_.Set(index, value);
}
inline void ProPKGameKingData::add_cbchongguang(::google::protobuf::int32 value) {
  cbchongguang_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameKingData::cbchongguang() const {
  return cbchongguang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameKingData::mutable_cbchongguang() {
  return &cbchongguang_;
}

// repeated int32 cbBaWangKing = 10;
inline int ProPKGameKingData::cbbawangking_size() const {
  return cbbawangking_.size();
}
inline void ProPKGameKingData::clear_cbbawangking() {
  cbbawangking_.Clear();
}
inline ::google::protobuf::int32 ProPKGameKingData::cbbawangking(int index) const {
  return cbbawangking_.Get(index);
}
inline void ProPKGameKingData::set_cbbawangking(int index, ::google::protobuf::int32 value) {
  cbbawangking_.Set(index, value);
}
inline void ProPKGameKingData::add_cbbawangking(::google::protobuf::int32 value) {
  cbbawangking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameKingData::cbbawangking() const {
  return cbbawangking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameKingData::mutable_cbbawangking() {
  return &cbbawangking_;
}

// -------------------------------------------------------------------

// ProPKGameOutMahsResponse

// optional int32 seat = 2;
inline bool ProPKGameOutMahsResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameOutMahsResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameOutMahsResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameOutMahsResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::seat() const {
  return seat_;
}
inline void ProPKGameOutMahsResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 outMahs = 3;
inline int ProPKGameOutMahsResponse::outmahs_size() const {
  return outmahs_.size();
}
inline void ProPKGameOutMahsResponse::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProPKGameOutMahsResponse::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProPKGameOutMahsResponse::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameOutMahsResponse::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameOutMahsResponse::mutable_outmahs() {
  return &outmahs_;
}

// repeated int32 handmahs = 4;
inline int ProPKGameOutMahsResponse::handmahs_size() const {
  return handmahs_.size();
}
inline void ProPKGameOutMahsResponse::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProPKGameOutMahsResponse::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProPKGameOutMahsResponse::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameOutMahsResponse::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameOutMahsResponse::mutable_handmahs() {
  return &handmahs_;
}

// optional int32 cardCount = 5;
inline bool ProPKGameOutMahsResponse::has_cardcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameOutMahsResponse::set_has_cardcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameOutMahsResponse::clear_has_cardcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameOutMahsResponse::clear_cardcount() {
  cardcount_ = 0;
  clear_has_cardcount();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::cardcount() const {
  return cardcount_;
}
inline void ProPKGameOutMahsResponse::set_cardcount(::google::protobuf::int32 value) {
  set_has_cardcount();
  cardcount_ = value;
}

// optional int32 cardType = 6;
inline bool ProPKGameOutMahsResponse::has_cardtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameOutMahsResponse::set_has_cardtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameOutMahsResponse::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameOutMahsResponse::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::cardtype() const {
  return cardtype_;
}
inline void ProPKGameOutMahsResponse::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// optional int32 seriesFlag = 7;
inline bool ProPKGameOutMahsResponse::has_seriesflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameOutMahsResponse::set_has_seriesflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameOutMahsResponse::clear_has_seriesflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameOutMahsResponse::clear_seriesflag() {
  seriesflag_ = 0;
  clear_has_seriesflag();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::seriesflag() const {
  return seriesflag_;
}
inline void ProPKGameOutMahsResponse::set_seriesflag(::google::protobuf::int32 value) {
  set_has_seriesflag();
  seriesflag_ = value;
}

// optional int32 seriesNums = 8;
inline bool ProPKGameOutMahsResponse::has_seriesnums() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProPKGameOutMahsResponse::set_has_seriesnums() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProPKGameOutMahsResponse::clear_has_seriesnums() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProPKGameOutMahsResponse::clear_seriesnums() {
  seriesnums_ = 0;
  clear_has_seriesnums();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::seriesnums() const {
  return seriesnums_;
}
inline void ProPKGameOutMahsResponse::set_seriesnums(::google::protobuf::int32 value) {
  set_has_seriesnums();
  seriesnums_ = value;
}

// optional int32 point = 9;
inline bool ProPKGameOutMahsResponse::has_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProPKGameOutMahsResponse::set_has_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProPKGameOutMahsResponse::clear_has_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProPKGameOutMahsResponse::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 ProPKGameOutMahsResponse::point() const {
  return point_;
}
inline void ProPKGameOutMahsResponse::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// ProPKGameTimerPower

// optional int32 seat = 2;
inline bool ProPKGameTimerPower::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameTimerPower::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameTimerPower::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameTimerPower::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::seat() const {
  return seat_;
}
inline void ProPKGameTimerPower::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProPKGameTimerPower::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameTimerPower::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameTimerPower::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameTimerPower::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::time() const {
  return time_;
}
inline void ProPKGameTimerPower::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 outcardTime = 4;
inline bool ProPKGameTimerPower::has_outcardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameTimerPower::set_has_outcardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameTimerPower::clear_has_outcardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameTimerPower::clear_outcardtime() {
  outcardtime_ = 0;
  clear_has_outcardtime();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::outcardtime() const {
  return outcardtime_;
}
inline void ProPKGameTimerPower::set_outcardtime(::google::protobuf::int32 value) {
  set_has_outcardtime();
  outcardtime_ = value;
}

// optional int32 lastoutcardnum = 5;
inline bool ProPKGameTimerPower::has_lastoutcardnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameTimerPower::set_has_lastoutcardnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameTimerPower::clear_has_lastoutcardnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameTimerPower::clear_lastoutcardnum() {
  lastoutcardnum_ = 0;
  clear_has_lastoutcardnum();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::lastoutcardnum() const {
  return lastoutcardnum_;
}
inline void ProPKGameTimerPower::set_lastoutcardnum(::google::protobuf::int32 value) {
  set_has_lastoutcardnum();
  lastoutcardnum_ = value;
}

// optional int32 lastoutcardtype = 6;
inline bool ProPKGameTimerPower::has_lastoutcardtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameTimerPower::set_has_lastoutcardtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameTimerPower::clear_has_lastoutcardtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameTimerPower::clear_lastoutcardtype() {
  lastoutcardtype_ = 0;
  clear_has_lastoutcardtype();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::lastoutcardtype() const {
  return lastoutcardtype_;
}
inline void ProPKGameTimerPower::set_lastoutcardtype(::google::protobuf::int32 value) {
  set_has_lastoutcardtype();
  lastoutcardtype_ = value;
}

// optional int32 lastoutcardseriesflag = 7;
inline bool ProPKGameTimerPower::has_lastoutcardseriesflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameTimerPower::set_has_lastoutcardseriesflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameTimerPower::clear_has_lastoutcardseriesflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameTimerPower::clear_lastoutcardseriesflag() {
  lastoutcardseriesflag_ = 0;
  clear_has_lastoutcardseriesflag();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::lastoutcardseriesflag() const {
  return lastoutcardseriesflag_;
}
inline void ProPKGameTimerPower::set_lastoutcardseriesflag(::google::protobuf::int32 value) {
  set_has_lastoutcardseriesflag();
  lastoutcardseriesflag_ = value;
}

// optional int32 lastoutcardseriesnums = 8;
inline bool ProPKGameTimerPower::has_lastoutcardseriesnums() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProPKGameTimerPower::set_has_lastoutcardseriesnums() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProPKGameTimerPower::clear_has_lastoutcardseriesnums() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProPKGameTimerPower::clear_lastoutcardseriesnums() {
  lastoutcardseriesnums_ = 0;
  clear_has_lastoutcardseriesnums();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::lastoutcardseriesnums() const {
  return lastoutcardseriesnums_;
}
inline void ProPKGameTimerPower::set_lastoutcardseriesnums(::google::protobuf::int32 value) {
  set_has_lastoutcardseriesnums();
  lastoutcardseriesnums_ = value;
}

// optional int32 lastoutcardpoint = 9;
inline bool ProPKGameTimerPower::has_lastoutcardpoint() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProPKGameTimerPower::set_has_lastoutcardpoint() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProPKGameTimerPower::clear_has_lastoutcardpoint() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProPKGameTimerPower::clear_lastoutcardpoint() {
  lastoutcardpoint_ = 0;
  clear_has_lastoutcardpoint();
}
inline ::google::protobuf::int32 ProPKGameTimerPower::lastoutcardpoint() const {
  return lastoutcardpoint_;
}
inline void ProPKGameTimerPower::set_lastoutcardpoint(::google::protobuf::int32 value) {
  set_has_lastoutcardpoint();
  lastoutcardpoint_ = value;
}

// optional bool lastmagic4boom = 10;
inline bool ProPKGameTimerPower::has_lastmagic4boom() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProPKGameTimerPower::set_has_lastmagic4boom() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProPKGameTimerPower::clear_has_lastmagic4boom() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProPKGameTimerPower::clear_lastmagic4boom() {
  lastmagic4boom_ = false;
  clear_has_lastmagic4boom();
}
inline bool ProPKGameTimerPower::lastmagic4boom() const {
  return lastmagic4boom_;
}
inline void ProPKGameTimerPower::set_lastmagic4boom(bool value) {
  set_has_lastmagic4boom();
  lastmagic4boom_ = value;
}

// -------------------------------------------------------------------

// ProPKGameOperateNotify

// optional int32 resumeSeat = 2;
inline bool ProPKGameOperateNotify::has_resumeseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameOperateNotify::set_has_resumeseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameOperateNotify::clear_has_resumeseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameOperateNotify::clear_resumeseat() {
  resumeseat_ = 0;
  clear_has_resumeseat();
}
inline ::google::protobuf::int32 ProPKGameOperateNotify::resumeseat() const {
  return resumeseat_;
}
inline void ProPKGameOperateNotify::set_resumeseat(::google::protobuf::int32 value) {
  set_has_resumeseat();
  resumeseat_ = value;
}

// optional int32 ActionMask = 3;
inline bool ProPKGameOperateNotify::has_actionmask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameOperateNotify::set_has_actionmask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameOperateNotify::clear_has_actionmask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameOperateNotify::clear_actionmask() {
  actionmask_ = 0;
  clear_has_actionmask();
}
inline ::google::protobuf::int32 ProPKGameOperateNotify::actionmask() const {
  return actionmask_;
}
inline void ProPKGameOperateNotify::set_actionmask(::google::protobuf::int32 value) {
  set_has_actionmask();
  actionmask_ = value;
}

// optional int32 ActionCard = 4;
inline bool ProPKGameOperateNotify::has_actioncard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameOperateNotify::set_has_actioncard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameOperateNotify::clear_has_actioncard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameOperateNotify::clear_actioncard() {
  actioncard_ = 0;
  clear_has_actioncard();
}
inline ::google::protobuf::int32 ProPKGameOperateNotify::actioncard() const {
  return actioncard_;
}
inline void ProPKGameOperateNotify::set_actioncard(::google::protobuf::int32 value) {
  set_has_actioncard();
  actioncard_ = value;
}

// optional int32 time = 5;
inline bool ProPKGameOperateNotify::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameOperateNotify::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameOperateNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameOperateNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProPKGameOperateNotify::time() const {
  return time_;
}
inline void ProPKGameOperateNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 operateseat = 6;
inline bool ProPKGameOperateNotify::has_operateseat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameOperateNotify::set_has_operateseat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameOperateNotify::clear_has_operateseat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameOperateNotify::clear_operateseat() {
  operateseat_ = 0;
  clear_has_operateseat();
}
inline ::google::protobuf::int32 ProPKGameOperateNotify::operateseat() const {
  return operateseat_;
}
inline void ProPKGameOperateNotify::set_operateseat(::google::protobuf::int32 value) {
  set_has_operateseat();
  operateseat_ = value;
}

// -------------------------------------------------------------------

// ProPKGameOperateResult

// optional int32 wOperateUser = 2;
inline bool ProPKGameOperateResult::has_woperateuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameOperateResult::set_has_woperateuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameOperateResult::clear_has_woperateuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameOperateResult::clear_woperateuser() {
  woperateuser_ = 0;
  clear_has_woperateuser();
}
inline ::google::protobuf::int32 ProPKGameOperateResult::woperateuser() const {
  return woperateuser_;
}
inline void ProPKGameOperateResult::set_woperateuser(::google::protobuf::int32 value) {
  set_has_woperateuser();
  woperateuser_ = value;
}

// optional int32 wProvideUser = 3;
inline bool ProPKGameOperateResult::has_wprovideuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameOperateResult::set_has_wprovideuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameOperateResult::clear_has_wprovideuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameOperateResult::clear_wprovideuser() {
  wprovideuser_ = 0;
  clear_has_wprovideuser();
}
inline ::google::protobuf::int32 ProPKGameOperateResult::wprovideuser() const {
  return wprovideuser_;
}
inline void ProPKGameOperateResult::set_wprovideuser(::google::protobuf::int32 value) {
  set_has_wprovideuser();
  wprovideuser_ = value;
}

// optional int32 wOperateCode = 4;
inline bool ProPKGameOperateResult::has_woperatecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameOperateResult::set_has_woperatecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameOperateResult::clear_has_woperatecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameOperateResult::clear_woperatecode() {
  woperatecode_ = 0;
  clear_has_woperatecode();
}
inline ::google::protobuf::int32 ProPKGameOperateResult::woperatecode() const {
  return woperatecode_;
}
inline void ProPKGameOperateResult::set_woperatecode(::google::protobuf::int32 value) {
  set_has_woperatecode();
  woperatecode_ = value;
}

// optional int32 cbOperateCard = 5;
inline bool ProPKGameOperateResult::has_cboperatecard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameOperateResult::set_has_cboperatecard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameOperateResult::clear_has_cboperatecard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameOperateResult::clear_cboperatecard() {
  cboperatecard_ = 0;
  clear_has_cboperatecard();
}
inline ::google::protobuf::int32 ProPKGameOperateResult::cboperatecard() const {
  return cboperatecard_;
}
inline void ProPKGameOperateResult::set_cboperatecard(::google::protobuf::int32 value) {
  set_has_cboperatecard();
  cboperatecard_ = value;
}

// repeated int32 handmahs = 6;
inline int ProPKGameOperateResult::handmahs_size() const {
  return handmahs_.size();
}
inline void ProPKGameOperateResult::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameOperateResult::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProPKGameOperateResult::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProPKGameOperateResult::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameOperateResult::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameOperateResult::mutable_handmahs() {
  return &handmahs_;
}

// optional int32 handcount = 7;
inline bool ProPKGameOperateResult::has_handcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameOperateResult::set_has_handcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameOperateResult::clear_has_handcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameOperateResult::clear_handcount() {
  handcount_ = 0;
  clear_has_handcount();
}
inline ::google::protobuf::int32 ProPKGameOperateResult::handcount() const {
  return handcount_;
}
inline void ProPKGameOperateResult::set_handcount(::google::protobuf::int32 value) {
  set_has_handcount();
  handcount_ = value;
}

// -------------------------------------------------------------------

// ProPKGameOperateRequest

// optional int32 seat = 2;
inline bool ProPKGameOperateRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameOperateRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameOperateRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameOperateRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameOperateRequest::seat() const {
  return seat_;
}
inline void ProPKGameOperateRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 wOperateCode = 3;
inline bool ProPKGameOperateRequest::has_woperatecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameOperateRequest::set_has_woperatecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameOperateRequest::clear_has_woperatecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameOperateRequest::clear_woperatecode() {
  woperatecode_ = 0;
  clear_has_woperatecode();
}
inline ::google::protobuf::int32 ProPKGameOperateRequest::woperatecode() const {
  return woperatecode_;
}
inline void ProPKGameOperateRequest::set_woperatecode(::google::protobuf::int32 value) {
  set_has_woperatecode();
  woperatecode_ = value;
}

// optional int32 cbOperateCard = 4;
inline bool ProPKGameOperateRequest::has_cboperatecard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameOperateRequest::set_has_cboperatecard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameOperateRequest::clear_has_cboperatecard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameOperateRequest::clear_cboperatecard() {
  cboperatecard_ = 0;
  clear_has_cboperatecard();
}
inline ::google::protobuf::int32 ProPKGameOperateRequest::cboperatecard() const {
  return cboperatecard_;
}
inline void ProPKGameOperateRequest::set_cboperatecard(::google::protobuf::int32 value) {
  set_has_cboperatecard();
  cboperatecard_ = value;
}

// -------------------------------------------------------------------

// ProPKGameTrust

// optional int32 seat = 2;
inline bool ProPKGameTrust::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameTrust::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameTrust::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameTrust::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameTrust::seat() const {
  return seat_;
}
inline void ProPKGameTrust::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional bool isTrust = 3;
inline bool ProPKGameTrust::has_istrust() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameTrust::set_has_istrust() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameTrust::clear_has_istrust() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameTrust::clear_istrust() {
  istrust_ = false;
  clear_has_istrust();
}
inline bool ProPKGameTrust::istrust() const {
  return istrust_;
}
inline void ProPKGameTrust::set_istrust(bool value) {
  set_has_istrust();
  istrust_ = value;
}

// -------------------------------------------------------------------

// ProPKGameOutMahRequest

// optional int32 seat = 2;
inline bool ProPKGameOutMahRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameOutMahRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameOutMahRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameOutMahRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::seat() const {
  return seat_;
}
inline void ProPKGameOutMahRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 outMahs = 3;
inline int ProPKGameOutMahRequest::outmahs_size() const {
  return outmahs_.size();
}
inline void ProPKGameOutMahRequest::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProPKGameOutMahRequest::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProPKGameOutMahRequest::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameOutMahRequest::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameOutMahRequest::mutable_outmahs() {
  return &outmahs_;
}

// optional int32 outcardnum = 4;
inline bool ProPKGameOutMahRequest::has_outcardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameOutMahRequest::set_has_outcardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameOutMahRequest::clear_has_outcardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameOutMahRequest::clear_outcardnum() {
  outcardnum_ = 0;
  clear_has_outcardnum();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::outcardnum() const {
  return outcardnum_;
}
inline void ProPKGameOutMahRequest::set_outcardnum(::google::protobuf::int32 value) {
  set_has_outcardnum();
  outcardnum_ = value;
}

// optional int32 outcardtype = 5;
inline bool ProPKGameOutMahRequest::has_outcardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameOutMahRequest::set_has_outcardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameOutMahRequest::clear_has_outcardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameOutMahRequest::clear_outcardtype() {
  outcardtype_ = 0;
  clear_has_outcardtype();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::outcardtype() const {
  return outcardtype_;
}
inline void ProPKGameOutMahRequest::set_outcardtype(::google::protobuf::int32 value) {
  set_has_outcardtype();
  outcardtype_ = value;
}

// optional int32 outcardseriesflag = 6;
inline bool ProPKGameOutMahRequest::has_outcardseriesflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameOutMahRequest::set_has_outcardseriesflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameOutMahRequest::clear_has_outcardseriesflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameOutMahRequest::clear_outcardseriesflag() {
  outcardseriesflag_ = 0;
  clear_has_outcardseriesflag();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::outcardseriesflag() const {
  return outcardseriesflag_;
}
inline void ProPKGameOutMahRequest::set_outcardseriesflag(::google::protobuf::int32 value) {
  set_has_outcardseriesflag();
  outcardseriesflag_ = value;
}

// optional int32 outcardseriesnums = 7;
inline bool ProPKGameOutMahRequest::has_outcardseriesnums() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameOutMahRequest::set_has_outcardseriesnums() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameOutMahRequest::clear_has_outcardseriesnums() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameOutMahRequest::clear_outcardseriesnums() {
  outcardseriesnums_ = 0;
  clear_has_outcardseriesnums();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::outcardseriesnums() const {
  return outcardseriesnums_;
}
inline void ProPKGameOutMahRequest::set_outcardseriesnums(::google::protobuf::int32 value) {
  set_has_outcardseriesnums();
  outcardseriesnums_ = value;
}

// optional int32 outcardpoint = 8;
inline bool ProPKGameOutMahRequest::has_outcardpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProPKGameOutMahRequest::set_has_outcardpoint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProPKGameOutMahRequest::clear_has_outcardpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProPKGameOutMahRequest::clear_outcardpoint() {
  outcardpoint_ = 0;
  clear_has_outcardpoint();
}
inline ::google::protobuf::int32 ProPKGameOutMahRequest::outcardpoint() const {
  return outcardpoint_;
}
inline void ProPKGameOutMahRequest::set_outcardpoint(::google::protobuf::int32 value) {
  set_has_outcardpoint();
  outcardpoint_ = value;
}

// -------------------------------------------------------------------

// ProPKGameCatchCard

// optional int32 seat = 2;
inline bool ProPKGameCatchCard::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameCatchCard::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameCatchCard::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameCatchCard::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameCatchCard::seat() const {
  return seat_;
}
inline void ProPKGameCatchCard::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 cbCardData = 3;
inline bool ProPKGameCatchCard::has_cbcarddata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameCatchCard::set_has_cbcarddata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameCatchCard::clear_has_cbcarddata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameCatchCard::clear_cbcarddata() {
  cbcarddata_ = 0;
  clear_has_cbcarddata();
}
inline ::google::protobuf::int32 ProPKGameCatchCard::cbcarddata() const {
  return cbcarddata_;
}
inline void ProPKGameCatchCard::set_cbcarddata(::google::protobuf::int32 value) {
  set_has_cbcarddata();
  cbcarddata_ = value;
}

// optional int32 wActionMask = 4;
inline bool ProPKGameCatchCard::has_wactionmask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameCatchCard::set_has_wactionmask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameCatchCard::clear_has_wactionmask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameCatchCard::clear_wactionmask() {
  wactionmask_ = 0;
  clear_has_wactionmask();
}
inline ::google::protobuf::int32 ProPKGameCatchCard::wactionmask() const {
  return wactionmask_;
}
inline void ProPKGameCatchCard::set_wactionmask(::google::protobuf::int32 value) {
  set_has_wactionmask();
  wactionmask_ = value;
}

// optional bool cbIsNotGang = 5;
inline bool ProPKGameCatchCard::has_cbisnotgang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameCatchCard::set_has_cbisnotgang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameCatchCard::clear_has_cbisnotgang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameCatchCard::clear_cbisnotgang() {
  cbisnotgang_ = false;
  clear_has_cbisnotgang();
}
inline bool ProPKGameCatchCard::cbisnotgang() const {
  return cbisnotgang_;
}
inline void ProPKGameCatchCard::set_cbisnotgang(bool value) {
  set_has_cbisnotgang();
  cbisnotgang_ = value;
}

// optional int32 cbLeftCount = 6;
inline bool ProPKGameCatchCard::has_cbleftcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameCatchCard::set_has_cbleftcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameCatchCard::clear_has_cbleftcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameCatchCard::clear_cbleftcount() {
  cbleftcount_ = 0;
  clear_has_cbleftcount();
}
inline ::google::protobuf::int32 ProPKGameCatchCard::cbleftcount() const {
  return cbleftcount_;
}
inline void ProPKGameCatchCard::set_cbleftcount(::google::protobuf::int32 value) {
  set_has_cbleftcount();
  cbleftcount_ = value;
}

// -------------------------------------------------------------------

// PKMahList

// repeated int32 Mahs = 1;
inline int PKMahList::mahs_size() const {
  return mahs_.size();
}
inline void PKMahList::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 PKMahList::mahs(int index) const {
  return mahs_.Get(index);
}
inline void PKMahList::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void PKMahList::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PKMahList::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PKMahList::mutable_mahs() {
  return &mahs_;
}

// -------------------------------------------------------------------

// PKScoreList

// repeated int32 roundScore = 1;
inline int PKScoreList::roundscore_size() const {
  return roundscore_.size();
}
inline void PKScoreList::clear_roundscore() {
  roundscore_.Clear();
}
inline ::google::protobuf::int32 PKScoreList::roundscore(int index) const {
  return roundscore_.Get(index);
}
inline void PKScoreList::set_roundscore(int index, ::google::protobuf::int32 value) {
  roundscore_.Set(index, value);
}
inline void PKScoreList::add_roundscore(::google::protobuf::int32 value) {
  roundscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PKScoreList::roundscore() const {
  return roundscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PKScoreList::mutable_roundscore() {
  return &roundscore_;
}

// -------------------------------------------------------------------

// PKAwardList

// optional int32 seat = 1;
inline bool PKAwardList::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PKAwardList::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PKAwardList::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PKAwardList::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 PKAwardList::seat() const {
  return seat_;
}
inline void PKAwardList::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 CardsData = 2;
inline int PKAwardList::cardsdata_size() const {
  return cardsdata_.size();
}
inline void PKAwardList::clear_cardsdata() {
  cardsdata_.Clear();
}
inline ::google::protobuf::int32 PKAwardList::cardsdata(int index) const {
  return cardsdata_.Get(index);
}
inline void PKAwardList::set_cardsdata(int index, ::google::protobuf::int32 value) {
  cardsdata_.Set(index, value);
}
inline void PKAwardList::add_cardsdata(::google::protobuf::int32 value) {
  cardsdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PKAwardList::cardsdata() const {
  return cardsdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PKAwardList::mutable_cardsdata() {
  return &cardsdata_;
}

// optional int32 awardScore = 3;
inline bool PKAwardList::has_awardscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PKAwardList::set_has_awardscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PKAwardList::clear_has_awardscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PKAwardList::clear_awardscore() {
  awardscore_ = 0;
  clear_has_awardscore();
}
inline ::google::protobuf::int32 PKAwardList::awardscore() const {
  return awardscore_;
}
inline void PKAwardList::set_awardscore(::google::protobuf::int32 value) {
  set_has_awardscore();
  awardscore_ = value;
}

// -------------------------------------------------------------------

// ProPKGameEnd

// optional int32 lGameTax = 2;
inline bool ProPKGameEnd::has_lgametax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameEnd::set_has_lgametax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameEnd::clear_has_lgametax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameEnd::clear_lgametax() {
  lgametax_ = 0;
  clear_has_lgametax();
}
inline ::google::protobuf::int32 ProPKGameEnd::lgametax() const {
  return lgametax_;
}
inline void ProPKGameEnd::set_lgametax(::google::protobuf::int32 value) {
  set_has_lgametax();
  lgametax_ = value;
}

// repeated int32 cbChongGuang = 3;
inline int ProPKGameEnd::cbchongguang_size() const {
  return cbchongguang_.size();
}
inline void ProPKGameEnd::clear_cbchongguang() {
  cbchongguang_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::cbchongguang(int index) const {
  return cbchongguang_.Get(index);
}
inline void ProPKGameEnd::set_cbchongguang(int index, ::google::protobuf::int32 value) {
  cbchongguang_.Set(index, value);
}
inline void ProPKGameEnd::add_cbchongguang(::google::protobuf::int32 value) {
  cbchongguang_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::cbchongguang() const {
  return cbchongguang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_cbchongguang() {
  return &cbchongguang_;
}

// repeated int32 cbBaWangKing = 4;
inline int ProPKGameEnd::cbbawangking_size() const {
  return cbbawangking_.size();
}
inline void ProPKGameEnd::clear_cbbawangking() {
  cbbawangking_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::cbbawangking(int index) const {
  return cbbawangking_.Get(index);
}
inline void ProPKGameEnd::set_cbbawangking(int index, ::google::protobuf::int32 value) {
  cbbawangking_.Set(index, value);
}
inline void ProPKGameEnd::add_cbbawangking(::google::protobuf::int32 value) {
  cbbawangking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::cbbawangking() const {
  return cbbawangking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_cbbawangking() {
  return &cbbawangking_;
}

// optional int32 wProvideUser = 5;
inline bool ProPKGameEnd::has_wprovideuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameEnd::set_has_wprovideuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameEnd::clear_has_wprovideuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameEnd::clear_wprovideuser() {
  wprovideuser_ = 0;
  clear_has_wprovideuser();
}
inline ::google::protobuf::int32 ProPKGameEnd::wprovideuser() const {
  return wprovideuser_;
}
inline void ProPKGameEnd::set_wprovideuser(::google::protobuf::int32 value) {
  set_has_wprovideuser();
  wprovideuser_ = value;
}

// optional int32 cbChiHuCard = 6;
inline bool ProPKGameEnd::has_cbchihucard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameEnd::set_has_cbchihucard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameEnd::clear_has_cbchihucard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameEnd::clear_cbchihucard() {
  cbchihucard_ = 0;
  clear_has_cbchihucard();
}
inline ::google::protobuf::int32 ProPKGameEnd::cbchihucard() const {
  return cbchihucard_;
}
inline void ProPKGameEnd::set_cbchihucard(::google::protobuf::int32 value) {
  set_has_cbchihucard();
  cbchihucard_ = value;
}

// repeated int32 dwChiHuKind = 7;
inline int ProPKGameEnd::dwchihukind_size() const {
  return dwchihukind_.size();
}
inline void ProPKGameEnd::clear_dwchihukind() {
  dwchihukind_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::dwchihukind(int index) const {
  return dwchihukind_.Get(index);
}
inline void ProPKGameEnd::set_dwchihukind(int index, ::google::protobuf::int32 value) {
  dwchihukind_.Set(index, value);
}
inline void ProPKGameEnd::add_dwchihukind(::google::protobuf::int32 value) {
  dwchihukind_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::dwchihukind() const {
  return dwchihukind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_dwchihukind() {
  return &dwchihukind_;
}

// repeated int32 dwChiHuRight = 8;
inline int ProPKGameEnd::dwchihuright_size() const {
  return dwchihuright_.size();
}
inline void ProPKGameEnd::clear_dwchihuright() {
  dwchihuright_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::dwchihuright(int index) const {
  return dwchihuright_.Get(index);
}
inline void ProPKGameEnd::set_dwchihuright(int index, ::google::protobuf::int32 value) {
  dwchihuright_.Set(index, value);
}
inline void ProPKGameEnd::add_dwchihuright(::google::protobuf::int32 value) {
  dwchihuright_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::dwchihuright() const {
  return dwchihuright_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_dwchihuright() {
  return &dwchihuright_;
}

// repeated int32 lTotaslGameScore = 9;
inline int ProPKGameEnd::ltotaslgamescore_size() const {
  return ltotaslgamescore_.size();
}
inline void ProPKGameEnd::clear_ltotaslgamescore() {
  ltotaslgamescore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::ltotaslgamescore(int index) const {
  return ltotaslgamescore_.Get(index);
}
inline void ProPKGameEnd::set_ltotaslgamescore(int index, ::google::protobuf::int32 value) {
  ltotaslgamescore_.Set(index, value);
}
inline void ProPKGameEnd::add_ltotaslgamescore(::google::protobuf::int32 value) {
  ltotaslgamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::ltotaslgamescore() const {
  return ltotaslgamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_ltotaslgamescore() {
  return &ltotaslgamescore_;
}

// repeated int32 lCurrentGameScore = 10;
inline int ProPKGameEnd::lcurrentgamescore_size() const {
  return lcurrentgamescore_.size();
}
inline void ProPKGameEnd::clear_lcurrentgamescore() {
  lcurrentgamescore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::lcurrentgamescore(int index) const {
  return lcurrentgamescore_.Get(index);
}
inline void ProPKGameEnd::set_lcurrentgamescore(int index, ::google::protobuf::int32 value) {
  lcurrentgamescore_.Set(index, value);
}
inline void ProPKGameEnd::add_lcurrentgamescore(::google::protobuf::int32 value) {
  lcurrentgamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::lcurrentgamescore() const {
  return lcurrentgamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_lcurrentgamescore() {
  return &lcurrentgamescore_;
}

// repeated int32 lCurrentPointScore = 11;
inline int ProPKGameEnd::lcurrentpointscore_size() const {
  return lcurrentpointscore_.size();
}
inline void ProPKGameEnd::clear_lcurrentpointscore() {
  lcurrentpointscore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::lcurrentpointscore(int index) const {
  return lcurrentpointscore_.Get(index);
}
inline void ProPKGameEnd::set_lcurrentpointscore(int index, ::google::protobuf::int32 value) {
  lcurrentpointscore_.Set(index, value);
}
inline void ProPKGameEnd::add_lcurrentpointscore(::google::protobuf::int32 value) {
  lcurrentpointscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::lcurrentpointscore() const {
  return lcurrentpointscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_lcurrentpointscore() {
  return &lcurrentpointscore_;
}

// repeated int32 lAttachScore = 12;
inline int ProPKGameEnd::lattachscore_size() const {
  return lattachscore_.size();
}
inline void ProPKGameEnd::clear_lattachscore() {
  lattachscore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::lattachscore(int index) const {
  return lattachscore_.Get(index);
}
inline void ProPKGameEnd::set_lattachscore(int index, ::google::protobuf::int32 value) {
  lattachscore_.Set(index, value);
}
inline void ProPKGameEnd::add_lattachscore(::google::protobuf::int32 value) {
  lattachscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::lattachscore() const {
  return lattachscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_lattachscore() {
  return &lattachscore_;
}

// repeated .PKMahList cbHandCardData = 13;
inline int ProPKGameEnd::cbhandcarddata_size() const {
  return cbhandcarddata_.size();
}
inline void ProPKGameEnd::clear_cbhandcarddata() {
  cbhandcarddata_.Clear();
}
inline const ::PKMahList& ProPKGameEnd::cbhandcarddata(int index) const {
  return cbhandcarddata_.Get(index);
}
inline ::PKMahList* ProPKGameEnd::mutable_cbhandcarddata(int index) {
  return cbhandcarddata_.Mutable(index);
}
inline ::PKMahList* ProPKGameEnd::add_cbhandcarddata() {
  return cbhandcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKMahList >&
ProPKGameEnd::cbhandcarddata() const {
  return cbhandcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKMahList >*
ProPKGameEnd::mutable_cbhandcarddata() {
  return &cbhandcarddata_;
}

// repeated .PKAwardList cbAwardCardData = 14;
inline int ProPKGameEnd::cbawardcarddata_size() const {
  return cbawardcarddata_.size();
}
inline void ProPKGameEnd::clear_cbawardcarddata() {
  cbawardcarddata_.Clear();
}
inline const ::PKAwardList& ProPKGameEnd::cbawardcarddata(int index) const {
  return cbawardcarddata_.Get(index);
}
inline ::PKAwardList* ProPKGameEnd::mutable_cbawardcarddata(int index) {
  return cbawardcarddata_.Mutable(index);
}
inline ::PKAwardList* ProPKGameEnd::add_cbawardcarddata() {
  return cbawardcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKAwardList >&
ProPKGameEnd::cbawardcarddata() const {
  return cbawardcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKAwardList >*
ProPKGameEnd::mutable_cbawardcarddata() {
  return &cbawardcarddata_;
}

// repeated int32 lOnlyWinScore = 15;
inline int ProPKGameEnd::lonlywinscore_size() const {
  return lonlywinscore_.size();
}
inline void ProPKGameEnd::clear_lonlywinscore() {
  lonlywinscore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::lonlywinscore(int index) const {
  return lonlywinscore_.Get(index);
}
inline void ProPKGameEnd::set_lonlywinscore(int index, ::google::protobuf::int32 value) {
  lonlywinscore_.Set(index, value);
}
inline void ProPKGameEnd::add_lonlywinscore(::google::protobuf::int32 value) {
  lonlywinscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::lonlywinscore() const {
  return lonlywinscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_lonlywinscore() {
  return &lonlywinscore_;
}

// optional bool bRoundEnd = 16;
inline bool ProPKGameEnd::has_broundend() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProPKGameEnd::set_has_broundend() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProPKGameEnd::clear_has_broundend() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProPKGameEnd::clear_broundend() {
  broundend_ = false;
  clear_has_broundend();
}
inline bool ProPKGameEnd::broundend() const {
  return broundend_;
}
inline void ProPKGameEnd::set_broundend(bool value) {
  set_has_broundend();
  broundend_ = value;
}

// repeated int32 lHuiTouScore = 17;
inline int ProPKGameEnd::lhuitouscore_size() const {
  return lhuitouscore_.size();
}
inline void ProPKGameEnd::clear_lhuitouscore() {
  lhuitouscore_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::lhuitouscore(int index) const {
  return lhuitouscore_.Get(index);
}
inline void ProPKGameEnd::set_lhuitouscore(int index, ::google::protobuf::int32 value) {
  lhuitouscore_.Set(index, value);
}
inline void ProPKGameEnd::add_lhuitouscore(::google::protobuf::int32 value) {
  lhuitouscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::lhuitouscore() const {
  return lhuitouscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_lhuitouscore() {
  return &lhuitouscore_;
}

// optional bool bZhuangWin = 18;
inline bool ProPKGameEnd::has_bzhuangwin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProPKGameEnd::set_has_bzhuangwin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProPKGameEnd::clear_has_bzhuangwin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProPKGameEnd::clear_bzhuangwin() {
  bzhuangwin_ = false;
  clear_has_bzhuangwin();
}
inline bool ProPKGameEnd::bzhuangwin() const {
  return bzhuangwin_;
}
inline void ProPKGameEnd::set_bzhuangwin(bool value) {
  set_has_bzhuangwin();
  bzhuangwin_ = value;
}

// repeated int32 cbJiangMaCardData = 19;
inline int ProPKGameEnd::cbjiangmacarddata_size() const {
  return cbjiangmacarddata_.size();
}
inline void ProPKGameEnd::clear_cbjiangmacarddata() {
  cbjiangmacarddata_.Clear();
}
inline ::google::protobuf::int32 ProPKGameEnd::cbjiangmacarddata(int index) const {
  return cbjiangmacarddata_.Get(index);
}
inline void ProPKGameEnd::set_cbjiangmacarddata(int index, ::google::protobuf::int32 value) {
  cbjiangmacarddata_.Set(index, value);
}
inline void ProPKGameEnd::add_cbjiangmacarddata(::google::protobuf::int32 value) {
  cbjiangmacarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameEnd::cbjiangmacarddata() const {
  return cbjiangmacarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameEnd::mutable_cbjiangmacarddata() {
  return &cbjiangmacarddata_;
}

// repeated .PKScoreList detailedScores = 20;
inline int ProPKGameEnd::detailedscores_size() const {
  return detailedscores_.size();
}
inline void ProPKGameEnd::clear_detailedscores() {
  detailedscores_.Clear();
}
inline const ::PKScoreList& ProPKGameEnd::detailedscores(int index) const {
  return detailedscores_.Get(index);
}
inline ::PKScoreList* ProPKGameEnd::mutable_detailedscores(int index) {
  return detailedscores_.Mutable(index);
}
inline ::PKScoreList* ProPKGameEnd::add_detailedscores() {
  return detailedscores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKScoreList >&
ProPKGameEnd::detailedscores() const {
  return detailedscores_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKScoreList >*
ProPKGameEnd::mutable_detailedscores() {
  return &detailedscores_;
}

// optional int32 fangShuiSaet = 21;
inline bool ProPKGameEnd::has_fangshuisaet() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProPKGameEnd::set_has_fangshuisaet() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProPKGameEnd::clear_has_fangshuisaet() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProPKGameEnd::clear_fangshuisaet() {
  fangshuisaet_ = 0;
  clear_has_fangshuisaet();
}
inline ::google::protobuf::int32 ProPKGameEnd::fangshuisaet() const {
  return fangshuisaet_;
}
inline void ProPKGameEnd::set_fangshuisaet(::google::protobuf::int32 value) {
  set_has_fangshuisaet();
  fangshuisaet_ = value;
}

// -------------------------------------------------------------------

// ProPKGameQuickSoundRequest

// optional int32 desk_id = 2;
inline bool ProPKGameQuickSoundRequest::has_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameQuickSoundRequest::set_has_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameQuickSoundRequest::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameQuickSoundRequest::clear_desk_id() {
  desk_id_ = 0;
  clear_has_desk_id();
}
inline ::google::protobuf::int32 ProPKGameQuickSoundRequest::desk_id() const {
  return desk_id_;
}
inline void ProPKGameQuickSoundRequest::set_desk_id(::google::protobuf::int32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional int32 seat_id = 3;
inline bool ProPKGameQuickSoundRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameQuickSoundRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameQuickSoundRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameQuickSoundRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameQuickSoundRequest::seat_id() const {
  return seat_id_;
}
inline void ProPKGameQuickSoundRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 sound_id = 4;
inline bool ProPKGameQuickSoundRequest::has_sound_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameQuickSoundRequest::set_has_sound_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameQuickSoundRequest::clear_has_sound_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameQuickSoundRequest::clear_sound_id() {
  sound_id_ = 0;
  clear_has_sound_id();
}
inline ::google::protobuf::int32 ProPKGameQuickSoundRequest::sound_id() const {
  return sound_id_;
}
inline void ProPKGameQuickSoundRequest::set_sound_id(::google::protobuf::int32 value) {
  set_has_sound_id();
  sound_id_ = value;
}

// optional bytes text = 5;
inline bool ProPKGameQuickSoundRequest::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameQuickSoundRequest::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameQuickSoundRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameQuickSoundRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ProPKGameQuickSoundRequest::text() const {
  return *text_;
}
inline void ProPKGameQuickSoundRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProPKGameQuickSoundRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProPKGameQuickSoundRequest::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameQuickSoundRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ProPKGameQuickSoundRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameQuickSoundRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProPKGameQuickSoundResponse

// optional int32 desk_id = 2;
inline bool ProPKGameQuickSoundResponse::has_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameQuickSoundResponse::set_has_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameQuickSoundResponse::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameQuickSoundResponse::clear_desk_id() {
  desk_id_ = 0;
  clear_has_desk_id();
}
inline ::google::protobuf::int32 ProPKGameQuickSoundResponse::desk_id() const {
  return desk_id_;
}
inline void ProPKGameQuickSoundResponse::set_desk_id(::google::protobuf::int32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional int32 seat_id = 3;
inline bool ProPKGameQuickSoundResponse::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameQuickSoundResponse::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameQuickSoundResponse::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameQuickSoundResponse::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameQuickSoundResponse::seat_id() const {
  return seat_id_;
}
inline void ProPKGameQuickSoundResponse::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 sound_id = 4;
inline bool ProPKGameQuickSoundResponse::has_sound_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameQuickSoundResponse::set_has_sound_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameQuickSoundResponse::clear_has_sound_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameQuickSoundResponse::clear_sound_id() {
  sound_id_ = 0;
  clear_has_sound_id();
}
inline ::google::protobuf::int32 ProPKGameQuickSoundResponse::sound_id() const {
  return sound_id_;
}
inline void ProPKGameQuickSoundResponse::set_sound_id(::google::protobuf::int32 value) {
  set_has_sound_id();
  sound_id_ = value;
}

// optional bytes text = 5;
inline bool ProPKGameQuickSoundResponse::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameQuickSoundResponse::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameQuickSoundResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameQuickSoundResponse::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ProPKGameQuickSoundResponse::text() const {
  return *text_;
}
inline void ProPKGameQuickSoundResponse::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProPKGameQuickSoundResponse::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProPKGameQuickSoundResponse::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameQuickSoundResponse::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ProPKGameQuickSoundResponse::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameQuickSoundResponse::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProPKGameSendDiscardMahs

// optional int32 seat_id = 2;
inline bool ProPKGameSendDiscardMahs::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameSendDiscardMahs::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameSendDiscardMahs::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameSendDiscardMahs::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameSendDiscardMahs::seat_id() const {
  return seat_id_;
}
inline void ProPKGameSendDiscardMahs::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// repeated .PKMahList cbCardData = 3;
inline int ProPKGameSendDiscardMahs::cbcarddata_size() const {
  return cbcarddata_.size();
}
inline void ProPKGameSendDiscardMahs::clear_cbcarddata() {
  cbcarddata_.Clear();
}
inline const ::PKMahList& ProPKGameSendDiscardMahs::cbcarddata(int index) const {
  return cbcarddata_.Get(index);
}
inline ::PKMahList* ProPKGameSendDiscardMahs::mutable_cbcarddata(int index) {
  return cbcarddata_.Mutable(index);
}
inline ::PKMahList* ProPKGameSendDiscardMahs::add_cbcarddata() {
  return cbcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKMahList >&
ProPKGameSendDiscardMahs::cbcarddata() const {
  return cbcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKMahList >*
ProPKGameSendDiscardMahs::mutable_cbcarddata() {
  return &cbcarddata_;
}

// optional int32 deskCount = 4;
inline bool ProPKGameSendDiscardMahs::has_deskcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameSendDiscardMahs::set_has_deskcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameSendDiscardMahs::clear_has_deskcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameSendDiscardMahs::clear_deskcount() {
  deskcount_ = 0;
  clear_has_deskcount();
}
inline ::google::protobuf::int32 ProPKGameSendDiscardMahs::deskcount() const {
  return deskcount_;
}
inline void ProPKGameSendDiscardMahs::set_deskcount(::google::protobuf::int32 value) {
  set_has_deskcount();
  deskcount_ = value;
}

// -------------------------------------------------------------------

// PKWeaveItem

// optional int32 weaveKind = 1;
inline bool PKWeaveItem::has_weavekind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PKWeaveItem::set_has_weavekind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PKWeaveItem::clear_has_weavekind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PKWeaveItem::clear_weavekind() {
  weavekind_ = 0;
  clear_has_weavekind();
}
inline ::google::protobuf::int32 PKWeaveItem::weavekind() const {
  return weavekind_;
}
inline void PKWeaveItem::set_weavekind(::google::protobuf::int32 value) {
  set_has_weavekind();
  weavekind_ = value;
}

// optional int32 centercard = 2;
inline bool PKWeaveItem::has_centercard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PKWeaveItem::set_has_centercard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PKWeaveItem::clear_has_centercard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PKWeaveItem::clear_centercard() {
  centercard_ = 0;
  clear_has_centercard();
}
inline ::google::protobuf::int32 PKWeaveItem::centercard() const {
  return centercard_;
}
inline void PKWeaveItem::set_centercard(::google::protobuf::int32 value) {
  set_has_centercard();
  centercard_ = value;
}

// optional int32 provideUser = 3;
inline bool PKWeaveItem::has_provideuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PKWeaveItem::set_has_provideuser() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PKWeaveItem::clear_has_provideuser() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PKWeaveItem::clear_provideuser() {
  provideuser_ = 0;
  clear_has_provideuser();
}
inline ::google::protobuf::int32 PKWeaveItem::provideuser() const {
  return provideuser_;
}
inline void PKWeaveItem::set_provideuser(::google::protobuf::int32 value) {
  set_has_provideuser();
  provideuser_ = value;
}

// optional int32 cardsize = 4;
inline bool PKWeaveItem::has_cardsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PKWeaveItem::set_has_cardsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PKWeaveItem::clear_has_cardsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PKWeaveItem::clear_cardsize() {
  cardsize_ = 0;
  clear_has_cardsize();
}
inline ::google::protobuf::int32 PKWeaveItem::cardsize() const {
  return cardsize_;
}
inline void PKWeaveItem::set_cardsize(::google::protobuf::int32 value) {
  set_has_cardsize();
  cardsize_ = value;
}

// -------------------------------------------------------------------

// PKWeaveItems

// repeated .PKWeaveItem items = 1;
inline int PKWeaveItems::items_size() const {
  return items_.size();
}
inline void PKWeaveItems::clear_items() {
  items_.Clear();
}
inline const ::PKWeaveItem& PKWeaveItems::items(int index) const {
  return items_.Get(index);
}
inline ::PKWeaveItem* PKWeaveItems::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::PKWeaveItem* PKWeaveItems::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKWeaveItem >&
PKWeaveItems::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKWeaveItem >*
PKWeaveItems::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ProPKGameSendActionMahs

// optional int32 seat_id = 2;
inline bool ProPKGameSendActionMahs::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameSendActionMahs::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameSendActionMahs::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameSendActionMahs::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameSendActionMahs::seat_id() const {
  return seat_id_;
}
inline void ProPKGameSendActionMahs::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// repeated .PKWeaveItems weaves = 3;
inline int ProPKGameSendActionMahs::weaves_size() const {
  return weaves_.size();
}
inline void ProPKGameSendActionMahs::clear_weaves() {
  weaves_.Clear();
}
inline const ::PKWeaveItems& ProPKGameSendActionMahs::weaves(int index) const {
  return weaves_.Get(index);
}
inline ::PKWeaveItems* ProPKGameSendActionMahs::mutable_weaves(int index) {
  return weaves_.Mutable(index);
}
inline ::PKWeaveItems* ProPKGameSendActionMahs::add_weaves() {
  return weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PKWeaveItems >&
ProPKGameSendActionMahs::weaves() const {
  return weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::PKWeaveItems >*
ProPKGameSendActionMahs::mutable_weaves() {
  return &weaves_;
}

// -------------------------------------------------------------------

// ProPKGameBrokenRequest

// optional int32 seat_id = 2;
inline bool ProPKGameBrokenRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameBrokenRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameBrokenRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameBrokenRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameBrokenRequest::seat_id() const {
  return seat_id_;
}
inline void ProPKGameBrokenRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .PKBROKEN_TYPE type = 3;
inline bool ProPKGameBrokenRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameBrokenRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameBrokenRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameBrokenRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::PKBROKEN_TYPE ProPKGameBrokenRequest::type() const {
  return static_cast< ::PKBROKEN_TYPE >(type_);
}
inline void ProPKGameBrokenRequest::set_type(::PKBROKEN_TYPE value) {
  assert(::PKBROKEN_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 time = 4;
inline bool ProPKGameBrokenRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameBrokenRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameBrokenRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameBrokenRequest::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProPKGameBrokenRequest::time() const {
  return time_;
}
inline void ProPKGameBrokenRequest::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProPKGameBrokenOperate

// optional int32 seat_id = 2;
inline bool ProPKGameBrokenOperate::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameBrokenOperate::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameBrokenOperate::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameBrokenOperate::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameBrokenOperate::seat_id() const {
  return seat_id_;
}
inline void ProPKGameBrokenOperate::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .PKBROKEN_OPERATE result = 3 [default = BO_DISAGREE];
inline bool ProPKGameBrokenOperate::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameBrokenOperate::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameBrokenOperate::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameBrokenOperate::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::PKBROKEN_OPERATE ProPKGameBrokenOperate::result() const {
  return static_cast< ::PKBROKEN_OPERATE >(result_);
}
inline void ProPKGameBrokenOperate::set_result(::PKBROKEN_OPERATE value) {
  assert(::PKBROKEN_OPERATE_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ProPKGameBrokenNotify

// optional int32 seat_id = 2;
inline bool ProPKGameBrokenNotify::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameBrokenNotify::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameBrokenNotify::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameBrokenNotify::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameBrokenNotify::seat_id() const {
  return seat_id_;
}
inline void ProPKGameBrokenNotify::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .PKBROKEN_CODE operate_code = 3 [default = BC_SUCCESS];
inline bool ProPKGameBrokenNotify::has_operate_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameBrokenNotify::set_has_operate_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameBrokenNotify::clear_has_operate_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameBrokenNotify::clear_operate_code() {
  operate_code_ = 0;
  clear_has_operate_code();
}
inline ::PKBROKEN_CODE ProPKGameBrokenNotify::operate_code() const {
  return static_cast< ::PKBROKEN_CODE >(operate_code_);
}
inline void ProPKGameBrokenNotify::set_operate_code(::PKBROKEN_CODE value) {
  assert(::PKBROKEN_CODE_IsValid(value));
  set_has_operate_code();
  operate_code_ = value;
}

// -------------------------------------------------------------------

// ProPKGameRuleConfig

// optional int32 game_round = 1;
inline bool ProPKGameRuleConfig::has_game_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameRuleConfig::set_has_game_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameRuleConfig::clear_has_game_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameRuleConfig::clear_game_round() {
  game_round_ = 0;
  clear_has_game_round();
}
inline ::google::protobuf::int32 ProPKGameRuleConfig::game_round() const {
  return game_round_;
}
inline void ProPKGameRuleConfig::set_game_round(::google::protobuf::int32 value) {
  set_has_game_round();
  game_round_ = value;
}

// optional int32 need_card = 2;
inline bool ProPKGameRuleConfig::has_need_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameRuleConfig::set_has_need_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameRuleConfig::clear_has_need_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameRuleConfig::clear_need_card() {
  need_card_ = 0;
  clear_has_need_card();
}
inline ::google::protobuf::int32 ProPKGameRuleConfig::need_card() const {
  return need_card_;
}
inline void ProPKGameRuleConfig::set_need_card(::google::protobuf::int32 value) {
  set_has_need_card();
  need_card_ = value;
}

// optional bool have_MagicCard = 3;
inline bool ProPKGameRuleConfig::has_have_magiccard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameRuleConfig::set_has_have_magiccard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameRuleConfig::clear_has_have_magiccard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameRuleConfig::clear_have_magiccard() {
  have_magiccard_ = false;
  clear_has_have_magiccard();
}
inline bool ProPKGameRuleConfig::have_magiccard() const {
  return have_magiccard_;
}
inline void ProPKGameRuleConfig::set_have_magiccard(bool value) {
  set_has_have_magiccard();
  have_magiccard_ = value;
}

// optional bool have_RedPeach3FirstOut = 4;
inline bool ProPKGameRuleConfig::has_have_redpeach3firstout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameRuleConfig::set_has_have_redpeach3firstout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameRuleConfig::clear_has_have_redpeach3firstout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameRuleConfig::clear_have_redpeach3firstout() {
  have_redpeach3firstout_ = false;
  clear_has_have_redpeach3firstout();
}
inline bool ProPKGameRuleConfig::have_redpeach3firstout() const {
  return have_redpeach3firstout_;
}
inline void ProPKGameRuleConfig::set_have_redpeach3firstout(bool value) {
  set_has_have_redpeach3firstout();
  have_redpeach3firstout_ = value;
}

// optional bool hava_MustOutCard = 5;
inline bool ProPKGameRuleConfig::has_hava_mustoutcard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameRuleConfig::set_has_hava_mustoutcard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameRuleConfig::clear_has_hava_mustoutcard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameRuleConfig::clear_hava_mustoutcard() {
  hava_mustoutcard_ = false;
  clear_has_hava_mustoutcard();
}
inline bool ProPKGameRuleConfig::hava_mustoutcard() const {
  return hava_mustoutcard_;
}
inline void ProPKGameRuleConfig::set_hava_mustoutcard(bool value) {
  set_has_hava_mustoutcard();
  hava_mustoutcard_ = value;
}

// optional int32 nMasterSeat = 6;
inline bool ProPKGameRuleConfig::has_nmasterseat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProPKGameRuleConfig::set_has_nmasterseat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProPKGameRuleConfig::clear_has_nmasterseat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProPKGameRuleConfig::clear_nmasterseat() {
  nmasterseat_ = 0;
  clear_has_nmasterseat();
}
inline ::google::protobuf::int32 ProPKGameRuleConfig::nmasterseat() const {
  return nmasterseat_;
}
inline void ProPKGameRuleConfig::set_nmasterseat(::google::protobuf::int32 value) {
  set_has_nmasterseat();
  nmasterseat_ = value;
}

// optional int32 current_game_count = 7;
inline bool ProPKGameRuleConfig::has_current_game_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProPKGameRuleConfig::set_has_current_game_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProPKGameRuleConfig::clear_has_current_game_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProPKGameRuleConfig::clear_current_game_count() {
  current_game_count_ = 0;
  clear_has_current_game_count();
}
inline ::google::protobuf::int32 ProPKGameRuleConfig::current_game_count() const {
  return current_game_count_;
}
inline void ProPKGameRuleConfig::set_current_game_count(::google::protobuf::int32 value) {
  set_has_current_game_count();
  current_game_count_ = value;
}

// optional bool have_jianma = 8;
inline bool ProPKGameRuleConfig::has_have_jianma() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProPKGameRuleConfig::set_has_have_jianma() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProPKGameRuleConfig::clear_has_have_jianma() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProPKGameRuleConfig::clear_have_jianma() {
  have_jianma_ = false;
  clear_has_have_jianma();
}
inline bool ProPKGameRuleConfig::have_jianma() const {
  return have_jianma_;
}
inline void ProPKGameRuleConfig::set_have_jianma(bool value) {
  set_has_have_jianma();
  have_jianma_ = value;
}

// optional int32 nChongguanNum = 9;
inline bool ProPKGameRuleConfig::has_nchongguannum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProPKGameRuleConfig::set_has_nchongguannum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProPKGameRuleConfig::clear_has_nchongguannum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProPKGameRuleConfig::clear_nchongguannum() {
  nchongguannum_ = 0;
  clear_has_nchongguannum();
}
inline ::google::protobuf::int32 ProPKGameRuleConfig::nchongguannum() const {
  return nchongguannum_;
}
inline void ProPKGameRuleConfig::set_nchongguannum(::google::protobuf::int32 value) {
  set_has_nchongguannum();
  nchongguannum_ = value;
}

// optional bool hava_BaoPei = 10;
inline bool ProPKGameRuleConfig::has_hava_baopei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProPKGameRuleConfig::set_has_hava_baopei() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProPKGameRuleConfig::clear_has_hava_baopei() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProPKGameRuleConfig::clear_hava_baopei() {
  hava_baopei_ = false;
  clear_has_hava_baopei();
}
inline bool ProPKGameRuleConfig::hava_baopei() const {
  return hava_baopei_;
}
inline void ProPKGameRuleConfig::set_hava_baopei(bool value) {
  set_has_hava_baopei();
  hava_baopei_ = value;
}

// optional int32 nPlayerNum = 11;
inline bool ProPKGameRuleConfig::has_nplayernum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProPKGameRuleConfig::set_has_nplayernum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProPKGameRuleConfig::clear_has_nplayernum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProPKGameRuleConfig::clear_nplayernum() {
  nplayernum_ = 0;
  clear_has_nplayernum();
}
inline ::google::protobuf::int32 ProPKGameRuleConfig::nplayernum() const {
  return nplayernum_;
}
inline void ProPKGameRuleConfig::set_nplayernum(::google::protobuf::int32 value) {
  set_has_nplayernum();
  nplayernum_ = value;
}

// optional bytes sRoomNum = 12;
inline bool ProPKGameRuleConfig::has_sroomnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProPKGameRuleConfig::set_has_sroomnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProPKGameRuleConfig::clear_has_sroomnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProPKGameRuleConfig::clear_sroomnum() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    sroomnum_->clear();
  }
  clear_has_sroomnum();
}
inline const ::std::string& ProPKGameRuleConfig::sroomnum() const {
  return *sroomnum_;
}
inline void ProPKGameRuleConfig::set_sroomnum(const ::std::string& value) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(value);
}
inline void ProPKGameRuleConfig::set_sroomnum(const char* value) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(value);
}
inline void ProPKGameRuleConfig::set_sroomnum(const void* value, size_t size) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameRuleConfig::mutable_sroomnum() {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  return sroomnum_;
}
inline ::std::string* ProPKGameRuleConfig::release_sroomnum() {
  clear_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sroomnum_;
    sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameRuleConfig::set_allocated_sroomnum(::std::string* sroomnum) {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (sroomnum) {
    set_has_sroomnum();
    sroomnum_ = sroomnum;
  } else {
    clear_has_sroomnum();
    sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sPlayTime = 13;
inline bool ProPKGameRuleConfig::has_splaytime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProPKGameRuleConfig::set_has_splaytime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProPKGameRuleConfig::clear_has_splaytime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProPKGameRuleConfig::clear_splaytime() {
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    splaytime_->clear();
  }
  clear_has_splaytime();
}
inline const ::std::string& ProPKGameRuleConfig::splaytime() const {
  return *splaytime_;
}
inline void ProPKGameRuleConfig::set_splaytime(const ::std::string& value) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(value);
}
inline void ProPKGameRuleConfig::set_splaytime(const char* value) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(value);
}
inline void ProPKGameRuleConfig::set_splaytime(const void* value, size_t size) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameRuleConfig::mutable_splaytime() {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  return splaytime_;
}
inline ::std::string* ProPKGameRuleConfig::release_splaytime() {
  clear_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splaytime_;
    splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameRuleConfig::set_allocated_splaytime(::std::string* splaytime) {
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (splaytime) {
    set_has_splaytime();
    splaytime_ = splaytime;
  } else {
    clear_has_splaytime();
    splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProPKGameBrokenStatus

// optional int32 broken_seat = 1;
inline bool ProPKGameBrokenStatus::has_broken_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameBrokenStatus::set_has_broken_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameBrokenStatus::clear_has_broken_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameBrokenStatus::clear_broken_seat() {
  broken_seat_ = 0;
  clear_has_broken_seat();
}
inline ::google::protobuf::int32 ProPKGameBrokenStatus::broken_seat() const {
  return broken_seat_;
}
inline void ProPKGameBrokenStatus::set_broken_seat(::google::protobuf::int32 value) {
  set_has_broken_seat();
  broken_seat_ = value;
}

// repeated bool broken_status = 2;
inline int ProPKGameBrokenStatus::broken_status_size() const {
  return broken_status_.size();
}
inline void ProPKGameBrokenStatus::clear_broken_status() {
  broken_status_.Clear();
}
inline bool ProPKGameBrokenStatus::broken_status(int index) const {
  return broken_status_.Get(index);
}
inline void ProPKGameBrokenStatus::set_broken_status(int index, bool value) {
  broken_status_.Set(index, value);
}
inline void ProPKGameBrokenStatus::add_broken_status(bool value) {
  broken_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProPKGameBrokenStatus::broken_status() const {
  return broken_status_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProPKGameBrokenStatus::mutable_broken_status() {
  return &broken_status_;
}

// optional int32 left_time = 3;
inline bool ProPKGameBrokenStatus::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameBrokenStatus::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameBrokenStatus::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameBrokenStatus::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProPKGameBrokenStatus::left_time() const {
  return left_time_;
}
inline void ProPKGameBrokenStatus::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// ProPKGameDataResp

// repeated int32 total_score = 1;
inline int ProPKGameDataResp::total_score_size() const {
  return total_score_.size();
}
inline void ProPKGameDataResp::clear_total_score() {
  total_score_.Clear();
}
inline ::google::protobuf::int32 ProPKGameDataResp::total_score(int index) const {
  return total_score_.Get(index);
}
inline void ProPKGameDataResp::set_total_score(int index, ::google::protobuf::int32 value) {
  total_score_.Set(index, value);
}
inline void ProPKGameDataResp::add_total_score(::google::protobuf::int32 value) {
  total_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameDataResp::total_score() const {
  return total_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameDataResp::mutable_total_score() {
  return &total_score_;
}

// optional int32 type = 2;
inline bool ProPKGameDataResp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameDataResp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameDataResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameDataResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProPKGameDataResp::type() const {
  return type_;
}
inline void ProPKGameDataResp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ProPKGameRecordRequest

// optional int32 seat_id = 1;
inline bool ProPKGameRecordRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameRecordRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameRecordRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameRecordRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameRecordRequest::seat_id() const {
  return seat_id_;
}
inline void ProPKGameRecordRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional bytes url = 2;
inline bool ProPKGameRecordRequest::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameRecordRequest::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameRecordRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameRecordRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ProPKGameRecordRequest::url() const {
  return *url_;
}
inline void ProPKGameRecordRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProPKGameRecordRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProPKGameRecordRequest::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameRecordRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ProPKGameRecordRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameRecordRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProPKGameRecordResponse

// optional int32 seat_id = 1;
inline bool ProPKGameRecordResponse::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameRecordResponse::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameRecordResponse::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameRecordResponse::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameRecordResponse::seat_id() const {
  return seat_id_;
}
inline void ProPKGameRecordResponse::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional bytes url = 2;
inline bool ProPKGameRecordResponse::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameRecordResponse::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameRecordResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameRecordResponse::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ProPKGameRecordResponse::url() const {
  return *url_;
}
inline void ProPKGameRecordResponse::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProPKGameRecordResponse::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProPKGameRecordResponse::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameRecordResponse::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ProPKGameRecordResponse::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameRecordResponse::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProPKGameUserLocationRequest

// optional int32 seat_id = 1;
inline bool ProPKGameUserLocationRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameUserLocationRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameUserLocationRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameUserLocationRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameUserLocationRequest::seat_id() const {
  return seat_id_;
}
inline void ProPKGameUserLocationRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional double dwlongitude = 2;
inline bool ProPKGameUserLocationRequest::has_dwlongitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameUserLocationRequest::set_has_dwlongitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameUserLocationRequest::clear_has_dwlongitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameUserLocationRequest::clear_dwlongitude() {
  dwlongitude_ = 0;
  clear_has_dwlongitude();
}
inline double ProPKGameUserLocationRequest::dwlongitude() const {
  return dwlongitude_;
}
inline void ProPKGameUserLocationRequest::set_dwlongitude(double value) {
  set_has_dwlongitude();
  dwlongitude_ = value;
}

// optional double dwlatitude = 3;
inline bool ProPKGameUserLocationRequest::has_dwlatitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProPKGameUserLocationRequest::set_has_dwlatitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProPKGameUserLocationRequest::clear_has_dwlatitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProPKGameUserLocationRequest::clear_dwlatitude() {
  dwlatitude_ = 0;
  clear_has_dwlatitude();
}
inline double ProPKGameUserLocationRequest::dwlatitude() const {
  return dwlatitude_;
}
inline void ProPKGameUserLocationRequest::set_dwlatitude(double value) {
  set_has_dwlatitude();
  dwlatitude_ = value;
}

// optional bytes strDistrict = 4;
inline bool ProPKGameUserLocationRequest::has_strdistrict() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProPKGameUserLocationRequest::set_has_strdistrict() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProPKGameUserLocationRequest::clear_has_strdistrict() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProPKGameUserLocationRequest::clear_strdistrict() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    strdistrict_->clear();
  }
  clear_has_strdistrict();
}
inline const ::std::string& ProPKGameUserLocationRequest::strdistrict() const {
  return *strdistrict_;
}
inline void ProPKGameUserLocationRequest::set_strdistrict(const ::std::string& value) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(value);
}
inline void ProPKGameUserLocationRequest::set_strdistrict(const char* value) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(value);
}
inline void ProPKGameUserLocationRequest::set_strdistrict(const void* value, size_t size) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameUserLocationRequest::mutable_strdistrict() {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  return strdistrict_;
}
inline ::std::string* ProPKGameUserLocationRequest::release_strdistrict() {
  clear_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdistrict_;
    strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameUserLocationRequest::set_allocated_strdistrict(::std::string* strdistrict) {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strdistrict) {
    set_has_strdistrict();
    strdistrict_ = strdistrict;
  } else {
    clear_has_strdistrict();
    strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strStreetName = 5;
inline bool ProPKGameUserLocationRequest::has_strstreetname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProPKGameUserLocationRequest::set_has_strstreetname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProPKGameUserLocationRequest::clear_has_strstreetname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProPKGameUserLocationRequest::clear_strstreetname() {
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    strstreetname_->clear();
  }
  clear_has_strstreetname();
}
inline const ::std::string& ProPKGameUserLocationRequest::strstreetname() const {
  return *strstreetname_;
}
inline void ProPKGameUserLocationRequest::set_strstreetname(const ::std::string& value) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(value);
}
inline void ProPKGameUserLocationRequest::set_strstreetname(const char* value) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(value);
}
inline void ProPKGameUserLocationRequest::set_strstreetname(const void* value, size_t size) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProPKGameUserLocationRequest::mutable_strstreetname() {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  return strstreetname_;
}
inline ::std::string* ProPKGameUserLocationRequest::release_strstreetname() {
  clear_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strstreetname_;
    strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProPKGameUserLocationRequest::set_allocated_strstreetname(::std::string* strstreetname) {
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (strstreetname) {
    set_has_strstreetname();
    strstreetname_ = strstreetname;
  } else {
    clear_has_strstreetname();
    strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProPKGameSyncCardResponse

// optional int32 seat = 2;
inline bool ProPKGameSyncCardResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameSyncCardResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameSyncCardResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameSyncCardResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameSyncCardResponse::seat() const {
  return seat_;
}
inline void ProPKGameSyncCardResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 handmahs = 3;
inline int ProPKGameSyncCardResponse::handmahs_size() const {
  return handmahs_.size();
}
inline void ProPKGameSyncCardResponse::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameSyncCardResponse::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProPKGameSyncCardResponse::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProPKGameSyncCardResponse::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameSyncCardResponse::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameSyncCardResponse::mutable_handmahs() {
  return &handmahs_;
}

// -------------------------------------------------------------------

// ProPKGameUserPhoneStatusRequest

// optional int32 seat_id = 1;
inline bool ProPKGameUserPhoneStatusRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameUserPhoneStatusRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameUserPhoneStatusRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameUserPhoneStatusRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameUserPhoneStatusRequest::seat_id() const {
  return seat_id_;
}
inline void ProPKGameUserPhoneStatusRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 userstatus = 2;
inline bool ProPKGameUserPhoneStatusRequest::has_userstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameUserPhoneStatusRequest::set_has_userstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameUserPhoneStatusRequest::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameUserPhoneStatusRequest::clear_userstatus() {
  userstatus_ = 0;
  clear_has_userstatus();
}
inline ::google::protobuf::int32 ProPKGameUserPhoneStatusRequest::userstatus() const {
  return userstatus_;
}
inline void ProPKGameUserPhoneStatusRequest::set_userstatus(::google::protobuf::int32 value) {
  set_has_userstatus();
  userstatus_ = value;
}

// -------------------------------------------------------------------

// ProPKGameUserGiveUpRequest

// optional int32 seat_id = 1;
inline bool ProPKGameUserGiveUpRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameUserGiveUpRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameUserGiveUpRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameUserGiveUpRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProPKGameUserGiveUpRequest::seat_id() const {
  return seat_id_;
}
inline void ProPKGameUserGiveUpRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// -------------------------------------------------------------------

// ProPKGameUserHintRequest

// -------------------------------------------------------------------

// ProPKGameUserHintResponse

// optional int32 lenth = 1;
inline bool ProPKGameUserHintResponse::has_lenth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameUserHintResponse::set_has_lenth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameUserHintResponse::clear_has_lenth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameUserHintResponse::clear_lenth() {
  lenth_ = 0;
  clear_has_lenth();
}
inline ::google::protobuf::int32 ProPKGameUserHintResponse::lenth() const {
  return lenth_;
}
inline void ProPKGameUserHintResponse::set_lenth(::google::protobuf::int32 value) {
  set_has_lenth();
  lenth_ = value;
}

// repeated int32 outMahs = 2;
inline int ProPKGameUserHintResponse::outmahs_size() const {
  return outmahs_.size();
}
inline void ProPKGameUserHintResponse::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProPKGameUserHintResponse::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProPKGameUserHintResponse::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProPKGameUserHintResponse::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProPKGameUserHintResponse::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProPKGameUserHintResponse::mutable_outmahs() {
  return &outmahs_;
}

// -------------------------------------------------------------------

// ProPKGameUserCallScoreResponse

// optional int32 seat = 1;
inline bool ProPKGameUserCallScoreResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameUserCallScoreResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameUserCallScoreResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameUserCallScoreResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameUserCallScoreResponse::seat() const {
  return seat_;
}
inline void ProPKGameUserCallScoreResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 usercallscore = 2;
inline bool ProPKGameUserCallScoreResponse::has_usercallscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameUserCallScoreResponse::set_has_usercallscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameUserCallScoreResponse::clear_has_usercallscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameUserCallScoreResponse::clear_usercallscore() {
  usercallscore_ = 0;
  clear_has_usercallscore();
}
inline ::google::protobuf::int32 ProPKGameUserCallScoreResponse::usercallscore() const {
  return usercallscore_;
}
inline void ProPKGameUserCallScoreResponse::set_usercallscore(::google::protobuf::int32 value) {
  set_has_usercallscore();
  usercallscore_ = value;
}

// -------------------------------------------------------------------

// ProPKGameUserCallScoreRequest

// optional int32 seat = 1;
inline bool ProPKGameUserCallScoreRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProPKGameUserCallScoreRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProPKGameUserCallScoreRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProPKGameUserCallScoreRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProPKGameUserCallScoreRequest::seat() const {
  return seat_;
}
inline void ProPKGameUserCallScoreRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 usercallscore = 2;
inline bool ProPKGameUserCallScoreRequest::has_usercallscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProPKGameUserCallScoreRequest::set_has_usercallscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProPKGameUserCallScoreRequest::clear_has_usercallscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProPKGameUserCallScoreRequest::clear_usercallscore() {
  usercallscore_ = 0;
  clear_has_usercallscore();
}
inline ::google::protobuf::int32 ProPKGameUserCallScoreRequest::usercallscore() const {
  return usercallscore_;
}
inline void ProPKGameUserCallScoreRequest::set_usercallscore(::google::protobuf::int32 value) {
  set_has_usercallscore();
  usercallscore_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameStatusResponse_MSGID>() {
  return ::ProPKGameStatusResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameDeskInfoResponse_MSGID>() {
  return ::ProPKGameDeskInfoResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameReadyNotify_MSGID>() {
  return ::ProPKGameReadyNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameReadyRequest_MSGID>() {
  return ::ProPKGameReadyRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameReadyResponse_MSGID>() {
  return ::ProPKGameReadyResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameStart_MSGID>() {
  return ::ProPKGameStart_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameDiceNotify_MSGID>() {
  return ::ProPKGameDiceNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameDiceRequest_MSGID>() {
  return ::ProPKGameDiceRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameDiceResult_MSGID>() {
  return ::ProPKGameDiceResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameSendMahs_MSGID>() {
  return ::ProPKGameSendMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameKingData_MSGID>() {
  return ::ProPKGameKingData_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameOutMahsResponse_MSGID>() {
  return ::ProPKGameOutMahsResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameTimerPower_MSGID>() {
  return ::ProPKGameTimerPower_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameOperateNotify_MSGID>() {
  return ::ProPKGameOperateNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameOperateResult_MSGID>() {
  return ::ProPKGameOperateResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameOperateRequest_MSGID>() {
  return ::ProPKGameOperateRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameTrust_MSGID>() {
  return ::ProPKGameTrust_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameOutMahRequest_MSGID>() {
  return ::ProPKGameOutMahRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameCatchCard_MSGID>() {
  return ::ProPKGameCatchCard_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameEnd_MSGID>() {
  return ::ProPKGameEnd_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameQuickSoundRequest_MSGID>() {
  return ::ProPKGameQuickSoundRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameQuickSoundResponse_MSGID>() {
  return ::ProPKGameQuickSoundResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameSendDiscardMahs_MSGID>() {
  return ::ProPKGameSendDiscardMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameSendActionMahs_MSGID>() {
  return ::ProPKGameSendActionMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameBrokenRequest_MSGID>() {
  return ::ProPKGameBrokenRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameBrokenOperate_MSGID>() {
  return ::ProPKGameBrokenOperate_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameBrokenNotify_MSGID>() {
  return ::ProPKGameBrokenNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameRuleConfig_MSGID>() {
  return ::ProPKGameRuleConfig_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameBrokenStatus_MSGID>() {
  return ::ProPKGameBrokenStatus_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameDataResp_MSGID>() {
  return ::ProPKGameDataResp_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameRecordRequest_MSGID>() {
  return ::ProPKGameRecordRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameRecordResponse_MSGID>() {
  return ::ProPKGameRecordResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserLocationRequest_MSGID>() {
  return ::ProPKGameUserLocationRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameSyncCardResponse_MSGID>() {
  return ::ProPKGameSyncCardResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserPhoneStatusRequest_MSGID>() {
  return ::ProPKGameUserPhoneStatusRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserGiveUpRequest_MSGID>() {
  return ::ProPKGameUserGiveUpRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserHintRequest_MSGID>() {
  return ::ProPKGameUserHintRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserHintResponse_MSGID>() {
  return ::ProPKGameUserHintResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserCallScoreResponse_MSGID>() {
  return ::ProPKGameUserCallScoreResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProPKGameUserCallScoreRequest_MSGID>() {
  return ::ProPKGameUserCallScoreRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKGameState>() {
  return ::PKGameState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKSEND_TYPE>() {
  return ::PKSEND_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKKIGN_TYPE>() {
  return ::PKKIGN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKBROKEN_TYPE>() {
  return ::PKBROKEN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKBROKEN_OPERATE>() {
  return ::PKBROKEN_OPERATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PKBROKEN_CODE>() {
  return ::PKBROKEN_CODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lkpk_2eproto__INCLUDED
