// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gx8zpk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gx8zpk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProGX8ZGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GX8ZMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GX8ZMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GX8ZScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GX8ZScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GX8ZAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GX8ZAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GX8ZWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GX8ZWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GX8ZWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GX8ZWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserDaTuNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserTeammateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserTeammateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserTeammateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserDaTuRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserDaTuResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameUserDaTuResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShangYouResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShangYouResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShangYouResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShowFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShowFriendNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowFriendNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameBoomNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameBoomNumNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameBoomNumNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomDataRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShowBoomDataRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomDataRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomDataResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShowBoomDataResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomDataResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameCardTypeSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameCardTypeSelect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameCardTypeSelect_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameIsSurrenderSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameIsSurrenderSelect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsSurrenderSelect_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameIsSurrenderOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameIsSurrenderOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsSurrenderOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameIsAgreeSurrenderSelect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameIsAgreeSurrenderSelect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameIsAgreeSurrenderOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameIsAgreeSurrenderOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameIsAgreeSurrenderStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameIsAgreeSurrenderStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameSurrenderResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameSurrenderResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameSurrenderResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShowBoomNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShowBoomOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGX8ZGameShowBoomResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GX8ZGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GX8ZSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GX8ZKING_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_gx8zpk_2eproto() {
  protobuf_AddDesc_gx8zpk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gx8zpk.proto");
  GOOGLE_CHECK(file != NULL);
  ProGX8ZGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProGX8ZGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStatusResponse, status_),
  };
  ProGX8ZGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameStatusResponse_descriptor_,
      ProGX8ZGameStatusResponse::default_instance_,
      ProGX8ZGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameStatusResponse));
  ProGX8ZGameStatusResponse_MSGID_descriptor_ = ProGX8ZGameStatusResponse_descriptor_->enum_type(0);
  ProGX8ZGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProGX8ZGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDeskInfoResponse, cellscore_),
  };
  ProGX8ZGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameDeskInfoResponse_descriptor_,
      ProGX8ZGameDeskInfoResponse::default_instance_,
      ProGX8ZGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameDeskInfoResponse));
  ProGX8ZGameDeskInfoResponse_MSGID_descriptor_ = ProGX8ZGameDeskInfoResponse_descriptor_->enum_type(0);
  ProGX8ZGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProGX8ZGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyNotify, time_),
  };
  ProGX8ZGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameReadyNotify_descriptor_,
      ProGX8ZGameReadyNotify::default_instance_,
      ProGX8ZGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameReadyNotify));
  ProGX8ZGameReadyNotify_MSGID_descriptor_ = ProGX8ZGameReadyNotify_descriptor_->enum_type(0);
  ProGX8ZGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProGX8ZGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyRequest, seat_),
  };
  ProGX8ZGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameReadyRequest_descriptor_,
      ProGX8ZGameReadyRequest::default_instance_,
      ProGX8ZGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameReadyRequest));
  ProGX8ZGameReadyRequest_MSGID_descriptor_ = ProGX8ZGameReadyRequest_descriptor_->enum_type(0);
  ProGX8ZGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProGX8ZGameReadyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyResponse, seat_),
  };
  ProGX8ZGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameReadyResponse_descriptor_,
      ProGX8ZGameReadyResponse::default_instance_,
      ProGX8ZGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameReadyResponse));
  ProGX8ZGameReadyResponse_MSGID_descriptor_ = ProGX8ZGameReadyResponse_descriptor_->enum_type(0);
  ProGX8ZGameStart_descriptor_ = file->message_type(5);
  static const int ProGX8ZGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStart, outcardtimes_),
  };
  ProGX8ZGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameStart_descriptor_,
      ProGX8ZGameStart::default_instance_,
      ProGX8ZGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameStart));
  ProGX8ZGameStart_MSGID_descriptor_ = ProGX8ZGameStart_descriptor_->enum_type(0);
  ProGX8ZGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProGX8ZGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceNotify, dicecount_),
  };
  ProGX8ZGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameDiceNotify_descriptor_,
      ProGX8ZGameDiceNotify::default_instance_,
      ProGX8ZGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameDiceNotify));
  ProGX8ZGameDiceNotify_MSGID_descriptor_ = ProGX8ZGameDiceNotify_descriptor_->enum_type(0);
  ProGX8ZGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProGX8ZGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceRequest, dicecount_),
  };
  ProGX8ZGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameDiceRequest_descriptor_,
      ProGX8ZGameDiceRequest::default_instance_,
      ProGX8ZGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameDiceRequest));
  ProGX8ZGameDiceRequest_MSGID_descriptor_ = ProGX8ZGameDiceRequest_descriptor_->enum_type(0);
  ProGX8ZGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProGX8ZGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceResult, dicecount_),
  };
  ProGX8ZGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameDiceResult_descriptor_,
      ProGX8ZGameDiceResult::default_instance_,
      ProGX8ZGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameDiceResult));
  ProGX8ZGameDiceResult_MSGID_descriptor_ = ProGX8ZGameDiceResult_descriptor_->enum_type(0);
  ProGX8ZGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProGX8ZGameSendMahs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendMahs, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendMahs, cbleftcount_),
  };
  ProGX8ZGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameSendMahs_descriptor_,
      ProGX8ZGameSendMahs::default_instance_,
      ProGX8ZGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameSendMahs));
  ProGX8ZGameSendMahs_MSGID_descriptor_ = ProGX8ZGameSendMahs_descriptor_->enum_type(0);
  ProGX8ZGameKingData_descriptor_ = file->message_type(10);
  static const int ProGX8ZGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, cbbawangking_),
  };
  ProGX8ZGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameKingData_descriptor_,
      ProGX8ZGameKingData::default_instance_,
      ProGX8ZGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameKingData));
  ProGX8ZGameKingData_MSGID_descriptor_ = ProGX8ZGameKingData_descriptor_->enum_type(0);
  ProGX8ZGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProGX8ZGameOutMahsResponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, cardtypeflg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, cardpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, seriesflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, seriesnums_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, nochangemahs_),
  };
  ProGX8ZGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameOutMahsResponse_descriptor_,
      ProGX8ZGameOutMahsResponse::default_instance_,
      ProGX8ZGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameOutMahsResponse));
  ProGX8ZGameOutMahsResponse_MSGID_descriptor_ = ProGX8ZGameOutMahsResponse_descriptor_->enum_type(0);
  ProGX8ZGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProGX8ZGameTimerPower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTimerPower, outcardtime_),
  };
  ProGX8ZGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameTimerPower_descriptor_,
      ProGX8ZGameTimerPower::default_instance_,
      ProGX8ZGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameTimerPower));
  ProGX8ZGameTimerPower_MSGID_descriptor_ = ProGX8ZGameTimerPower_descriptor_->enum_type(0);
  ProGX8ZGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProGX8ZGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, operateseat_),
  };
  ProGX8ZGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameOperateNotify_descriptor_,
      ProGX8ZGameOperateNotify::default_instance_,
      ProGX8ZGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameOperateNotify));
  ProGX8ZGameOperateNotify_MSGID_descriptor_ = ProGX8ZGameOperateNotify_descriptor_->enum_type(0);
  ProGX8ZGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProGX8ZGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, handcount_),
  };
  ProGX8ZGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameOperateResult_descriptor_,
      ProGX8ZGameOperateResult::default_instance_,
      ProGX8ZGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameOperateResult));
  ProGX8ZGameOperateResult_MSGID_descriptor_ = ProGX8ZGameOperateResult_descriptor_->enum_type(0);
  ProGX8ZGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProGX8ZGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateRequest, cboperatecard_),
  };
  ProGX8ZGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameOperateRequest_descriptor_,
      ProGX8ZGameOperateRequest::default_instance_,
      ProGX8ZGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameOperateRequest));
  ProGX8ZGameOperateRequest_MSGID_descriptor_ = ProGX8ZGameOperateRequest_descriptor_->enum_type(0);
  ProGX8ZGameTrust_descriptor_ = file->message_type(16);
  static const int ProGX8ZGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTrust, istrust_),
  };
  ProGX8ZGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameTrust_descriptor_,
      ProGX8ZGameTrust::default_instance_,
      ProGX8ZGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameTrust));
  ProGX8ZGameTrust_MSGID_descriptor_ = ProGX8ZGameTrust_descriptor_->enum_type(0);
  ProGX8ZGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProGX8ZGameOutMahRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahRequest, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahRequest, nochangemahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahRequest, bischanged_),
  };
  ProGX8ZGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameOutMahRequest_descriptor_,
      ProGX8ZGameOutMahRequest::default_instance_,
      ProGX8ZGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameOutMahRequest));
  ProGX8ZGameOutMahRequest_MSGID_descriptor_ = ProGX8ZGameOutMahRequest_descriptor_->enum_type(0);
  ProGX8ZGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProGX8ZGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, cbleftcount_),
  };
  ProGX8ZGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameCatchCard_descriptor_,
      ProGX8ZGameCatchCard::default_instance_,
      ProGX8ZGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameCatchCard));
  ProGX8ZGameCatchCard_MSGID_descriptor_ = ProGX8ZGameCatchCard_descriptor_->enum_type(0);
  GX8ZMahList_descriptor_ = file->message_type(19);
  static const int GX8ZMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZMahList, mahs_),
  };
  GX8ZMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GX8ZMahList_descriptor_,
      GX8ZMahList::default_instance_,
      GX8ZMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GX8ZMahList));
  GX8ZScoreList_descriptor_ = file->message_type(20);
  static const int GX8ZScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZScoreList, roundscore_),
  };
  GX8ZScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GX8ZScoreList_descriptor_,
      GX8ZScoreList::default_instance_,
      GX8ZScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GX8ZScoreList));
  GX8ZAwardList_descriptor_ = file->message_type(21);
  static const int GX8ZAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZAwardList, awardscore_),
  };
  GX8ZAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GX8ZAwardList_descriptor_,
      GX8ZAwardList::default_instance_,
      GX8ZAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GX8ZAwardList));
  ProGX8ZGameEnd_descriptor_ = file->message_type(22);
  static const int ProGX8ZGameEnd_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, detailedscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, bisdatu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, biskutong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nno1seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nwinerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nwinersmate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nno2seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nno3seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nno4seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, bbroken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nbrokenplayerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, bsurrender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nsurrenderplayerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, bisspring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, nsurpluscardcount_),
  };
  ProGX8ZGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameEnd_descriptor_,
      ProGX8ZGameEnd::default_instance_,
      ProGX8ZGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameEnd));
  ProGX8ZGameEnd_MSGID_descriptor_ = ProGX8ZGameEnd_descriptor_->enum_type(0);
  ProGX8ZGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProGX8ZGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundRequest, text_),
  };
  ProGX8ZGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameQuickSoundRequest_descriptor_,
      ProGX8ZGameQuickSoundRequest::default_instance_,
      ProGX8ZGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameQuickSoundRequest));
  ProGX8ZGameQuickSoundRequest_MSGID_descriptor_ = ProGX8ZGameQuickSoundRequest_descriptor_->enum_type(0);
  ProGX8ZGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProGX8ZGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundResponse, text_),
  };
  ProGX8ZGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameQuickSoundResponse_descriptor_,
      ProGX8ZGameQuickSoundResponse::default_instance_,
      ProGX8ZGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameQuickSoundResponse));
  ProGX8ZGameQuickSoundResponse_MSGID_descriptor_ = ProGX8ZGameQuickSoundResponse_descriptor_->enum_type(0);
  ProGX8ZGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProGX8ZGameSendDiscardMahs_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, cbnochangecarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, deskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, outcardcount_),
  };
  ProGX8ZGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameSendDiscardMahs_descriptor_,
      ProGX8ZGameSendDiscardMahs::default_instance_,
      ProGX8ZGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameSendDiscardMahs));
  ProGX8ZGameSendDiscardMahs_MSGID_descriptor_ = ProGX8ZGameSendDiscardMahs_descriptor_->enum_type(0);
  GX8ZWeaveItem_descriptor_ = file->message_type(26);
  static const int GX8ZWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItem, cardsize_),
  };
  GX8ZWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GX8ZWeaveItem_descriptor_,
      GX8ZWeaveItem::default_instance_,
      GX8ZWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GX8ZWeaveItem));
  GX8ZWeaveItems_descriptor_ = file->message_type(27);
  static const int GX8ZWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItems, items_),
  };
  GX8ZWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GX8ZWeaveItems_descriptor_,
      GX8ZWeaveItems::default_instance_,
      GX8ZWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GX8ZWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GX8ZWeaveItems));
  ProGX8ZGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProGX8ZGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendActionMahs, weaves_),
  };
  ProGX8ZGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameSendActionMahs_descriptor_,
      ProGX8ZGameSendActionMahs::default_instance_,
      ProGX8ZGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameSendActionMahs));
  ProGX8ZGameSendActionMahs_MSGID_descriptor_ = ProGX8ZGameSendActionMahs_descriptor_->enum_type(0);
  ProGX8ZGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProGX8ZGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenRequest, time_),
  };
  ProGX8ZGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameBrokenRequest_descriptor_,
      ProGX8ZGameBrokenRequest::default_instance_,
      ProGX8ZGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameBrokenRequest));
  ProGX8ZGameBrokenRequest_MSGID_descriptor_ = ProGX8ZGameBrokenRequest_descriptor_->enum_type(0);
  ProGX8ZGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProGX8ZGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenOperate, result_),
  };
  ProGX8ZGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameBrokenOperate_descriptor_,
      ProGX8ZGameBrokenOperate::default_instance_,
      ProGX8ZGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameBrokenOperate));
  ProGX8ZGameBrokenOperate_MSGID_descriptor_ = ProGX8ZGameBrokenOperate_descriptor_->enum_type(0);
  ProGX8ZGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProGX8ZGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenNotify, operate_code_),
  };
  ProGX8ZGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameBrokenNotify_descriptor_,
      ProGX8ZGameBrokenNotify::default_instance_,
      ProGX8ZGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameBrokenNotify));
  ProGX8ZGameBrokenNotify_MSGID_descriptor_ = ProGX8ZGameBrokenNotify_descriptor_->enum_type(0);
  ProGX8ZGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProGX8ZGameRuleConfig_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, have_bottom_king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, have_mai_lei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, hava_hui_tou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, bbawangfanbei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, splaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, isjingdian_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, isopenteammate_),
  };
  ProGX8ZGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameRuleConfig_descriptor_,
      ProGX8ZGameRuleConfig::default_instance_,
      ProGX8ZGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameRuleConfig));
  ProGX8ZGameRuleConfig_MSGID_descriptor_ = ProGX8ZGameRuleConfig_descriptor_->enum_type(0);
  ProGX8ZGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProGX8ZGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenStatus, left_time_),
  };
  ProGX8ZGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameBrokenStatus_descriptor_,
      ProGX8ZGameBrokenStatus::default_instance_,
      ProGX8ZGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameBrokenStatus));
  ProGX8ZGameBrokenStatus_MSGID_descriptor_ = ProGX8ZGameBrokenStatus_descriptor_->enum_type(0);
  ProGX8ZGameDataResp_descriptor_ = file->message_type(34);
  static const int ProGX8ZGameDataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDataResp, type_),
  };
  ProGX8ZGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameDataResp_descriptor_,
      ProGX8ZGameDataResp::default_instance_,
      ProGX8ZGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameDataResp));
  ProGX8ZGameDataResp_MSGID_descriptor_ = ProGX8ZGameDataResp_descriptor_->enum_type(0);
  ProGX8ZGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProGX8ZGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordRequest, url_),
  };
  ProGX8ZGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameRecordRequest_descriptor_,
      ProGX8ZGameRecordRequest::default_instance_,
      ProGX8ZGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameRecordRequest));
  ProGX8ZGameRecordRequest_MSGID_descriptor_ = ProGX8ZGameRecordRequest_descriptor_->enum_type(0);
  ProGX8ZGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProGX8ZGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordResponse, url_),
  };
  ProGX8ZGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameRecordResponse_descriptor_,
      ProGX8ZGameRecordResponse::default_instance_,
      ProGX8ZGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameRecordResponse));
  ProGX8ZGameRecordResponse_MSGID_descriptor_ = ProGX8ZGameRecordResponse_descriptor_->enum_type(0);
  ProGX8ZGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProGX8ZGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, strstreetname_),
  };
  ProGX8ZGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserLocationRequest_descriptor_,
      ProGX8ZGameUserLocationRequest::default_instance_,
      ProGX8ZGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserLocationRequest));
  ProGX8ZGameUserLocationRequest_MSGID_descriptor_ = ProGX8ZGameUserLocationRequest_descriptor_->enum_type(0);
  ProGX8ZGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProGX8ZGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSyncCardResponse, handmahs_),
  };
  ProGX8ZGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameSyncCardResponse_descriptor_,
      ProGX8ZGameSyncCardResponse::default_instance_,
      ProGX8ZGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameSyncCardResponse));
  ProGX8ZGameSyncCardResponse_MSGID_descriptor_ = ProGX8ZGameSyncCardResponse_descriptor_->enum_type(0);
  ProGX8ZGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProGX8ZGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserPhoneStatusRequest, userstatus_),
  };
  ProGX8ZGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserPhoneStatusRequest_descriptor_,
      ProGX8ZGameUserPhoneStatusRequest::default_instance_,
      ProGX8ZGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserPhoneStatusRequest));
  ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor_ = ProGX8ZGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProGX8ZGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProGX8ZGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserGiveUpRequest, seat_id_),
  };
  ProGX8ZGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserGiveUpRequest_descriptor_,
      ProGX8ZGameUserGiveUpRequest::default_instance_,
      ProGX8ZGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserGiveUpRequest));
  ProGX8ZGameUserGiveUpRequest_MSGID_descriptor_ = ProGX8ZGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProGX8ZGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProGX8ZGameUserHintRequest_offsets_[1] = {
  };
  ProGX8ZGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserHintRequest_descriptor_,
      ProGX8ZGameUserHintRequest::default_instance_,
      ProGX8ZGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserHintRequest));
  ProGX8ZGameUserHintRequest_MSGID_descriptor_ = ProGX8ZGameUserHintRequest_descriptor_->enum_type(0);
  ProGX8ZGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProGX8ZGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserHintResponse, outmahs_),
  };
  ProGX8ZGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserHintResponse_descriptor_,
      ProGX8ZGameUserHintResponse::default_instance_,
      ProGX8ZGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserHintResponse));
  ProGX8ZGameUserHintResponse_MSGID_descriptor_ = ProGX8ZGameUserHintResponse_descriptor_->enum_type(0);
  ProGX8ZGameUserDaTuNotify_descriptor_ = file->message_type(43);
  static const int ProGX8ZGameUserDaTuNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuNotify, seat_),
  };
  ProGX8ZGameUserDaTuNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserDaTuNotify_descriptor_,
      ProGX8ZGameUserDaTuNotify::default_instance_,
      ProGX8ZGameUserDaTuNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserDaTuNotify));
  ProGX8ZGameUserDaTuNotify_MSGID_descriptor_ = ProGX8ZGameUserDaTuNotify_descriptor_->enum_type(0);
  ProGX8ZGameUserTeammateRequest_descriptor_ = file->message_type(44);
  static const int ProGX8ZGameUserTeammateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserTeammateRequest, bankermateseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserTeammateRequest, matecard_),
  };
  ProGX8ZGameUserTeammateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserTeammateRequest_descriptor_,
      ProGX8ZGameUserTeammateRequest::default_instance_,
      ProGX8ZGameUserTeammateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserTeammateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserTeammateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserTeammateRequest));
  ProGX8ZGameUserTeammateRequest_MSGID_descriptor_ = ProGX8ZGameUserTeammateRequest_descriptor_->enum_type(0);
  ProGX8ZGameUserDaTuRequest_descriptor_ = file->message_type(45);
  static const int ProGX8ZGameUserDaTuRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuRequest, bisdatu_),
  };
  ProGX8ZGameUserDaTuRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserDaTuRequest_descriptor_,
      ProGX8ZGameUserDaTuRequest::default_instance_,
      ProGX8ZGameUserDaTuRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserDaTuRequest));
  ProGX8ZGameUserDaTuRequest_MSGID_descriptor_ = ProGX8ZGameUserDaTuRequest_descriptor_->enum_type(0);
  ProGX8ZGameUserDaTuResponse_descriptor_ = file->message_type(46);
  static const int ProGX8ZGameUserDaTuResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResponse, bisdatu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResponse, nextseat_),
  };
  ProGX8ZGameUserDaTuResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserDaTuResponse_descriptor_,
      ProGX8ZGameUserDaTuResponse::default_instance_,
      ProGX8ZGameUserDaTuResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserDaTuResponse));
  ProGX8ZGameUserDaTuResponse_MSGID_descriptor_ = ProGX8ZGameUserDaTuResponse_descriptor_->enum_type(0);
  ProGX8ZGameUserDaTuResult_descriptor_ = file->message_type(47);
  static const int ProGX8ZGameUserDaTuResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResult, bisdatu_),
  };
  ProGX8ZGameUserDaTuResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameUserDaTuResult_descriptor_,
      ProGX8ZGameUserDaTuResult::default_instance_,
      ProGX8ZGameUserDaTuResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameUserDaTuResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameUserDaTuResult));
  ProGX8ZGameUserDaTuResult_MSGID_descriptor_ = ProGX8ZGameUserDaTuResult_descriptor_->enum_type(0);
  ProGX8ZGameShangYouResult_descriptor_ = file->message_type(48);
  static const int ProGX8ZGameShangYouResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShangYouResult, shangyouseat_),
  };
  ProGX8ZGameShangYouResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShangYouResult_descriptor_,
      ProGX8ZGameShangYouResult::default_instance_,
      ProGX8ZGameShangYouResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShangYouResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShangYouResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShangYouResult));
  ProGX8ZGameShangYouResult_MSGID_descriptor_ = ProGX8ZGameShangYouResult_descriptor_->enum_type(0);
  ProGX8ZGameShowFriendNotify_descriptor_ = file->message_type(49);
  static const int ProGX8ZGameShowFriendNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowFriendNotify, bshow_),
  };
  ProGX8ZGameShowFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShowFriendNotify_descriptor_,
      ProGX8ZGameShowFriendNotify::default_instance_,
      ProGX8ZGameShowFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShowFriendNotify));
  ProGX8ZGameShowFriendNotify_MSGID_descriptor_ = ProGX8ZGameShowFriendNotify_descriptor_->enum_type(0);
  ProGX8ZGameBoomNumNotify_descriptor_ = file->message_type(50);
  static const int ProGX8ZGameBoomNumNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBoomNumNotify, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBoomNumNotify, nboomnum_),
  };
  ProGX8ZGameBoomNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameBoomNumNotify_descriptor_,
      ProGX8ZGameBoomNumNotify::default_instance_,
      ProGX8ZGameBoomNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBoomNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameBoomNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameBoomNumNotify));
  ProGX8ZGameBoomNumNotify_MSGID_descriptor_ = ProGX8ZGameBoomNumNotify_descriptor_->enum_type(0);
  ProGX8ZGameShowBoomDataRequest_descriptor_ = file->message_type(51);
  static const int ProGX8ZGameShowBoomDataRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataRequest, nseat_),
  };
  ProGX8ZGameShowBoomDataRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShowBoomDataRequest_descriptor_,
      ProGX8ZGameShowBoomDataRequest::default_instance_,
      ProGX8ZGameShowBoomDataRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShowBoomDataRequest));
  ProGX8ZGameShowBoomDataRequest_MSGID_descriptor_ = ProGX8ZGameShowBoomDataRequest_descriptor_->enum_type(0);
  ProGX8ZGameShowBoomDataResponse_descriptor_ = file->message_type(52);
  static const int ProGX8ZGameShowBoomDataResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataResponse, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataResponse, bissendtoall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataResponse, cbawardcarddata_),
  };
  ProGX8ZGameShowBoomDataResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShowBoomDataResponse_descriptor_,
      ProGX8ZGameShowBoomDataResponse::default_instance_,
      ProGX8ZGameShowBoomDataResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomDataResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShowBoomDataResponse));
  ProGX8ZGameShowBoomDataResponse_MSGID_descriptor_ = ProGX8ZGameShowBoomDataResponse_descriptor_->enum_type(0);
  ProGX8ZGameCardTypeSelect_descriptor_ = file->message_type(53);
  static const int ProGX8ZGameCardTypeSelect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCardTypeSelect, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCardTypeSelect, cardtypeselectdata_),
  };
  ProGX8ZGameCardTypeSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameCardTypeSelect_descriptor_,
      ProGX8ZGameCardTypeSelect::default_instance_,
      ProGX8ZGameCardTypeSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCardTypeSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameCardTypeSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameCardTypeSelect));
  ProGX8ZGameCardTypeSelect_MSGID_descriptor_ = ProGX8ZGameCardTypeSelect_descriptor_->enum_type(0);
  ProGX8ZGameIsSurrenderSelect_descriptor_ = file->message_type(54);
  static const int ProGX8ZGameIsSurrenderSelect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderSelect, nseat_),
  };
  ProGX8ZGameIsSurrenderSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameIsSurrenderSelect_descriptor_,
      ProGX8ZGameIsSurrenderSelect::default_instance_,
      ProGX8ZGameIsSurrenderSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameIsSurrenderSelect));
  ProGX8ZGameIsSurrenderSelect_MSGID_descriptor_ = ProGX8ZGameIsSurrenderSelect_descriptor_->enum_type(0);
  ProGX8ZGameIsSurrenderOperate_descriptor_ = file->message_type(55);
  static const int ProGX8ZGameIsSurrenderOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderOperate, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderOperate, bissurrender_),
  };
  ProGX8ZGameIsSurrenderOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameIsSurrenderOperate_descriptor_,
      ProGX8ZGameIsSurrenderOperate::default_instance_,
      ProGX8ZGameIsSurrenderOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsSurrenderOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameIsSurrenderOperate));
  ProGX8ZGameIsSurrenderOperate_MSGID_descriptor_ = ProGX8ZGameIsSurrenderOperate_descriptor_->enum_type(0);
  ProGX8ZGameIsAgreeSurrenderSelect_descriptor_ = file->message_type(56);
  static const int ProGX8ZGameIsAgreeSurrenderSelect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderSelect, nsurrenderseat_),
  };
  ProGX8ZGameIsAgreeSurrenderSelect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameIsAgreeSurrenderSelect_descriptor_,
      ProGX8ZGameIsAgreeSurrenderSelect::default_instance_,
      ProGX8ZGameIsAgreeSurrenderSelect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderSelect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderSelect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameIsAgreeSurrenderSelect));
  ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor_ = ProGX8ZGameIsAgreeSurrenderSelect_descriptor_->enum_type(0);
  ProGX8ZGameIsAgreeSurrenderOperate_descriptor_ = file->message_type(57);
  static const int ProGX8ZGameIsAgreeSurrenderOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderOperate, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderOperate, bisagreesurrender_),
  };
  ProGX8ZGameIsAgreeSurrenderOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameIsAgreeSurrenderOperate_descriptor_,
      ProGX8ZGameIsAgreeSurrenderOperate::default_instance_,
      ProGX8ZGameIsAgreeSurrenderOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameIsAgreeSurrenderOperate));
  ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor_ = ProGX8ZGameIsAgreeSurrenderOperate_descriptor_->enum_type(0);
  ProGX8ZGameIsAgreeSurrenderStatus_descriptor_ = file->message_type(58);
  static const int ProGX8ZGameIsAgreeSurrenderStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderStatus, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderStatus, bisagreesurrender_),
  };
  ProGX8ZGameIsAgreeSurrenderStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameIsAgreeSurrenderStatus_descriptor_,
      ProGX8ZGameIsAgreeSurrenderStatus::default_instance_,
      ProGX8ZGameIsAgreeSurrenderStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameIsAgreeSurrenderStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameIsAgreeSurrenderStatus));
  ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor_ = ProGX8ZGameIsAgreeSurrenderStatus_descriptor_->enum_type(0);
  ProGX8ZGameSurrenderResult_descriptor_ = file->message_type(59);
  static const int ProGX8ZGameSurrenderResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSurrenderResult, bsurrenderresult_),
  };
  ProGX8ZGameSurrenderResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameSurrenderResult_descriptor_,
      ProGX8ZGameSurrenderResult::default_instance_,
      ProGX8ZGameSurrenderResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSurrenderResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameSurrenderResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameSurrenderResult));
  ProGX8ZGameSurrenderResult_MSGID_descriptor_ = ProGX8ZGameSurrenderResult_descriptor_->enum_type(0);
  ProGX8ZGameShowBoomNotify_descriptor_ = file->message_type(60);
  static const int ProGX8ZGameShowBoomNotify_offsets_[1] = {
  };
  ProGX8ZGameShowBoomNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShowBoomNotify_descriptor_,
      ProGX8ZGameShowBoomNotify::default_instance_,
      ProGX8ZGameShowBoomNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShowBoomNotify));
  ProGX8ZGameShowBoomNotify_MSGID_descriptor_ = ProGX8ZGameShowBoomNotify_descriptor_->enum_type(0);
  ProGX8ZGameShowBoomOperate_descriptor_ = file->message_type(61);
  static const int ProGX8ZGameShowBoomOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomOperate, nseat_),
  };
  ProGX8ZGameShowBoomOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShowBoomOperate_descriptor_,
      ProGX8ZGameShowBoomOperate::default_instance_,
      ProGX8ZGameShowBoomOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShowBoomOperate));
  ProGX8ZGameShowBoomOperate_MSGID_descriptor_ = ProGX8ZGameShowBoomOperate_descriptor_->enum_type(0);
  ProGX8ZGameShowBoomResponse_descriptor_ = file->message_type(62);
  static const int ProGX8ZGameShowBoomResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomResponse, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomResponse, awardscore_),
  };
  ProGX8ZGameShowBoomResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGX8ZGameShowBoomResponse_descriptor_,
      ProGX8ZGameShowBoomResponse::default_instance_,
      ProGX8ZGameShowBoomResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGX8ZGameShowBoomResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGX8ZGameShowBoomResponse));
  ProGX8ZGameShowBoomResponse_MSGID_descriptor_ = ProGX8ZGameShowBoomResponse_descriptor_->enum_type(0);
  GX8ZGameState_descriptor_ = file->enum_type(0);
  GX8ZSEND_TYPE_descriptor_ = file->enum_type(1);
  GX8ZKING_TYPE_descriptor_ = file->enum_type(2);
  GX8ZBROKEN_TYPE_descriptor_ = file->enum_type(3);
  GX8ZBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  GX8ZBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gx8zpk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameStatusResponse_descriptor_, &ProGX8ZGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameDeskInfoResponse_descriptor_, &ProGX8ZGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameReadyNotify_descriptor_, &ProGX8ZGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameReadyRequest_descriptor_, &ProGX8ZGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameReadyResponse_descriptor_, &ProGX8ZGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameStart_descriptor_, &ProGX8ZGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameDiceNotify_descriptor_, &ProGX8ZGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameDiceRequest_descriptor_, &ProGX8ZGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameDiceResult_descriptor_, &ProGX8ZGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameSendMahs_descriptor_, &ProGX8ZGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameKingData_descriptor_, &ProGX8ZGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameOutMahsResponse_descriptor_, &ProGX8ZGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameTimerPower_descriptor_, &ProGX8ZGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameOperateNotify_descriptor_, &ProGX8ZGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameOperateResult_descriptor_, &ProGX8ZGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameOperateRequest_descriptor_, &ProGX8ZGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameTrust_descriptor_, &ProGX8ZGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameOutMahRequest_descriptor_, &ProGX8ZGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameCatchCard_descriptor_, &ProGX8ZGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GX8ZMahList_descriptor_, &GX8ZMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GX8ZScoreList_descriptor_, &GX8ZScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GX8ZAwardList_descriptor_, &GX8ZAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameEnd_descriptor_, &ProGX8ZGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameQuickSoundRequest_descriptor_, &ProGX8ZGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameQuickSoundResponse_descriptor_, &ProGX8ZGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameSendDiscardMahs_descriptor_, &ProGX8ZGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GX8ZWeaveItem_descriptor_, &GX8ZWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GX8ZWeaveItems_descriptor_, &GX8ZWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameSendActionMahs_descriptor_, &ProGX8ZGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameBrokenRequest_descriptor_, &ProGX8ZGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameBrokenOperate_descriptor_, &ProGX8ZGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameBrokenNotify_descriptor_, &ProGX8ZGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameRuleConfig_descriptor_, &ProGX8ZGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameBrokenStatus_descriptor_, &ProGX8ZGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameDataResp_descriptor_, &ProGX8ZGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameRecordRequest_descriptor_, &ProGX8ZGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameRecordResponse_descriptor_, &ProGX8ZGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserLocationRequest_descriptor_, &ProGX8ZGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameSyncCardResponse_descriptor_, &ProGX8ZGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserPhoneStatusRequest_descriptor_, &ProGX8ZGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserGiveUpRequest_descriptor_, &ProGX8ZGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserHintRequest_descriptor_, &ProGX8ZGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserHintResponse_descriptor_, &ProGX8ZGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserDaTuNotify_descriptor_, &ProGX8ZGameUserDaTuNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserTeammateRequest_descriptor_, &ProGX8ZGameUserTeammateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserDaTuRequest_descriptor_, &ProGX8ZGameUserDaTuRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserDaTuResponse_descriptor_, &ProGX8ZGameUserDaTuResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameUserDaTuResult_descriptor_, &ProGX8ZGameUserDaTuResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShangYouResult_descriptor_, &ProGX8ZGameShangYouResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShowFriendNotify_descriptor_, &ProGX8ZGameShowFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameBoomNumNotify_descriptor_, &ProGX8ZGameBoomNumNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShowBoomDataRequest_descriptor_, &ProGX8ZGameShowBoomDataRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShowBoomDataResponse_descriptor_, &ProGX8ZGameShowBoomDataResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameCardTypeSelect_descriptor_, &ProGX8ZGameCardTypeSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameIsSurrenderSelect_descriptor_, &ProGX8ZGameIsSurrenderSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameIsSurrenderOperate_descriptor_, &ProGX8ZGameIsSurrenderOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameIsAgreeSurrenderSelect_descriptor_, &ProGX8ZGameIsAgreeSurrenderSelect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameIsAgreeSurrenderOperate_descriptor_, &ProGX8ZGameIsAgreeSurrenderOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameIsAgreeSurrenderStatus_descriptor_, &ProGX8ZGameIsAgreeSurrenderStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameSurrenderResult_descriptor_, &ProGX8ZGameSurrenderResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShowBoomNotify_descriptor_, &ProGX8ZGameShowBoomNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShowBoomOperate_descriptor_, &ProGX8ZGameShowBoomOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGX8ZGameShowBoomResponse_descriptor_, &ProGX8ZGameShowBoomResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gx8zpk_2eproto() {
  delete ProGX8ZGameStatusResponse::default_instance_;
  delete ProGX8ZGameStatusResponse_reflection_;
  delete ProGX8ZGameDeskInfoResponse::default_instance_;
  delete ProGX8ZGameDeskInfoResponse_reflection_;
  delete ProGX8ZGameReadyNotify::default_instance_;
  delete ProGX8ZGameReadyNotify_reflection_;
  delete ProGX8ZGameReadyRequest::default_instance_;
  delete ProGX8ZGameReadyRequest_reflection_;
  delete ProGX8ZGameReadyResponse::default_instance_;
  delete ProGX8ZGameReadyResponse_reflection_;
  delete ProGX8ZGameStart::default_instance_;
  delete ProGX8ZGameStart_reflection_;
  delete ProGX8ZGameDiceNotify::default_instance_;
  delete ProGX8ZGameDiceNotify_reflection_;
  delete ProGX8ZGameDiceRequest::default_instance_;
  delete ProGX8ZGameDiceRequest_reflection_;
  delete ProGX8ZGameDiceResult::default_instance_;
  delete ProGX8ZGameDiceResult_reflection_;
  delete ProGX8ZGameSendMahs::default_instance_;
  delete ProGX8ZGameSendMahs_reflection_;
  delete ProGX8ZGameKingData::default_instance_;
  delete ProGX8ZGameKingData_reflection_;
  delete ProGX8ZGameOutMahsResponse::default_instance_;
  delete ProGX8ZGameOutMahsResponse_reflection_;
  delete ProGX8ZGameTimerPower::default_instance_;
  delete ProGX8ZGameTimerPower_reflection_;
  delete ProGX8ZGameOperateNotify::default_instance_;
  delete ProGX8ZGameOperateNotify_reflection_;
  delete ProGX8ZGameOperateResult::default_instance_;
  delete ProGX8ZGameOperateResult_reflection_;
  delete ProGX8ZGameOperateRequest::default_instance_;
  delete ProGX8ZGameOperateRequest_reflection_;
  delete ProGX8ZGameTrust::default_instance_;
  delete ProGX8ZGameTrust_reflection_;
  delete ProGX8ZGameOutMahRequest::default_instance_;
  delete ProGX8ZGameOutMahRequest_reflection_;
  delete ProGX8ZGameCatchCard::default_instance_;
  delete ProGX8ZGameCatchCard_reflection_;
  delete GX8ZMahList::default_instance_;
  delete GX8ZMahList_reflection_;
  delete GX8ZScoreList::default_instance_;
  delete GX8ZScoreList_reflection_;
  delete GX8ZAwardList::default_instance_;
  delete GX8ZAwardList_reflection_;
  delete ProGX8ZGameEnd::default_instance_;
  delete ProGX8ZGameEnd_reflection_;
  delete ProGX8ZGameQuickSoundRequest::default_instance_;
  delete ProGX8ZGameQuickSoundRequest_reflection_;
  delete ProGX8ZGameQuickSoundResponse::default_instance_;
  delete ProGX8ZGameQuickSoundResponse_reflection_;
  delete ProGX8ZGameSendDiscardMahs::default_instance_;
  delete ProGX8ZGameSendDiscardMahs_reflection_;
  delete GX8ZWeaveItem::default_instance_;
  delete GX8ZWeaveItem_reflection_;
  delete GX8ZWeaveItems::default_instance_;
  delete GX8ZWeaveItems_reflection_;
  delete ProGX8ZGameSendActionMahs::default_instance_;
  delete ProGX8ZGameSendActionMahs_reflection_;
  delete ProGX8ZGameBrokenRequest::default_instance_;
  delete ProGX8ZGameBrokenRequest_reflection_;
  delete ProGX8ZGameBrokenOperate::default_instance_;
  delete ProGX8ZGameBrokenOperate_reflection_;
  delete ProGX8ZGameBrokenNotify::default_instance_;
  delete ProGX8ZGameBrokenNotify_reflection_;
  delete ProGX8ZGameRuleConfig::default_instance_;
  delete ProGX8ZGameRuleConfig_reflection_;
  delete ProGX8ZGameBrokenStatus::default_instance_;
  delete ProGX8ZGameBrokenStatus_reflection_;
  delete ProGX8ZGameDataResp::default_instance_;
  delete ProGX8ZGameDataResp_reflection_;
  delete ProGX8ZGameRecordRequest::default_instance_;
  delete ProGX8ZGameRecordRequest_reflection_;
  delete ProGX8ZGameRecordResponse::default_instance_;
  delete ProGX8ZGameRecordResponse_reflection_;
  delete ProGX8ZGameUserLocationRequest::default_instance_;
  delete ProGX8ZGameUserLocationRequest_reflection_;
  delete ProGX8ZGameSyncCardResponse::default_instance_;
  delete ProGX8ZGameSyncCardResponse_reflection_;
  delete ProGX8ZGameUserPhoneStatusRequest::default_instance_;
  delete ProGX8ZGameUserPhoneStatusRequest_reflection_;
  delete ProGX8ZGameUserGiveUpRequest::default_instance_;
  delete ProGX8ZGameUserGiveUpRequest_reflection_;
  delete ProGX8ZGameUserHintRequest::default_instance_;
  delete ProGX8ZGameUserHintRequest_reflection_;
  delete ProGX8ZGameUserHintResponse::default_instance_;
  delete ProGX8ZGameUserHintResponse_reflection_;
  delete ProGX8ZGameUserDaTuNotify::default_instance_;
  delete ProGX8ZGameUserDaTuNotify_reflection_;
  delete ProGX8ZGameUserTeammateRequest::default_instance_;
  delete ProGX8ZGameUserTeammateRequest_reflection_;
  delete ProGX8ZGameUserDaTuRequest::default_instance_;
  delete ProGX8ZGameUserDaTuRequest_reflection_;
  delete ProGX8ZGameUserDaTuResponse::default_instance_;
  delete ProGX8ZGameUserDaTuResponse_reflection_;
  delete ProGX8ZGameUserDaTuResult::default_instance_;
  delete ProGX8ZGameUserDaTuResult_reflection_;
  delete ProGX8ZGameShangYouResult::default_instance_;
  delete ProGX8ZGameShangYouResult_reflection_;
  delete ProGX8ZGameShowFriendNotify::default_instance_;
  delete ProGX8ZGameShowFriendNotify_reflection_;
  delete ProGX8ZGameBoomNumNotify::default_instance_;
  delete ProGX8ZGameBoomNumNotify_reflection_;
  delete ProGX8ZGameShowBoomDataRequest::default_instance_;
  delete ProGX8ZGameShowBoomDataRequest_reflection_;
  delete ProGX8ZGameShowBoomDataResponse::default_instance_;
  delete ProGX8ZGameShowBoomDataResponse_reflection_;
  delete ProGX8ZGameCardTypeSelect::default_instance_;
  delete ProGX8ZGameCardTypeSelect_reflection_;
  delete ProGX8ZGameIsSurrenderSelect::default_instance_;
  delete ProGX8ZGameIsSurrenderSelect_reflection_;
  delete ProGX8ZGameIsSurrenderOperate::default_instance_;
  delete ProGX8ZGameIsSurrenderOperate_reflection_;
  delete ProGX8ZGameIsAgreeSurrenderSelect::default_instance_;
  delete ProGX8ZGameIsAgreeSurrenderSelect_reflection_;
  delete ProGX8ZGameIsAgreeSurrenderOperate::default_instance_;
  delete ProGX8ZGameIsAgreeSurrenderOperate_reflection_;
  delete ProGX8ZGameIsAgreeSurrenderStatus::default_instance_;
  delete ProGX8ZGameIsAgreeSurrenderStatus_reflection_;
  delete ProGX8ZGameSurrenderResult::default_instance_;
  delete ProGX8ZGameSurrenderResult_reflection_;
  delete ProGX8ZGameShowBoomNotify::default_instance_;
  delete ProGX8ZGameShowBoomNotify_reflection_;
  delete ProGX8ZGameShowBoomOperate::default_instance_;
  delete ProGX8ZGameShowBoomOperate_reflection_;
  delete ProGX8ZGameShowBoomResponse::default_instance_;
  delete ProGX8ZGameShowBoomResponse_reflection_;
}

void protobuf_AddDesc_gx8zpk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014gx8zpk.proto\032\nbase.proto\"M\n\031ProGX8ZGam"
    "eStatusResponse\022\036\n\006status\030\002 \001(\0162\016.GX8ZGa"
    "meState\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"B\n\033ProGX8ZGame"
    "DeskInfoResponse\022\021\n\tCellScore\030\002 \001(\005\"\020\n\005M"
    "SGID\022\007\n\002ID\020\231\021\"F\n\026ProGX8ZGameReadyNotify\022"
    "\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002"
    "ID\020\232\021\"9\n\027ProGX8ZGameReadyRequest\022\014\n\004seat"
    "\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\233\021\":\n\030ProGX8ZGameR"
    "eadyResponse\022\014\n\004seat\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002I"
    "D\020\234\021\"a\n\020ProGX8ZGameStart\022\022\n\nbankerseat\030\002"
    " \001(\005\022\021\n\tgamecount\030\003 \001(\005\022\024\n\014outCardtimes\030"
    "\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\235\021\"X\n\025ProGX8ZGameDi"
    "ceNotify\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\021\n\t"
    "dicecount\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\236\021\"K\n\026Pro"
    "GX8ZGameDiceRequest\022\014\n\004seat\030\002 \001(\005\022\021\n\tdic"
    "ecount\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\237\021\"Z\n\025ProGX8"
    "ZGameDiceResult\022\014\n\004seat\030\002 \001(\005\022\016\n\006result\030"
    "\003 \003(\005\022\021\n\tdicecount\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\240\021\"k\n\023ProGX8ZGameSendMahs\022\014\n\004seat\030\002 \001(\005\022"
    "\014\n\004mahs\030\003 \003(\005\022\021\n\tmahscount\030\004 \003(\005\022\023\n\013cbLe"
    "ftCount\030\005 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\241\021\"\223\002\n\023ProG"
    "X8ZGameKingData\022\014\n\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 "
    "\003(\005\022\025\n\rdownKingScore\030\004 \003(\005\022\021\n\tkingcount\030"
    "\005 \003(\005\022\020\n\010viceking\030\006 \003(\005\0225\n\013notify_type\030\007"
    " \001(\0162\016.GX8ZSEND_TYPE:\020GX8Z_NORMAL_SEND\022/"
    "\n\tking_type\030\010 \001(\0162\016.GX8ZKING_TYPE:\014GX8Z_"
    "KING_UP\022\024\n\014cbChongGuang\030\t \003(\005\022\024\n\014cbBaWan"
    "gKing\030\n \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\242\021\"\352\001\n\032ProGX8"
    "ZGameOutMahsResponse\022\014\n\004seat\030\002 \001(\005\022\017\n\007ou"
    "tMahs\030\003 \003(\005\022\020\n\010handmahs\030\004 \003(\005\022\021\n\tcardCou"
    "nt\030\005 \001(\005\022\020\n\010cardType\030\006 \001(\005\022\023\n\013cardtypefl"
    "g\030\007 \001(\005\022\021\n\tcardPoint\030\010 \001(\005\022\022\n\nseriesFlag"
    "\030\t \001(\005\022\022\n\nseriesNums\030\n \001(\005\022\024\n\014noChangeMa"
    "hs\030\013 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\243\021\"Z\n\025ProGX8ZGam"
    "eTimerPower\022\014\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022"
    "\023\n\013outcardTime\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\244\021\"\213"
    "\001\n\030ProGX8ZGameOperateNotify\022\022\n\nresumeSea"
    "t\030\002 \001(\005\022\022\n\nActionMask\030\003 \001(\005\022\022\n\nActionCar"
    "d\030\004 \001(\005\022\014\n\004time\030\005 \001(\005\022\023\n\013operateseat\030\006 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\245\021\"\252\001\n\030ProGX8ZGameOper"
    "ateResult\022\024\n\014wOperateUser\030\002 \001(\005\022\024\n\014wProv"
    "ideUser\030\003 \001(\005\022\024\n\014wOperateCode\030\004 \001(\005\022\025\n\rc"
    "bOperateCard\030\005 \001(\005\022\020\n\010handmahs\030\006 \003(\005\022\021\n\t"
    "handcount\030\007 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\246\021\"h\n\031Pro"
    "GX8ZGameOperateRequest\022\014\n\004seat\030\002 \001(\005\022\024\n\014"
    "wOperateCode\030\003 \001(\005\022\025\n\rcbOperateCard\030\004 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\247\021\"C\n\020ProGX8ZGameTrust\022"
    "\014\n\004seat\030\002 \001(\005\022\017\n\007isTrust\030\003 \001(\010\"\020\n\005MSGID\022"
    "\007\n\002ID\020\250\021\"u\n\030ProGX8ZGameOutMahRequest\022\014\n\004"
    "seat\030\002 \001(\005\022\017\n\007outMahs\030\003 \003(\005\022\024\n\014nochangem"
    "ahs\030\004 \003(\005\022\022\n\nbIsChanged\030\005 \001(\010\"\020\n\005MSGID\022\007"
    "\n\002ID\020\251\021\"\211\001\n\024ProGX8ZGameCatchCard\022\014\n\004seat"
    "\030\002 \001(\005\022\022\n\ncbCardData\030\003 \001(\005\022\023\n\013wActionMas"
    "k\030\004 \001(\005\022\023\n\013cbIsNotGang\030\005 \001(\010\022\023\n\013cbLeftCo"
    "unt\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\252\021\"\033\n\013GX8ZMahLi"
    "st\022\014\n\004Mahs\030\001 \003(\005\"#\n\rGX8ZScoreList\022\022\n\nrou"
    "ndScore\030\001 \003(\005\"D\n\rGX8ZAwardList\022\014\n\004seat\030\001"
    " \001(\005\022\021\n\tCardsData\030\002 \003(\005\022\022\n\nawardScore\030\003 "
    "\001(\005\"\244\006\n\016ProGX8ZGameEnd\022\020\n\010lGameTax\030\002 \001(\005"
    "\022\024\n\014cbChongGuang\030\003 \003(\005\022\024\n\014cbBaWangKing\030\004"
    " \003(\005\022\024\n\014wProvideUser\030\005 \001(\005\022\023\n\013cbChiHuCar"
    "d\030\006 \001(\005\022\023\n\013dwChiHuKind\030\007 \003(\005\022\024\n\014dwChiHuR"
    "ight\030\010 \003(\005\022\030\n\020lTotaslGameScore\030\t \003(\005\022\031\n\021"
    "lCurrentGameScore\030\n \003(\005\022\032\n\022lCurrentPoint"
    "Score\030\013 \003(\005\022\024\n\014lAttachScore\030\014 \003(\005\022$\n\016cbH"
    "andCardData\030\r \003(\0132\014.GX8ZMahList\022\'\n\017cbAwa"
    "rdCardData\030\016 \003(\0132\016.GX8ZAwardList\022\025\n\rlOnl"
    "yWinScore\030\017 \003(\005\022\021\n\tbRoundEnd\030\020 \001(\010\022\024\n\014lH"
    "uiTouScore\030\021 \003(\005\022\022\n\nbZhuangWin\030\022 \001(\010\022\031\n\021"
    "cbJiangMaCardData\030\023 \003(\005\022&\n\016detailedScore"
    "s\030\024 \003(\0132\016.GX8ZScoreList\022\017\n\007bIsDaTu\030\025 \001(\010"
    "\022\021\n\tbIsKuTong\030\026 \001(\010\022\020\n\010nNo1Seat\030\027 \001(\005\022\022\n"
    "\nnWinerSeat\030\030 \001(\005\022\023\n\013nWinersMate\030\031 \001(\005\022\020"
    "\n\010nNo2Seat\030\032 \001(\005\022\020\n\010nNo3Seat\030\033 \001(\005\022\020\n\010nN"
    "o4Seat\030\034 \001(\005\022\017\n\007bBroken\030\035 \001(\010\022\031\n\021nBroken"
    "PlayerSeat\030\036 \001(\005\022\022\n\nbSurrender\030\037 \001(\010\022\034\n\024"
    "nSurrenderPlayerSeat\030  \001(\005\022\021\n\tbIsSpring\030"
    "! \003(\010\022\031\n\021nSurplusCardCount\030\" \003(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\253\021\"r\n\034ProGX8ZGameQuickSoundReque"
    "st\022\017\n\007desk_id\030\002 \001(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010"
    "sound_id\030\004 \001(\005\022\014\n\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n"
    "\002ID\020\254\021\"s\n\035ProGX8ZGameQuickSoundResponse\022"
    "\017\n\007desk_id\030\002 \001(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010sou"
    "nd_id\030\004 \001(\005\022\014\n\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID"
    "\020\255\021\"\264\001\n\032ProGX8ZGameSendDiscardMahs\022\017\n\007se"
    "at_id\030\002 \001(\005\022 \n\ncbCardData\030\003 \003(\0132\014.GX8ZMa"
    "hList\022(\n\022cbNoChangeCardData\030\004 \003(\0132\014.GX8Z"
    "MahList\022\021\n\tdeskCount\030\005 \001(\005\022\024\n\014outCardCou"
    "nt\030\006 \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\256\021\"]\n\rGX8ZWeaveI"
    "tem\022\021\n\tweaveKind\030\001 \001(\005\022\022\n\ncentercard\030\002 \001"
    "(\005\022\023\n\013provideUser\030\003 \001(\005\022\020\n\010cardsize\030\004 \001("
    "\005\"/\n\016GX8ZWeaveItems\022\035\n\005items\030\001 \003(\0132\016.GX8"
    "ZWeaveItem\"_\n\031ProGX8ZGameSendActionMahs\022"
    "\017\n\007seat_id\030\002 \001(\005\022\037\n\006weaves\030\003 \003(\0132\017.GX8ZW"
    "eaveItems\"\020\n\005MSGID\022\007\n\002ID\020\257\021\"k\n\030ProGX8ZGa"
    "meBrokenRequest\022\017\n\007seat_id\030\002 \001(\005\022\036\n\004type"
    "\030\003 \001(\0162\020.GX8ZBROKEN_TYPE\022\014\n\004time\030\004 \001(\005\"\020"
    "\n\005MSGID\022\007\n\002ID\020\260\021\"t\n\030ProGX8ZGameBrokenOpe"
    "rate\022\017\n\007seat_id\030\002 \001(\005\0225\n\006result\030\003 \001(\0162\023."
    "GX8ZBROKEN_OPERATE:\020GX8Z_BO_DISAGREE\"\020\n\005"
    "MSGID\022\007\n\002ID\020\261\021\"u\n\027ProGX8ZGameBrokenNotif"
    "y\022\017\n\007seat_id\030\002 \001(\005\0227\n\014operate_code\030\003 \001(\016"
    "2\020.GX8ZBROKEN_CODE:\017GX8Z_BC_SUCCESS\"\020\n\005M"
    "SGID\022\007\n\002ID\020\262\021\"\201\003\n\025ProGX8ZGameRuleConfig\022"
    "\022\n\ngame_round\030\001 \001(\005\022\021\n\tneed_card\030\002 \001(\005\022\030"
    "\n\020have_bottom_king\030\003 \001(\010\022\024\n\014have_mai_lei"
    "\030\004 \001(\010\022\024\n\014hava_hui_tou\030\005 \001(\010\022\023\n\013nMasterS"
    "eat\030\006 \001(\005\022\032\n\022current_game_count\030\007 \001(\005\022\023\n"
    "\013have_jianma\030\010 \001(\010\022\025\n\rnChongguanNum\030\t \001("
    "\005\022\025\n\rbbawangfanbei\030\n \001(\010\022\022\n\nnPlayerNum\030\013"
    " \001(\005\022\020\n\010sRoomNum\030\014 \001(\014\022\021\n\tsPlayTime\030\r \001("
    "\014\022\020\n\010gametype\030\016 \001(\005\022\022\n\nisJingDian\030\017 \001(\010\022"
    "\026\n\016isOpenTeammate\030\020 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\263"
    "\021\"j\n\027ProGX8ZGameBrokenStatus\022\023\n\013broken_s"
    "eat\030\001 \001(\005\022\025\n\rbroken_status\030\002 \003(\010\022\021\n\tleft"
    "_time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\264\021\"J\n\023ProGX8Z"
    "GameDataResp\022\023\n\013total_score\030\001 \003(\005\022\014\n\004typ"
    "e\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\265\021\"J\n\030ProGX8ZGame"
    "RecordRequest\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 "
    "\001(\014\"\020\n\005MSGID\022\007\n\002ID\020\266\021\"K\n\031ProGX8ZGameReco"
    "rdResponse\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014"
    "\"\020\n\005MSGID\022\007\n\002ID\020\267\021\"\230\001\n\036ProGX8ZGameUserLo"
    "cationRequest\022\017\n\007seat_id\030\001 \001(\005\022\023\n\013dwlong"
    "itude\030\002 \001(\001\022\022\n\ndwlatitude\030\003 \001(\001\022\023\n\013strDi"
    "strict\030\004 \001(\014\022\025\n\rstrStreetName\030\005 \001(\014\"\020\n\005M"
    "SGID\022\007\n\002ID\020\270\021\"O\n\033ProGX8ZGameSyncCardResp"
    "onse\022\014\n\004seat\030\002 \001(\005\022\020\n\010handmahs\030\003 \003(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\271\021\"Z\n!ProGX8ZGameUserPhoneSt"
    "atusRequest\022\017\n\007seat_id\030\001 \001(\005\022\022\n\nuserstat"
    "us\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\272\021\"A\n\034ProGX8ZGam"
    "eUserGiveUpRequest\022\017\n\007seat_id\030\001 \001(\005\"\020\n\005M"
    "SGID\022\007\n\002ID\020\273\021\".\n\032ProGX8ZGameUserHintRequ"
    "est\"\020\n\005MSGID\022\007\n\002ID\020\274\021\"O\n\033ProGX8ZGameUser"
    "HintResponse\022\r\n\005lenth\030\001 \001(\005\022\017\n\007outMahs\030\002"
    " \003(\005\"\020\n\005MSGID\022\007\n\002ID\020\275\021\";\n\031ProGX8ZGameUse"
    "rDaTuNotify\022\014\n\004seat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID"
    "\020\276\021\"\\\n\036ProGX8ZGameUserTeammateRequest\022\026\n"
    "\016bankerMateSeat\030\001 \001(\005\022\020\n\010mateCard\030\002 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\277\021\"M\n\032ProGX8ZGameUserDaTu"
    "Request\022\014\n\004seat\030\001 \001(\005\022\017\n\007bIsDaTu\030\002 \001(\010\"\020"
    "\n\005MSGID\022\007\n\002ID\020\300\021\"`\n\033ProGX8ZGameUserDaTuR"
    "esponse\022\014\n\004seat\030\001 \001(\005\022\017\n\007bIsDaTu\030\002 \001(\010\022\020"
    "\n\010nextSeat\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\301\021\"L\n\031Pr"
    "oGX8ZGameUserDaTuResult\022\014\n\004seat\030\001 \001(\005\022\017\n"
    "\007bIsDaTu\030\002 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\302\021\"C\n\031ProG"
    "X8ZGameShangYouResult\022\024\n\014shangyouSeat\030\001 "
    "\003(\005\"\020\n\005MSGID\022\007\n\002ID\020\303\021\">\n\033ProGX8ZGameShow"
    "FriendNotify\022\r\n\005bShow\030\001 \001(\010\"\020\n\005MSGID\022\007\n\002"
    "ID\020\304\021\"M\n\030ProGX8ZGameBoomNumNotify\022\r\n\005nSe"
    "at\030\001 \001(\005\022\020\n\010nBoomNum\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002I"
    "D\020\305\021\"A\n\036ProGX8ZGameShowBoomDataRequest\022\r"
    "\n\005nSeat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\306\021\"\201\001\n\037ProG"
    "X8ZGameShowBoomDataResponse\022\r\n\005nSeat\030\001 \001"
    "(\005\022\024\n\014bIsSendToAll\030\002 \001(\010\022\'\n\017cbAwardCardD"
    "ata\030\003 \003(\0132\016.GX8ZAwardList\"\020\n\005MSGID\022\007\n\002ID"
    "\020\307\021\"f\n\031ProGX8ZGameCardTypeSelect\022\r\n\005nSea"
    "t\030\001 \001(\005\022(\n\022CardTypeSelectData\030\002 \003(\0132\014.GX"
    "8ZMahList\"\020\n\005MSGID\022\007\n\002ID\020\310\021\"\?\n\034ProGX8ZGa"
    "meIsSurrenderSelect\022\r\n\005nSeat\030\001 \001(\005\"\020\n\005MS"
    "GID\022\007\n\002ID\020\311\021\"V\n\035ProGX8ZGameIsSurrenderOp"
    "erate\022\r\n\005nSeat\030\001 \001(\005\022\024\n\014bIsSurrender\030\002 \001"
    "(\010\"\020\n\005MSGID\022\007\n\002ID\020\312\021\"M\n!ProGX8ZGameIsAgr"
    "eeSurrenderSelect\022\026\n\016nSurrenderSeat\030\001 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\313\021\"`\n\"ProGX8ZGameIsAgre"
    "eSurrenderOperate\022\r\n\005nSeat\030\001 \001(\005\022\031\n\021bIsA"
    "greeSurrender\030\002 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\314\021\"_\n"
    "!ProGX8ZGameIsAgreeSurrenderStatus\022\r\n\005nS"
    "eat\030\001 \001(\005\022\031\n\021bIsAgreeSurrender\030\002 \001(\010\"\020\n\005"
    "MSGID\022\007\n\002ID\020\315\021\"H\n\032ProGX8ZGameSurrenderRe"
    "sult\022\030\n\020bSurrenderResult\030\001 \001(\010\"\020\n\005MSGID\022"
    "\007\n\002ID\020\316\021\"-\n\031ProGX8ZGameShowBoomNotify\"\020\n"
    "\005MSGID\022\007\n\002ID\020\317\021\"=\n\032ProGX8ZGameShowBoomOp"
    "erate\022\r\n\005nSeat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\320\021\"R"
    "\n\033ProGX8ZGameShowBoomResponse\022\r\n\005nSeat\030\001"
    " \001(\005\022\022\n\nAwardScore\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020"
    "\321\021*\213\001\n\rGX8ZGameState\022\022\n\016GX8Z_GAME_IDLE\020\001"
    "\022\027\n\023GX8Z_GAME_DICE_BANK\020\002\022\022\n\016GX8Z_GAME_S"
    "END\020\003\022\022\n\016GX8Z_GAME_DATU\020\004\022\022\n\016GX8Z_GAME_P"
    "LAY\020\006\022\021\n\rGX8Z_GAME_END\020\007*;\n\rGX8ZSEND_TYP"
    "E\022\024\n\020GX8Z_NORMAL_SEND\020\001\022\024\n\020GX8Z_RECOME_S"
    "END\020\002*M\n\rGX8ZKING_TYPE\022\020\n\014GX8Z_KING_UP\020\001"
    "\022\024\n\020GX8Z_KING_HUITOU\020\002\022\024\n\020GX8Z_KING_MAIL"
    "EI\020\003*U\n\017GX8ZBROKEN_TYPE\022\027\n\023GX8Z_BT_MASTE"
    "R_QUIT\020\000\022\025\n\021GX8Z_BT_USER_QUIT\020\001\022\022\n\016GX8Z_"
    "BT_BROKEN\020\002*=\n\022GX8ZBROKEN_OPERATE\022\024\n\020GX8"
    "Z_BO_DISAGREE\020\000\022\021\n\rGX8Z_BO_AGREE\020\001*m\n\017GX"
    "8ZBROKEN_CODE\022\023\n\017GX8Z_BC_SUCCESS\020\000\022\024\n\020GX"
    "8Z_BC_DISAGREE\020\001\022\030\n\024GX8Z_BC_QUIT_SUCCESS"
    "\020\002\022\025\n\021GX8Z_BC_EXCEPTION\020\003", 7545);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gx8zpk.proto", &protobuf_RegisterTypes);
  ProGX8ZGameStatusResponse::default_instance_ = new ProGX8ZGameStatusResponse();
  ProGX8ZGameDeskInfoResponse::default_instance_ = new ProGX8ZGameDeskInfoResponse();
  ProGX8ZGameReadyNotify::default_instance_ = new ProGX8ZGameReadyNotify();
  ProGX8ZGameReadyRequest::default_instance_ = new ProGX8ZGameReadyRequest();
  ProGX8ZGameReadyResponse::default_instance_ = new ProGX8ZGameReadyResponse();
  ProGX8ZGameStart::default_instance_ = new ProGX8ZGameStart();
  ProGX8ZGameDiceNotify::default_instance_ = new ProGX8ZGameDiceNotify();
  ProGX8ZGameDiceRequest::default_instance_ = new ProGX8ZGameDiceRequest();
  ProGX8ZGameDiceResult::default_instance_ = new ProGX8ZGameDiceResult();
  ProGX8ZGameSendMahs::default_instance_ = new ProGX8ZGameSendMahs();
  ProGX8ZGameKingData::default_instance_ = new ProGX8ZGameKingData();
  ProGX8ZGameOutMahsResponse::default_instance_ = new ProGX8ZGameOutMahsResponse();
  ProGX8ZGameTimerPower::default_instance_ = new ProGX8ZGameTimerPower();
  ProGX8ZGameOperateNotify::default_instance_ = new ProGX8ZGameOperateNotify();
  ProGX8ZGameOperateResult::default_instance_ = new ProGX8ZGameOperateResult();
  ProGX8ZGameOperateRequest::default_instance_ = new ProGX8ZGameOperateRequest();
  ProGX8ZGameTrust::default_instance_ = new ProGX8ZGameTrust();
  ProGX8ZGameOutMahRequest::default_instance_ = new ProGX8ZGameOutMahRequest();
  ProGX8ZGameCatchCard::default_instance_ = new ProGX8ZGameCatchCard();
  GX8ZMahList::default_instance_ = new GX8ZMahList();
  GX8ZScoreList::default_instance_ = new GX8ZScoreList();
  GX8ZAwardList::default_instance_ = new GX8ZAwardList();
  ProGX8ZGameEnd::default_instance_ = new ProGX8ZGameEnd();
  ProGX8ZGameQuickSoundRequest::default_instance_ = new ProGX8ZGameQuickSoundRequest();
  ProGX8ZGameQuickSoundResponse::default_instance_ = new ProGX8ZGameQuickSoundResponse();
  ProGX8ZGameSendDiscardMahs::default_instance_ = new ProGX8ZGameSendDiscardMahs();
  GX8ZWeaveItem::default_instance_ = new GX8ZWeaveItem();
  GX8ZWeaveItems::default_instance_ = new GX8ZWeaveItems();
  ProGX8ZGameSendActionMahs::default_instance_ = new ProGX8ZGameSendActionMahs();
  ProGX8ZGameBrokenRequest::default_instance_ = new ProGX8ZGameBrokenRequest();
  ProGX8ZGameBrokenOperate::default_instance_ = new ProGX8ZGameBrokenOperate();
  ProGX8ZGameBrokenNotify::default_instance_ = new ProGX8ZGameBrokenNotify();
  ProGX8ZGameRuleConfig::default_instance_ = new ProGX8ZGameRuleConfig();
  ProGX8ZGameBrokenStatus::default_instance_ = new ProGX8ZGameBrokenStatus();
  ProGX8ZGameDataResp::default_instance_ = new ProGX8ZGameDataResp();
  ProGX8ZGameRecordRequest::default_instance_ = new ProGX8ZGameRecordRequest();
  ProGX8ZGameRecordResponse::default_instance_ = new ProGX8ZGameRecordResponse();
  ProGX8ZGameUserLocationRequest::default_instance_ = new ProGX8ZGameUserLocationRequest();
  ProGX8ZGameSyncCardResponse::default_instance_ = new ProGX8ZGameSyncCardResponse();
  ProGX8ZGameUserPhoneStatusRequest::default_instance_ = new ProGX8ZGameUserPhoneStatusRequest();
  ProGX8ZGameUserGiveUpRequest::default_instance_ = new ProGX8ZGameUserGiveUpRequest();
  ProGX8ZGameUserHintRequest::default_instance_ = new ProGX8ZGameUserHintRequest();
  ProGX8ZGameUserHintResponse::default_instance_ = new ProGX8ZGameUserHintResponse();
  ProGX8ZGameUserDaTuNotify::default_instance_ = new ProGX8ZGameUserDaTuNotify();
  ProGX8ZGameUserTeammateRequest::default_instance_ = new ProGX8ZGameUserTeammateRequest();
  ProGX8ZGameUserDaTuRequest::default_instance_ = new ProGX8ZGameUserDaTuRequest();
  ProGX8ZGameUserDaTuResponse::default_instance_ = new ProGX8ZGameUserDaTuResponse();
  ProGX8ZGameUserDaTuResult::default_instance_ = new ProGX8ZGameUserDaTuResult();
  ProGX8ZGameShangYouResult::default_instance_ = new ProGX8ZGameShangYouResult();
  ProGX8ZGameShowFriendNotify::default_instance_ = new ProGX8ZGameShowFriendNotify();
  ProGX8ZGameBoomNumNotify::default_instance_ = new ProGX8ZGameBoomNumNotify();
  ProGX8ZGameShowBoomDataRequest::default_instance_ = new ProGX8ZGameShowBoomDataRequest();
  ProGX8ZGameShowBoomDataResponse::default_instance_ = new ProGX8ZGameShowBoomDataResponse();
  ProGX8ZGameCardTypeSelect::default_instance_ = new ProGX8ZGameCardTypeSelect();
  ProGX8ZGameIsSurrenderSelect::default_instance_ = new ProGX8ZGameIsSurrenderSelect();
  ProGX8ZGameIsSurrenderOperate::default_instance_ = new ProGX8ZGameIsSurrenderOperate();
  ProGX8ZGameIsAgreeSurrenderSelect::default_instance_ = new ProGX8ZGameIsAgreeSurrenderSelect();
  ProGX8ZGameIsAgreeSurrenderOperate::default_instance_ = new ProGX8ZGameIsAgreeSurrenderOperate();
  ProGX8ZGameIsAgreeSurrenderStatus::default_instance_ = new ProGX8ZGameIsAgreeSurrenderStatus();
  ProGX8ZGameSurrenderResult::default_instance_ = new ProGX8ZGameSurrenderResult();
  ProGX8ZGameShowBoomNotify::default_instance_ = new ProGX8ZGameShowBoomNotify();
  ProGX8ZGameShowBoomOperate::default_instance_ = new ProGX8ZGameShowBoomOperate();
  ProGX8ZGameShowBoomResponse::default_instance_ = new ProGX8ZGameShowBoomResponse();
  ProGX8ZGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameStart::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameKingData::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameTrust::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameCatchCard::default_instance_->InitAsDefaultInstance();
  GX8ZMahList::default_instance_->InitAsDefaultInstance();
  GX8ZScoreList::default_instance_->InitAsDefaultInstance();
  GX8ZAwardList::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameEnd::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  GX8ZWeaveItem::default_instance_->InitAsDefaultInstance();
  GX8ZWeaveItems::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameDataResp::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserDaTuNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserTeammateRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserDaTuRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserDaTuResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameUserDaTuResult::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShangYouResult::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShowFriendNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameBoomNumNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShowBoomDataRequest::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShowBoomDataResponse::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameCardTypeSelect::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameIsSurrenderSelect::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameIsSurrenderOperate::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameIsAgreeSurrenderSelect::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameIsAgreeSurrenderOperate::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameIsAgreeSurrenderStatus::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameSurrenderResult::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShowBoomNotify::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShowBoomOperate::default_instance_->InitAsDefaultInstance();
  ProGX8ZGameShowBoomResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gx8zpk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gx8zpk_2eproto {
  StaticDescriptorInitializer_gx8zpk_2eproto() {
    protobuf_AddDesc_gx8zpk_2eproto();
  }
} static_descriptor_initializer_gx8zpk_2eproto_;
const ::google::protobuf::EnumDescriptor* GX8ZGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZGameState_descriptor_;
}
bool GX8ZGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GX8ZSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZSEND_TYPE_descriptor_;
}
bool GX8ZSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GX8ZKING_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZKING_TYPE_descriptor_;
}
bool GX8ZKING_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZBROKEN_TYPE_descriptor_;
}
bool GX8ZBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZBROKEN_OPERATE_descriptor_;
}
bool GX8ZBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZBROKEN_CODE_descriptor_;
}
bool GX8ZBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameStatusResponse_MSGID_descriptor_;
}
bool ProGX8ZGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameStatusResponse_MSGID ProGX8ZGameStatusResponse::ID;
const ProGX8ZGameStatusResponse_MSGID ProGX8ZGameStatusResponse::MSGID_MIN;
const ProGX8ZGameStatusResponse_MSGID ProGX8ZGameStatusResponse::MSGID_MAX;
const int ProGX8ZGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameStatusResponse::ProGX8ZGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameStatusResponse::InitAsDefaultInstance() {
}

ProGX8ZGameStatusResponse::ProGX8ZGameStatusResponse(const ProGX8ZGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameStatusResponse::~ProGX8ZGameStatusResponse() {
  SharedDtor();
}

void ProGX8ZGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameStatusResponse_descriptor_;
}

const ProGX8ZGameStatusResponse& ProGX8ZGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameStatusResponse* ProGX8ZGameStatusResponse::default_instance_ = NULL;

ProGX8ZGameStatusResponse* ProGX8ZGameStatusResponse::New() const {
  return new ProGX8ZGameStatusResponse;
}

void ProGX8ZGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GX8ZGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GX8ZGameState_IsValid(value)) {
            set_status(static_cast< ::GX8ZGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GX8ZGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GX8ZGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GX8ZGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameStatusResponse::MergeFrom(const ProGX8ZGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameStatusResponse::CopyFrom(const ProGX8ZGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameStatusResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameStatusResponse::Swap(ProGX8ZGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameStatusResponse_descriptor_;
  metadata.reflection = ProGX8ZGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProGX8ZGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameDeskInfoResponse_MSGID ProGX8ZGameDeskInfoResponse::ID;
const ProGX8ZGameDeskInfoResponse_MSGID ProGX8ZGameDeskInfoResponse::MSGID_MIN;
const ProGX8ZGameDeskInfoResponse_MSGID ProGX8ZGameDeskInfoResponse::MSGID_MAX;
const int ProGX8ZGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameDeskInfoResponse::ProGX8ZGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProGX8ZGameDeskInfoResponse::ProGX8ZGameDeskInfoResponse(const ProGX8ZGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameDeskInfoResponse::~ProGX8ZGameDeskInfoResponse() {
  SharedDtor();
}

void ProGX8ZGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDeskInfoResponse_descriptor_;
}

const ProGX8ZGameDeskInfoResponse& ProGX8ZGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameDeskInfoResponse* ProGX8ZGameDeskInfoResponse::default_instance_ = NULL;

ProGX8ZGameDeskInfoResponse* ProGX8ZGameDeskInfoResponse::New() const {
  return new ProGX8ZGameDeskInfoResponse;
}

void ProGX8ZGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameDeskInfoResponse::MergeFrom(const ProGX8ZGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameDeskInfoResponse::CopyFrom(const ProGX8ZGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameDeskInfoResponse::Swap(ProGX8ZGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProGX8ZGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameReadyNotify_MSGID_descriptor_;
}
bool ProGX8ZGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameReadyNotify_MSGID ProGX8ZGameReadyNotify::ID;
const ProGX8ZGameReadyNotify_MSGID ProGX8ZGameReadyNotify::MSGID_MIN;
const ProGX8ZGameReadyNotify_MSGID ProGX8ZGameReadyNotify::MSGID_MAX;
const int ProGX8ZGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameReadyNotify::kSeatFieldNumber;
const int ProGX8ZGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameReadyNotify::ProGX8ZGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameReadyNotify::InitAsDefaultInstance() {
}

ProGX8ZGameReadyNotify::ProGX8ZGameReadyNotify(const ProGX8ZGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameReadyNotify::~ProGX8ZGameReadyNotify() {
  SharedDtor();
}

void ProGX8ZGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameReadyNotify_descriptor_;
}

const ProGX8ZGameReadyNotify& ProGX8ZGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameReadyNotify* ProGX8ZGameReadyNotify::default_instance_ = NULL;

ProGX8ZGameReadyNotify* ProGX8ZGameReadyNotify::New() const {
  return new ProGX8ZGameReadyNotify;
}

void ProGX8ZGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameReadyNotify::MergeFrom(const ProGX8ZGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameReadyNotify::CopyFrom(const ProGX8ZGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameReadyNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameReadyNotify::Swap(ProGX8ZGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameReadyNotify_descriptor_;
  metadata.reflection = ProGX8ZGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameReadyRequest_MSGID_descriptor_;
}
bool ProGX8ZGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameReadyRequest_MSGID ProGX8ZGameReadyRequest::ID;
const ProGX8ZGameReadyRequest_MSGID ProGX8ZGameReadyRequest::MSGID_MIN;
const ProGX8ZGameReadyRequest_MSGID ProGX8ZGameReadyRequest::MSGID_MAX;
const int ProGX8ZGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameReadyRequest::ProGX8ZGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameReadyRequest::InitAsDefaultInstance() {
}

ProGX8ZGameReadyRequest::ProGX8ZGameReadyRequest(const ProGX8ZGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameReadyRequest::~ProGX8ZGameReadyRequest() {
  SharedDtor();
}

void ProGX8ZGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameReadyRequest_descriptor_;
}

const ProGX8ZGameReadyRequest& ProGX8ZGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameReadyRequest* ProGX8ZGameReadyRequest::default_instance_ = NULL;

ProGX8ZGameReadyRequest* ProGX8ZGameReadyRequest::New() const {
  return new ProGX8ZGameReadyRequest;
}

void ProGX8ZGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameReadyRequest::MergeFrom(const ProGX8ZGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameReadyRequest::CopyFrom(const ProGX8ZGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameReadyRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameReadyRequest::Swap(ProGX8ZGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameReadyRequest_descriptor_;
  metadata.reflection = ProGX8ZGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameReadyResponse_MSGID_descriptor_;
}
bool ProGX8ZGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameReadyResponse_MSGID ProGX8ZGameReadyResponse::ID;
const ProGX8ZGameReadyResponse_MSGID ProGX8ZGameReadyResponse::MSGID_MIN;
const ProGX8ZGameReadyResponse_MSGID ProGX8ZGameReadyResponse::MSGID_MAX;
const int ProGX8ZGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameReadyResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameReadyResponse::ProGX8ZGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameReadyResponse::InitAsDefaultInstance() {
}

ProGX8ZGameReadyResponse::ProGX8ZGameReadyResponse(const ProGX8ZGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameReadyResponse::~ProGX8ZGameReadyResponse() {
  SharedDtor();
}

void ProGX8ZGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameReadyResponse_descriptor_;
}

const ProGX8ZGameReadyResponse& ProGX8ZGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameReadyResponse* ProGX8ZGameReadyResponse::default_instance_ = NULL;

ProGX8ZGameReadyResponse* ProGX8ZGameReadyResponse::New() const {
  return new ProGX8ZGameReadyResponse;
}

void ProGX8ZGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameReadyResponse::MergeFrom(const ProGX8ZGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameReadyResponse::CopyFrom(const ProGX8ZGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameReadyResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameReadyResponse::Swap(ProGX8ZGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameReadyResponse_descriptor_;
  metadata.reflection = ProGX8ZGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameStart_MSGID_descriptor_;
}
bool ProGX8ZGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameStart_MSGID ProGX8ZGameStart::ID;
const ProGX8ZGameStart_MSGID ProGX8ZGameStart::MSGID_MIN;
const ProGX8ZGameStart_MSGID ProGX8ZGameStart::MSGID_MAX;
const int ProGX8ZGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameStart::kBankerseatFieldNumber;
const int ProGX8ZGameStart::kGamecountFieldNumber;
const int ProGX8ZGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameStart::ProGX8ZGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameStart::InitAsDefaultInstance() {
}

ProGX8ZGameStart::ProGX8ZGameStart(const ProGX8ZGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameStart::~ProGX8ZGameStart() {
  SharedDtor();
}

void ProGX8ZGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameStart_descriptor_;
}

const ProGX8ZGameStart& ProGX8ZGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameStart* ProGX8ZGameStart::default_instance_ = NULL;

ProGX8ZGameStart* ProGX8ZGameStart::New() const {
  return new ProGX8ZGameStart;
}

void ProGX8ZGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameStart::MergeFrom(const ProGX8ZGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameStart::CopyFrom(const ProGX8ZGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameStart::IsInitialized() const {

  return true;
}

void ProGX8ZGameStart::Swap(ProGX8ZGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameStart_descriptor_;
  metadata.reflection = ProGX8ZGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDiceNotify_MSGID_descriptor_;
}
bool ProGX8ZGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameDiceNotify_MSGID ProGX8ZGameDiceNotify::ID;
const ProGX8ZGameDiceNotify_MSGID ProGX8ZGameDiceNotify::MSGID_MIN;
const ProGX8ZGameDiceNotify_MSGID ProGX8ZGameDiceNotify::MSGID_MAX;
const int ProGX8ZGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameDiceNotify::kSeatFieldNumber;
const int ProGX8ZGameDiceNotify::kTimeFieldNumber;
const int ProGX8ZGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameDiceNotify::ProGX8ZGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameDiceNotify::InitAsDefaultInstance() {
}

ProGX8ZGameDiceNotify::ProGX8ZGameDiceNotify(const ProGX8ZGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameDiceNotify::~ProGX8ZGameDiceNotify() {
  SharedDtor();
}

void ProGX8ZGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDiceNotify_descriptor_;
}

const ProGX8ZGameDiceNotify& ProGX8ZGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameDiceNotify* ProGX8ZGameDiceNotify::default_instance_ = NULL;

ProGX8ZGameDiceNotify* ProGX8ZGameDiceNotify::New() const {
  return new ProGX8ZGameDiceNotify;
}

void ProGX8ZGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameDiceNotify::MergeFrom(const ProGX8ZGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameDiceNotify::CopyFrom(const ProGX8ZGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameDiceNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameDiceNotify::Swap(ProGX8ZGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameDiceNotify_descriptor_;
  metadata.reflection = ProGX8ZGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDiceRequest_MSGID_descriptor_;
}
bool ProGX8ZGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameDiceRequest_MSGID ProGX8ZGameDiceRequest::ID;
const ProGX8ZGameDiceRequest_MSGID ProGX8ZGameDiceRequest::MSGID_MIN;
const ProGX8ZGameDiceRequest_MSGID ProGX8ZGameDiceRequest::MSGID_MAX;
const int ProGX8ZGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameDiceRequest::kSeatFieldNumber;
const int ProGX8ZGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameDiceRequest::ProGX8ZGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameDiceRequest::InitAsDefaultInstance() {
}

ProGX8ZGameDiceRequest::ProGX8ZGameDiceRequest(const ProGX8ZGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameDiceRequest::~ProGX8ZGameDiceRequest() {
  SharedDtor();
}

void ProGX8ZGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDiceRequest_descriptor_;
}

const ProGX8ZGameDiceRequest& ProGX8ZGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameDiceRequest* ProGX8ZGameDiceRequest::default_instance_ = NULL;

ProGX8ZGameDiceRequest* ProGX8ZGameDiceRequest::New() const {
  return new ProGX8ZGameDiceRequest;
}

void ProGX8ZGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameDiceRequest::MergeFrom(const ProGX8ZGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameDiceRequest::CopyFrom(const ProGX8ZGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameDiceRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameDiceRequest::Swap(ProGX8ZGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameDiceRequest_descriptor_;
  metadata.reflection = ProGX8ZGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDiceResult_MSGID_descriptor_;
}
bool ProGX8ZGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameDiceResult_MSGID ProGX8ZGameDiceResult::ID;
const ProGX8ZGameDiceResult_MSGID ProGX8ZGameDiceResult::MSGID_MIN;
const ProGX8ZGameDiceResult_MSGID ProGX8ZGameDiceResult::MSGID_MAX;
const int ProGX8ZGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameDiceResult::kSeatFieldNumber;
const int ProGX8ZGameDiceResult::kResultFieldNumber;
const int ProGX8ZGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameDiceResult::ProGX8ZGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameDiceResult::InitAsDefaultInstance() {
}

ProGX8ZGameDiceResult::ProGX8ZGameDiceResult(const ProGX8ZGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameDiceResult::~ProGX8ZGameDiceResult() {
  SharedDtor();
}

void ProGX8ZGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDiceResult_descriptor_;
}

const ProGX8ZGameDiceResult& ProGX8ZGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameDiceResult* ProGX8ZGameDiceResult::default_instance_ = NULL;

ProGX8ZGameDiceResult* ProGX8ZGameDiceResult::New() const {
  return new ProGX8ZGameDiceResult;
}

void ProGX8ZGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameDiceResult::MergeFrom(const ProGX8ZGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameDiceResult::CopyFrom(const ProGX8ZGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameDiceResult::IsInitialized() const {

  return true;
}

void ProGX8ZGameDiceResult::Swap(ProGX8ZGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameDiceResult_descriptor_;
  metadata.reflection = ProGX8ZGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSendMahs_MSGID_descriptor_;
}
bool ProGX8ZGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameSendMahs_MSGID ProGX8ZGameSendMahs::ID;
const ProGX8ZGameSendMahs_MSGID ProGX8ZGameSendMahs::MSGID_MIN;
const ProGX8ZGameSendMahs_MSGID ProGX8ZGameSendMahs::MSGID_MAX;
const int ProGX8ZGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameSendMahs::kSeatFieldNumber;
const int ProGX8ZGameSendMahs::kMahsFieldNumber;
const int ProGX8ZGameSendMahs::kMahscountFieldNumber;
const int ProGX8ZGameSendMahs::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameSendMahs::ProGX8ZGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameSendMahs::InitAsDefaultInstance() {
}

ProGX8ZGameSendMahs::ProGX8ZGameSendMahs(const ProGX8ZGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameSendMahs::~ProGX8ZGameSendMahs() {
  SharedDtor();
}

void ProGX8ZGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSendMahs_descriptor_;
}

const ProGX8ZGameSendMahs& ProGX8ZGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameSendMahs* ProGX8ZGameSendMahs::default_instance_ = NULL;

ProGX8ZGameSendMahs* ProGX8ZGameSendMahs::New() const {
  return new ProGX8ZGameSendMahs;
}

void ProGX8ZGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
  }
  mahs_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameSendMahs::MergeFrom(const ProGX8ZGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameSendMahs::CopyFrom(const ProGX8ZGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameSendMahs::IsInitialized() const {

  return true;
}

void ProGX8ZGameSendMahs::Swap(ProGX8ZGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameSendMahs_descriptor_;
  metadata.reflection = ProGX8ZGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameKingData_MSGID_descriptor_;
}
bool ProGX8ZGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameKingData_MSGID ProGX8ZGameKingData::ID;
const ProGX8ZGameKingData_MSGID ProGX8ZGameKingData::MSGID_MIN;
const ProGX8ZGameKingData_MSGID ProGX8ZGameKingData::MSGID_MAX;
const int ProGX8ZGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameKingData::kSeatFieldNumber;
const int ProGX8ZGameKingData::kMahsFieldNumber;
const int ProGX8ZGameKingData::kDownKingScoreFieldNumber;
const int ProGX8ZGameKingData::kKingcountFieldNumber;
const int ProGX8ZGameKingData::kVicekingFieldNumber;
const int ProGX8ZGameKingData::kNotifyTypeFieldNumber;
const int ProGX8ZGameKingData::kKingTypeFieldNumber;
const int ProGX8ZGameKingData::kCbChongGuangFieldNumber;
const int ProGX8ZGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameKingData::ProGX8ZGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameKingData::InitAsDefaultInstance() {
}

ProGX8ZGameKingData::ProGX8ZGameKingData(const ProGX8ZGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameKingData::~ProGX8ZGameKingData() {
  SharedDtor();
}

void ProGX8ZGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameKingData_descriptor_;
}

const ProGX8ZGameKingData& ProGX8ZGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameKingData* ProGX8ZGameKingData::default_instance_ = NULL;

ProGX8ZGameKingData* ProGX8ZGameKingData::New() const {
  return new ProGX8ZGameKingData;
}

void ProGX8ZGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .GX8ZSEND_TYPE notify_type = 7 [default = GX8Z_NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GX8ZSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::GX8ZSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .GX8ZKING_TYPE king_type = 8 [default = GX8Z_KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GX8ZKING_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::GX8ZKING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .GX8ZSEND_TYPE notify_type = 7 [default = GX8Z_NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .GX8ZKING_TYPE king_type = 8 [default = GX8Z_KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .GX8ZSEND_TYPE notify_type = 7 [default = GX8Z_NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .GX8ZKING_TYPE king_type = 8 [default = GX8Z_KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .GX8ZSEND_TYPE notify_type = 7 [default = GX8Z_NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .GX8ZKING_TYPE king_type = 8 [default = GX8Z_KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameKingData::MergeFrom(const ProGX8ZGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameKingData::CopyFrom(const ProGX8ZGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameKingData::IsInitialized() const {

  return true;
}

void ProGX8ZGameKingData::Swap(ProGX8ZGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameKingData_descriptor_;
  metadata.reflection = ProGX8ZGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOutMahsResponse_MSGID_descriptor_;
}
bool ProGX8ZGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameOutMahsResponse_MSGID ProGX8ZGameOutMahsResponse::ID;
const ProGX8ZGameOutMahsResponse_MSGID ProGX8ZGameOutMahsResponse::MSGID_MIN;
const ProGX8ZGameOutMahsResponse_MSGID ProGX8ZGameOutMahsResponse::MSGID_MAX;
const int ProGX8ZGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameOutMahsResponse::kSeatFieldNumber;
const int ProGX8ZGameOutMahsResponse::kOutMahsFieldNumber;
const int ProGX8ZGameOutMahsResponse::kHandmahsFieldNumber;
const int ProGX8ZGameOutMahsResponse::kCardCountFieldNumber;
const int ProGX8ZGameOutMahsResponse::kCardTypeFieldNumber;
const int ProGX8ZGameOutMahsResponse::kCardtypeflgFieldNumber;
const int ProGX8ZGameOutMahsResponse::kCardPointFieldNumber;
const int ProGX8ZGameOutMahsResponse::kSeriesFlagFieldNumber;
const int ProGX8ZGameOutMahsResponse::kSeriesNumsFieldNumber;
const int ProGX8ZGameOutMahsResponse::kNoChangeMahsFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameOutMahsResponse::ProGX8ZGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameOutMahsResponse::InitAsDefaultInstance() {
}

ProGX8ZGameOutMahsResponse::ProGX8ZGameOutMahsResponse(const ProGX8ZGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  cardtypeflg_ = 0;
  cardpoint_ = 0;
  seriesflag_ = 0;
  seriesnums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameOutMahsResponse::~ProGX8ZGameOutMahsResponse() {
  SharedDtor();
}

void ProGX8ZGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOutMahsResponse_descriptor_;
}

const ProGX8ZGameOutMahsResponse& ProGX8ZGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameOutMahsResponse* ProGX8ZGameOutMahsResponse::default_instance_ = NULL;

ProGX8ZGameOutMahsResponse* ProGX8ZGameOutMahsResponse::New() const {
  return new ProGX8ZGameOutMahsResponse;
}

void ProGX8ZGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
    cardtypeflg_ = 0;
    cardpoint_ = 0;
    seriesflag_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    seriesnums_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cardtypeflg;
        break;
      }

      // optional int32 cardtypeflg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtypeflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtypeflg_)));
          set_has_cardtypeflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cardPoint;
        break;
      }

      // optional int32 cardPoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardpoint_)));
          set_has_cardpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_seriesFlag;
        break;
      }

      // optional int32 seriesFlag = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesflag_)));
          set_has_seriesflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_seriesNums;
        break;
      }

      // optional int32 seriesNums = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesNums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesnums_)));
          set_has_seriesnums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_noChangeMahs;
        break;
      }

      // repeated int32 noChangeMahs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noChangeMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_noChangeMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // optional int32 cardtypeflg = 7;
  if (has_cardtypeflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cardtypeflg(), output);
  }

  // optional int32 cardPoint = 8;
  if (has_cardpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cardpoint(), output);
  }

  // optional int32 seriesFlag = 9;
  if (has_seriesflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seriesflag(), output);
  }

  // optional int32 seriesNums = 10;
  if (has_seriesnums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->seriesnums(), output);
  }

  // repeated int32 noChangeMahs = 11;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->nochangemahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // optional int32 cardtypeflg = 7;
  if (has_cardtypeflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cardtypeflg(), target);
  }

  // optional int32 cardPoint = 8;
  if (has_cardpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cardpoint(), target);
  }

  // optional int32 seriesFlag = 9;
  if (has_seriesflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->seriesflag(), target);
  }

  // optional int32 seriesNums = 10;
  if (has_seriesnums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->seriesnums(), target);
  }

  // repeated int32 noChangeMahs = 11;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->nochangemahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 cardtypeflg = 7;
    if (has_cardtypeflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtypeflg());
    }

    // optional int32 cardPoint = 8;
    if (has_cardpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardpoint());
    }

    // optional int32 seriesFlag = 9;
    if (has_seriesflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesflag());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 seriesNums = 10;
    if (has_seriesnums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesnums());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  // repeated int32 noChangeMahs = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameOutMahsResponse::MergeFrom(const ProGX8ZGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_cardtypeflg()) {
      set_cardtypeflg(from.cardtypeflg());
    }
    if (from.has_cardpoint()) {
      set_cardpoint(from.cardpoint());
    }
    if (from.has_seriesflag()) {
      set_seriesflag(from.seriesflag());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seriesnums()) {
      set_seriesnums(from.seriesnums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameOutMahsResponse::CopyFrom(const ProGX8ZGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameOutMahsResponse::Swap(ProGX8ZGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(cardtypeflg_, other->cardtypeflg_);
    std::swap(cardpoint_, other->cardpoint_);
    std::swap(seriesflag_, other->seriesflag_);
    std::swap(seriesnums_, other->seriesnums_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameOutMahsResponse_descriptor_;
  metadata.reflection = ProGX8ZGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameTimerPower_MSGID_descriptor_;
}
bool ProGX8ZGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameTimerPower_MSGID ProGX8ZGameTimerPower::ID;
const ProGX8ZGameTimerPower_MSGID ProGX8ZGameTimerPower::MSGID_MIN;
const ProGX8ZGameTimerPower_MSGID ProGX8ZGameTimerPower::MSGID_MAX;
const int ProGX8ZGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameTimerPower::kSeatFieldNumber;
const int ProGX8ZGameTimerPower::kTimeFieldNumber;
const int ProGX8ZGameTimerPower::kOutcardTimeFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameTimerPower::ProGX8ZGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameTimerPower::InitAsDefaultInstance() {
}

ProGX8ZGameTimerPower::ProGX8ZGameTimerPower(const ProGX8ZGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameTimerPower::~ProGX8ZGameTimerPower() {
  SharedDtor();
}

void ProGX8ZGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameTimerPower_descriptor_;
}

const ProGX8ZGameTimerPower& ProGX8ZGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameTimerPower* ProGX8ZGameTimerPower::default_instance_ = NULL;

ProGX8ZGameTimerPower* ProGX8ZGameTimerPower::New() const {
  return new ProGX8ZGameTimerPower;
}

void ProGX8ZGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameTimerPower::MergeFrom(const ProGX8ZGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameTimerPower::CopyFrom(const ProGX8ZGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameTimerPower::IsInitialized() const {

  return true;
}

void ProGX8ZGameTimerPower::Swap(ProGX8ZGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameTimerPower_descriptor_;
  metadata.reflection = ProGX8ZGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOperateNotify_MSGID_descriptor_;
}
bool ProGX8ZGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameOperateNotify_MSGID ProGX8ZGameOperateNotify::ID;
const ProGX8ZGameOperateNotify_MSGID ProGX8ZGameOperateNotify::MSGID_MIN;
const ProGX8ZGameOperateNotify_MSGID ProGX8ZGameOperateNotify::MSGID_MAX;
const int ProGX8ZGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameOperateNotify::kResumeSeatFieldNumber;
const int ProGX8ZGameOperateNotify::kActionMaskFieldNumber;
const int ProGX8ZGameOperateNotify::kActionCardFieldNumber;
const int ProGX8ZGameOperateNotify::kTimeFieldNumber;
const int ProGX8ZGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameOperateNotify::ProGX8ZGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameOperateNotify::InitAsDefaultInstance() {
}

ProGX8ZGameOperateNotify::ProGX8ZGameOperateNotify(const ProGX8ZGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameOperateNotify::~ProGX8ZGameOperateNotify() {
  SharedDtor();
}

void ProGX8ZGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOperateNotify_descriptor_;
}

const ProGX8ZGameOperateNotify& ProGX8ZGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameOperateNotify* ProGX8ZGameOperateNotify::default_instance_ = NULL;

ProGX8ZGameOperateNotify* ProGX8ZGameOperateNotify::New() const {
  return new ProGX8ZGameOperateNotify;
}

void ProGX8ZGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameOperateNotify::MergeFrom(const ProGX8ZGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameOperateNotify::CopyFrom(const ProGX8ZGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameOperateNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameOperateNotify::Swap(ProGX8ZGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameOperateNotify_descriptor_;
  metadata.reflection = ProGX8ZGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOperateResult_MSGID_descriptor_;
}
bool ProGX8ZGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameOperateResult_MSGID ProGX8ZGameOperateResult::ID;
const ProGX8ZGameOperateResult_MSGID ProGX8ZGameOperateResult::MSGID_MIN;
const ProGX8ZGameOperateResult_MSGID ProGX8ZGameOperateResult::MSGID_MAX;
const int ProGX8ZGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameOperateResult::kWOperateUserFieldNumber;
const int ProGX8ZGameOperateResult::kWProvideUserFieldNumber;
const int ProGX8ZGameOperateResult::kWOperateCodeFieldNumber;
const int ProGX8ZGameOperateResult::kCbOperateCardFieldNumber;
const int ProGX8ZGameOperateResult::kHandmahsFieldNumber;
const int ProGX8ZGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameOperateResult::ProGX8ZGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameOperateResult::InitAsDefaultInstance() {
}

ProGX8ZGameOperateResult::ProGX8ZGameOperateResult(const ProGX8ZGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameOperateResult::~ProGX8ZGameOperateResult() {
  SharedDtor();
}

void ProGX8ZGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOperateResult_descriptor_;
}

const ProGX8ZGameOperateResult& ProGX8ZGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameOperateResult* ProGX8ZGameOperateResult::default_instance_ = NULL;

ProGX8ZGameOperateResult* ProGX8ZGameOperateResult::New() const {
  return new ProGX8ZGameOperateResult;
}

void ProGX8ZGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameOperateResult::MergeFrom(const ProGX8ZGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameOperateResult::CopyFrom(const ProGX8ZGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameOperateResult::IsInitialized() const {

  return true;
}

void ProGX8ZGameOperateResult::Swap(ProGX8ZGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameOperateResult_descriptor_;
  metadata.reflection = ProGX8ZGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOperateRequest_MSGID_descriptor_;
}
bool ProGX8ZGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameOperateRequest_MSGID ProGX8ZGameOperateRequest::ID;
const ProGX8ZGameOperateRequest_MSGID ProGX8ZGameOperateRequest::MSGID_MIN;
const ProGX8ZGameOperateRequest_MSGID ProGX8ZGameOperateRequest::MSGID_MAX;
const int ProGX8ZGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameOperateRequest::kSeatFieldNumber;
const int ProGX8ZGameOperateRequest::kWOperateCodeFieldNumber;
const int ProGX8ZGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameOperateRequest::ProGX8ZGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameOperateRequest::InitAsDefaultInstance() {
}

ProGX8ZGameOperateRequest::ProGX8ZGameOperateRequest(const ProGX8ZGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameOperateRequest::~ProGX8ZGameOperateRequest() {
  SharedDtor();
}

void ProGX8ZGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOperateRequest_descriptor_;
}

const ProGX8ZGameOperateRequest& ProGX8ZGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameOperateRequest* ProGX8ZGameOperateRequest::default_instance_ = NULL;

ProGX8ZGameOperateRequest* ProGX8ZGameOperateRequest::New() const {
  return new ProGX8ZGameOperateRequest;
}

void ProGX8ZGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameOperateRequest::MergeFrom(const ProGX8ZGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameOperateRequest::CopyFrom(const ProGX8ZGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameOperateRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameOperateRequest::Swap(ProGX8ZGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameOperateRequest_descriptor_;
  metadata.reflection = ProGX8ZGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameTrust_MSGID_descriptor_;
}
bool ProGX8ZGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameTrust_MSGID ProGX8ZGameTrust::ID;
const ProGX8ZGameTrust_MSGID ProGX8ZGameTrust::MSGID_MIN;
const ProGX8ZGameTrust_MSGID ProGX8ZGameTrust::MSGID_MAX;
const int ProGX8ZGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameTrust::kSeatFieldNumber;
const int ProGX8ZGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameTrust::ProGX8ZGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameTrust::InitAsDefaultInstance() {
}

ProGX8ZGameTrust::ProGX8ZGameTrust(const ProGX8ZGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameTrust::~ProGX8ZGameTrust() {
  SharedDtor();
}

void ProGX8ZGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameTrust_descriptor_;
}

const ProGX8ZGameTrust& ProGX8ZGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameTrust* ProGX8ZGameTrust::default_instance_ = NULL;

ProGX8ZGameTrust* ProGX8ZGameTrust::New() const {
  return new ProGX8ZGameTrust;
}

void ProGX8ZGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameTrust::MergeFrom(const ProGX8ZGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameTrust::CopyFrom(const ProGX8ZGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameTrust::IsInitialized() const {

  return true;
}

void ProGX8ZGameTrust::Swap(ProGX8ZGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameTrust_descriptor_;
  metadata.reflection = ProGX8ZGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOutMahRequest_MSGID_descriptor_;
}
bool ProGX8ZGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameOutMahRequest_MSGID ProGX8ZGameOutMahRequest::ID;
const ProGX8ZGameOutMahRequest_MSGID ProGX8ZGameOutMahRequest::MSGID_MIN;
const ProGX8ZGameOutMahRequest_MSGID ProGX8ZGameOutMahRequest::MSGID_MAX;
const int ProGX8ZGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameOutMahRequest::kSeatFieldNumber;
const int ProGX8ZGameOutMahRequest::kOutMahsFieldNumber;
const int ProGX8ZGameOutMahRequest::kNochangemahsFieldNumber;
const int ProGX8ZGameOutMahRequest::kBIsChangedFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameOutMahRequest::ProGX8ZGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameOutMahRequest::InitAsDefaultInstance() {
}

ProGX8ZGameOutMahRequest::ProGX8ZGameOutMahRequest(const ProGX8ZGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bischanged_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameOutMahRequest::~ProGX8ZGameOutMahRequest() {
  SharedDtor();
}

void ProGX8ZGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameOutMahRequest_descriptor_;
}

const ProGX8ZGameOutMahRequest& ProGX8ZGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameOutMahRequest* ProGX8ZGameOutMahRequest::default_instance_ = NULL;

ProGX8ZGameOutMahRequest* ProGX8ZGameOutMahRequest::New() const {
  return new ProGX8ZGameOutMahRequest;
}

void ProGX8ZGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bischanged_ = false;
  }
  outmahs_.Clear();
  nochangemahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_nochangemahs;
        break;
      }

      // repeated int32 nochangemahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nochangemahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_nochangemahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nochangemahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_nochangemahs;
        if (input->ExpectTag(40)) goto parse_bIsChanged;
        break;
      }

      // optional bool bIsChanged = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bischanged_)));
          set_has_bischanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 nochangemahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->nochangemahs(i), output);
  }

  // optional bool bIsChanged = 5;
  if (has_bischanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bischanged(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 nochangemahs = 4;
  for (int i = 0; i < this->nochangemahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->nochangemahs(i), target);
  }

  // optional bool bIsChanged = 5;
  if (has_bischanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bischanged(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsChanged = 5;
    if (has_bischanged()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 nochangemahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nochangemahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nochangemahs(i));
    }
    total_size += 1 * this->nochangemahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameOutMahRequest::MergeFrom(const ProGX8ZGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  nochangemahs_.MergeFrom(from.nochangemahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bischanged()) {
      set_bischanged(from.bischanged());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameOutMahRequest::CopyFrom(const ProGX8ZGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameOutMahRequest::Swap(ProGX8ZGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    nochangemahs_.Swap(&other->nochangemahs_);
    std::swap(bischanged_, other->bischanged_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameOutMahRequest_descriptor_;
  metadata.reflection = ProGX8ZGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameCatchCard_MSGID_descriptor_;
}
bool ProGX8ZGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameCatchCard_MSGID ProGX8ZGameCatchCard::ID;
const ProGX8ZGameCatchCard_MSGID ProGX8ZGameCatchCard::MSGID_MIN;
const ProGX8ZGameCatchCard_MSGID ProGX8ZGameCatchCard::MSGID_MAX;
const int ProGX8ZGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameCatchCard::kSeatFieldNumber;
const int ProGX8ZGameCatchCard::kCbCardDataFieldNumber;
const int ProGX8ZGameCatchCard::kWActionMaskFieldNumber;
const int ProGX8ZGameCatchCard::kCbIsNotGangFieldNumber;
const int ProGX8ZGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameCatchCard::ProGX8ZGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameCatchCard::InitAsDefaultInstance() {
}

ProGX8ZGameCatchCard::ProGX8ZGameCatchCard(const ProGX8ZGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameCatchCard::~ProGX8ZGameCatchCard() {
  SharedDtor();
}

void ProGX8ZGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameCatchCard_descriptor_;
}

const ProGX8ZGameCatchCard& ProGX8ZGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameCatchCard* ProGX8ZGameCatchCard::default_instance_ = NULL;

ProGX8ZGameCatchCard* ProGX8ZGameCatchCard::New() const {
  return new ProGX8ZGameCatchCard;
}

void ProGX8ZGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameCatchCard::MergeFrom(const ProGX8ZGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameCatchCard::CopyFrom(const ProGX8ZGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameCatchCard::IsInitialized() const {

  return true;
}

void ProGX8ZGameCatchCard::Swap(ProGX8ZGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameCatchCard_descriptor_;
  metadata.reflection = ProGX8ZGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GX8ZMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

GX8ZMahList::GX8ZMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GX8ZMahList::InitAsDefaultInstance() {
}

GX8ZMahList::GX8ZMahList(const GX8ZMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GX8ZMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GX8ZMahList::~GX8ZMahList() {
  SharedDtor();
}

void GX8ZMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GX8ZMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GX8ZMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZMahList_descriptor_;
}

const GX8ZMahList& GX8ZMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

GX8ZMahList* GX8ZMahList::default_instance_ = NULL;

GX8ZMahList* GX8ZMahList::New() const {
  return new GX8ZMahList;
}

void GX8ZMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GX8ZMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GX8ZMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GX8ZMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GX8ZMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GX8ZMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GX8ZMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GX8ZMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GX8ZMahList::MergeFrom(const GX8ZMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GX8ZMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GX8ZMahList::CopyFrom(const GX8ZMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GX8ZMahList::IsInitialized() const {

  return true;
}

void GX8ZMahList::Swap(GX8ZMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GX8ZMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GX8ZMahList_descriptor_;
  metadata.reflection = GX8ZMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GX8ZScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

GX8ZScoreList::GX8ZScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GX8ZScoreList::InitAsDefaultInstance() {
}

GX8ZScoreList::GX8ZScoreList(const GX8ZScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GX8ZScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GX8ZScoreList::~GX8ZScoreList() {
  SharedDtor();
}

void GX8ZScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GX8ZScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GX8ZScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZScoreList_descriptor_;
}

const GX8ZScoreList& GX8ZScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

GX8ZScoreList* GX8ZScoreList::default_instance_ = NULL;

GX8ZScoreList* GX8ZScoreList::New() const {
  return new GX8ZScoreList;
}

void GX8ZScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GX8ZScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GX8ZScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GX8ZScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GX8ZScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GX8ZScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GX8ZScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GX8ZScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GX8ZScoreList::MergeFrom(const GX8ZScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GX8ZScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GX8ZScoreList::CopyFrom(const GX8ZScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GX8ZScoreList::IsInitialized() const {

  return true;
}

void GX8ZScoreList::Swap(GX8ZScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GX8ZScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GX8ZScoreList_descriptor_;
  metadata.reflection = GX8ZScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GX8ZAwardList::kSeatFieldNumber;
const int GX8ZAwardList::kCardsDataFieldNumber;
const int GX8ZAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

GX8ZAwardList::GX8ZAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GX8ZAwardList::InitAsDefaultInstance() {
}

GX8ZAwardList::GX8ZAwardList(const GX8ZAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GX8ZAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GX8ZAwardList::~GX8ZAwardList() {
  SharedDtor();
}

void GX8ZAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GX8ZAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GX8ZAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZAwardList_descriptor_;
}

const GX8ZAwardList& GX8ZAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

GX8ZAwardList* GX8ZAwardList::default_instance_ = NULL;

GX8ZAwardList* GX8ZAwardList::New() const {
  return new GX8ZAwardList;
}

void GX8ZAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GX8ZAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GX8ZAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GX8ZAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GX8ZAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GX8ZAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GX8ZAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GX8ZAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GX8ZAwardList::MergeFrom(const GX8ZAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GX8ZAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GX8ZAwardList::CopyFrom(const GX8ZAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GX8ZAwardList::IsInitialized() const {

  return true;
}

void GX8ZAwardList::Swap(GX8ZAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GX8ZAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GX8ZAwardList_descriptor_;
  metadata.reflection = GX8ZAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameEnd_MSGID_descriptor_;
}
bool ProGX8ZGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameEnd_MSGID ProGX8ZGameEnd::ID;
const ProGX8ZGameEnd_MSGID ProGX8ZGameEnd::MSGID_MIN;
const ProGX8ZGameEnd_MSGID ProGX8ZGameEnd::MSGID_MAX;
const int ProGX8ZGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameEnd::kLGameTaxFieldNumber;
const int ProGX8ZGameEnd::kCbChongGuangFieldNumber;
const int ProGX8ZGameEnd::kCbBaWangKingFieldNumber;
const int ProGX8ZGameEnd::kWProvideUserFieldNumber;
const int ProGX8ZGameEnd::kCbChiHuCardFieldNumber;
const int ProGX8ZGameEnd::kDwChiHuKindFieldNumber;
const int ProGX8ZGameEnd::kDwChiHuRightFieldNumber;
const int ProGX8ZGameEnd::kLTotaslGameScoreFieldNumber;
const int ProGX8ZGameEnd::kLCurrentGameScoreFieldNumber;
const int ProGX8ZGameEnd::kLCurrentPointScoreFieldNumber;
const int ProGX8ZGameEnd::kLAttachScoreFieldNumber;
const int ProGX8ZGameEnd::kCbHandCardDataFieldNumber;
const int ProGX8ZGameEnd::kCbAwardCardDataFieldNumber;
const int ProGX8ZGameEnd::kLOnlyWinScoreFieldNumber;
const int ProGX8ZGameEnd::kBRoundEndFieldNumber;
const int ProGX8ZGameEnd::kLHuiTouScoreFieldNumber;
const int ProGX8ZGameEnd::kBZhuangWinFieldNumber;
const int ProGX8ZGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProGX8ZGameEnd::kDetailedScoresFieldNumber;
const int ProGX8ZGameEnd::kBIsDaTuFieldNumber;
const int ProGX8ZGameEnd::kBIsKuTongFieldNumber;
const int ProGX8ZGameEnd::kNNo1SeatFieldNumber;
const int ProGX8ZGameEnd::kNWinerSeatFieldNumber;
const int ProGX8ZGameEnd::kNWinersMateFieldNumber;
const int ProGX8ZGameEnd::kNNo2SeatFieldNumber;
const int ProGX8ZGameEnd::kNNo3SeatFieldNumber;
const int ProGX8ZGameEnd::kNNo4SeatFieldNumber;
const int ProGX8ZGameEnd::kBBrokenFieldNumber;
const int ProGX8ZGameEnd::kNBrokenPlayerSeatFieldNumber;
const int ProGX8ZGameEnd::kBSurrenderFieldNumber;
const int ProGX8ZGameEnd::kNSurrenderPlayerSeatFieldNumber;
const int ProGX8ZGameEnd::kBIsSpringFieldNumber;
const int ProGX8ZGameEnd::kNSurplusCardCountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameEnd::ProGX8ZGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameEnd::InitAsDefaultInstance() {
}

ProGX8ZGameEnd::ProGX8ZGameEnd(const ProGX8ZGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  bisdatu_ = false;
  biskutong_ = false;
  nno1seat_ = 0;
  nwinerseat_ = 0;
  nwinersmate_ = 0;
  nno2seat_ = 0;
  nno3seat_ = 0;
  nno4seat_ = 0;
  bbroken_ = false;
  nbrokenplayerseat_ = 0;
  bsurrender_ = false;
  nsurrenderplayerseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameEnd::~ProGX8ZGameEnd() {
  SharedDtor();
}

void ProGX8ZGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameEnd_descriptor_;
}

const ProGX8ZGameEnd& ProGX8ZGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameEnd* ProGX8ZGameEnd::default_instance_ = NULL;

ProGX8ZGameEnd* ProGX8ZGameEnd::New() const {
  return new ProGX8ZGameEnd;
}

void ProGX8ZGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
    bisdatu_ = false;
    biskutong_ = false;
    nno1seat_ = 0;
    nwinerseat_ = 0;
    nwinersmate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    nno2seat_ = 0;
    nno3seat_ = 0;
    nno4seat_ = 0;
    bbroken_ = false;
    nbrokenplayerseat_ = 0;
    bsurrender_ = false;
    nsurrenderplayerseat_ = 0;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  bisspring_.Clear();
  nsurpluscardcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .GX8ZMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .GX8ZAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .GX8ZScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectTag(168)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bIsKuTong;
        break;
      }

      // optional bool bIsKuTong = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsKuTong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biskutong_)));
          set_has_biskutong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nNo1Seat;
        break;
      }

      // optional int32 nNo1Seat = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo1Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno1seat_)));
          set_has_nno1seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nWinerSeat;
        break;
      }

      // optional int32 nWinerSeat = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinerseat_)));
          set_has_nwinerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nWinersMate;
        break;
      }

      // optional int32 nWinersMate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinersMate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinersmate_)));
          set_has_nwinersmate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_nNo2Seat;
        break;
      }

      // optional int32 nNo2Seat = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo2Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno2seat_)));
          set_has_nno2seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_nNo3Seat;
        break;
      }

      // optional int32 nNo3Seat = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo3Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno3seat_)));
          set_has_nno3seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nNo4Seat;
        break;
      }

      // optional int32 nNo4Seat = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo4Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno4seat_)));
          set_has_nno4seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_bBroken;
        break;
      }

      // optional bool bBroken = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bBroken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbroken_)));
          set_has_bbroken();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_nBrokenPlayerSeat;
        break;
      }

      // optional int32 nBrokenPlayerSeat = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBrokenPlayerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbrokenplayerseat_)));
          set_has_nbrokenplayerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_bSurrender;
        break;
      }

      // optional bool bSurrender = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsurrender_)));
          set_has_bsurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_nSurrenderPlayerSeat;
        break;
      }

      // optional int32 nSurrenderPlayerSeat = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSurrenderPlayerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsurrenderplayerseat_)));
          set_has_nsurrenderplayerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_bIsSpring;
        break;
      }

      // repeated bool bIsSpring = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSpring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 2, 264, input, this->mutable_bisspring())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_bisspring())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_bIsSpring;
        if (input->ExpectTag(272)) goto parse_nSurplusCardCount;
        break;
      }

      // repeated int32 nSurplusCardCount = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSurplusCardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 272, input, this->mutable_nsurpluscardcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nsurpluscardcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_nSurplusCardCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .GX8ZMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .GX8ZAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .GX8ZScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  // optional bool bIsDaTu = 21;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->bisdatu(), output);
  }

  // optional bool bIsKuTong = 22;
  if (has_biskutong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->biskutong(), output);
  }

  // optional int32 nNo1Seat = 23;
  if (has_nno1seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nno1seat(), output);
  }

  // optional int32 nWinerSeat = 24;
  if (has_nwinerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nwinerseat(), output);
  }

  // optional int32 nWinersMate = 25;
  if (has_nwinersmate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nwinersmate(), output);
  }

  // optional int32 nNo2Seat = 26;
  if (has_nno2seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->nno2seat(), output);
  }

  // optional int32 nNo3Seat = 27;
  if (has_nno3seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nno3seat(), output);
  }

  // optional int32 nNo4Seat = 28;
  if (has_nno4seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nno4seat(), output);
  }

  // optional bool bBroken = 29;
  if (has_bbroken()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->bbroken(), output);
  }

  // optional int32 nBrokenPlayerSeat = 30;
  if (has_nbrokenplayerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->nbrokenplayerseat(), output);
  }

  // optional bool bSurrender = 31;
  if (has_bsurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->bsurrender(), output);
  }

  // optional int32 nSurrenderPlayerSeat = 32;
  if (has_nsurrenderplayerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->nsurrenderplayerseat(), output);
  }

  // repeated bool bIsSpring = 33;
  for (int i = 0; i < this->bisspring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      33, this->bisspring(i), output);
  }

  // repeated int32 nSurplusCardCount = 34;
  for (int i = 0; i < this->nsurpluscardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      34, this->nsurpluscardcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .GX8ZMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .GX8ZAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .GX8ZScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  // optional bool bIsDaTu = 21;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->bisdatu(), target);
  }

  // optional bool bIsKuTong = 22;
  if (has_biskutong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->biskutong(), target);
  }

  // optional int32 nNo1Seat = 23;
  if (has_nno1seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nno1seat(), target);
  }

  // optional int32 nWinerSeat = 24;
  if (has_nwinerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nwinerseat(), target);
  }

  // optional int32 nWinersMate = 25;
  if (has_nwinersmate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nwinersmate(), target);
  }

  // optional int32 nNo2Seat = 26;
  if (has_nno2seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->nno2seat(), target);
  }

  // optional int32 nNo3Seat = 27;
  if (has_nno3seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nno3seat(), target);
  }

  // optional int32 nNo4Seat = 28;
  if (has_nno4seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nno4seat(), target);
  }

  // optional bool bBroken = 29;
  if (has_bbroken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->bbroken(), target);
  }

  // optional int32 nBrokenPlayerSeat = 30;
  if (has_nbrokenplayerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->nbrokenplayerseat(), target);
  }

  // optional bool bSurrender = 31;
  if (has_bsurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->bsurrender(), target);
  }

  // optional int32 nSurrenderPlayerSeat = 32;
  if (has_nsurrenderplayerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->nsurrenderplayerseat(), target);
  }

  // repeated bool bIsSpring = 33;
  for (int i = 0; i < this->bisspring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(33, this->bisspring(i), target);
  }

  // repeated int32 nSurplusCardCount = 34;
  for (int i = 0; i < this->nsurpluscardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(34, this->nsurpluscardcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

    // optional bool bIsDaTu = 21;
    if (has_bisdatu()) {
      total_size += 2 + 1;
    }

    // optional bool bIsKuTong = 22;
    if (has_biskutong()) {
      total_size += 2 + 1;
    }

    // optional int32 nNo1Seat = 23;
    if (has_nno1seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno1seat());
    }

    // optional int32 nWinerSeat = 24;
    if (has_nwinerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinerseat());
    }

    // optional int32 nWinersMate = 25;
    if (has_nwinersmate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinersmate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nNo2Seat = 26;
    if (has_nno2seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno2seat());
    }

    // optional int32 nNo3Seat = 27;
    if (has_nno3seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno3seat());
    }

    // optional int32 nNo4Seat = 28;
    if (has_nno4seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno4seat());
    }

    // optional bool bBroken = 29;
    if (has_bbroken()) {
      total_size += 2 + 1;
    }

    // optional int32 nBrokenPlayerSeat = 30;
    if (has_nbrokenplayerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nbrokenplayerseat());
    }

    // optional bool bSurrender = 31;
    if (has_bsurrender()) {
      total_size += 2 + 1;
    }

    // optional int32 nSurrenderPlayerSeat = 32;
    if (has_nsurrenderplayerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsurrenderplayerseat());
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .GX8ZMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .GX8ZAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .GX8ZScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  // repeated bool bIsSpring = 33;
  {
    int data_size = 0;
    data_size = 1 * this->bisspring_size();
    total_size += 2 * this->bisspring_size() + data_size;
  }

  // repeated int32 nSurplusCardCount = 34;
  {
    int data_size = 0;
    for (int i = 0; i < this->nsurpluscardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nsurpluscardcount(i));
    }
    total_size += 2 * this->nsurpluscardcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameEnd::MergeFrom(const ProGX8ZGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  bisspring_.MergeFrom(from.bisspring_);
  nsurpluscardcount_.MergeFrom(from.nsurpluscardcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
    if (from.has_biskutong()) {
      set_biskutong(from.biskutong());
    }
    if (from.has_nno1seat()) {
      set_nno1seat(from.nno1seat());
    }
    if (from.has_nwinerseat()) {
      set_nwinerseat(from.nwinerseat());
    }
    if (from.has_nwinersmate()) {
      set_nwinersmate(from.nwinersmate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nno2seat()) {
      set_nno2seat(from.nno2seat());
    }
    if (from.has_nno3seat()) {
      set_nno3seat(from.nno3seat());
    }
    if (from.has_nno4seat()) {
      set_nno4seat(from.nno4seat());
    }
    if (from.has_bbroken()) {
      set_bbroken(from.bbroken());
    }
    if (from.has_nbrokenplayerseat()) {
      set_nbrokenplayerseat(from.nbrokenplayerseat());
    }
    if (from.has_bsurrender()) {
      set_bsurrender(from.bsurrender());
    }
    if (from.has_nsurrenderplayerseat()) {
      set_nsurrenderplayerseat(from.nsurrenderplayerseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameEnd::CopyFrom(const ProGX8ZGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameEnd::IsInitialized() const {

  return true;
}

void ProGX8ZGameEnd::Swap(ProGX8ZGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(biskutong_, other->biskutong_);
    std::swap(nno1seat_, other->nno1seat_);
    std::swap(nwinerseat_, other->nwinerseat_);
    std::swap(nwinersmate_, other->nwinersmate_);
    std::swap(nno2seat_, other->nno2seat_);
    std::swap(nno3seat_, other->nno3seat_);
    std::swap(nno4seat_, other->nno4seat_);
    std::swap(bbroken_, other->bbroken_);
    std::swap(nbrokenplayerseat_, other->nbrokenplayerseat_);
    std::swap(bsurrender_, other->bsurrender_);
    std::swap(nsurrenderplayerseat_, other->nsurrenderplayerseat_);
    bisspring_.Swap(&other->bisspring_);
    nsurpluscardcount_.Swap(&other->nsurpluscardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameEnd_descriptor_;
  metadata.reflection = ProGX8ZGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProGX8ZGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameQuickSoundRequest_MSGID ProGX8ZGameQuickSoundRequest::ID;
const ProGX8ZGameQuickSoundRequest_MSGID ProGX8ZGameQuickSoundRequest::MSGID_MIN;
const ProGX8ZGameQuickSoundRequest_MSGID ProGX8ZGameQuickSoundRequest::MSGID_MAX;
const int ProGX8ZGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProGX8ZGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProGX8ZGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProGX8ZGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameQuickSoundRequest::ProGX8ZGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProGX8ZGameQuickSoundRequest::ProGX8ZGameQuickSoundRequest(const ProGX8ZGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameQuickSoundRequest::~ProGX8ZGameQuickSoundRequest() {
  SharedDtor();
}

void ProGX8ZGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProGX8ZGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameQuickSoundRequest_descriptor_;
}

const ProGX8ZGameQuickSoundRequest& ProGX8ZGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameQuickSoundRequest* ProGX8ZGameQuickSoundRequest::default_instance_ = NULL;

ProGX8ZGameQuickSoundRequest* ProGX8ZGameQuickSoundRequest::New() const {
  return new ProGX8ZGameQuickSoundRequest;
}

void ProGX8ZGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameQuickSoundRequest::MergeFrom(const ProGX8ZGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameQuickSoundRequest::CopyFrom(const ProGX8ZGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameQuickSoundRequest::Swap(ProGX8ZGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProGX8ZGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProGX8ZGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameQuickSoundResponse_MSGID ProGX8ZGameQuickSoundResponse::ID;
const ProGX8ZGameQuickSoundResponse_MSGID ProGX8ZGameQuickSoundResponse::MSGID_MIN;
const ProGX8ZGameQuickSoundResponse_MSGID ProGX8ZGameQuickSoundResponse::MSGID_MAX;
const int ProGX8ZGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProGX8ZGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProGX8ZGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProGX8ZGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameQuickSoundResponse::ProGX8ZGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProGX8ZGameQuickSoundResponse::ProGX8ZGameQuickSoundResponse(const ProGX8ZGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameQuickSoundResponse::~ProGX8ZGameQuickSoundResponse() {
  SharedDtor();
}

void ProGX8ZGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProGX8ZGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameQuickSoundResponse_descriptor_;
}

const ProGX8ZGameQuickSoundResponse& ProGX8ZGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameQuickSoundResponse* ProGX8ZGameQuickSoundResponse::default_instance_ = NULL;

ProGX8ZGameQuickSoundResponse* ProGX8ZGameQuickSoundResponse::New() const {
  return new ProGX8ZGameQuickSoundResponse;
}

void ProGX8ZGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameQuickSoundResponse::MergeFrom(const ProGX8ZGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameQuickSoundResponse::CopyFrom(const ProGX8ZGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameQuickSoundResponse::Swap(ProGX8ZGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProGX8ZGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProGX8ZGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameSendDiscardMahs_MSGID ProGX8ZGameSendDiscardMahs::ID;
const ProGX8ZGameSendDiscardMahs_MSGID ProGX8ZGameSendDiscardMahs::MSGID_MIN;
const ProGX8ZGameSendDiscardMahs_MSGID ProGX8ZGameSendDiscardMahs::MSGID_MAX;
const int ProGX8ZGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProGX8ZGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProGX8ZGameSendDiscardMahs::kCbNoChangeCardDataFieldNumber;
const int ProGX8ZGameSendDiscardMahs::kDeskCountFieldNumber;
const int ProGX8ZGameSendDiscardMahs::kOutCardCountFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameSendDiscardMahs::ProGX8ZGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProGX8ZGameSendDiscardMahs::ProGX8ZGameSendDiscardMahs(const ProGX8ZGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameSendDiscardMahs::~ProGX8ZGameSendDiscardMahs() {
  SharedDtor();
}

void ProGX8ZGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSendDiscardMahs_descriptor_;
}

const ProGX8ZGameSendDiscardMahs& ProGX8ZGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameSendDiscardMahs* ProGX8ZGameSendDiscardMahs::default_instance_ = NULL;

ProGX8ZGameSendDiscardMahs* ProGX8ZGameSendDiscardMahs::New() const {
  return new ProGX8ZGameSendDiscardMahs;
}

void ProGX8ZGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  cbnochangecarddata_.Clear();
  outcardcount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .GX8ZMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(34)) goto parse_cbNoChangeCardData;
        break;
      }

      // repeated .GX8ZMahList cbNoChangeCardData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbNoChangeCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbnochangecarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cbNoChangeCardData;
        if (input->ExpectTag(40)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_outCardCount;
        break;
      }

      // repeated int32 outCardCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_outcardcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outcardcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_outCardCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .GX8ZMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // repeated .GX8ZMahList cbNoChangeCardData = 4;
  for (int i = 0; i < this->cbnochangecarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cbnochangecarddata(i), output);
  }

  // optional int32 deskCount = 5;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deskcount(), output);
  }

  // repeated int32 outCardCount = 6;
  for (int i = 0; i < this->outcardcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->outcardcount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .GX8ZMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // repeated .GX8ZMahList cbNoChangeCardData = 4;
  for (int i = 0; i < this->cbnochangecarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cbnochangecarddata(i), target);
  }

  // optional int32 deskCount = 5;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deskcount(), target);
  }

  // repeated int32 outCardCount = 6;
  for (int i = 0; i < this->outcardcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->outcardcount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 5;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .GX8ZMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  // repeated .GX8ZMahList cbNoChangeCardData = 4;
  total_size += 1 * this->cbnochangecarddata_size();
  for (int i = 0; i < this->cbnochangecarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbnochangecarddata(i));
  }

  // repeated int32 outCardCount = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->outcardcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outcardcount(i));
    }
    total_size += 1 * this->outcardcount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameSendDiscardMahs::MergeFrom(const ProGX8ZGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  cbnochangecarddata_.MergeFrom(from.cbnochangecarddata_);
  outcardcount_.MergeFrom(from.outcardcount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameSendDiscardMahs::CopyFrom(const ProGX8ZGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProGX8ZGameSendDiscardMahs::Swap(ProGX8ZGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    cbnochangecarddata_.Swap(&other->cbnochangecarddata_);
    std::swap(deskcount_, other->deskcount_);
    outcardcount_.Swap(&other->outcardcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProGX8ZGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GX8ZWeaveItem::kWeaveKindFieldNumber;
const int GX8ZWeaveItem::kCentercardFieldNumber;
const int GX8ZWeaveItem::kProvideUserFieldNumber;
const int GX8ZWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

GX8ZWeaveItem::GX8ZWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GX8ZWeaveItem::InitAsDefaultInstance() {
}

GX8ZWeaveItem::GX8ZWeaveItem(const GX8ZWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GX8ZWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GX8ZWeaveItem::~GX8ZWeaveItem() {
  SharedDtor();
}

void GX8ZWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GX8ZWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GX8ZWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZWeaveItem_descriptor_;
}

const GX8ZWeaveItem& GX8ZWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

GX8ZWeaveItem* GX8ZWeaveItem::default_instance_ = NULL;

GX8ZWeaveItem* GX8ZWeaveItem::New() const {
  return new GX8ZWeaveItem;
}

void GX8ZWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GX8ZWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GX8ZWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GX8ZWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GX8ZWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GX8ZWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GX8ZWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GX8ZWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GX8ZWeaveItem::MergeFrom(const GX8ZWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GX8ZWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GX8ZWeaveItem::CopyFrom(const GX8ZWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GX8ZWeaveItem::IsInitialized() const {

  return true;
}

void GX8ZWeaveItem::Swap(GX8ZWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GX8ZWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GX8ZWeaveItem_descriptor_;
  metadata.reflection = GX8ZWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GX8ZWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

GX8ZWeaveItems::GX8ZWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GX8ZWeaveItems::InitAsDefaultInstance() {
}

GX8ZWeaveItems::GX8ZWeaveItems(const GX8ZWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GX8ZWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GX8ZWeaveItems::~GX8ZWeaveItems() {
  SharedDtor();
}

void GX8ZWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GX8ZWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GX8ZWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GX8ZWeaveItems_descriptor_;
}

const GX8ZWeaveItems& GX8ZWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

GX8ZWeaveItems* GX8ZWeaveItems::default_instance_ = NULL;

GX8ZWeaveItems* GX8ZWeaveItems::New() const {
  return new GX8ZWeaveItems;
}

void GX8ZWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GX8ZWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GX8ZWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GX8ZWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GX8ZWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GX8ZWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GX8ZWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GX8ZWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .GX8ZWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GX8ZWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GX8ZWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GX8ZWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GX8ZWeaveItems::MergeFrom(const GX8ZWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GX8ZWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GX8ZWeaveItems::CopyFrom(const GX8ZWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GX8ZWeaveItems::IsInitialized() const {

  return true;
}

void GX8ZWeaveItems::Swap(GX8ZWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GX8ZWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GX8ZWeaveItems_descriptor_;
  metadata.reflection = GX8ZWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSendActionMahs_MSGID_descriptor_;
}
bool ProGX8ZGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameSendActionMahs_MSGID ProGX8ZGameSendActionMahs::ID;
const ProGX8ZGameSendActionMahs_MSGID ProGX8ZGameSendActionMahs::MSGID_MIN;
const ProGX8ZGameSendActionMahs_MSGID ProGX8ZGameSendActionMahs::MSGID_MAX;
const int ProGX8ZGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameSendActionMahs::kSeatIdFieldNumber;
const int ProGX8ZGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameSendActionMahs::ProGX8ZGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameSendActionMahs::InitAsDefaultInstance() {
}

ProGX8ZGameSendActionMahs::ProGX8ZGameSendActionMahs(const ProGX8ZGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameSendActionMahs::~ProGX8ZGameSendActionMahs() {
  SharedDtor();
}

void ProGX8ZGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSendActionMahs_descriptor_;
}

const ProGX8ZGameSendActionMahs& ProGX8ZGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameSendActionMahs* ProGX8ZGameSendActionMahs::default_instance_ = NULL;

ProGX8ZGameSendActionMahs* ProGX8ZGameSendActionMahs::New() const {
  return new ProGX8ZGameSendActionMahs;
}

void ProGX8ZGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .GX8ZWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .GX8ZWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .GX8ZWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .GX8ZWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameSendActionMahs::MergeFrom(const ProGX8ZGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameSendActionMahs::CopyFrom(const ProGX8ZGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProGX8ZGameSendActionMahs::Swap(ProGX8ZGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameSendActionMahs_descriptor_;
  metadata.reflection = ProGX8ZGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenRequest_MSGID_descriptor_;
}
bool ProGX8ZGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameBrokenRequest_MSGID ProGX8ZGameBrokenRequest::ID;
const ProGX8ZGameBrokenRequest_MSGID ProGX8ZGameBrokenRequest::MSGID_MIN;
const ProGX8ZGameBrokenRequest_MSGID ProGX8ZGameBrokenRequest::MSGID_MAX;
const int ProGX8ZGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameBrokenRequest::kSeatIdFieldNumber;
const int ProGX8ZGameBrokenRequest::kTypeFieldNumber;
const int ProGX8ZGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameBrokenRequest::ProGX8ZGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameBrokenRequest::InitAsDefaultInstance() {
}

ProGX8ZGameBrokenRequest::ProGX8ZGameBrokenRequest(const ProGX8ZGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameBrokenRequest::~ProGX8ZGameBrokenRequest() {
  SharedDtor();
}

void ProGX8ZGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenRequest_descriptor_;
}

const ProGX8ZGameBrokenRequest& ProGX8ZGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameBrokenRequest* ProGX8ZGameBrokenRequest::default_instance_ = NULL;

ProGX8ZGameBrokenRequest* ProGX8ZGameBrokenRequest::New() const {
  return new ProGX8ZGameBrokenRequest;
}

void ProGX8ZGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .GX8ZBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GX8ZBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::GX8ZBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GX8ZBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GX8ZBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GX8ZBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameBrokenRequest::MergeFrom(const ProGX8ZGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameBrokenRequest::CopyFrom(const ProGX8ZGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameBrokenRequest::Swap(ProGX8ZGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameBrokenRequest_descriptor_;
  metadata.reflection = ProGX8ZGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenOperate_MSGID_descriptor_;
}
bool ProGX8ZGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameBrokenOperate_MSGID ProGX8ZGameBrokenOperate::ID;
const ProGX8ZGameBrokenOperate_MSGID ProGX8ZGameBrokenOperate::MSGID_MIN;
const ProGX8ZGameBrokenOperate_MSGID ProGX8ZGameBrokenOperate::MSGID_MAX;
const int ProGX8ZGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameBrokenOperate::kSeatIdFieldNumber;
const int ProGX8ZGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameBrokenOperate::ProGX8ZGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameBrokenOperate::InitAsDefaultInstance() {
}

ProGX8ZGameBrokenOperate::ProGX8ZGameBrokenOperate(const ProGX8ZGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameBrokenOperate::~ProGX8ZGameBrokenOperate() {
  SharedDtor();
}

void ProGX8ZGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenOperate_descriptor_;
}

const ProGX8ZGameBrokenOperate& ProGX8ZGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameBrokenOperate* ProGX8ZGameBrokenOperate::default_instance_ = NULL;

ProGX8ZGameBrokenOperate* ProGX8ZGameBrokenOperate::New() const {
  return new ProGX8ZGameBrokenOperate;
}

void ProGX8ZGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .GX8ZBROKEN_OPERATE result = 3 [default = GX8Z_BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GX8ZBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::GX8ZBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GX8ZBROKEN_OPERATE result = 3 [default = GX8Z_BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GX8ZBROKEN_OPERATE result = 3 [default = GX8Z_BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GX8ZBROKEN_OPERATE result = 3 [default = GX8Z_BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameBrokenOperate::MergeFrom(const ProGX8ZGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameBrokenOperate::CopyFrom(const ProGX8ZGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProGX8ZGameBrokenOperate::Swap(ProGX8ZGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameBrokenOperate_descriptor_;
  metadata.reflection = ProGX8ZGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenNotify_MSGID_descriptor_;
}
bool ProGX8ZGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameBrokenNotify_MSGID ProGX8ZGameBrokenNotify::ID;
const ProGX8ZGameBrokenNotify_MSGID ProGX8ZGameBrokenNotify::MSGID_MIN;
const ProGX8ZGameBrokenNotify_MSGID ProGX8ZGameBrokenNotify::MSGID_MAX;
const int ProGX8ZGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameBrokenNotify::kSeatIdFieldNumber;
const int ProGX8ZGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameBrokenNotify::ProGX8ZGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameBrokenNotify::InitAsDefaultInstance() {
}

ProGX8ZGameBrokenNotify::ProGX8ZGameBrokenNotify(const ProGX8ZGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameBrokenNotify::~ProGX8ZGameBrokenNotify() {
  SharedDtor();
}

void ProGX8ZGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenNotify_descriptor_;
}

const ProGX8ZGameBrokenNotify& ProGX8ZGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameBrokenNotify* ProGX8ZGameBrokenNotify::default_instance_ = NULL;

ProGX8ZGameBrokenNotify* ProGX8ZGameBrokenNotify::New() const {
  return new ProGX8ZGameBrokenNotify;
}

void ProGX8ZGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .GX8ZBROKEN_CODE operate_code = 3 [default = GX8Z_BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GX8ZBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::GX8ZBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .GX8ZBROKEN_CODE operate_code = 3 [default = GX8Z_BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .GX8ZBROKEN_CODE operate_code = 3 [default = GX8Z_BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .GX8ZBROKEN_CODE operate_code = 3 [default = GX8Z_BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameBrokenNotify::MergeFrom(const ProGX8ZGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameBrokenNotify::CopyFrom(const ProGX8ZGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameBrokenNotify::Swap(ProGX8ZGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameBrokenNotify_descriptor_;
  metadata.reflection = ProGX8ZGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameRuleConfig_MSGID_descriptor_;
}
bool ProGX8ZGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameRuleConfig_MSGID ProGX8ZGameRuleConfig::ID;
const ProGX8ZGameRuleConfig_MSGID ProGX8ZGameRuleConfig::MSGID_MIN;
const ProGX8ZGameRuleConfig_MSGID ProGX8ZGameRuleConfig::MSGID_MAX;
const int ProGX8ZGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameRuleConfig::kGameRoundFieldNumber;
const int ProGX8ZGameRuleConfig::kNeedCardFieldNumber;
const int ProGX8ZGameRuleConfig::kHaveBottomKingFieldNumber;
const int ProGX8ZGameRuleConfig::kHaveMaiLeiFieldNumber;
const int ProGX8ZGameRuleConfig::kHavaHuiTouFieldNumber;
const int ProGX8ZGameRuleConfig::kNMasterSeatFieldNumber;
const int ProGX8ZGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProGX8ZGameRuleConfig::kHaveJianmaFieldNumber;
const int ProGX8ZGameRuleConfig::kNChongguanNumFieldNumber;
const int ProGX8ZGameRuleConfig::kBbawangfanbeiFieldNumber;
const int ProGX8ZGameRuleConfig::kNPlayerNumFieldNumber;
const int ProGX8ZGameRuleConfig::kSRoomNumFieldNumber;
const int ProGX8ZGameRuleConfig::kSPlayTimeFieldNumber;
const int ProGX8ZGameRuleConfig::kGametypeFieldNumber;
const int ProGX8ZGameRuleConfig::kIsJingDianFieldNumber;
const int ProGX8ZGameRuleConfig::kIsOpenTeammateFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameRuleConfig::ProGX8ZGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameRuleConfig::InitAsDefaultInstance() {
}

ProGX8ZGameRuleConfig::ProGX8ZGameRuleConfig(const ProGX8ZGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_bottom_king_ = false;
  have_mai_lei_ = false;
  hava_hui_tou_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  bbawangfanbei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gametype_ = 0;
  isjingdian_ = false;
  isopenteammate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameRuleConfig::~ProGX8ZGameRuleConfig() {
  SharedDtor();
}

void ProGX8ZGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProGX8ZGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameRuleConfig_descriptor_;
}

const ProGX8ZGameRuleConfig& ProGX8ZGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameRuleConfig* ProGX8ZGameRuleConfig::default_instance_ = NULL;

ProGX8ZGameRuleConfig* ProGX8ZGameRuleConfig::New() const {
  return new ProGX8ZGameRuleConfig;
}

void ProGX8ZGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_bottom_king_ = false;
    have_mai_lei_ = false;
    hava_hui_tou_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    bbawangfanbei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
    gametype_ = 0;
    isjingdian_ = false;
    isopenteammate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_bottom_king;
        break;
      }

      // optional bool have_bottom_king = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_bottom_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_bottom_king_)));
          set_has_have_bottom_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_mai_lei;
        break;
      }

      // optional bool have_mai_lei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_mai_lei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_mai_lei_)));
          set_has_have_mai_lei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_hui_tou;
        break;
      }

      // optional bool hava_hui_tou = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_hui_tou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_hui_tou_)));
          set_has_hava_hui_tou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bbawangfanbei;
        break;
      }

      // optional bool bbawangfanbei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbawangfanbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbawangfanbei_)));
          set_has_bbawangfanbei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gametype;
        break;
      }

      // optional int32 gametype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isJingDian;
        break;
      }

      // optional bool isJingDian = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJingDian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjingdian_)));
          set_has_isjingdian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isOpenTeammate;
        break;
      }

      // optional bool isOpenTeammate = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpenTeammate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopenteammate_)));
          set_has_isopenteammate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_bottom_king(), output);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_mai_lei(), output);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_hui_tou(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbawangfanbei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  // optional int32 gametype = 14;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gametype(), output);
  }

  // optional bool isJingDian = 15;
  if (has_isjingdian()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isjingdian(), output);
  }

  // optional bool isOpenTeammate = 16;
  if (has_isopenteammate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isopenteammate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_bottom_king(), target);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_mai_lei(), target);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_hui_tou(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbawangfanbei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  // optional int32 gametype = 14;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gametype(), target);
  }

  // optional bool isJingDian = 15;
  if (has_isjingdian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isjingdian(), target);
  }

  // optional bool isOpenTeammate = 16;
  if (has_isopenteammate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isopenteammate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_bottom_king = 3;
    if (has_have_bottom_king()) {
      total_size += 1 + 1;
    }

    // optional bool have_mai_lei = 4;
    if (has_have_mai_lei()) {
      total_size += 1 + 1;
    }

    // optional bool hava_hui_tou = 5;
    if (has_hava_hui_tou()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool bbawangfanbei = 10;
    if (has_bbawangfanbei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

    // optional int32 gametype = 14;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional bool isJingDian = 15;
    if (has_isjingdian()) {
      total_size += 1 + 1;
    }

    // optional bool isOpenTeammate = 16;
    if (has_isopenteammate()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameRuleConfig::MergeFrom(const ProGX8ZGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_bottom_king()) {
      set_have_bottom_king(from.have_bottom_king());
    }
    if (from.has_have_mai_lei()) {
      set_have_mai_lei(from.have_mai_lei());
    }
    if (from.has_hava_hui_tou()) {
      set_hava_hui_tou(from.hava_hui_tou());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_bbawangfanbei()) {
      set_bbawangfanbei(from.bbawangfanbei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_isjingdian()) {
      set_isjingdian(from.isjingdian());
    }
    if (from.has_isopenteammate()) {
      set_isopenteammate(from.isopenteammate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameRuleConfig::CopyFrom(const ProGX8ZGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameRuleConfig::IsInitialized() const {

  return true;
}

void ProGX8ZGameRuleConfig::Swap(ProGX8ZGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_bottom_king_, other->have_bottom_king_);
    std::swap(have_mai_lei_, other->have_mai_lei_);
    std::swap(hava_hui_tou_, other->hava_hui_tou_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(bbawangfanbei_, other->bbawangfanbei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(gametype_, other->gametype_);
    std::swap(isjingdian_, other->isjingdian_);
    std::swap(isopenteammate_, other->isopenteammate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameRuleConfig_descriptor_;
  metadata.reflection = ProGX8ZGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenStatus_MSGID_descriptor_;
}
bool ProGX8ZGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameBrokenStatus_MSGID ProGX8ZGameBrokenStatus::ID;
const ProGX8ZGameBrokenStatus_MSGID ProGX8ZGameBrokenStatus::MSGID_MIN;
const ProGX8ZGameBrokenStatus_MSGID ProGX8ZGameBrokenStatus::MSGID_MAX;
const int ProGX8ZGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProGX8ZGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProGX8ZGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameBrokenStatus::ProGX8ZGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameBrokenStatus::InitAsDefaultInstance() {
}

ProGX8ZGameBrokenStatus::ProGX8ZGameBrokenStatus(const ProGX8ZGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameBrokenStatus::~ProGX8ZGameBrokenStatus() {
  SharedDtor();
}

void ProGX8ZGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBrokenStatus_descriptor_;
}

const ProGX8ZGameBrokenStatus& ProGX8ZGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameBrokenStatus* ProGX8ZGameBrokenStatus::default_instance_ = NULL;

ProGX8ZGameBrokenStatus* ProGX8ZGameBrokenStatus::New() const {
  return new ProGX8ZGameBrokenStatus;
}

void ProGX8ZGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameBrokenStatus::MergeFrom(const ProGX8ZGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameBrokenStatus::CopyFrom(const ProGX8ZGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProGX8ZGameBrokenStatus::Swap(ProGX8ZGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameBrokenStatus_descriptor_;
  metadata.reflection = ProGX8ZGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDataResp_MSGID_descriptor_;
}
bool ProGX8ZGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameDataResp_MSGID ProGX8ZGameDataResp::ID;
const ProGX8ZGameDataResp_MSGID ProGX8ZGameDataResp::MSGID_MIN;
const ProGX8ZGameDataResp_MSGID ProGX8ZGameDataResp::MSGID_MAX;
const int ProGX8ZGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameDataResp::kTotalScoreFieldNumber;
const int ProGX8ZGameDataResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameDataResp::ProGX8ZGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameDataResp::InitAsDefaultInstance() {
}

ProGX8ZGameDataResp::ProGX8ZGameDataResp(const ProGX8ZGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameDataResp::~ProGX8ZGameDataResp() {
  SharedDtor();
}

void ProGX8ZGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameDataResp_descriptor_;
}

const ProGX8ZGameDataResp& ProGX8ZGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameDataResp* ProGX8ZGameDataResp::default_instance_ = NULL;

ProGX8ZGameDataResp* ProGX8ZGameDataResp::New() const {
  return new ProGX8ZGameDataResp;
}

void ProGX8ZGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameDataResp::MergeFrom(const ProGX8ZGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameDataResp::CopyFrom(const ProGX8ZGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameDataResp::IsInitialized() const {

  return true;
}

void ProGX8ZGameDataResp::Swap(ProGX8ZGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameDataResp_descriptor_;
  metadata.reflection = ProGX8ZGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameRecordRequest_MSGID_descriptor_;
}
bool ProGX8ZGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameRecordRequest_MSGID ProGX8ZGameRecordRequest::ID;
const ProGX8ZGameRecordRequest_MSGID ProGX8ZGameRecordRequest::MSGID_MIN;
const ProGX8ZGameRecordRequest_MSGID ProGX8ZGameRecordRequest::MSGID_MAX;
const int ProGX8ZGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameRecordRequest::kSeatIdFieldNumber;
const int ProGX8ZGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameRecordRequest::ProGX8ZGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameRecordRequest::InitAsDefaultInstance() {
}

ProGX8ZGameRecordRequest::ProGX8ZGameRecordRequest(const ProGX8ZGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameRecordRequest::~ProGX8ZGameRecordRequest() {
  SharedDtor();
}

void ProGX8ZGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProGX8ZGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameRecordRequest_descriptor_;
}

const ProGX8ZGameRecordRequest& ProGX8ZGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameRecordRequest* ProGX8ZGameRecordRequest::default_instance_ = NULL;

ProGX8ZGameRecordRequest* ProGX8ZGameRecordRequest::New() const {
  return new ProGX8ZGameRecordRequest;
}

void ProGX8ZGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameRecordRequest::MergeFrom(const ProGX8ZGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameRecordRequest::CopyFrom(const ProGX8ZGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameRecordRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameRecordRequest::Swap(ProGX8ZGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameRecordRequest_descriptor_;
  metadata.reflection = ProGX8ZGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameRecordResponse_MSGID_descriptor_;
}
bool ProGX8ZGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameRecordResponse_MSGID ProGX8ZGameRecordResponse::ID;
const ProGX8ZGameRecordResponse_MSGID ProGX8ZGameRecordResponse::MSGID_MIN;
const ProGX8ZGameRecordResponse_MSGID ProGX8ZGameRecordResponse::MSGID_MAX;
const int ProGX8ZGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameRecordResponse::kSeatIdFieldNumber;
const int ProGX8ZGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameRecordResponse::ProGX8ZGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameRecordResponse::InitAsDefaultInstance() {
}

ProGX8ZGameRecordResponse::ProGX8ZGameRecordResponse(const ProGX8ZGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameRecordResponse::~ProGX8ZGameRecordResponse() {
  SharedDtor();
}

void ProGX8ZGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProGX8ZGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameRecordResponse_descriptor_;
}

const ProGX8ZGameRecordResponse& ProGX8ZGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameRecordResponse* ProGX8ZGameRecordResponse::default_instance_ = NULL;

ProGX8ZGameRecordResponse* ProGX8ZGameRecordResponse::New() const {
  return new ProGX8ZGameRecordResponse;
}

void ProGX8ZGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameRecordResponse::MergeFrom(const ProGX8ZGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameRecordResponse::CopyFrom(const ProGX8ZGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameRecordResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameRecordResponse::Swap(ProGX8ZGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameRecordResponse_descriptor_;
  metadata.reflection = ProGX8ZGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserLocationRequest_MSGID_descriptor_;
}
bool ProGX8ZGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserLocationRequest_MSGID ProGX8ZGameUserLocationRequest::ID;
const ProGX8ZGameUserLocationRequest_MSGID ProGX8ZGameUserLocationRequest::MSGID_MIN;
const ProGX8ZGameUserLocationRequest_MSGID ProGX8ZGameUserLocationRequest::MSGID_MAX;
const int ProGX8ZGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserLocationRequest::kSeatIdFieldNumber;
const int ProGX8ZGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProGX8ZGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProGX8ZGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProGX8ZGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserLocationRequest::ProGX8ZGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserLocationRequest::InitAsDefaultInstance() {
}

ProGX8ZGameUserLocationRequest::ProGX8ZGameUserLocationRequest(const ProGX8ZGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserLocationRequest::~ProGX8ZGameUserLocationRequest() {
  SharedDtor();
}

void ProGX8ZGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserLocationRequest_descriptor_;
}

const ProGX8ZGameUserLocationRequest& ProGX8ZGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserLocationRequest* ProGX8ZGameUserLocationRequest::default_instance_ = NULL;

ProGX8ZGameUserLocationRequest* ProGX8ZGameUserLocationRequest::New() const {
  return new ProGX8ZGameUserLocationRequest;
}

void ProGX8ZGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserLocationRequest::MergeFrom(const ProGX8ZGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserLocationRequest::CopyFrom(const ProGX8ZGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserLocationRequest::Swap(ProGX8ZGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserLocationRequest_descriptor_;
  metadata.reflection = ProGX8ZGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSyncCardResponse_MSGID_descriptor_;
}
bool ProGX8ZGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameSyncCardResponse_MSGID ProGX8ZGameSyncCardResponse::ID;
const ProGX8ZGameSyncCardResponse_MSGID ProGX8ZGameSyncCardResponse::MSGID_MIN;
const ProGX8ZGameSyncCardResponse_MSGID ProGX8ZGameSyncCardResponse::MSGID_MAX;
const int ProGX8ZGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameSyncCardResponse::kSeatFieldNumber;
const int ProGX8ZGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameSyncCardResponse::ProGX8ZGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameSyncCardResponse::InitAsDefaultInstance() {
}

ProGX8ZGameSyncCardResponse::ProGX8ZGameSyncCardResponse(const ProGX8ZGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameSyncCardResponse::~ProGX8ZGameSyncCardResponse() {
  SharedDtor();
}

void ProGX8ZGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSyncCardResponse_descriptor_;
}

const ProGX8ZGameSyncCardResponse& ProGX8ZGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameSyncCardResponse* ProGX8ZGameSyncCardResponse::default_instance_ = NULL;

ProGX8ZGameSyncCardResponse* ProGX8ZGameSyncCardResponse::New() const {
  return new ProGX8ZGameSyncCardResponse;
}

void ProGX8ZGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameSyncCardResponse::MergeFrom(const ProGX8ZGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameSyncCardResponse::CopyFrom(const ProGX8ZGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameSyncCardResponse::Swap(ProGX8ZGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameSyncCardResponse_descriptor_;
  metadata.reflection = ProGX8ZGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProGX8ZGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserPhoneStatusRequest_MSGID ProGX8ZGameUserPhoneStatusRequest::ID;
const ProGX8ZGameUserPhoneStatusRequest_MSGID ProGX8ZGameUserPhoneStatusRequest::MSGID_MIN;
const ProGX8ZGameUserPhoneStatusRequest_MSGID ProGX8ZGameUserPhoneStatusRequest::MSGID_MAX;
const int ProGX8ZGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProGX8ZGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserPhoneStatusRequest::ProGX8ZGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProGX8ZGameUserPhoneStatusRequest::ProGX8ZGameUserPhoneStatusRequest(const ProGX8ZGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserPhoneStatusRequest::~ProGX8ZGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProGX8ZGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserPhoneStatusRequest_descriptor_;
}

const ProGX8ZGameUserPhoneStatusRequest& ProGX8ZGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserPhoneStatusRequest* ProGX8ZGameUserPhoneStatusRequest::default_instance_ = NULL;

ProGX8ZGameUserPhoneStatusRequest* ProGX8ZGameUserPhoneStatusRequest::New() const {
  return new ProGX8ZGameUserPhoneStatusRequest;
}

void ProGX8ZGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserPhoneStatusRequest::MergeFrom(const ProGX8ZGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserPhoneStatusRequest::CopyFrom(const ProGX8ZGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserPhoneStatusRequest::Swap(ProGX8ZGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProGX8ZGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProGX8ZGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserGiveUpRequest_MSGID ProGX8ZGameUserGiveUpRequest::ID;
const ProGX8ZGameUserGiveUpRequest_MSGID ProGX8ZGameUserGiveUpRequest::MSGID_MIN;
const ProGX8ZGameUserGiveUpRequest_MSGID ProGX8ZGameUserGiveUpRequest::MSGID_MAX;
const int ProGX8ZGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserGiveUpRequest::ProGX8ZGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProGX8ZGameUserGiveUpRequest::ProGX8ZGameUserGiveUpRequest(const ProGX8ZGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserGiveUpRequest::~ProGX8ZGameUserGiveUpRequest() {
  SharedDtor();
}

void ProGX8ZGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserGiveUpRequest_descriptor_;
}

const ProGX8ZGameUserGiveUpRequest& ProGX8ZGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserGiveUpRequest* ProGX8ZGameUserGiveUpRequest::default_instance_ = NULL;

ProGX8ZGameUserGiveUpRequest* ProGX8ZGameUserGiveUpRequest::New() const {
  return new ProGX8ZGameUserGiveUpRequest;
}

void ProGX8ZGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserGiveUpRequest::MergeFrom(const ProGX8ZGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserGiveUpRequest::CopyFrom(const ProGX8ZGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserGiveUpRequest::Swap(ProGX8ZGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProGX8ZGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserHintRequest_MSGID_descriptor_;
}
bool ProGX8ZGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserHintRequest_MSGID ProGX8ZGameUserHintRequest::ID;
const ProGX8ZGameUserHintRequest_MSGID ProGX8ZGameUserHintRequest::MSGID_MIN;
const ProGX8ZGameUserHintRequest_MSGID ProGX8ZGameUserHintRequest::MSGID_MAX;
const int ProGX8ZGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProGX8ZGameUserHintRequest::ProGX8ZGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserHintRequest::InitAsDefaultInstance() {
}

ProGX8ZGameUserHintRequest::ProGX8ZGameUserHintRequest(const ProGX8ZGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserHintRequest::~ProGX8ZGameUserHintRequest() {
  SharedDtor();
}

void ProGX8ZGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserHintRequest_descriptor_;
}

const ProGX8ZGameUserHintRequest& ProGX8ZGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserHintRequest* ProGX8ZGameUserHintRequest::default_instance_ = NULL;

ProGX8ZGameUserHintRequest* ProGX8ZGameUserHintRequest::New() const {
  return new ProGX8ZGameUserHintRequest;
}

void ProGX8ZGameUserHintRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserHintRequest::MergeFrom(const ProGX8ZGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserHintRequest::CopyFrom(const ProGX8ZGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserHintRequest::Swap(ProGX8ZGameUserHintRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserHintRequest_descriptor_;
  metadata.reflection = ProGX8ZGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserHintResponse_MSGID_descriptor_;
}
bool ProGX8ZGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserHintResponse_MSGID ProGX8ZGameUserHintResponse::ID;
const ProGX8ZGameUserHintResponse_MSGID ProGX8ZGameUserHintResponse::MSGID_MIN;
const ProGX8ZGameUserHintResponse_MSGID ProGX8ZGameUserHintResponse::MSGID_MAX;
const int ProGX8ZGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserHintResponse::kLenthFieldNumber;
const int ProGX8ZGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserHintResponse::ProGX8ZGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserHintResponse::InitAsDefaultInstance() {
}

ProGX8ZGameUserHintResponse::ProGX8ZGameUserHintResponse(const ProGX8ZGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserHintResponse::~ProGX8ZGameUserHintResponse() {
  SharedDtor();
}

void ProGX8ZGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserHintResponse_descriptor_;
}

const ProGX8ZGameUserHintResponse& ProGX8ZGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserHintResponse* ProGX8ZGameUserHintResponse::default_instance_ = NULL;

ProGX8ZGameUserHintResponse* ProGX8ZGameUserHintResponse::New() const {
  return new ProGX8ZGameUserHintResponse;
}

void ProGX8ZGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserHintResponse::MergeFrom(const ProGX8ZGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserHintResponse::CopyFrom(const ProGX8ZGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserHintResponse::Swap(ProGX8ZGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserHintResponse_descriptor_;
  metadata.reflection = ProGX8ZGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuNotify_MSGID_descriptor_;
}
bool ProGX8ZGameUserDaTuNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserDaTuNotify_MSGID ProGX8ZGameUserDaTuNotify::ID;
const ProGX8ZGameUserDaTuNotify_MSGID ProGX8ZGameUserDaTuNotify::MSGID_MIN;
const ProGX8ZGameUserDaTuNotify_MSGID ProGX8ZGameUserDaTuNotify::MSGID_MAX;
const int ProGX8ZGameUserDaTuNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserDaTuNotify::kSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserDaTuNotify::ProGX8ZGameUserDaTuNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserDaTuNotify::InitAsDefaultInstance() {
}

ProGX8ZGameUserDaTuNotify::ProGX8ZGameUserDaTuNotify(const ProGX8ZGameUserDaTuNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserDaTuNotify::~ProGX8ZGameUserDaTuNotify() {
  SharedDtor();
}

void ProGX8ZGameUserDaTuNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserDaTuNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuNotify_descriptor_;
}

const ProGX8ZGameUserDaTuNotify& ProGX8ZGameUserDaTuNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserDaTuNotify* ProGX8ZGameUserDaTuNotify::default_instance_ = NULL;

ProGX8ZGameUserDaTuNotify* ProGX8ZGameUserDaTuNotify::New() const {
  return new ProGX8ZGameUserDaTuNotify;
}

void ProGX8ZGameUserDaTuNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserDaTuNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserDaTuNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserDaTuNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserDaTuNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserDaTuNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserDaTuNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserDaTuNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserDaTuNotify::MergeFrom(const ProGX8ZGameUserDaTuNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserDaTuNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuNotify::CopyFrom(const ProGX8ZGameUserDaTuNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserDaTuNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserDaTuNotify::Swap(ProGX8ZGameUserDaTuNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserDaTuNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserDaTuNotify_descriptor_;
  metadata.reflection = ProGX8ZGameUserDaTuNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserTeammateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserTeammateRequest_MSGID_descriptor_;
}
bool ProGX8ZGameUserTeammateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserTeammateRequest_MSGID ProGX8ZGameUserTeammateRequest::ID;
const ProGX8ZGameUserTeammateRequest_MSGID ProGX8ZGameUserTeammateRequest::MSGID_MIN;
const ProGX8ZGameUserTeammateRequest_MSGID ProGX8ZGameUserTeammateRequest::MSGID_MAX;
const int ProGX8ZGameUserTeammateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserTeammateRequest::kBankerMateSeatFieldNumber;
const int ProGX8ZGameUserTeammateRequest::kMateCardFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserTeammateRequest::ProGX8ZGameUserTeammateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserTeammateRequest::InitAsDefaultInstance() {
}

ProGX8ZGameUserTeammateRequest::ProGX8ZGameUserTeammateRequest(const ProGX8ZGameUserTeammateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserTeammateRequest::SharedCtor() {
  _cached_size_ = 0;
  bankermateseat_ = 0;
  matecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserTeammateRequest::~ProGX8ZGameUserTeammateRequest() {
  SharedDtor();
}

void ProGX8ZGameUserTeammateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserTeammateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserTeammateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserTeammateRequest_descriptor_;
}

const ProGX8ZGameUserTeammateRequest& ProGX8ZGameUserTeammateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserTeammateRequest* ProGX8ZGameUserTeammateRequest::default_instance_ = NULL;

ProGX8ZGameUserTeammateRequest* ProGX8ZGameUserTeammateRequest::New() const {
  return new ProGX8ZGameUserTeammateRequest;
}

void ProGX8ZGameUserTeammateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankermateseat_ = 0;
    matecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserTeammateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerMateSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankermateseat_)));
          set_has_bankermateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mateCard;
        break;
      }

      // optional int32 mateCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matecard_)));
          set_has_matecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserTeammateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerMateSeat = 1;
  if (has_bankermateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankermateseat(), output);
  }

  // optional int32 mateCard = 2;
  if (has_matecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserTeammateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerMateSeat = 1;
  if (has_bankermateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankermateseat(), target);
  }

  // optional int32 mateCard = 2;
  if (has_matecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserTeammateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerMateSeat = 1;
    if (has_bankermateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankermateseat());
    }

    // optional int32 mateCard = 2;
    if (has_matecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserTeammateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserTeammateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserTeammateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserTeammateRequest::MergeFrom(const ProGX8ZGameUserTeammateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankermateseat()) {
      set_bankermateseat(from.bankermateseat());
    }
    if (from.has_matecard()) {
      set_matecard(from.matecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserTeammateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserTeammateRequest::CopyFrom(const ProGX8ZGameUserTeammateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserTeammateRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserTeammateRequest::Swap(ProGX8ZGameUserTeammateRequest* other) {
  if (other != this) {
    std::swap(bankermateseat_, other->bankermateseat_);
    std::swap(matecard_, other->matecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserTeammateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserTeammateRequest_descriptor_;
  metadata.reflection = ProGX8ZGameUserTeammateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuRequest_MSGID_descriptor_;
}
bool ProGX8ZGameUserDaTuRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserDaTuRequest_MSGID ProGX8ZGameUserDaTuRequest::ID;
const ProGX8ZGameUserDaTuRequest_MSGID ProGX8ZGameUserDaTuRequest::MSGID_MIN;
const ProGX8ZGameUserDaTuRequest_MSGID ProGX8ZGameUserDaTuRequest::MSGID_MAX;
const int ProGX8ZGameUserDaTuRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserDaTuRequest::kSeatFieldNumber;
const int ProGX8ZGameUserDaTuRequest::kBIsDaTuFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserDaTuRequest::ProGX8ZGameUserDaTuRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserDaTuRequest::InitAsDefaultInstance() {
}

ProGX8ZGameUserDaTuRequest::ProGX8ZGameUserDaTuRequest(const ProGX8ZGameUserDaTuRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserDaTuRequest::~ProGX8ZGameUserDaTuRequest() {
  SharedDtor();
}

void ProGX8ZGameUserDaTuRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserDaTuRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuRequest_descriptor_;
}

const ProGX8ZGameUserDaTuRequest& ProGX8ZGameUserDaTuRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserDaTuRequest* ProGX8ZGameUserDaTuRequest::default_instance_ = NULL;

ProGX8ZGameUserDaTuRequest* ProGX8ZGameUserDaTuRequest::New() const {
  return new ProGX8ZGameUserDaTuRequest;
}

void ProGX8ZGameUserDaTuRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserDaTuRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserDaTuRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserDaTuRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserDaTuRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserDaTuRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserDaTuRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserDaTuRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserDaTuRequest::MergeFrom(const ProGX8ZGameUserDaTuRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserDaTuRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuRequest::CopyFrom(const ProGX8ZGameUserDaTuRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserDaTuRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserDaTuRequest::Swap(ProGX8ZGameUserDaTuRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserDaTuRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserDaTuRequest_descriptor_;
  metadata.reflection = ProGX8ZGameUserDaTuRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuResponse_MSGID_descriptor_;
}
bool ProGX8ZGameUserDaTuResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserDaTuResponse_MSGID ProGX8ZGameUserDaTuResponse::ID;
const ProGX8ZGameUserDaTuResponse_MSGID ProGX8ZGameUserDaTuResponse::MSGID_MIN;
const ProGX8ZGameUserDaTuResponse_MSGID ProGX8ZGameUserDaTuResponse::MSGID_MAX;
const int ProGX8ZGameUserDaTuResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserDaTuResponse::kSeatFieldNumber;
const int ProGX8ZGameUserDaTuResponse::kBIsDaTuFieldNumber;
const int ProGX8ZGameUserDaTuResponse::kNextSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserDaTuResponse::ProGX8ZGameUserDaTuResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserDaTuResponse::InitAsDefaultInstance() {
}

ProGX8ZGameUserDaTuResponse::ProGX8ZGameUserDaTuResponse(const ProGX8ZGameUserDaTuResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  nextseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserDaTuResponse::~ProGX8ZGameUserDaTuResponse() {
  SharedDtor();
}

void ProGX8ZGameUserDaTuResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserDaTuResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuResponse_descriptor_;
}

const ProGX8ZGameUserDaTuResponse& ProGX8ZGameUserDaTuResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserDaTuResponse* ProGX8ZGameUserDaTuResponse::default_instance_ = NULL;

ProGX8ZGameUserDaTuResponse* ProGX8ZGameUserDaTuResponse::New() const {
  return new ProGX8ZGameUserDaTuResponse;
}

void ProGX8ZGameUserDaTuResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
    nextseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserDaTuResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextSeat;
        break;
      }

      // optional int32 nextSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextseat_)));
          set_has_nextseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserDaTuResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  // optional int32 nextSeat = 3;
  if (has_nextseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserDaTuResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  // optional int32 nextSeat = 3;
  if (has_nextseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserDaTuResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

    // optional int32 nextSeat = 3;
    if (has_nextseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserDaTuResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserDaTuResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserDaTuResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserDaTuResponse::MergeFrom(const ProGX8ZGameUserDaTuResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
    if (from.has_nextseat()) {
      set_nextseat(from.nextseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserDaTuResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuResponse::CopyFrom(const ProGX8ZGameUserDaTuResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserDaTuResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserDaTuResponse::Swap(ProGX8ZGameUserDaTuResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(nextseat_, other->nextseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserDaTuResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserDaTuResponse_descriptor_;
  metadata.reflection = ProGX8ZGameUserDaTuResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuResult_MSGID_descriptor_;
}
bool ProGX8ZGameUserDaTuResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameUserDaTuResult_MSGID ProGX8ZGameUserDaTuResult::ID;
const ProGX8ZGameUserDaTuResult_MSGID ProGX8ZGameUserDaTuResult::MSGID_MIN;
const ProGX8ZGameUserDaTuResult_MSGID ProGX8ZGameUserDaTuResult::MSGID_MAX;
const int ProGX8ZGameUserDaTuResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameUserDaTuResult::kSeatFieldNumber;
const int ProGX8ZGameUserDaTuResult::kBIsDaTuFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameUserDaTuResult::ProGX8ZGameUserDaTuResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameUserDaTuResult::InitAsDefaultInstance() {
}

ProGX8ZGameUserDaTuResult::ProGX8ZGameUserDaTuResult(const ProGX8ZGameUserDaTuResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameUserDaTuResult::~ProGX8ZGameUserDaTuResult() {
  SharedDtor();
}

void ProGX8ZGameUserDaTuResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameUserDaTuResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameUserDaTuResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameUserDaTuResult_descriptor_;
}

const ProGX8ZGameUserDaTuResult& ProGX8ZGameUserDaTuResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameUserDaTuResult* ProGX8ZGameUserDaTuResult::default_instance_ = NULL;

ProGX8ZGameUserDaTuResult* ProGX8ZGameUserDaTuResult::New() const {
  return new ProGX8ZGameUserDaTuResult;
}

void ProGX8ZGameUserDaTuResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameUserDaTuResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameUserDaTuResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameUserDaTuResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameUserDaTuResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameUserDaTuResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameUserDaTuResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameUserDaTuResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameUserDaTuResult::MergeFrom(const ProGX8ZGameUserDaTuResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameUserDaTuResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameUserDaTuResult::CopyFrom(const ProGX8ZGameUserDaTuResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameUserDaTuResult::IsInitialized() const {

  return true;
}

void ProGX8ZGameUserDaTuResult::Swap(ProGX8ZGameUserDaTuResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameUserDaTuResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameUserDaTuResult_descriptor_;
  metadata.reflection = ProGX8ZGameUserDaTuResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShangYouResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShangYouResult_MSGID_descriptor_;
}
bool ProGX8ZGameShangYouResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShangYouResult_MSGID ProGX8ZGameShangYouResult::ID;
const ProGX8ZGameShangYouResult_MSGID ProGX8ZGameShangYouResult::MSGID_MIN;
const ProGX8ZGameShangYouResult_MSGID ProGX8ZGameShangYouResult::MSGID_MAX;
const int ProGX8ZGameShangYouResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameShangYouResult::kShangyouSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameShangYouResult::ProGX8ZGameShangYouResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShangYouResult::InitAsDefaultInstance() {
}

ProGX8ZGameShangYouResult::ProGX8ZGameShangYouResult(const ProGX8ZGameShangYouResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShangYouResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShangYouResult::~ProGX8ZGameShangYouResult() {
  SharedDtor();
}

void ProGX8ZGameShangYouResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShangYouResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShangYouResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShangYouResult_descriptor_;
}

const ProGX8ZGameShangYouResult& ProGX8ZGameShangYouResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShangYouResult* ProGX8ZGameShangYouResult::default_instance_ = NULL;

ProGX8ZGameShangYouResult* ProGX8ZGameShangYouResult::New() const {
  return new ProGX8ZGameShangYouResult;
}

void ProGX8ZGameShangYouResult::Clear() {
  shangyouseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShangYouResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shangyouSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shangyouSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_shangyouseat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shangyouseat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_shangyouSeat;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameShangYouResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 shangyouSeat = 1;
  for (int i = 0; i < this->shangyouseat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->shangyouseat(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShangYouResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 shangyouSeat = 1;
  for (int i = 0; i < this->shangyouseat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->shangyouseat(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShangYouResult::ByteSize() const {
  int total_size = 0;

  // repeated int32 shangyouSeat = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->shangyouseat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shangyouseat(i));
    }
    total_size += 1 * this->shangyouseat_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShangYouResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShangYouResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShangYouResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShangYouResult::MergeFrom(const ProGX8ZGameShangYouResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  shangyouseat_.MergeFrom(from.shangyouseat_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShangYouResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShangYouResult::CopyFrom(const ProGX8ZGameShangYouResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShangYouResult::IsInitialized() const {

  return true;
}

void ProGX8ZGameShangYouResult::Swap(ProGX8ZGameShangYouResult* other) {
  if (other != this) {
    shangyouseat_.Swap(&other->shangyouseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShangYouResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShangYouResult_descriptor_;
  metadata.reflection = ProGX8ZGameShangYouResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowFriendNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowFriendNotify_MSGID_descriptor_;
}
bool ProGX8ZGameShowFriendNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShowFriendNotify_MSGID ProGX8ZGameShowFriendNotify::ID;
const ProGX8ZGameShowFriendNotify_MSGID ProGX8ZGameShowFriendNotify::MSGID_MIN;
const ProGX8ZGameShowFriendNotify_MSGID ProGX8ZGameShowFriendNotify::MSGID_MAX;
const int ProGX8ZGameShowFriendNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameShowFriendNotify::kBShowFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameShowFriendNotify::ProGX8ZGameShowFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShowFriendNotify::InitAsDefaultInstance() {
}

ProGX8ZGameShowFriendNotify::ProGX8ZGameShowFriendNotify(const ProGX8ZGameShowFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShowFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  bshow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShowFriendNotify::~ProGX8ZGameShowFriendNotify() {
  SharedDtor();
}

void ProGX8ZGameShowFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShowFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShowFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowFriendNotify_descriptor_;
}

const ProGX8ZGameShowFriendNotify& ProGX8ZGameShowFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShowFriendNotify* ProGX8ZGameShowFriendNotify::default_instance_ = NULL;

ProGX8ZGameShowFriendNotify* ProGX8ZGameShowFriendNotify::New() const {
  return new ProGX8ZGameShowFriendNotify;
}

void ProGX8ZGameShowFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bshow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShowFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bShow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshow_)));
          set_has_bshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameShowFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bShow = 1;
  if (has_bshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bshow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShowFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bShow = 1;
  if (has_bshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bshow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShowFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bShow = 1;
    if (has_bshow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShowFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShowFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShowFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShowFriendNotify::MergeFrom(const ProGX8ZGameShowFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bshow()) {
      set_bshow(from.bshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShowFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShowFriendNotify::CopyFrom(const ProGX8ZGameShowFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShowFriendNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameShowFriendNotify::Swap(ProGX8ZGameShowFriendNotify* other) {
  if (other != this) {
    std::swap(bshow_, other->bshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShowFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShowFriendNotify_descriptor_;
  metadata.reflection = ProGX8ZGameShowFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBoomNumNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBoomNumNotify_MSGID_descriptor_;
}
bool ProGX8ZGameBoomNumNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameBoomNumNotify_MSGID ProGX8ZGameBoomNumNotify::ID;
const ProGX8ZGameBoomNumNotify_MSGID ProGX8ZGameBoomNumNotify::MSGID_MIN;
const ProGX8ZGameBoomNumNotify_MSGID ProGX8ZGameBoomNumNotify::MSGID_MAX;
const int ProGX8ZGameBoomNumNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameBoomNumNotify::kNSeatFieldNumber;
const int ProGX8ZGameBoomNumNotify::kNBoomNumFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameBoomNumNotify::ProGX8ZGameBoomNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameBoomNumNotify::InitAsDefaultInstance() {
}

ProGX8ZGameBoomNumNotify::ProGX8ZGameBoomNumNotify(const ProGX8ZGameBoomNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameBoomNumNotify::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  nboomnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameBoomNumNotify::~ProGX8ZGameBoomNumNotify() {
  SharedDtor();
}

void ProGX8ZGameBoomNumNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameBoomNumNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameBoomNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameBoomNumNotify_descriptor_;
}

const ProGX8ZGameBoomNumNotify& ProGX8ZGameBoomNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameBoomNumNotify* ProGX8ZGameBoomNumNotify::default_instance_ = NULL;

ProGX8ZGameBoomNumNotify* ProGX8ZGameBoomNumNotify::New() const {
  return new ProGX8ZGameBoomNumNotify;
}

void ProGX8ZGameBoomNumNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    nboomnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameBoomNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nBoomNum;
        break;
      }

      // optional int32 nBoomNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBoomNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nboomnum_)));
          set_has_nboomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameBoomNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional int32 nBoomNum = 2;
  if (has_nboomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nboomnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameBoomNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional int32 nBoomNum = 2;
  if (has_nboomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nboomnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameBoomNumNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional int32 nBoomNum = 2;
    if (has_nboomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nboomnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameBoomNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameBoomNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameBoomNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameBoomNumNotify::MergeFrom(const ProGX8ZGameBoomNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_nboomnum()) {
      set_nboomnum(from.nboomnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameBoomNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameBoomNumNotify::CopyFrom(const ProGX8ZGameBoomNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameBoomNumNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameBoomNumNotify::Swap(ProGX8ZGameBoomNumNotify* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(nboomnum_, other->nboomnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameBoomNumNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameBoomNumNotify_descriptor_;
  metadata.reflection = ProGX8ZGameBoomNumNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomDataRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomDataRequest_MSGID_descriptor_;
}
bool ProGX8ZGameShowBoomDataRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2246:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShowBoomDataRequest_MSGID ProGX8ZGameShowBoomDataRequest::ID;
const ProGX8ZGameShowBoomDataRequest_MSGID ProGX8ZGameShowBoomDataRequest::MSGID_MIN;
const ProGX8ZGameShowBoomDataRequest_MSGID ProGX8ZGameShowBoomDataRequest::MSGID_MAX;
const int ProGX8ZGameShowBoomDataRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameShowBoomDataRequest::kNSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameShowBoomDataRequest::ProGX8ZGameShowBoomDataRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShowBoomDataRequest::InitAsDefaultInstance() {
}

ProGX8ZGameShowBoomDataRequest::ProGX8ZGameShowBoomDataRequest(const ProGX8ZGameShowBoomDataRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomDataRequest::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShowBoomDataRequest::~ProGX8ZGameShowBoomDataRequest() {
  SharedDtor();
}

void ProGX8ZGameShowBoomDataRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShowBoomDataRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomDataRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomDataRequest_descriptor_;
}

const ProGX8ZGameShowBoomDataRequest& ProGX8ZGameShowBoomDataRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShowBoomDataRequest* ProGX8ZGameShowBoomDataRequest::default_instance_ = NULL;

ProGX8ZGameShowBoomDataRequest* ProGX8ZGameShowBoomDataRequest::New() const {
  return new ProGX8ZGameShowBoomDataRequest;
}

void ProGX8ZGameShowBoomDataRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShowBoomDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameShowBoomDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShowBoomDataRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShowBoomDataRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShowBoomDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShowBoomDataRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShowBoomDataRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShowBoomDataRequest::MergeFrom(const ProGX8ZGameShowBoomDataRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShowBoomDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomDataRequest::CopyFrom(const ProGX8ZGameShowBoomDataRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShowBoomDataRequest::IsInitialized() const {

  return true;
}

void ProGX8ZGameShowBoomDataRequest::Swap(ProGX8ZGameShowBoomDataRequest* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShowBoomDataRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShowBoomDataRequest_descriptor_;
  metadata.reflection = ProGX8ZGameShowBoomDataRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomDataResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomDataResponse_MSGID_descriptor_;
}
bool ProGX8ZGameShowBoomDataResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2247:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShowBoomDataResponse_MSGID ProGX8ZGameShowBoomDataResponse::ID;
const ProGX8ZGameShowBoomDataResponse_MSGID ProGX8ZGameShowBoomDataResponse::MSGID_MIN;
const ProGX8ZGameShowBoomDataResponse_MSGID ProGX8ZGameShowBoomDataResponse::MSGID_MAX;
const int ProGX8ZGameShowBoomDataResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameShowBoomDataResponse::kNSeatFieldNumber;
const int ProGX8ZGameShowBoomDataResponse::kBIsSendToAllFieldNumber;
const int ProGX8ZGameShowBoomDataResponse::kCbAwardCardDataFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameShowBoomDataResponse::ProGX8ZGameShowBoomDataResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShowBoomDataResponse::InitAsDefaultInstance() {
}

ProGX8ZGameShowBoomDataResponse::ProGX8ZGameShowBoomDataResponse(const ProGX8ZGameShowBoomDataResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomDataResponse::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bissendtoall_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShowBoomDataResponse::~ProGX8ZGameShowBoomDataResponse() {
  SharedDtor();
}

void ProGX8ZGameShowBoomDataResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShowBoomDataResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomDataResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomDataResponse_descriptor_;
}

const ProGX8ZGameShowBoomDataResponse& ProGX8ZGameShowBoomDataResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShowBoomDataResponse* ProGX8ZGameShowBoomDataResponse::default_instance_ = NULL;

ProGX8ZGameShowBoomDataResponse* ProGX8ZGameShowBoomDataResponse::New() const {
  return new ProGX8ZGameShowBoomDataResponse;
}

void ProGX8ZGameShowBoomDataResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bissendtoall_ = false;
  }
  cbawardcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShowBoomDataResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsSendToAll;
        break;
      }

      // optional bool bIsSendToAll = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSendToAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissendtoall_)));
          set_has_bissendtoall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .GX8ZAwardList cbAwardCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbAwardCardData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameShowBoomDataResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsSendToAll = 2;
  if (has_bissendtoall()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bissendtoall(), output);
  }

  // repeated .GX8ZAwardList cbAwardCardData = 3;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbawardcarddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShowBoomDataResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsSendToAll = 2;
  if (has_bissendtoall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bissendtoall(), target);
  }

  // repeated .GX8ZAwardList cbAwardCardData = 3;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbawardcarddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShowBoomDataResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsSendToAll = 2;
    if (has_bissendtoall()) {
      total_size += 1 + 1;
    }

  }
  // repeated .GX8ZAwardList cbAwardCardData = 3;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShowBoomDataResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShowBoomDataResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShowBoomDataResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShowBoomDataResponse::MergeFrom(const ProGX8ZGameShowBoomDataResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bissendtoall()) {
      set_bissendtoall(from.bissendtoall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShowBoomDataResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomDataResponse::CopyFrom(const ProGX8ZGameShowBoomDataResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShowBoomDataResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameShowBoomDataResponse::Swap(ProGX8ZGameShowBoomDataResponse* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bissendtoall_, other->bissendtoall_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShowBoomDataResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShowBoomDataResponse_descriptor_;
  metadata.reflection = ProGX8ZGameShowBoomDataResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameCardTypeSelect_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameCardTypeSelect_MSGID_descriptor_;
}
bool ProGX8ZGameCardTypeSelect_MSGID_IsValid(int value) {
  switch(value) {
    case 2248:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameCardTypeSelect_MSGID ProGX8ZGameCardTypeSelect::ID;
const ProGX8ZGameCardTypeSelect_MSGID ProGX8ZGameCardTypeSelect::MSGID_MIN;
const ProGX8ZGameCardTypeSelect_MSGID ProGX8ZGameCardTypeSelect::MSGID_MAX;
const int ProGX8ZGameCardTypeSelect::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameCardTypeSelect::kNSeatFieldNumber;
const int ProGX8ZGameCardTypeSelect::kCardTypeSelectDataFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameCardTypeSelect::ProGX8ZGameCardTypeSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameCardTypeSelect::InitAsDefaultInstance() {
}

ProGX8ZGameCardTypeSelect::ProGX8ZGameCardTypeSelect(const ProGX8ZGameCardTypeSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameCardTypeSelect::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameCardTypeSelect::~ProGX8ZGameCardTypeSelect() {
  SharedDtor();
}

void ProGX8ZGameCardTypeSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameCardTypeSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameCardTypeSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameCardTypeSelect_descriptor_;
}

const ProGX8ZGameCardTypeSelect& ProGX8ZGameCardTypeSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameCardTypeSelect* ProGX8ZGameCardTypeSelect::default_instance_ = NULL;

ProGX8ZGameCardTypeSelect* ProGX8ZGameCardTypeSelect::New() const {
  return new ProGX8ZGameCardTypeSelect;
}

void ProGX8ZGameCardTypeSelect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  cardtypeselectdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameCardTypeSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardTypeSelectData;
        break;
      }

      // repeated .GX8ZMahList CardTypeSelectData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CardTypeSelectData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardtypeselectdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CardTypeSelectData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameCardTypeSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // repeated .GX8ZMahList CardTypeSelectData = 2;
  for (int i = 0; i < this->cardtypeselectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cardtypeselectdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameCardTypeSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // repeated .GX8ZMahList CardTypeSelectData = 2;
  for (int i = 0; i < this->cardtypeselectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cardtypeselectdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameCardTypeSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  // repeated .GX8ZMahList CardTypeSelectData = 2;
  total_size += 1 * this->cardtypeselectdata_size();
  for (int i = 0; i < this->cardtypeselectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardtypeselectdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameCardTypeSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameCardTypeSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameCardTypeSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameCardTypeSelect::MergeFrom(const ProGX8ZGameCardTypeSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardtypeselectdata_.MergeFrom(from.cardtypeselectdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameCardTypeSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameCardTypeSelect::CopyFrom(const ProGX8ZGameCardTypeSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameCardTypeSelect::IsInitialized() const {

  return true;
}

void ProGX8ZGameCardTypeSelect::Swap(ProGX8ZGameCardTypeSelect* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    cardtypeselectdata_.Swap(&other->cardtypeselectdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameCardTypeSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameCardTypeSelect_descriptor_;
  metadata.reflection = ProGX8ZGameCardTypeSelect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsSurrenderSelect_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsSurrenderSelect_MSGID_descriptor_;
}
bool ProGX8ZGameIsSurrenderSelect_MSGID_IsValid(int value) {
  switch(value) {
    case 2249:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameIsSurrenderSelect_MSGID ProGX8ZGameIsSurrenderSelect::ID;
const ProGX8ZGameIsSurrenderSelect_MSGID ProGX8ZGameIsSurrenderSelect::MSGID_MIN;
const ProGX8ZGameIsSurrenderSelect_MSGID ProGX8ZGameIsSurrenderSelect::MSGID_MAX;
const int ProGX8ZGameIsSurrenderSelect::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameIsSurrenderSelect::kNSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameIsSurrenderSelect::ProGX8ZGameIsSurrenderSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameIsSurrenderSelect::InitAsDefaultInstance() {
}

ProGX8ZGameIsSurrenderSelect::ProGX8ZGameIsSurrenderSelect(const ProGX8ZGameIsSurrenderSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameIsSurrenderSelect::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameIsSurrenderSelect::~ProGX8ZGameIsSurrenderSelect() {
  SharedDtor();
}

void ProGX8ZGameIsSurrenderSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameIsSurrenderSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameIsSurrenderSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsSurrenderSelect_descriptor_;
}

const ProGX8ZGameIsSurrenderSelect& ProGX8ZGameIsSurrenderSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameIsSurrenderSelect* ProGX8ZGameIsSurrenderSelect::default_instance_ = NULL;

ProGX8ZGameIsSurrenderSelect* ProGX8ZGameIsSurrenderSelect::New() const {
  return new ProGX8ZGameIsSurrenderSelect;
}

void ProGX8ZGameIsSurrenderSelect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameIsSurrenderSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameIsSurrenderSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameIsSurrenderSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameIsSurrenderSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameIsSurrenderSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameIsSurrenderSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameIsSurrenderSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameIsSurrenderSelect::MergeFrom(const ProGX8ZGameIsSurrenderSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameIsSurrenderSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameIsSurrenderSelect::CopyFrom(const ProGX8ZGameIsSurrenderSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameIsSurrenderSelect::IsInitialized() const {

  return true;
}

void ProGX8ZGameIsSurrenderSelect::Swap(ProGX8ZGameIsSurrenderSelect* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameIsSurrenderSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameIsSurrenderSelect_descriptor_;
  metadata.reflection = ProGX8ZGameIsSurrenderSelect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsSurrenderOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsSurrenderOperate_MSGID_descriptor_;
}
bool ProGX8ZGameIsSurrenderOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2250:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameIsSurrenderOperate_MSGID ProGX8ZGameIsSurrenderOperate::ID;
const ProGX8ZGameIsSurrenderOperate_MSGID ProGX8ZGameIsSurrenderOperate::MSGID_MIN;
const ProGX8ZGameIsSurrenderOperate_MSGID ProGX8ZGameIsSurrenderOperate::MSGID_MAX;
const int ProGX8ZGameIsSurrenderOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameIsSurrenderOperate::kNSeatFieldNumber;
const int ProGX8ZGameIsSurrenderOperate::kBIsSurrenderFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameIsSurrenderOperate::ProGX8ZGameIsSurrenderOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameIsSurrenderOperate::InitAsDefaultInstance() {
}

ProGX8ZGameIsSurrenderOperate::ProGX8ZGameIsSurrenderOperate(const ProGX8ZGameIsSurrenderOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameIsSurrenderOperate::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bissurrender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameIsSurrenderOperate::~ProGX8ZGameIsSurrenderOperate() {
  SharedDtor();
}

void ProGX8ZGameIsSurrenderOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameIsSurrenderOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameIsSurrenderOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsSurrenderOperate_descriptor_;
}

const ProGX8ZGameIsSurrenderOperate& ProGX8ZGameIsSurrenderOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameIsSurrenderOperate* ProGX8ZGameIsSurrenderOperate::default_instance_ = NULL;

ProGX8ZGameIsSurrenderOperate* ProGX8ZGameIsSurrenderOperate::New() const {
  return new ProGX8ZGameIsSurrenderOperate;
}

void ProGX8ZGameIsSurrenderOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bissurrender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameIsSurrenderOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsSurrender;
        break;
      }

      // optional bool bIsSurrender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissurrender_)));
          set_has_bissurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameIsSurrenderOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsSurrender = 2;
  if (has_bissurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bissurrender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameIsSurrenderOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsSurrender = 2;
  if (has_bissurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bissurrender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameIsSurrenderOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsSurrender = 2;
    if (has_bissurrender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameIsSurrenderOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameIsSurrenderOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameIsSurrenderOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameIsSurrenderOperate::MergeFrom(const ProGX8ZGameIsSurrenderOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bissurrender()) {
      set_bissurrender(from.bissurrender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameIsSurrenderOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameIsSurrenderOperate::CopyFrom(const ProGX8ZGameIsSurrenderOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameIsSurrenderOperate::IsInitialized() const {

  return true;
}

void ProGX8ZGameIsSurrenderOperate::Swap(ProGX8ZGameIsSurrenderOperate* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bissurrender_, other->bissurrender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameIsSurrenderOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameIsSurrenderOperate_descriptor_;
  metadata.reflection = ProGX8ZGameIsSurrenderOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor_;
}
bool ProGX8ZGameIsAgreeSurrenderSelect_MSGID_IsValid(int value) {
  switch(value) {
    case 2251:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameIsAgreeSurrenderSelect_MSGID ProGX8ZGameIsAgreeSurrenderSelect::ID;
const ProGX8ZGameIsAgreeSurrenderSelect_MSGID ProGX8ZGameIsAgreeSurrenderSelect::MSGID_MIN;
const ProGX8ZGameIsAgreeSurrenderSelect_MSGID ProGX8ZGameIsAgreeSurrenderSelect::MSGID_MAX;
const int ProGX8ZGameIsAgreeSurrenderSelect::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameIsAgreeSurrenderSelect::kNSurrenderSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameIsAgreeSurrenderSelect::ProGX8ZGameIsAgreeSurrenderSelect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameIsAgreeSurrenderSelect::InitAsDefaultInstance() {
}

ProGX8ZGameIsAgreeSurrenderSelect::ProGX8ZGameIsAgreeSurrenderSelect(const ProGX8ZGameIsAgreeSurrenderSelect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameIsAgreeSurrenderSelect::SharedCtor() {
  _cached_size_ = 0;
  nsurrenderseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameIsAgreeSurrenderSelect::~ProGX8ZGameIsAgreeSurrenderSelect() {
  SharedDtor();
}

void ProGX8ZGameIsAgreeSurrenderSelect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameIsAgreeSurrenderSelect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameIsAgreeSurrenderSelect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsAgreeSurrenderSelect_descriptor_;
}

const ProGX8ZGameIsAgreeSurrenderSelect& ProGX8ZGameIsAgreeSurrenderSelect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameIsAgreeSurrenderSelect* ProGX8ZGameIsAgreeSurrenderSelect::default_instance_ = NULL;

ProGX8ZGameIsAgreeSurrenderSelect* ProGX8ZGameIsAgreeSurrenderSelect::New() const {
  return new ProGX8ZGameIsAgreeSurrenderSelect;
}

void ProGX8ZGameIsAgreeSurrenderSelect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nsurrenderseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameIsAgreeSurrenderSelect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSurrenderSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsurrenderseat_)));
          set_has_nsurrenderseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameIsAgreeSurrenderSelect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSurrenderSeat = 1;
  if (has_nsurrenderseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nsurrenderseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameIsAgreeSurrenderSelect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSurrenderSeat = 1;
  if (has_nsurrenderseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nsurrenderseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameIsAgreeSurrenderSelect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSurrenderSeat = 1;
    if (has_nsurrenderseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nsurrenderseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameIsAgreeSurrenderSelect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameIsAgreeSurrenderSelect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameIsAgreeSurrenderSelect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameIsAgreeSurrenderSelect::MergeFrom(const ProGX8ZGameIsAgreeSurrenderSelect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nsurrenderseat()) {
      set_nsurrenderseat(from.nsurrenderseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameIsAgreeSurrenderSelect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameIsAgreeSurrenderSelect::CopyFrom(const ProGX8ZGameIsAgreeSurrenderSelect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameIsAgreeSurrenderSelect::IsInitialized() const {

  return true;
}

void ProGX8ZGameIsAgreeSurrenderSelect::Swap(ProGX8ZGameIsAgreeSurrenderSelect* other) {
  if (other != this) {
    std::swap(nsurrenderseat_, other->nsurrenderseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameIsAgreeSurrenderSelect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameIsAgreeSurrenderSelect_descriptor_;
  metadata.reflection = ProGX8ZGameIsAgreeSurrenderSelect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor_;
}
bool ProGX8ZGameIsAgreeSurrenderOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2252:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameIsAgreeSurrenderOperate_MSGID ProGX8ZGameIsAgreeSurrenderOperate::ID;
const ProGX8ZGameIsAgreeSurrenderOperate_MSGID ProGX8ZGameIsAgreeSurrenderOperate::MSGID_MIN;
const ProGX8ZGameIsAgreeSurrenderOperate_MSGID ProGX8ZGameIsAgreeSurrenderOperate::MSGID_MAX;
const int ProGX8ZGameIsAgreeSurrenderOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameIsAgreeSurrenderOperate::kNSeatFieldNumber;
const int ProGX8ZGameIsAgreeSurrenderOperate::kBIsAgreeSurrenderFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameIsAgreeSurrenderOperate::ProGX8ZGameIsAgreeSurrenderOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameIsAgreeSurrenderOperate::InitAsDefaultInstance() {
}

ProGX8ZGameIsAgreeSurrenderOperate::ProGX8ZGameIsAgreeSurrenderOperate(const ProGX8ZGameIsAgreeSurrenderOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameIsAgreeSurrenderOperate::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bisagreesurrender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameIsAgreeSurrenderOperate::~ProGX8ZGameIsAgreeSurrenderOperate() {
  SharedDtor();
}

void ProGX8ZGameIsAgreeSurrenderOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameIsAgreeSurrenderOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameIsAgreeSurrenderOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsAgreeSurrenderOperate_descriptor_;
}

const ProGX8ZGameIsAgreeSurrenderOperate& ProGX8ZGameIsAgreeSurrenderOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameIsAgreeSurrenderOperate* ProGX8ZGameIsAgreeSurrenderOperate::default_instance_ = NULL;

ProGX8ZGameIsAgreeSurrenderOperate* ProGX8ZGameIsAgreeSurrenderOperate::New() const {
  return new ProGX8ZGameIsAgreeSurrenderOperate;
}

void ProGX8ZGameIsAgreeSurrenderOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bisagreesurrender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameIsAgreeSurrenderOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsAgreeSurrender;
        break;
      }

      // optional bool bIsAgreeSurrender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAgreeSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisagreesurrender_)));
          set_has_bisagreesurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameIsAgreeSurrenderOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisagreesurrender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameIsAgreeSurrenderOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisagreesurrender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameIsAgreeSurrenderOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsAgreeSurrender = 2;
    if (has_bisagreesurrender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameIsAgreeSurrenderOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameIsAgreeSurrenderOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameIsAgreeSurrenderOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameIsAgreeSurrenderOperate::MergeFrom(const ProGX8ZGameIsAgreeSurrenderOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bisagreesurrender()) {
      set_bisagreesurrender(from.bisagreesurrender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameIsAgreeSurrenderOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameIsAgreeSurrenderOperate::CopyFrom(const ProGX8ZGameIsAgreeSurrenderOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameIsAgreeSurrenderOperate::IsInitialized() const {

  return true;
}

void ProGX8ZGameIsAgreeSurrenderOperate::Swap(ProGX8ZGameIsAgreeSurrenderOperate* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bisagreesurrender_, other->bisagreesurrender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameIsAgreeSurrenderOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameIsAgreeSurrenderOperate_descriptor_;
  metadata.reflection = ProGX8ZGameIsAgreeSurrenderOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor_;
}
bool ProGX8ZGameIsAgreeSurrenderStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2253:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameIsAgreeSurrenderStatus_MSGID ProGX8ZGameIsAgreeSurrenderStatus::ID;
const ProGX8ZGameIsAgreeSurrenderStatus_MSGID ProGX8ZGameIsAgreeSurrenderStatus::MSGID_MIN;
const ProGX8ZGameIsAgreeSurrenderStatus_MSGID ProGX8ZGameIsAgreeSurrenderStatus::MSGID_MAX;
const int ProGX8ZGameIsAgreeSurrenderStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameIsAgreeSurrenderStatus::kNSeatFieldNumber;
const int ProGX8ZGameIsAgreeSurrenderStatus::kBIsAgreeSurrenderFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameIsAgreeSurrenderStatus::ProGX8ZGameIsAgreeSurrenderStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameIsAgreeSurrenderStatus::InitAsDefaultInstance() {
}

ProGX8ZGameIsAgreeSurrenderStatus::ProGX8ZGameIsAgreeSurrenderStatus(const ProGX8ZGameIsAgreeSurrenderStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameIsAgreeSurrenderStatus::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  bisagreesurrender_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameIsAgreeSurrenderStatus::~ProGX8ZGameIsAgreeSurrenderStatus() {
  SharedDtor();
}

void ProGX8ZGameIsAgreeSurrenderStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameIsAgreeSurrenderStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameIsAgreeSurrenderStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameIsAgreeSurrenderStatus_descriptor_;
}

const ProGX8ZGameIsAgreeSurrenderStatus& ProGX8ZGameIsAgreeSurrenderStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameIsAgreeSurrenderStatus* ProGX8ZGameIsAgreeSurrenderStatus::default_instance_ = NULL;

ProGX8ZGameIsAgreeSurrenderStatus* ProGX8ZGameIsAgreeSurrenderStatus::New() const {
  return new ProGX8ZGameIsAgreeSurrenderStatus;
}

void ProGX8ZGameIsAgreeSurrenderStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    bisagreesurrender_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameIsAgreeSurrenderStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsAgreeSurrender;
        break;
      }

      // optional bool bIsAgreeSurrender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAgreeSurrender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisagreesurrender_)));
          set_has_bisagreesurrender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameIsAgreeSurrenderStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisagreesurrender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameIsAgreeSurrenderStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional bool bIsAgreeSurrender = 2;
  if (has_bisagreesurrender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisagreesurrender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameIsAgreeSurrenderStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional bool bIsAgreeSurrender = 2;
    if (has_bisagreesurrender()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameIsAgreeSurrenderStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameIsAgreeSurrenderStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameIsAgreeSurrenderStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameIsAgreeSurrenderStatus::MergeFrom(const ProGX8ZGameIsAgreeSurrenderStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_bisagreesurrender()) {
      set_bisagreesurrender(from.bisagreesurrender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameIsAgreeSurrenderStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameIsAgreeSurrenderStatus::CopyFrom(const ProGX8ZGameIsAgreeSurrenderStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameIsAgreeSurrenderStatus::IsInitialized() const {

  return true;
}

void ProGX8ZGameIsAgreeSurrenderStatus::Swap(ProGX8ZGameIsAgreeSurrenderStatus* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(bisagreesurrender_, other->bisagreesurrender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameIsAgreeSurrenderStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameIsAgreeSurrenderStatus_descriptor_;
  metadata.reflection = ProGX8ZGameIsAgreeSurrenderStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSurrenderResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSurrenderResult_MSGID_descriptor_;
}
bool ProGX8ZGameSurrenderResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2254:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameSurrenderResult_MSGID ProGX8ZGameSurrenderResult::ID;
const ProGX8ZGameSurrenderResult_MSGID ProGX8ZGameSurrenderResult::MSGID_MIN;
const ProGX8ZGameSurrenderResult_MSGID ProGX8ZGameSurrenderResult::MSGID_MAX;
const int ProGX8ZGameSurrenderResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameSurrenderResult::kBSurrenderResultFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameSurrenderResult::ProGX8ZGameSurrenderResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameSurrenderResult::InitAsDefaultInstance() {
}

ProGX8ZGameSurrenderResult::ProGX8ZGameSurrenderResult(const ProGX8ZGameSurrenderResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameSurrenderResult::SharedCtor() {
  _cached_size_ = 0;
  bsurrenderresult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameSurrenderResult::~ProGX8ZGameSurrenderResult() {
  SharedDtor();
}

void ProGX8ZGameSurrenderResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameSurrenderResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameSurrenderResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameSurrenderResult_descriptor_;
}

const ProGX8ZGameSurrenderResult& ProGX8ZGameSurrenderResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameSurrenderResult* ProGX8ZGameSurrenderResult::default_instance_ = NULL;

ProGX8ZGameSurrenderResult* ProGX8ZGameSurrenderResult::New() const {
  return new ProGX8ZGameSurrenderResult;
}

void ProGX8ZGameSurrenderResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bsurrenderresult_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameSurrenderResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bSurrenderResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bsurrenderresult_)));
          set_has_bsurrenderresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameSurrenderResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bSurrenderResult = 1;
  if (has_bsurrenderresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bsurrenderresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameSurrenderResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bSurrenderResult = 1;
  if (has_bsurrenderresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bsurrenderresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameSurrenderResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bSurrenderResult = 1;
    if (has_bsurrenderresult()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameSurrenderResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameSurrenderResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameSurrenderResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameSurrenderResult::MergeFrom(const ProGX8ZGameSurrenderResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsurrenderresult()) {
      set_bsurrenderresult(from.bsurrenderresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameSurrenderResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameSurrenderResult::CopyFrom(const ProGX8ZGameSurrenderResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameSurrenderResult::IsInitialized() const {

  return true;
}

void ProGX8ZGameSurrenderResult::Swap(ProGX8ZGameSurrenderResult* other) {
  if (other != this) {
    std::swap(bsurrenderresult_, other->bsurrenderresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameSurrenderResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameSurrenderResult_descriptor_;
  metadata.reflection = ProGX8ZGameSurrenderResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomNotify_MSGID_descriptor_;
}
bool ProGX8ZGameShowBoomNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2255:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShowBoomNotify_MSGID ProGX8ZGameShowBoomNotify::ID;
const ProGX8ZGameShowBoomNotify_MSGID ProGX8ZGameShowBoomNotify::MSGID_MIN;
const ProGX8ZGameShowBoomNotify_MSGID ProGX8ZGameShowBoomNotify::MSGID_MAX;
const int ProGX8ZGameShowBoomNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProGX8ZGameShowBoomNotify::ProGX8ZGameShowBoomNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShowBoomNotify::InitAsDefaultInstance() {
}

ProGX8ZGameShowBoomNotify::ProGX8ZGameShowBoomNotify(const ProGX8ZGameShowBoomNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShowBoomNotify::~ProGX8ZGameShowBoomNotify() {
  SharedDtor();
}

void ProGX8ZGameShowBoomNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShowBoomNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomNotify_descriptor_;
}

const ProGX8ZGameShowBoomNotify& ProGX8ZGameShowBoomNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShowBoomNotify* ProGX8ZGameShowBoomNotify::default_instance_ = NULL;

ProGX8ZGameShowBoomNotify* ProGX8ZGameShowBoomNotify::New() const {
  return new ProGX8ZGameShowBoomNotify;
}

void ProGX8ZGameShowBoomNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShowBoomNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProGX8ZGameShowBoomNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShowBoomNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShowBoomNotify::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShowBoomNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShowBoomNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShowBoomNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShowBoomNotify::MergeFrom(const ProGX8ZGameShowBoomNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShowBoomNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomNotify::CopyFrom(const ProGX8ZGameShowBoomNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShowBoomNotify::IsInitialized() const {

  return true;
}

void ProGX8ZGameShowBoomNotify::Swap(ProGX8ZGameShowBoomNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShowBoomNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShowBoomNotify_descriptor_;
  metadata.reflection = ProGX8ZGameShowBoomNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomOperate_MSGID_descriptor_;
}
bool ProGX8ZGameShowBoomOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2256:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShowBoomOperate_MSGID ProGX8ZGameShowBoomOperate::ID;
const ProGX8ZGameShowBoomOperate_MSGID ProGX8ZGameShowBoomOperate::MSGID_MIN;
const ProGX8ZGameShowBoomOperate_MSGID ProGX8ZGameShowBoomOperate::MSGID_MAX;
const int ProGX8ZGameShowBoomOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameShowBoomOperate::kNSeatFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameShowBoomOperate::ProGX8ZGameShowBoomOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShowBoomOperate::InitAsDefaultInstance() {
}

ProGX8ZGameShowBoomOperate::ProGX8ZGameShowBoomOperate(const ProGX8ZGameShowBoomOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomOperate::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShowBoomOperate::~ProGX8ZGameShowBoomOperate() {
  SharedDtor();
}

void ProGX8ZGameShowBoomOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShowBoomOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomOperate_descriptor_;
}

const ProGX8ZGameShowBoomOperate& ProGX8ZGameShowBoomOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShowBoomOperate* ProGX8ZGameShowBoomOperate::default_instance_ = NULL;

ProGX8ZGameShowBoomOperate* ProGX8ZGameShowBoomOperate::New() const {
  return new ProGX8ZGameShowBoomOperate;
}

void ProGX8ZGameShowBoomOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShowBoomOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameShowBoomOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShowBoomOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShowBoomOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShowBoomOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShowBoomOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShowBoomOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShowBoomOperate::MergeFrom(const ProGX8ZGameShowBoomOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShowBoomOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomOperate::CopyFrom(const ProGX8ZGameShowBoomOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShowBoomOperate::IsInitialized() const {

  return true;
}

void ProGX8ZGameShowBoomOperate::Swap(ProGX8ZGameShowBoomOperate* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShowBoomOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShowBoomOperate_descriptor_;
  metadata.reflection = ProGX8ZGameShowBoomOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomResponse_MSGID_descriptor_;
}
bool ProGX8ZGameShowBoomResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2257:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProGX8ZGameShowBoomResponse_MSGID ProGX8ZGameShowBoomResponse::ID;
const ProGX8ZGameShowBoomResponse_MSGID ProGX8ZGameShowBoomResponse::MSGID_MIN;
const ProGX8ZGameShowBoomResponse_MSGID ProGX8ZGameShowBoomResponse::MSGID_MAX;
const int ProGX8ZGameShowBoomResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProGX8ZGameShowBoomResponse::kNSeatFieldNumber;
const int ProGX8ZGameShowBoomResponse::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

ProGX8ZGameShowBoomResponse::ProGX8ZGameShowBoomResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGX8ZGameShowBoomResponse::InitAsDefaultInstance() {
}

ProGX8ZGameShowBoomResponse::ProGX8ZGameShowBoomResponse(const ProGX8ZGameShowBoomResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomResponse::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGX8ZGameShowBoomResponse::~ProGX8ZGameShowBoomResponse() {
  SharedDtor();
}

void ProGX8ZGameShowBoomResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGX8ZGameShowBoomResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGX8ZGameShowBoomResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGX8ZGameShowBoomResponse_descriptor_;
}

const ProGX8ZGameShowBoomResponse& ProGX8ZGameShowBoomResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gx8zpk_2eproto();
  return *default_instance_;
}

ProGX8ZGameShowBoomResponse* ProGX8ZGameShowBoomResponse::default_instance_ = NULL;

ProGX8ZGameShowBoomResponse* ProGX8ZGameShowBoomResponse::New() const {
  return new ProGX8ZGameShowBoomResponse;
}

void ProGX8ZGameShowBoomResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    awardscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGX8ZGameShowBoomResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardScore;
        break;
      }

      // optional int32 AwardScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProGX8ZGameShowBoomResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional int32 AwardScore = 2;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGX8ZGameShowBoomResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional int32 AwardScore = 2;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGX8ZGameShowBoomResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional int32 AwardScore = 2;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGX8ZGameShowBoomResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGX8ZGameShowBoomResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGX8ZGameShowBoomResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGX8ZGameShowBoomResponse::MergeFrom(const ProGX8ZGameShowBoomResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGX8ZGameShowBoomResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGX8ZGameShowBoomResponse::CopyFrom(const ProGX8ZGameShowBoomResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGX8ZGameShowBoomResponse::IsInitialized() const {

  return true;
}

void ProGX8ZGameShowBoomResponse::Swap(ProGX8ZGameShowBoomResponse* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGX8ZGameShowBoomResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGX8ZGameShowBoomResponse_descriptor_;
  metadata.reflection = ProGX8ZGameShowBoomResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
