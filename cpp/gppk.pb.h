// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gppk.proto

#ifndef PROTOBUF_gppk_2eproto__INCLUDED
#define PROTOBUF_gppk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gppk_2eproto();
void protobuf_AssignDesc_gppk_2eproto();
void protobuf_ShutdownFile_gppk_2eproto();

class ProGPGameStatusResponse;
class ProGPGameDeskInfoResponse;
class ProGPGameReadyNotify;
class ProGPGameReadyRequest;
class ProGPGameReadyResponse;
class ProGPGameStart;
class ProGPGameDiceNotify;
class ProGPGameDiceRequest;
class ProGPGameDiceResult;
class ProGPGameSendMahs;
class ProGPGameKingData;
class ProGPGameOutMahsResponse;
class ProGPGameTimerPower;
class ProGPGameOperateNotify;
class ProGPGameOperateResult;
class ProGPGameOperateRequest;
class ProGPGameTrust;
class ProGPGameOutMahRequest;
class ProGPGameCatchCard;
class GPMahList;
class GPScoreList;
class GPAwardList;
class ProGPGameEnd;
class ProGPGameQuickSoundRequest;
class ProGPGameQuickSoundResponse;
class ProGPGameSendDiscardMahs;
class GPWeaveItem;
class GPWeaveItems;
class ProGPGameSendActionMahs;
class ProGPGameBrokenRequest;
class ProGPGameBrokenOperate;
class ProGPGameBrokenNotify;
class ProGPGameRuleConfig;
class ProGPGameBrokenStatus;
class ProGPGameDataResp;
class ProGPGameRecordRequest;
class ProGPGameRecordResponse;
class ProGPGameUserLocationRequest;
class ProGPGameSyncCardResponse;
class ProGPGameUserPhoneStatusRequest;
class ProGPGameUserGiveUpRequest;
class ProGPGameUserHintRequest;
class ProGPGameUserHintResponse;
class ProGPGameUserCallScoreResponse;
class ProGPGameUserCallScoreRequest;

enum ProGPGameStatusResponse_MSGID {
  ProGPGameStatusResponse_MSGID_ID = 2200
};
bool ProGPGameStatusResponse_MSGID_IsValid(int value);
const ProGPGameStatusResponse_MSGID ProGPGameStatusResponse_MSGID_MSGID_MIN = ProGPGameStatusResponse_MSGID_ID;
const ProGPGameStatusResponse_MSGID ProGPGameStatusResponse_MSGID_MSGID_MAX = ProGPGameStatusResponse_MSGID_ID;
const int ProGPGameStatusResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameStatusResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameStatusResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameStatusResponse_MSGID_Name(ProGPGameStatusResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameStatusResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameStatusResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameStatusResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameStatusResponse_MSGID>(
    ProGPGameStatusResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameDeskInfoResponse_MSGID {
  ProGPGameDeskInfoResponse_MSGID_ID = 2201
};
bool ProGPGameDeskInfoResponse_MSGID_IsValid(int value);
const ProGPGameDeskInfoResponse_MSGID ProGPGameDeskInfoResponse_MSGID_MSGID_MIN = ProGPGameDeskInfoResponse_MSGID_ID;
const ProGPGameDeskInfoResponse_MSGID ProGPGameDeskInfoResponse_MSGID_MSGID_MAX = ProGPGameDeskInfoResponse_MSGID_ID;
const int ProGPGameDeskInfoResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameDeskInfoResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameDeskInfoResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameDeskInfoResponse_MSGID_Name(ProGPGameDeskInfoResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameDeskInfoResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameDeskInfoResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameDeskInfoResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameDeskInfoResponse_MSGID>(
    ProGPGameDeskInfoResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameReadyNotify_MSGID {
  ProGPGameReadyNotify_MSGID_ID = 2202
};
bool ProGPGameReadyNotify_MSGID_IsValid(int value);
const ProGPGameReadyNotify_MSGID ProGPGameReadyNotify_MSGID_MSGID_MIN = ProGPGameReadyNotify_MSGID_ID;
const ProGPGameReadyNotify_MSGID ProGPGameReadyNotify_MSGID_MSGID_MAX = ProGPGameReadyNotify_MSGID_ID;
const int ProGPGameReadyNotify_MSGID_MSGID_ARRAYSIZE = ProGPGameReadyNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameReadyNotify_MSGID_descriptor();
inline const ::std::string& ProGPGameReadyNotify_MSGID_Name(ProGPGameReadyNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameReadyNotify_MSGID_descriptor(), value);
}
inline bool ProGPGameReadyNotify_MSGID_Parse(
    const ::std::string& name, ProGPGameReadyNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameReadyNotify_MSGID>(
    ProGPGameReadyNotify_MSGID_descriptor(), name, value);
}
enum ProGPGameReadyRequest_MSGID {
  ProGPGameReadyRequest_MSGID_ID = 2203
};
bool ProGPGameReadyRequest_MSGID_IsValid(int value);
const ProGPGameReadyRequest_MSGID ProGPGameReadyRequest_MSGID_MSGID_MIN = ProGPGameReadyRequest_MSGID_ID;
const ProGPGameReadyRequest_MSGID ProGPGameReadyRequest_MSGID_MSGID_MAX = ProGPGameReadyRequest_MSGID_ID;
const int ProGPGameReadyRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameReadyRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameReadyRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameReadyRequest_MSGID_Name(ProGPGameReadyRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameReadyRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameReadyRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameReadyRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameReadyRequest_MSGID>(
    ProGPGameReadyRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameReadyResponse_MSGID {
  ProGPGameReadyResponse_MSGID_ID = 2204
};
bool ProGPGameReadyResponse_MSGID_IsValid(int value);
const ProGPGameReadyResponse_MSGID ProGPGameReadyResponse_MSGID_MSGID_MIN = ProGPGameReadyResponse_MSGID_ID;
const ProGPGameReadyResponse_MSGID ProGPGameReadyResponse_MSGID_MSGID_MAX = ProGPGameReadyResponse_MSGID_ID;
const int ProGPGameReadyResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameReadyResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameReadyResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameReadyResponse_MSGID_Name(ProGPGameReadyResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameReadyResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameReadyResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameReadyResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameReadyResponse_MSGID>(
    ProGPGameReadyResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameStart_MSGID {
  ProGPGameStart_MSGID_ID = 2205
};
bool ProGPGameStart_MSGID_IsValid(int value);
const ProGPGameStart_MSGID ProGPGameStart_MSGID_MSGID_MIN = ProGPGameStart_MSGID_ID;
const ProGPGameStart_MSGID ProGPGameStart_MSGID_MSGID_MAX = ProGPGameStart_MSGID_ID;
const int ProGPGameStart_MSGID_MSGID_ARRAYSIZE = ProGPGameStart_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameStart_MSGID_descriptor();
inline const ::std::string& ProGPGameStart_MSGID_Name(ProGPGameStart_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameStart_MSGID_descriptor(), value);
}
inline bool ProGPGameStart_MSGID_Parse(
    const ::std::string& name, ProGPGameStart_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameStart_MSGID>(
    ProGPGameStart_MSGID_descriptor(), name, value);
}
enum ProGPGameDiceNotify_MSGID {
  ProGPGameDiceNotify_MSGID_ID = 2206
};
bool ProGPGameDiceNotify_MSGID_IsValid(int value);
const ProGPGameDiceNotify_MSGID ProGPGameDiceNotify_MSGID_MSGID_MIN = ProGPGameDiceNotify_MSGID_ID;
const ProGPGameDiceNotify_MSGID ProGPGameDiceNotify_MSGID_MSGID_MAX = ProGPGameDiceNotify_MSGID_ID;
const int ProGPGameDiceNotify_MSGID_MSGID_ARRAYSIZE = ProGPGameDiceNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameDiceNotify_MSGID_descriptor();
inline const ::std::string& ProGPGameDiceNotify_MSGID_Name(ProGPGameDiceNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameDiceNotify_MSGID_descriptor(), value);
}
inline bool ProGPGameDiceNotify_MSGID_Parse(
    const ::std::string& name, ProGPGameDiceNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameDiceNotify_MSGID>(
    ProGPGameDiceNotify_MSGID_descriptor(), name, value);
}
enum ProGPGameDiceRequest_MSGID {
  ProGPGameDiceRequest_MSGID_ID = 2207
};
bool ProGPGameDiceRequest_MSGID_IsValid(int value);
const ProGPGameDiceRequest_MSGID ProGPGameDiceRequest_MSGID_MSGID_MIN = ProGPGameDiceRequest_MSGID_ID;
const ProGPGameDiceRequest_MSGID ProGPGameDiceRequest_MSGID_MSGID_MAX = ProGPGameDiceRequest_MSGID_ID;
const int ProGPGameDiceRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameDiceRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameDiceRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameDiceRequest_MSGID_Name(ProGPGameDiceRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameDiceRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameDiceRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameDiceRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameDiceRequest_MSGID>(
    ProGPGameDiceRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameDiceResult_MSGID {
  ProGPGameDiceResult_MSGID_ID = 2208
};
bool ProGPGameDiceResult_MSGID_IsValid(int value);
const ProGPGameDiceResult_MSGID ProGPGameDiceResult_MSGID_MSGID_MIN = ProGPGameDiceResult_MSGID_ID;
const ProGPGameDiceResult_MSGID ProGPGameDiceResult_MSGID_MSGID_MAX = ProGPGameDiceResult_MSGID_ID;
const int ProGPGameDiceResult_MSGID_MSGID_ARRAYSIZE = ProGPGameDiceResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameDiceResult_MSGID_descriptor();
inline const ::std::string& ProGPGameDiceResult_MSGID_Name(ProGPGameDiceResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameDiceResult_MSGID_descriptor(), value);
}
inline bool ProGPGameDiceResult_MSGID_Parse(
    const ::std::string& name, ProGPGameDiceResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameDiceResult_MSGID>(
    ProGPGameDiceResult_MSGID_descriptor(), name, value);
}
enum ProGPGameSendMahs_MSGID {
  ProGPGameSendMahs_MSGID_ID = 2209
};
bool ProGPGameSendMahs_MSGID_IsValid(int value);
const ProGPGameSendMahs_MSGID ProGPGameSendMahs_MSGID_MSGID_MIN = ProGPGameSendMahs_MSGID_ID;
const ProGPGameSendMahs_MSGID ProGPGameSendMahs_MSGID_MSGID_MAX = ProGPGameSendMahs_MSGID_ID;
const int ProGPGameSendMahs_MSGID_MSGID_ARRAYSIZE = ProGPGameSendMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameSendMahs_MSGID_descriptor();
inline const ::std::string& ProGPGameSendMahs_MSGID_Name(ProGPGameSendMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameSendMahs_MSGID_descriptor(), value);
}
inline bool ProGPGameSendMahs_MSGID_Parse(
    const ::std::string& name, ProGPGameSendMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameSendMahs_MSGID>(
    ProGPGameSendMahs_MSGID_descriptor(), name, value);
}
enum ProGPGameKingData_MSGID {
  ProGPGameKingData_MSGID_ID = 2210
};
bool ProGPGameKingData_MSGID_IsValid(int value);
const ProGPGameKingData_MSGID ProGPGameKingData_MSGID_MSGID_MIN = ProGPGameKingData_MSGID_ID;
const ProGPGameKingData_MSGID ProGPGameKingData_MSGID_MSGID_MAX = ProGPGameKingData_MSGID_ID;
const int ProGPGameKingData_MSGID_MSGID_ARRAYSIZE = ProGPGameKingData_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameKingData_MSGID_descriptor();
inline const ::std::string& ProGPGameKingData_MSGID_Name(ProGPGameKingData_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameKingData_MSGID_descriptor(), value);
}
inline bool ProGPGameKingData_MSGID_Parse(
    const ::std::string& name, ProGPGameKingData_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameKingData_MSGID>(
    ProGPGameKingData_MSGID_descriptor(), name, value);
}
enum ProGPGameOutMahsResponse_MSGID {
  ProGPGameOutMahsResponse_MSGID_ID = 2211
};
bool ProGPGameOutMahsResponse_MSGID_IsValid(int value);
const ProGPGameOutMahsResponse_MSGID ProGPGameOutMahsResponse_MSGID_MSGID_MIN = ProGPGameOutMahsResponse_MSGID_ID;
const ProGPGameOutMahsResponse_MSGID ProGPGameOutMahsResponse_MSGID_MSGID_MAX = ProGPGameOutMahsResponse_MSGID_ID;
const int ProGPGameOutMahsResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameOutMahsResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameOutMahsResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameOutMahsResponse_MSGID_Name(ProGPGameOutMahsResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameOutMahsResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameOutMahsResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameOutMahsResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameOutMahsResponse_MSGID>(
    ProGPGameOutMahsResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameTimerPower_MSGID {
  ProGPGameTimerPower_MSGID_ID = 2212
};
bool ProGPGameTimerPower_MSGID_IsValid(int value);
const ProGPGameTimerPower_MSGID ProGPGameTimerPower_MSGID_MSGID_MIN = ProGPGameTimerPower_MSGID_ID;
const ProGPGameTimerPower_MSGID ProGPGameTimerPower_MSGID_MSGID_MAX = ProGPGameTimerPower_MSGID_ID;
const int ProGPGameTimerPower_MSGID_MSGID_ARRAYSIZE = ProGPGameTimerPower_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameTimerPower_MSGID_descriptor();
inline const ::std::string& ProGPGameTimerPower_MSGID_Name(ProGPGameTimerPower_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameTimerPower_MSGID_descriptor(), value);
}
inline bool ProGPGameTimerPower_MSGID_Parse(
    const ::std::string& name, ProGPGameTimerPower_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameTimerPower_MSGID>(
    ProGPGameTimerPower_MSGID_descriptor(), name, value);
}
enum ProGPGameOperateNotify_MSGID {
  ProGPGameOperateNotify_MSGID_ID = 2213
};
bool ProGPGameOperateNotify_MSGID_IsValid(int value);
const ProGPGameOperateNotify_MSGID ProGPGameOperateNotify_MSGID_MSGID_MIN = ProGPGameOperateNotify_MSGID_ID;
const ProGPGameOperateNotify_MSGID ProGPGameOperateNotify_MSGID_MSGID_MAX = ProGPGameOperateNotify_MSGID_ID;
const int ProGPGameOperateNotify_MSGID_MSGID_ARRAYSIZE = ProGPGameOperateNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameOperateNotify_MSGID_descriptor();
inline const ::std::string& ProGPGameOperateNotify_MSGID_Name(ProGPGameOperateNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameOperateNotify_MSGID_descriptor(), value);
}
inline bool ProGPGameOperateNotify_MSGID_Parse(
    const ::std::string& name, ProGPGameOperateNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameOperateNotify_MSGID>(
    ProGPGameOperateNotify_MSGID_descriptor(), name, value);
}
enum ProGPGameOperateResult_MSGID {
  ProGPGameOperateResult_MSGID_ID = 2214
};
bool ProGPGameOperateResult_MSGID_IsValid(int value);
const ProGPGameOperateResult_MSGID ProGPGameOperateResult_MSGID_MSGID_MIN = ProGPGameOperateResult_MSGID_ID;
const ProGPGameOperateResult_MSGID ProGPGameOperateResult_MSGID_MSGID_MAX = ProGPGameOperateResult_MSGID_ID;
const int ProGPGameOperateResult_MSGID_MSGID_ARRAYSIZE = ProGPGameOperateResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameOperateResult_MSGID_descriptor();
inline const ::std::string& ProGPGameOperateResult_MSGID_Name(ProGPGameOperateResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameOperateResult_MSGID_descriptor(), value);
}
inline bool ProGPGameOperateResult_MSGID_Parse(
    const ::std::string& name, ProGPGameOperateResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameOperateResult_MSGID>(
    ProGPGameOperateResult_MSGID_descriptor(), name, value);
}
enum ProGPGameOperateRequest_MSGID {
  ProGPGameOperateRequest_MSGID_ID = 2215
};
bool ProGPGameOperateRequest_MSGID_IsValid(int value);
const ProGPGameOperateRequest_MSGID ProGPGameOperateRequest_MSGID_MSGID_MIN = ProGPGameOperateRequest_MSGID_ID;
const ProGPGameOperateRequest_MSGID ProGPGameOperateRequest_MSGID_MSGID_MAX = ProGPGameOperateRequest_MSGID_ID;
const int ProGPGameOperateRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameOperateRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameOperateRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameOperateRequest_MSGID_Name(ProGPGameOperateRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameOperateRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameOperateRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameOperateRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameOperateRequest_MSGID>(
    ProGPGameOperateRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameTrust_MSGID {
  ProGPGameTrust_MSGID_ID = 2216
};
bool ProGPGameTrust_MSGID_IsValid(int value);
const ProGPGameTrust_MSGID ProGPGameTrust_MSGID_MSGID_MIN = ProGPGameTrust_MSGID_ID;
const ProGPGameTrust_MSGID ProGPGameTrust_MSGID_MSGID_MAX = ProGPGameTrust_MSGID_ID;
const int ProGPGameTrust_MSGID_MSGID_ARRAYSIZE = ProGPGameTrust_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameTrust_MSGID_descriptor();
inline const ::std::string& ProGPGameTrust_MSGID_Name(ProGPGameTrust_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameTrust_MSGID_descriptor(), value);
}
inline bool ProGPGameTrust_MSGID_Parse(
    const ::std::string& name, ProGPGameTrust_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameTrust_MSGID>(
    ProGPGameTrust_MSGID_descriptor(), name, value);
}
enum ProGPGameOutMahRequest_MSGID {
  ProGPGameOutMahRequest_MSGID_ID = 2217
};
bool ProGPGameOutMahRequest_MSGID_IsValid(int value);
const ProGPGameOutMahRequest_MSGID ProGPGameOutMahRequest_MSGID_MSGID_MIN = ProGPGameOutMahRequest_MSGID_ID;
const ProGPGameOutMahRequest_MSGID ProGPGameOutMahRequest_MSGID_MSGID_MAX = ProGPGameOutMahRequest_MSGID_ID;
const int ProGPGameOutMahRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameOutMahRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameOutMahRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameOutMahRequest_MSGID_Name(ProGPGameOutMahRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameOutMahRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameOutMahRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameOutMahRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameOutMahRequest_MSGID>(
    ProGPGameOutMahRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameCatchCard_MSGID {
  ProGPGameCatchCard_MSGID_ID = 2218
};
bool ProGPGameCatchCard_MSGID_IsValid(int value);
const ProGPGameCatchCard_MSGID ProGPGameCatchCard_MSGID_MSGID_MIN = ProGPGameCatchCard_MSGID_ID;
const ProGPGameCatchCard_MSGID ProGPGameCatchCard_MSGID_MSGID_MAX = ProGPGameCatchCard_MSGID_ID;
const int ProGPGameCatchCard_MSGID_MSGID_ARRAYSIZE = ProGPGameCatchCard_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameCatchCard_MSGID_descriptor();
inline const ::std::string& ProGPGameCatchCard_MSGID_Name(ProGPGameCatchCard_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameCatchCard_MSGID_descriptor(), value);
}
inline bool ProGPGameCatchCard_MSGID_Parse(
    const ::std::string& name, ProGPGameCatchCard_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameCatchCard_MSGID>(
    ProGPGameCatchCard_MSGID_descriptor(), name, value);
}
enum ProGPGameEnd_MSGID {
  ProGPGameEnd_MSGID_ID = 2219
};
bool ProGPGameEnd_MSGID_IsValid(int value);
const ProGPGameEnd_MSGID ProGPGameEnd_MSGID_MSGID_MIN = ProGPGameEnd_MSGID_ID;
const ProGPGameEnd_MSGID ProGPGameEnd_MSGID_MSGID_MAX = ProGPGameEnd_MSGID_ID;
const int ProGPGameEnd_MSGID_MSGID_ARRAYSIZE = ProGPGameEnd_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameEnd_MSGID_descriptor();
inline const ::std::string& ProGPGameEnd_MSGID_Name(ProGPGameEnd_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameEnd_MSGID_descriptor(), value);
}
inline bool ProGPGameEnd_MSGID_Parse(
    const ::std::string& name, ProGPGameEnd_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameEnd_MSGID>(
    ProGPGameEnd_MSGID_descriptor(), name, value);
}
enum ProGPGameQuickSoundRequest_MSGID {
  ProGPGameQuickSoundRequest_MSGID_ID = 2220
};
bool ProGPGameQuickSoundRequest_MSGID_IsValid(int value);
const ProGPGameQuickSoundRequest_MSGID ProGPGameQuickSoundRequest_MSGID_MSGID_MIN = ProGPGameQuickSoundRequest_MSGID_ID;
const ProGPGameQuickSoundRequest_MSGID ProGPGameQuickSoundRequest_MSGID_MSGID_MAX = ProGPGameQuickSoundRequest_MSGID_ID;
const int ProGPGameQuickSoundRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameQuickSoundRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameQuickSoundRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameQuickSoundRequest_MSGID_Name(ProGPGameQuickSoundRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameQuickSoundRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameQuickSoundRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameQuickSoundRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameQuickSoundRequest_MSGID>(
    ProGPGameQuickSoundRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameQuickSoundResponse_MSGID {
  ProGPGameQuickSoundResponse_MSGID_ID = 2221
};
bool ProGPGameQuickSoundResponse_MSGID_IsValid(int value);
const ProGPGameQuickSoundResponse_MSGID ProGPGameQuickSoundResponse_MSGID_MSGID_MIN = ProGPGameQuickSoundResponse_MSGID_ID;
const ProGPGameQuickSoundResponse_MSGID ProGPGameQuickSoundResponse_MSGID_MSGID_MAX = ProGPGameQuickSoundResponse_MSGID_ID;
const int ProGPGameQuickSoundResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameQuickSoundResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameQuickSoundResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameQuickSoundResponse_MSGID_Name(ProGPGameQuickSoundResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameQuickSoundResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameQuickSoundResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameQuickSoundResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameQuickSoundResponse_MSGID>(
    ProGPGameQuickSoundResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameSendDiscardMahs_MSGID {
  ProGPGameSendDiscardMahs_MSGID_ID = 2222
};
bool ProGPGameSendDiscardMahs_MSGID_IsValid(int value);
const ProGPGameSendDiscardMahs_MSGID ProGPGameSendDiscardMahs_MSGID_MSGID_MIN = ProGPGameSendDiscardMahs_MSGID_ID;
const ProGPGameSendDiscardMahs_MSGID ProGPGameSendDiscardMahs_MSGID_MSGID_MAX = ProGPGameSendDiscardMahs_MSGID_ID;
const int ProGPGameSendDiscardMahs_MSGID_MSGID_ARRAYSIZE = ProGPGameSendDiscardMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameSendDiscardMahs_MSGID_descriptor();
inline const ::std::string& ProGPGameSendDiscardMahs_MSGID_Name(ProGPGameSendDiscardMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameSendDiscardMahs_MSGID_descriptor(), value);
}
inline bool ProGPGameSendDiscardMahs_MSGID_Parse(
    const ::std::string& name, ProGPGameSendDiscardMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameSendDiscardMahs_MSGID>(
    ProGPGameSendDiscardMahs_MSGID_descriptor(), name, value);
}
enum ProGPGameSendActionMahs_MSGID {
  ProGPGameSendActionMahs_MSGID_ID = 2223
};
bool ProGPGameSendActionMahs_MSGID_IsValid(int value);
const ProGPGameSendActionMahs_MSGID ProGPGameSendActionMahs_MSGID_MSGID_MIN = ProGPGameSendActionMahs_MSGID_ID;
const ProGPGameSendActionMahs_MSGID ProGPGameSendActionMahs_MSGID_MSGID_MAX = ProGPGameSendActionMahs_MSGID_ID;
const int ProGPGameSendActionMahs_MSGID_MSGID_ARRAYSIZE = ProGPGameSendActionMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameSendActionMahs_MSGID_descriptor();
inline const ::std::string& ProGPGameSendActionMahs_MSGID_Name(ProGPGameSendActionMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameSendActionMahs_MSGID_descriptor(), value);
}
inline bool ProGPGameSendActionMahs_MSGID_Parse(
    const ::std::string& name, ProGPGameSendActionMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameSendActionMahs_MSGID>(
    ProGPGameSendActionMahs_MSGID_descriptor(), name, value);
}
enum ProGPGameBrokenRequest_MSGID {
  ProGPGameBrokenRequest_MSGID_ID = 2224
};
bool ProGPGameBrokenRequest_MSGID_IsValid(int value);
const ProGPGameBrokenRequest_MSGID ProGPGameBrokenRequest_MSGID_MSGID_MIN = ProGPGameBrokenRequest_MSGID_ID;
const ProGPGameBrokenRequest_MSGID ProGPGameBrokenRequest_MSGID_MSGID_MAX = ProGPGameBrokenRequest_MSGID_ID;
const int ProGPGameBrokenRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameBrokenRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameBrokenRequest_MSGID_Name(ProGPGameBrokenRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameBrokenRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameBrokenRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameBrokenRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameBrokenRequest_MSGID>(
    ProGPGameBrokenRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameBrokenOperate_MSGID {
  ProGPGameBrokenOperate_MSGID_ID = 2225
};
bool ProGPGameBrokenOperate_MSGID_IsValid(int value);
const ProGPGameBrokenOperate_MSGID ProGPGameBrokenOperate_MSGID_MSGID_MIN = ProGPGameBrokenOperate_MSGID_ID;
const ProGPGameBrokenOperate_MSGID ProGPGameBrokenOperate_MSGID_MSGID_MAX = ProGPGameBrokenOperate_MSGID_ID;
const int ProGPGameBrokenOperate_MSGID_MSGID_ARRAYSIZE = ProGPGameBrokenOperate_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenOperate_MSGID_descriptor();
inline const ::std::string& ProGPGameBrokenOperate_MSGID_Name(ProGPGameBrokenOperate_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameBrokenOperate_MSGID_descriptor(), value);
}
inline bool ProGPGameBrokenOperate_MSGID_Parse(
    const ::std::string& name, ProGPGameBrokenOperate_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameBrokenOperate_MSGID>(
    ProGPGameBrokenOperate_MSGID_descriptor(), name, value);
}
enum ProGPGameBrokenNotify_MSGID {
  ProGPGameBrokenNotify_MSGID_ID = 2226
};
bool ProGPGameBrokenNotify_MSGID_IsValid(int value);
const ProGPGameBrokenNotify_MSGID ProGPGameBrokenNotify_MSGID_MSGID_MIN = ProGPGameBrokenNotify_MSGID_ID;
const ProGPGameBrokenNotify_MSGID ProGPGameBrokenNotify_MSGID_MSGID_MAX = ProGPGameBrokenNotify_MSGID_ID;
const int ProGPGameBrokenNotify_MSGID_MSGID_ARRAYSIZE = ProGPGameBrokenNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenNotify_MSGID_descriptor();
inline const ::std::string& ProGPGameBrokenNotify_MSGID_Name(ProGPGameBrokenNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameBrokenNotify_MSGID_descriptor(), value);
}
inline bool ProGPGameBrokenNotify_MSGID_Parse(
    const ::std::string& name, ProGPGameBrokenNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameBrokenNotify_MSGID>(
    ProGPGameBrokenNotify_MSGID_descriptor(), name, value);
}
enum ProGPGameRuleConfig_MSGID {
  ProGPGameRuleConfig_MSGID_ID = 2227
};
bool ProGPGameRuleConfig_MSGID_IsValid(int value);
const ProGPGameRuleConfig_MSGID ProGPGameRuleConfig_MSGID_MSGID_MIN = ProGPGameRuleConfig_MSGID_ID;
const ProGPGameRuleConfig_MSGID ProGPGameRuleConfig_MSGID_MSGID_MAX = ProGPGameRuleConfig_MSGID_ID;
const int ProGPGameRuleConfig_MSGID_MSGID_ARRAYSIZE = ProGPGameRuleConfig_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameRuleConfig_MSGID_descriptor();
inline const ::std::string& ProGPGameRuleConfig_MSGID_Name(ProGPGameRuleConfig_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameRuleConfig_MSGID_descriptor(), value);
}
inline bool ProGPGameRuleConfig_MSGID_Parse(
    const ::std::string& name, ProGPGameRuleConfig_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameRuleConfig_MSGID>(
    ProGPGameRuleConfig_MSGID_descriptor(), name, value);
}
enum ProGPGameBrokenStatus_MSGID {
  ProGPGameBrokenStatus_MSGID_ID = 2228
};
bool ProGPGameBrokenStatus_MSGID_IsValid(int value);
const ProGPGameBrokenStatus_MSGID ProGPGameBrokenStatus_MSGID_MSGID_MIN = ProGPGameBrokenStatus_MSGID_ID;
const ProGPGameBrokenStatus_MSGID ProGPGameBrokenStatus_MSGID_MSGID_MAX = ProGPGameBrokenStatus_MSGID_ID;
const int ProGPGameBrokenStatus_MSGID_MSGID_ARRAYSIZE = ProGPGameBrokenStatus_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameBrokenStatus_MSGID_descriptor();
inline const ::std::string& ProGPGameBrokenStatus_MSGID_Name(ProGPGameBrokenStatus_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameBrokenStatus_MSGID_descriptor(), value);
}
inline bool ProGPGameBrokenStatus_MSGID_Parse(
    const ::std::string& name, ProGPGameBrokenStatus_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameBrokenStatus_MSGID>(
    ProGPGameBrokenStatus_MSGID_descriptor(), name, value);
}
enum ProGPGameDataResp_MSGID {
  ProGPGameDataResp_MSGID_ID = 2229
};
bool ProGPGameDataResp_MSGID_IsValid(int value);
const ProGPGameDataResp_MSGID ProGPGameDataResp_MSGID_MSGID_MIN = ProGPGameDataResp_MSGID_ID;
const ProGPGameDataResp_MSGID ProGPGameDataResp_MSGID_MSGID_MAX = ProGPGameDataResp_MSGID_ID;
const int ProGPGameDataResp_MSGID_MSGID_ARRAYSIZE = ProGPGameDataResp_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameDataResp_MSGID_descriptor();
inline const ::std::string& ProGPGameDataResp_MSGID_Name(ProGPGameDataResp_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameDataResp_MSGID_descriptor(), value);
}
inline bool ProGPGameDataResp_MSGID_Parse(
    const ::std::string& name, ProGPGameDataResp_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameDataResp_MSGID>(
    ProGPGameDataResp_MSGID_descriptor(), name, value);
}
enum ProGPGameRecordRequest_MSGID {
  ProGPGameRecordRequest_MSGID_ID = 2230
};
bool ProGPGameRecordRequest_MSGID_IsValid(int value);
const ProGPGameRecordRequest_MSGID ProGPGameRecordRequest_MSGID_MSGID_MIN = ProGPGameRecordRequest_MSGID_ID;
const ProGPGameRecordRequest_MSGID ProGPGameRecordRequest_MSGID_MSGID_MAX = ProGPGameRecordRequest_MSGID_ID;
const int ProGPGameRecordRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameRecordRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameRecordRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameRecordRequest_MSGID_Name(ProGPGameRecordRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameRecordRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameRecordRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameRecordRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameRecordRequest_MSGID>(
    ProGPGameRecordRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameRecordResponse_MSGID {
  ProGPGameRecordResponse_MSGID_ID = 2231
};
bool ProGPGameRecordResponse_MSGID_IsValid(int value);
const ProGPGameRecordResponse_MSGID ProGPGameRecordResponse_MSGID_MSGID_MIN = ProGPGameRecordResponse_MSGID_ID;
const ProGPGameRecordResponse_MSGID ProGPGameRecordResponse_MSGID_MSGID_MAX = ProGPGameRecordResponse_MSGID_ID;
const int ProGPGameRecordResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameRecordResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameRecordResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameRecordResponse_MSGID_Name(ProGPGameRecordResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameRecordResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameRecordResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameRecordResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameRecordResponse_MSGID>(
    ProGPGameRecordResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameUserLocationRequest_MSGID {
  ProGPGameUserLocationRequest_MSGID_ID = 2232
};
bool ProGPGameUserLocationRequest_MSGID_IsValid(int value);
const ProGPGameUserLocationRequest_MSGID ProGPGameUserLocationRequest_MSGID_MSGID_MIN = ProGPGameUserLocationRequest_MSGID_ID;
const ProGPGameUserLocationRequest_MSGID ProGPGameUserLocationRequest_MSGID_MSGID_MAX = ProGPGameUserLocationRequest_MSGID_ID;
const int ProGPGameUserLocationRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameUserLocationRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserLocationRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameUserLocationRequest_MSGID_Name(ProGPGameUserLocationRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserLocationRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameUserLocationRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameUserLocationRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserLocationRequest_MSGID>(
    ProGPGameUserLocationRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameSyncCardResponse_MSGID {
  ProGPGameSyncCardResponse_MSGID_ID = 2233
};
bool ProGPGameSyncCardResponse_MSGID_IsValid(int value);
const ProGPGameSyncCardResponse_MSGID ProGPGameSyncCardResponse_MSGID_MSGID_MIN = ProGPGameSyncCardResponse_MSGID_ID;
const ProGPGameSyncCardResponse_MSGID ProGPGameSyncCardResponse_MSGID_MSGID_MAX = ProGPGameSyncCardResponse_MSGID_ID;
const int ProGPGameSyncCardResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameSyncCardResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameSyncCardResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameSyncCardResponse_MSGID_Name(ProGPGameSyncCardResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameSyncCardResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameSyncCardResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameSyncCardResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameSyncCardResponse_MSGID>(
    ProGPGameSyncCardResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameUserPhoneStatusRequest_MSGID {
  ProGPGameUserPhoneStatusRequest_MSGID_ID = 2234
};
bool ProGPGameUserPhoneStatusRequest_MSGID_IsValid(int value);
const ProGPGameUserPhoneStatusRequest_MSGID ProGPGameUserPhoneStatusRequest_MSGID_MSGID_MIN = ProGPGameUserPhoneStatusRequest_MSGID_ID;
const ProGPGameUserPhoneStatusRequest_MSGID ProGPGameUserPhoneStatusRequest_MSGID_MSGID_MAX = ProGPGameUserPhoneStatusRequest_MSGID_ID;
const int ProGPGameUserPhoneStatusRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameUserPhoneStatusRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserPhoneStatusRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameUserPhoneStatusRequest_MSGID_Name(ProGPGameUserPhoneStatusRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserPhoneStatusRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameUserPhoneStatusRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameUserPhoneStatusRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserPhoneStatusRequest_MSGID>(
    ProGPGameUserPhoneStatusRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameUserGiveUpRequest_MSGID {
  ProGPGameUserGiveUpRequest_MSGID_ID = 2235
};
bool ProGPGameUserGiveUpRequest_MSGID_IsValid(int value);
const ProGPGameUserGiveUpRequest_MSGID ProGPGameUserGiveUpRequest_MSGID_MSGID_MIN = ProGPGameUserGiveUpRequest_MSGID_ID;
const ProGPGameUserGiveUpRequest_MSGID ProGPGameUserGiveUpRequest_MSGID_MSGID_MAX = ProGPGameUserGiveUpRequest_MSGID_ID;
const int ProGPGameUserGiveUpRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameUserGiveUpRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserGiveUpRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameUserGiveUpRequest_MSGID_Name(ProGPGameUserGiveUpRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserGiveUpRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameUserGiveUpRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameUserGiveUpRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserGiveUpRequest_MSGID>(
    ProGPGameUserGiveUpRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameUserHintRequest_MSGID {
  ProGPGameUserHintRequest_MSGID_ID = 2236
};
bool ProGPGameUserHintRequest_MSGID_IsValid(int value);
const ProGPGameUserHintRequest_MSGID ProGPGameUserHintRequest_MSGID_MSGID_MIN = ProGPGameUserHintRequest_MSGID_ID;
const ProGPGameUserHintRequest_MSGID ProGPGameUserHintRequest_MSGID_MSGID_MAX = ProGPGameUserHintRequest_MSGID_ID;
const int ProGPGameUserHintRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameUserHintRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserHintRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameUserHintRequest_MSGID_Name(ProGPGameUserHintRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserHintRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameUserHintRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameUserHintRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserHintRequest_MSGID>(
    ProGPGameUserHintRequest_MSGID_descriptor(), name, value);
}
enum ProGPGameUserHintResponse_MSGID {
  ProGPGameUserHintResponse_MSGID_ID = 2237
};
bool ProGPGameUserHintResponse_MSGID_IsValid(int value);
const ProGPGameUserHintResponse_MSGID ProGPGameUserHintResponse_MSGID_MSGID_MIN = ProGPGameUserHintResponse_MSGID_ID;
const ProGPGameUserHintResponse_MSGID ProGPGameUserHintResponse_MSGID_MSGID_MAX = ProGPGameUserHintResponse_MSGID_ID;
const int ProGPGameUserHintResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameUserHintResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserHintResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameUserHintResponse_MSGID_Name(ProGPGameUserHintResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserHintResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameUserHintResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameUserHintResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserHintResponse_MSGID>(
    ProGPGameUserHintResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameUserCallScoreResponse_MSGID {
  ProGPGameUserCallScoreResponse_MSGID_ID = 2238
};
bool ProGPGameUserCallScoreResponse_MSGID_IsValid(int value);
const ProGPGameUserCallScoreResponse_MSGID ProGPGameUserCallScoreResponse_MSGID_MSGID_MIN = ProGPGameUserCallScoreResponse_MSGID_ID;
const ProGPGameUserCallScoreResponse_MSGID ProGPGameUserCallScoreResponse_MSGID_MSGID_MAX = ProGPGameUserCallScoreResponse_MSGID_ID;
const int ProGPGameUserCallScoreResponse_MSGID_MSGID_ARRAYSIZE = ProGPGameUserCallScoreResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserCallScoreResponse_MSGID_descriptor();
inline const ::std::string& ProGPGameUserCallScoreResponse_MSGID_Name(ProGPGameUserCallScoreResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserCallScoreResponse_MSGID_descriptor(), value);
}
inline bool ProGPGameUserCallScoreResponse_MSGID_Parse(
    const ::std::string& name, ProGPGameUserCallScoreResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserCallScoreResponse_MSGID>(
    ProGPGameUserCallScoreResponse_MSGID_descriptor(), name, value);
}
enum ProGPGameUserCallScoreRequest_MSGID {
  ProGPGameUserCallScoreRequest_MSGID_ID = 2239
};
bool ProGPGameUserCallScoreRequest_MSGID_IsValid(int value);
const ProGPGameUserCallScoreRequest_MSGID ProGPGameUserCallScoreRequest_MSGID_MSGID_MIN = ProGPGameUserCallScoreRequest_MSGID_ID;
const ProGPGameUserCallScoreRequest_MSGID ProGPGameUserCallScoreRequest_MSGID_MSGID_MAX = ProGPGameUserCallScoreRequest_MSGID_ID;
const int ProGPGameUserCallScoreRequest_MSGID_MSGID_ARRAYSIZE = ProGPGameUserCallScoreRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGPGameUserCallScoreRequest_MSGID_descriptor();
inline const ::std::string& ProGPGameUserCallScoreRequest_MSGID_Name(ProGPGameUserCallScoreRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGPGameUserCallScoreRequest_MSGID_descriptor(), value);
}
inline bool ProGPGameUserCallScoreRequest_MSGID_Parse(
    const ::std::string& name, ProGPGameUserCallScoreRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGPGameUserCallScoreRequest_MSGID>(
    ProGPGameUserCallScoreRequest_MSGID_descriptor(), name, value);
}
enum GPGameState {
  GP_GAME_IDLE = 1,
  GP_GAME_DICE_BANK = 2,
  GP_GAME_SEND = 3,
  GP_GAME_DICE_KING = 4,
  GP_GAME_PLAY = 5,
  GP_GAME_END = 6
};
bool GPGameState_IsValid(int value);
const GPGameState GPGameState_MIN = GP_GAME_IDLE;
const GPGameState GPGameState_MAX = GP_GAME_END;
const int GPGameState_ARRAYSIZE = GPGameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPGameState_descriptor();
inline const ::std::string& GPGameState_Name(GPGameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPGameState_descriptor(), value);
}
inline bool GPGameState_Parse(
    const ::std::string& name, GPGameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPGameState>(
    GPGameState_descriptor(), name, value);
}
enum GPSEND_TYPE {
  GP_NORMAL_SEND = 1,
  GP_RECOME_SEND = 2
};
bool GPSEND_TYPE_IsValid(int value);
const GPSEND_TYPE GPSEND_TYPE_MIN = GP_NORMAL_SEND;
const GPSEND_TYPE GPSEND_TYPE_MAX = GP_RECOME_SEND;
const int GPSEND_TYPE_ARRAYSIZE = GPSEND_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPSEND_TYPE_descriptor();
inline const ::std::string& GPSEND_TYPE_Name(GPSEND_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPSEND_TYPE_descriptor(), value);
}
inline bool GPSEND_TYPE_Parse(
    const ::std::string& name, GPSEND_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPSEND_TYPE>(
    GPSEND_TYPE_descriptor(), name, value);
}
enum GPKIGN_TYPE {
  GP_KING_UP = 1,
  GP_KING_HUITOU = 2,
  GP_KING_MAILEI = 3
};
bool GPKIGN_TYPE_IsValid(int value);
const GPKIGN_TYPE GPKIGN_TYPE_MIN = GP_KING_UP;
const GPKIGN_TYPE GPKIGN_TYPE_MAX = GP_KING_MAILEI;
const int GPKIGN_TYPE_ARRAYSIZE = GPKIGN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPKIGN_TYPE_descriptor();
inline const ::std::string& GPKIGN_TYPE_Name(GPKIGN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPKIGN_TYPE_descriptor(), value);
}
inline bool GPKIGN_TYPE_Parse(
    const ::std::string& name, GPKIGN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPKIGN_TYPE>(
    GPKIGN_TYPE_descriptor(), name, value);
}
enum GPBROKEN_TYPE {
  GP_BT_MASTER_QUIT = 0,
  GP_BT_USER_QUIT = 1,
  GP_BT_BROKEN = 2
};
bool GPBROKEN_TYPE_IsValid(int value);
const GPBROKEN_TYPE GPBROKEN_TYPE_MIN = GP_BT_MASTER_QUIT;
const GPBROKEN_TYPE GPBROKEN_TYPE_MAX = GP_BT_BROKEN;
const int GPBROKEN_TYPE_ARRAYSIZE = GPBROKEN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPBROKEN_TYPE_descriptor();
inline const ::std::string& GPBROKEN_TYPE_Name(GPBROKEN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPBROKEN_TYPE_descriptor(), value);
}
inline bool GPBROKEN_TYPE_Parse(
    const ::std::string& name, GPBROKEN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPBROKEN_TYPE>(
    GPBROKEN_TYPE_descriptor(), name, value);
}
enum GPBROKEN_OPERATE {
  GP_BO_DISAGREE = 0,
  GP_BO_AGREE = 1
};
bool GPBROKEN_OPERATE_IsValid(int value);
const GPBROKEN_OPERATE GPBROKEN_OPERATE_MIN = GP_BO_DISAGREE;
const GPBROKEN_OPERATE GPBROKEN_OPERATE_MAX = GP_BO_AGREE;
const int GPBROKEN_OPERATE_ARRAYSIZE = GPBROKEN_OPERATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPBROKEN_OPERATE_descriptor();
inline const ::std::string& GPBROKEN_OPERATE_Name(GPBROKEN_OPERATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPBROKEN_OPERATE_descriptor(), value);
}
inline bool GPBROKEN_OPERATE_Parse(
    const ::std::string& name, GPBROKEN_OPERATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPBROKEN_OPERATE>(
    GPBROKEN_OPERATE_descriptor(), name, value);
}
enum GPBROKEN_CODE {
  GP_BC_SUCCESS = 0,
  GP_BC_DISAGREE = 1,
  GP_BC_QUIT_SUCCESS = 2,
  GP_BC_EXCEPTION = 3
};
bool GPBROKEN_CODE_IsValid(int value);
const GPBROKEN_CODE GPBROKEN_CODE_MIN = GP_BC_SUCCESS;
const GPBROKEN_CODE GPBROKEN_CODE_MAX = GP_BC_EXCEPTION;
const int GPBROKEN_CODE_ARRAYSIZE = GPBROKEN_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPBROKEN_CODE_descriptor();
inline const ::std::string& GPBROKEN_CODE_Name(GPBROKEN_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPBROKEN_CODE_descriptor(), value);
}
inline bool GPBROKEN_CODE_Parse(
    const ::std::string& name, GPBROKEN_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPBROKEN_CODE>(
    GPBROKEN_CODE_descriptor(), name, value);
}
// ===================================================================

class ProGPGameStatusResponse : public ::google::protobuf::Message {
 public:
  ProGPGameStatusResponse();
  virtual ~ProGPGameStatusResponse();

  ProGPGameStatusResponse(const ProGPGameStatusResponse& from);

  inline ProGPGameStatusResponse& operator=(const ProGPGameStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameStatusResponse& default_instance();

  void Swap(ProGPGameStatusResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameStatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameStatusResponse& from);
  void MergeFrom(const ProGPGameStatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameStatusResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameStatusResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameStatusResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameStatusResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameStatusResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameStatusResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameStatusResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameStatusResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameStatusResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GPGameState status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::GPGameState status() const;
  inline void set_status(::GPGameState value);

  // @@protoc_insertion_point(class_scope:ProGPGameStatusResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameDeskInfoResponse : public ::google::protobuf::Message {
 public:
  ProGPGameDeskInfoResponse();
  virtual ~ProGPGameDeskInfoResponse();

  ProGPGameDeskInfoResponse(const ProGPGameDeskInfoResponse& from);

  inline ProGPGameDeskInfoResponse& operator=(const ProGPGameDeskInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameDeskInfoResponse& default_instance();

  void Swap(ProGPGameDeskInfoResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameDeskInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameDeskInfoResponse& from);
  void MergeFrom(const ProGPGameDeskInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameDeskInfoResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameDeskInfoResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameDeskInfoResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameDeskInfoResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameDeskInfoResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameDeskInfoResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameDeskInfoResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameDeskInfoResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameDeskInfoResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 CellScore = 2;
  inline bool has_cellscore() const;
  inline void clear_cellscore();
  static const int kCellScoreFieldNumber = 2;
  inline ::google::protobuf::int32 cellscore() const;
  inline void set_cellscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameDeskInfoResponse)
 private:
  inline void set_has_cellscore();
  inline void clear_has_cellscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cellscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameDeskInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameReadyNotify : public ::google::protobuf::Message {
 public:
  ProGPGameReadyNotify();
  virtual ~ProGPGameReadyNotify();

  ProGPGameReadyNotify(const ProGPGameReadyNotify& from);

  inline ProGPGameReadyNotify& operator=(const ProGPGameReadyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameReadyNotify& default_instance();

  void Swap(ProGPGameReadyNotify* other);

  // implements Message ----------------------------------------------

  ProGPGameReadyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameReadyNotify& from);
  void MergeFrom(const ProGPGameReadyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameReadyNotify_MSGID MSGID;
  static const MSGID ID = ProGPGameReadyNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameReadyNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameReadyNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameReadyNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameReadyNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameReadyNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameReadyNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameReadyNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameReadyNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameReadyNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameReadyRequest : public ::google::protobuf::Message {
 public:
  ProGPGameReadyRequest();
  virtual ~ProGPGameReadyRequest();

  ProGPGameReadyRequest(const ProGPGameReadyRequest& from);

  inline ProGPGameReadyRequest& operator=(const ProGPGameReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameReadyRequest& default_instance();

  void Swap(ProGPGameReadyRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameReadyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameReadyRequest& from);
  void MergeFrom(const ProGPGameReadyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameReadyRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameReadyRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameReadyRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameReadyRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameReadyRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameReadyRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameReadyRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameReadyRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameReadyRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameReadyRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameReadyRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameReadyResponse : public ::google::protobuf::Message {
 public:
  ProGPGameReadyResponse();
  virtual ~ProGPGameReadyResponse();

  ProGPGameReadyResponse(const ProGPGameReadyResponse& from);

  inline ProGPGameReadyResponse& operator=(const ProGPGameReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameReadyResponse& default_instance();

  void Swap(ProGPGameReadyResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameReadyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameReadyResponse& from);
  void MergeFrom(const ProGPGameReadyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameReadyResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameReadyResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameReadyResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameReadyResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameReadyResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameReadyResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameReadyResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameReadyResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameReadyResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameReadyResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameReadyResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameStart : public ::google::protobuf::Message {
 public:
  ProGPGameStart();
  virtual ~ProGPGameStart();

  ProGPGameStart(const ProGPGameStart& from);

  inline ProGPGameStart& operator=(const ProGPGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameStart& default_instance();

  void Swap(ProGPGameStart* other);

  // implements Message ----------------------------------------------

  ProGPGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameStart& from);
  void MergeFrom(const ProGPGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameStart_MSGID MSGID;
  static const MSGID ID = ProGPGameStart_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameStart_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameStart_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameStart_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameStart_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameStart_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameStart_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameStart_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 bankerseat = 2;
  inline bool has_bankerseat() const;
  inline void clear_bankerseat();
  static const int kBankerseatFieldNumber = 2;
  inline ::google::protobuf::int32 bankerseat() const;
  inline void set_bankerseat(::google::protobuf::int32 value);

  // optional int32 gamecount = 3;
  inline bool has_gamecount() const;
  inline void clear_gamecount();
  static const int kGamecountFieldNumber = 3;
  inline ::google::protobuf::int32 gamecount() const;
  inline void set_gamecount(::google::protobuf::int32 value);

  // optional int32 outCardtimes = 4;
  inline bool has_outcardtimes() const;
  inline void clear_outcardtimes();
  static const int kOutCardtimesFieldNumber = 4;
  inline ::google::protobuf::int32 outcardtimes() const;
  inline void set_outcardtimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameStart)
 private:
  inline void set_has_bankerseat();
  inline void clear_has_bankerseat();
  inline void set_has_gamecount();
  inline void clear_has_gamecount();
  inline void set_has_outcardtimes();
  inline void clear_has_outcardtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bankerseat_;
  ::google::protobuf::int32 gamecount_;
  ::google::protobuf::int32 outcardtimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameStart* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameDiceNotify : public ::google::protobuf::Message {
 public:
  ProGPGameDiceNotify();
  virtual ~ProGPGameDiceNotify();

  ProGPGameDiceNotify(const ProGPGameDiceNotify& from);

  inline ProGPGameDiceNotify& operator=(const ProGPGameDiceNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameDiceNotify& default_instance();

  void Swap(ProGPGameDiceNotify* other);

  // implements Message ----------------------------------------------

  ProGPGameDiceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameDiceNotify& from);
  void MergeFrom(const ProGPGameDiceNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameDiceNotify_MSGID MSGID;
  static const MSGID ID = ProGPGameDiceNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameDiceNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameDiceNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameDiceNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameDiceNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameDiceNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameDiceNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameDiceNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 dicecount = 4;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 4;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameDiceNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameDiceNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameDiceRequest : public ::google::protobuf::Message {
 public:
  ProGPGameDiceRequest();
  virtual ~ProGPGameDiceRequest();

  ProGPGameDiceRequest(const ProGPGameDiceRequest& from);

  inline ProGPGameDiceRequest& operator=(const ProGPGameDiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameDiceRequest& default_instance();

  void Swap(ProGPGameDiceRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameDiceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameDiceRequest& from);
  void MergeFrom(const ProGPGameDiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameDiceRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameDiceRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameDiceRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameDiceRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameDiceRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameDiceRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameDiceRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameDiceRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameDiceRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 dicecount = 3;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 3;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameDiceRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameDiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameDiceResult : public ::google::protobuf::Message {
 public:
  ProGPGameDiceResult();
  virtual ~ProGPGameDiceResult();

  ProGPGameDiceResult(const ProGPGameDiceResult& from);

  inline ProGPGameDiceResult& operator=(const ProGPGameDiceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameDiceResult& default_instance();

  void Swap(ProGPGameDiceResult* other);

  // implements Message ----------------------------------------------

  ProGPGameDiceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameDiceResult& from);
  void MergeFrom(const ProGPGameDiceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameDiceResult_MSGID MSGID;
  static const MSGID ID = ProGPGameDiceResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameDiceResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameDiceResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameDiceResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameDiceResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameDiceResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameDiceResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameDiceResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result(int index) const;
  inline void set_result(int index, ::google::protobuf::int32 value);
  inline void add_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result();

  // optional int32 dicecount = 4;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 4;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameDiceResult)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameDiceResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameSendMahs : public ::google::protobuf::Message {
 public:
  ProGPGameSendMahs();
  virtual ~ProGPGameSendMahs();

  ProGPGameSendMahs(const ProGPGameSendMahs& from);

  inline ProGPGameSendMahs& operator=(const ProGPGameSendMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameSendMahs& default_instance();

  void Swap(ProGPGameSendMahs* other);

  // implements Message ----------------------------------------------

  ProGPGameSendMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameSendMahs& from);
  void MergeFrom(const ProGPGameSendMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameSendMahs_MSGID MSGID;
  static const MSGID ID = ProGPGameSendMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameSendMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameSendMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameSendMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameSendMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameSendMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameSendMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameSendMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 mahs = 3;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 3;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // repeated int32 mahscount = 4;
  inline int mahscount_size() const;
  inline void clear_mahscount();
  static const int kMahscountFieldNumber = 4;
  inline ::google::protobuf::int32 mahscount(int index) const;
  inline void set_mahscount(int index, ::google::protobuf::int32 value);
  inline void add_mahscount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahscount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahscount();

  // optional int32 cbLeftCount = 5;
  inline bool has_cbleftcount() const;
  inline void clear_cbleftcount();
  static const int kCbLeftCountFieldNumber = 5;
  inline ::google::protobuf::int32 cbleftcount() const;
  inline void set_cbleftcount(::google::protobuf::int32 value);

  // optional int32 magicCardLogicValue = 6;
  inline bool has_magiccardlogicvalue() const;
  inline void clear_magiccardlogicvalue();
  static const int kMagicCardLogicValueFieldNumber = 6;
  inline ::google::protobuf::int32 magiccardlogicvalue() const;
  inline void set_magiccardlogicvalue(::google::protobuf::int32 value);

  // optional bool bRecome = 7;
  inline bool has_brecome() const;
  inline void clear_brecome();
  static const int kBRecomeFieldNumber = 7;
  inline bool brecome() const;
  inline void set_brecome(bool value);

  // @@protoc_insertion_point(class_scope:ProGPGameSendMahs)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cbleftcount();
  inline void clear_has_cbleftcount();
  inline void set_has_magiccardlogicvalue();
  inline void clear_has_magiccardlogicvalue();
  inline void set_has_brecome();
  inline void clear_has_brecome();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cbleftcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahscount_;
  ::google::protobuf::int32 magiccardlogicvalue_;
  bool brecome_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameSendMahs* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameKingData : public ::google::protobuf::Message {
 public:
  ProGPGameKingData();
  virtual ~ProGPGameKingData();

  ProGPGameKingData(const ProGPGameKingData& from);

  inline ProGPGameKingData& operator=(const ProGPGameKingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameKingData& default_instance();

  void Swap(ProGPGameKingData* other);

  // implements Message ----------------------------------------------

  ProGPGameKingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameKingData& from);
  void MergeFrom(const ProGPGameKingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameKingData_MSGID MSGID;
  static const MSGID ID = ProGPGameKingData_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameKingData_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameKingData_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameKingData_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameKingData_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameKingData_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameKingData_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameKingData_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 mahs = 3;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 3;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // repeated int32 downKingScore = 4;
  inline int downkingscore_size() const;
  inline void clear_downkingscore();
  static const int kDownKingScoreFieldNumber = 4;
  inline ::google::protobuf::int32 downkingscore(int index) const;
  inline void set_downkingscore(int index, ::google::protobuf::int32 value);
  inline void add_downkingscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      downkingscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_downkingscore();

  // repeated int32 kingcount = 5;
  inline int kingcount_size() const;
  inline void clear_kingcount();
  static const int kKingcountFieldNumber = 5;
  inline ::google::protobuf::int32 kingcount(int index) const;
  inline void set_kingcount(int index, ::google::protobuf::int32 value);
  inline void add_kingcount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kingcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kingcount();

  // repeated int32 viceking = 6;
  inline int viceking_size() const;
  inline void clear_viceking();
  static const int kVicekingFieldNumber = 6;
  inline ::google::protobuf::int32 viceking(int index) const;
  inline void set_viceking(int index, ::google::protobuf::int32 value);
  inline void add_viceking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      viceking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_viceking();

  // optional .GPSEND_TYPE notify_type = 7 [default = GP_NORMAL_SEND];
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 7;
  inline ::GPSEND_TYPE notify_type() const;
  inline void set_notify_type(::GPSEND_TYPE value);

  // optional .GPKIGN_TYPE king_type = 8 [default = GP_KING_UP];
  inline bool has_king_type() const;
  inline void clear_king_type();
  static const int kKingTypeFieldNumber = 8;
  inline ::GPKIGN_TYPE king_type() const;
  inline void set_king_type(::GPKIGN_TYPE value);

  // repeated int32 cbChongGuang = 9;
  inline int cbchongguang_size() const;
  inline void clear_cbchongguang();
  static const int kCbChongGuangFieldNumber = 9;
  inline ::google::protobuf::int32 cbchongguang(int index) const;
  inline void set_cbchongguang(int index, ::google::protobuf::int32 value);
  inline void add_cbchongguang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbchongguang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbchongguang();

  // repeated int32 cbBaWangKing = 10;
  inline int cbbawangking_size() const;
  inline void clear_cbbawangking();
  static const int kCbBaWangKingFieldNumber = 10;
  inline ::google::protobuf::int32 cbbawangking(int index) const;
  inline void set_cbbawangking(int index, ::google::protobuf::int32 value);
  inline void add_cbbawangking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbbawangking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbbawangking();

  // @@protoc_insertion_point(class_scope:ProGPGameKingData)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_king_type();
  inline void clear_has_king_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > downkingscore_;
  ::google::protobuf::int32 seat_;
  int notify_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kingcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > viceking_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbchongguang_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbbawangking_;
  int king_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameKingData* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameOutMahsResponse : public ::google::protobuf::Message {
 public:
  ProGPGameOutMahsResponse();
  virtual ~ProGPGameOutMahsResponse();

  ProGPGameOutMahsResponse(const ProGPGameOutMahsResponse& from);

  inline ProGPGameOutMahsResponse& operator=(const ProGPGameOutMahsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameOutMahsResponse& default_instance();

  void Swap(ProGPGameOutMahsResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameOutMahsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameOutMahsResponse& from);
  void MergeFrom(const ProGPGameOutMahsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameOutMahsResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameOutMahsResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameOutMahsResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameOutMahsResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameOutMahsResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameOutMahsResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameOutMahsResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameOutMahsResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameOutMahsResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 outMahs = 3;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 3;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // repeated int32 handmahs = 4;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 4;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // optional int32 cardCount = 5;
  inline bool has_cardcount() const;
  inline void clear_cardcount();
  static const int kCardCountFieldNumber = 5;
  inline ::google::protobuf::int32 cardcount() const;
  inline void set_cardcount(::google::protobuf::int32 value);

  // optional int32 cardType = 6;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 6;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // optional int32 seriesFlag = 7;
  inline bool has_seriesflag() const;
  inline void clear_seriesflag();
  static const int kSeriesFlagFieldNumber = 7;
  inline ::google::protobuf::int32 seriesflag() const;
  inline void set_seriesflag(::google::protobuf::int32 value);

  // optional int32 seriesNums = 8;
  inline bool has_seriesnums() const;
  inline void clear_seriesnums();
  static const int kSeriesNumsFieldNumber = 8;
  inline ::google::protobuf::int32 seriesnums() const;
  inline void set_seriesnums(::google::protobuf::int32 value);

  // optional int32 point = 9;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 9;
  inline ::google::protobuf::int32 point() const;
  inline void set_point(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameOutMahsResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cardcount();
  inline void clear_has_cardcount();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_seriesflag();
  inline void clear_has_seriesflag();
  inline void set_has_seriesnums();
  inline void clear_has_seriesnums();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cardcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 seriesflag_;
  ::google::protobuf::int32 seriesnums_;
  ::google::protobuf::int32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameOutMahsResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameTimerPower : public ::google::protobuf::Message {
 public:
  ProGPGameTimerPower();
  virtual ~ProGPGameTimerPower();

  ProGPGameTimerPower(const ProGPGameTimerPower& from);

  inline ProGPGameTimerPower& operator=(const ProGPGameTimerPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameTimerPower& default_instance();

  void Swap(ProGPGameTimerPower* other);

  // implements Message ----------------------------------------------

  ProGPGameTimerPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameTimerPower& from);
  void MergeFrom(const ProGPGameTimerPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameTimerPower_MSGID MSGID;
  static const MSGID ID = ProGPGameTimerPower_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameTimerPower_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameTimerPower_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameTimerPower_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameTimerPower_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameTimerPower_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameTimerPower_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameTimerPower_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 outcardTime = 4;
  inline bool has_outcardtime() const;
  inline void clear_outcardtime();
  static const int kOutcardTimeFieldNumber = 4;
  inline ::google::protobuf::int32 outcardtime() const;
  inline void set_outcardtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameTimerPower)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_outcardtime();
  inline void clear_has_outcardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 outcardtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameTimerPower* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameOperateNotify : public ::google::protobuf::Message {
 public:
  ProGPGameOperateNotify();
  virtual ~ProGPGameOperateNotify();

  ProGPGameOperateNotify(const ProGPGameOperateNotify& from);

  inline ProGPGameOperateNotify& operator=(const ProGPGameOperateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameOperateNotify& default_instance();

  void Swap(ProGPGameOperateNotify* other);

  // implements Message ----------------------------------------------

  ProGPGameOperateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameOperateNotify& from);
  void MergeFrom(const ProGPGameOperateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameOperateNotify_MSGID MSGID;
  static const MSGID ID = ProGPGameOperateNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameOperateNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameOperateNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameOperateNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameOperateNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameOperateNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameOperateNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameOperateNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 resumeSeat = 2;
  inline bool has_resumeseat() const;
  inline void clear_resumeseat();
  static const int kResumeSeatFieldNumber = 2;
  inline ::google::protobuf::int32 resumeseat() const;
  inline void set_resumeseat(::google::protobuf::int32 value);

  // optional int32 ActionMask = 3;
  inline bool has_actionmask() const;
  inline void clear_actionmask();
  static const int kActionMaskFieldNumber = 3;
  inline ::google::protobuf::int32 actionmask() const;
  inline void set_actionmask(::google::protobuf::int32 value);

  // optional int32 ActionCard = 4;
  inline bool has_actioncard() const;
  inline void clear_actioncard();
  static const int kActionCardFieldNumber = 4;
  inline ::google::protobuf::int32 actioncard() const;
  inline void set_actioncard(::google::protobuf::int32 value);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 operateseat = 6;
  inline bool has_operateseat() const;
  inline void clear_operateseat();
  static const int kOperateseatFieldNumber = 6;
  inline ::google::protobuf::int32 operateseat() const;
  inline void set_operateseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameOperateNotify)
 private:
  inline void set_has_resumeseat();
  inline void clear_has_resumeseat();
  inline void set_has_actionmask();
  inline void clear_has_actionmask();
  inline void set_has_actioncard();
  inline void clear_has_actioncard();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_operateseat();
  inline void clear_has_operateseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resumeseat_;
  ::google::protobuf::int32 actionmask_;
  ::google::protobuf::int32 actioncard_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 operateseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameOperateNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameOperateResult : public ::google::protobuf::Message {
 public:
  ProGPGameOperateResult();
  virtual ~ProGPGameOperateResult();

  ProGPGameOperateResult(const ProGPGameOperateResult& from);

  inline ProGPGameOperateResult& operator=(const ProGPGameOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameOperateResult& default_instance();

  void Swap(ProGPGameOperateResult* other);

  // implements Message ----------------------------------------------

  ProGPGameOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameOperateResult& from);
  void MergeFrom(const ProGPGameOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameOperateResult_MSGID MSGID;
  static const MSGID ID = ProGPGameOperateResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameOperateResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameOperateResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameOperateResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameOperateResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameOperateResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameOperateResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameOperateResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 wOperateUser = 2;
  inline bool has_woperateuser() const;
  inline void clear_woperateuser();
  static const int kWOperateUserFieldNumber = 2;
  inline ::google::protobuf::int32 woperateuser() const;
  inline void set_woperateuser(::google::protobuf::int32 value);

  // optional int32 wProvideUser = 3;
  inline bool has_wprovideuser() const;
  inline void clear_wprovideuser();
  static const int kWProvideUserFieldNumber = 3;
  inline ::google::protobuf::int32 wprovideuser() const;
  inline void set_wprovideuser(::google::protobuf::int32 value);

  // optional int32 wOperateCode = 4;
  inline bool has_woperatecode() const;
  inline void clear_woperatecode();
  static const int kWOperateCodeFieldNumber = 4;
  inline ::google::protobuf::int32 woperatecode() const;
  inline void set_woperatecode(::google::protobuf::int32 value);

  // optional int32 cbOperateCard = 5;
  inline bool has_cboperatecard() const;
  inline void clear_cboperatecard();
  static const int kCbOperateCardFieldNumber = 5;
  inline ::google::protobuf::int32 cboperatecard() const;
  inline void set_cboperatecard(::google::protobuf::int32 value);

  // repeated int32 handmahs = 6;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 6;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // optional int32 handcount = 7;
  inline bool has_handcount() const;
  inline void clear_handcount();
  static const int kHandcountFieldNumber = 7;
  inline ::google::protobuf::int32 handcount() const;
  inline void set_handcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameOperateResult)
 private:
  inline void set_has_woperateuser();
  inline void clear_has_woperateuser();
  inline void set_has_wprovideuser();
  inline void clear_has_wprovideuser();
  inline void set_has_woperatecode();
  inline void clear_has_woperatecode();
  inline void set_has_cboperatecard();
  inline void clear_has_cboperatecard();
  inline void set_has_handcount();
  inline void clear_has_handcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 woperateuser_;
  ::google::protobuf::int32 wprovideuser_;
  ::google::protobuf::int32 woperatecode_;
  ::google::protobuf::int32 cboperatecard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 handcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameOperateResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameOperateRequest : public ::google::protobuf::Message {
 public:
  ProGPGameOperateRequest();
  virtual ~ProGPGameOperateRequest();

  ProGPGameOperateRequest(const ProGPGameOperateRequest& from);

  inline ProGPGameOperateRequest& operator=(const ProGPGameOperateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameOperateRequest& default_instance();

  void Swap(ProGPGameOperateRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameOperateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameOperateRequest& from);
  void MergeFrom(const ProGPGameOperateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameOperateRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameOperateRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameOperateRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameOperateRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameOperateRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameOperateRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameOperateRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameOperateRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameOperateRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 wOperateCode = 3;
  inline bool has_woperatecode() const;
  inline void clear_woperatecode();
  static const int kWOperateCodeFieldNumber = 3;
  inline ::google::protobuf::int32 woperatecode() const;
  inline void set_woperatecode(::google::protobuf::int32 value);

  // optional int32 cbOperateCard = 4;
  inline bool has_cboperatecard() const;
  inline void clear_cboperatecard();
  static const int kCbOperateCardFieldNumber = 4;
  inline ::google::protobuf::int32 cboperatecard() const;
  inline void set_cboperatecard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameOperateRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_woperatecode();
  inline void clear_has_woperatecode();
  inline void set_has_cboperatecard();
  inline void clear_has_cboperatecard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 woperatecode_;
  ::google::protobuf::int32 cboperatecard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameOperateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameTrust : public ::google::protobuf::Message {
 public:
  ProGPGameTrust();
  virtual ~ProGPGameTrust();

  ProGPGameTrust(const ProGPGameTrust& from);

  inline ProGPGameTrust& operator=(const ProGPGameTrust& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameTrust& default_instance();

  void Swap(ProGPGameTrust* other);

  // implements Message ----------------------------------------------

  ProGPGameTrust* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameTrust& from);
  void MergeFrom(const ProGPGameTrust& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameTrust_MSGID MSGID;
  static const MSGID ID = ProGPGameTrust_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameTrust_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameTrust_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameTrust_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameTrust_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameTrust_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameTrust_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameTrust_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional bool isTrust = 3;
  inline bool has_istrust() const;
  inline void clear_istrust();
  static const int kIsTrustFieldNumber = 3;
  inline bool istrust() const;
  inline void set_istrust(bool value);

  // @@protoc_insertion_point(class_scope:ProGPGameTrust)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_istrust();
  inline void clear_has_istrust();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  bool istrust_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameTrust* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameOutMahRequest : public ::google::protobuf::Message {
 public:
  ProGPGameOutMahRequest();
  virtual ~ProGPGameOutMahRequest();

  ProGPGameOutMahRequest(const ProGPGameOutMahRequest& from);

  inline ProGPGameOutMahRequest& operator=(const ProGPGameOutMahRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameOutMahRequest& default_instance();

  void Swap(ProGPGameOutMahRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameOutMahRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameOutMahRequest& from);
  void MergeFrom(const ProGPGameOutMahRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameOutMahRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameOutMahRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameOutMahRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameOutMahRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameOutMahRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameOutMahRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameOutMahRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameOutMahRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameOutMahRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 outMahs = 3;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 3;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // @@protoc_insertion_point(class_scope:ProGPGameOutMahRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameOutMahRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameCatchCard : public ::google::protobuf::Message {
 public:
  ProGPGameCatchCard();
  virtual ~ProGPGameCatchCard();

  ProGPGameCatchCard(const ProGPGameCatchCard& from);

  inline ProGPGameCatchCard& operator=(const ProGPGameCatchCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameCatchCard& default_instance();

  void Swap(ProGPGameCatchCard* other);

  // implements Message ----------------------------------------------

  ProGPGameCatchCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameCatchCard& from);
  void MergeFrom(const ProGPGameCatchCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameCatchCard_MSGID MSGID;
  static const MSGID ID = ProGPGameCatchCard_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameCatchCard_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameCatchCard_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameCatchCard_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameCatchCard_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameCatchCard_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameCatchCard_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameCatchCard_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 cbCardData = 3;
  inline bool has_cbcarddata() const;
  inline void clear_cbcarddata();
  static const int kCbCardDataFieldNumber = 3;
  inline ::google::protobuf::int32 cbcarddata() const;
  inline void set_cbcarddata(::google::protobuf::int32 value);

  // optional int32 wActionMask = 4;
  inline bool has_wactionmask() const;
  inline void clear_wactionmask();
  static const int kWActionMaskFieldNumber = 4;
  inline ::google::protobuf::int32 wactionmask() const;
  inline void set_wactionmask(::google::protobuf::int32 value);

  // optional bool cbIsNotGang = 5;
  inline bool has_cbisnotgang() const;
  inline void clear_cbisnotgang();
  static const int kCbIsNotGangFieldNumber = 5;
  inline bool cbisnotgang() const;
  inline void set_cbisnotgang(bool value);

  // optional int32 cbLeftCount = 6;
  inline bool has_cbleftcount() const;
  inline void clear_cbleftcount();
  static const int kCbLeftCountFieldNumber = 6;
  inline ::google::protobuf::int32 cbleftcount() const;
  inline void set_cbleftcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameCatchCard)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cbcarddata();
  inline void clear_has_cbcarddata();
  inline void set_has_wactionmask();
  inline void clear_has_wactionmask();
  inline void set_has_cbisnotgang();
  inline void clear_has_cbisnotgang();
  inline void set_has_cbleftcount();
  inline void clear_has_cbleftcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cbcarddata_;
  ::google::protobuf::int32 wactionmask_;
  bool cbisnotgang_;
  ::google::protobuf::int32 cbleftcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameCatchCard* default_instance_;
};
// -------------------------------------------------------------------

class GPMahList : public ::google::protobuf::Message {
 public:
  GPMahList();
  virtual ~GPMahList();

  GPMahList(const GPMahList& from);

  inline GPMahList& operator=(const GPMahList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPMahList& default_instance();

  void Swap(GPMahList* other);

  // implements Message ----------------------------------------------

  GPMahList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPMahList& from);
  void MergeFrom(const GPMahList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Mahs = 1;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 1;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // @@protoc_insertion_point(class_scope:GPMahList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static GPMahList* default_instance_;
};
// -------------------------------------------------------------------

class GPScoreList : public ::google::protobuf::Message {
 public:
  GPScoreList();
  virtual ~GPScoreList();

  GPScoreList(const GPScoreList& from);

  inline GPScoreList& operator=(const GPScoreList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPScoreList& default_instance();

  void Swap(GPScoreList* other);

  // implements Message ----------------------------------------------

  GPScoreList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPScoreList& from);
  void MergeFrom(const GPScoreList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 roundScore = 1;
  inline int roundscore_size() const;
  inline void clear_roundscore();
  static const int kRoundScoreFieldNumber = 1;
  inline ::google::protobuf::int32 roundscore(int index) const;
  inline void set_roundscore(int index, ::google::protobuf::int32 value);
  inline void add_roundscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roundscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roundscore();

  // @@protoc_insertion_point(class_scope:GPScoreList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roundscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static GPScoreList* default_instance_;
};
// -------------------------------------------------------------------

class GPAwardList : public ::google::protobuf::Message {
 public:
  GPAwardList();
  virtual ~GPAwardList();

  GPAwardList(const GPAwardList& from);

  inline GPAwardList& operator=(const GPAwardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPAwardList& default_instance();

  void Swap(GPAwardList* other);

  // implements Message ----------------------------------------------

  GPAwardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPAwardList& from);
  void MergeFrom(const GPAwardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 CardsData = 2;
  inline int cardsdata_size() const;
  inline void clear_cardsdata();
  static const int kCardsDataFieldNumber = 2;
  inline ::google::protobuf::int32 cardsdata(int index) const;
  inline void set_cardsdata(int index, ::google::protobuf::int32 value);
  inline void add_cardsdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardsdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardsdata();

  // optional int32 awardScore = 3;
  inline bool has_awardscore() const;
  inline void clear_awardscore();
  static const int kAwardScoreFieldNumber = 3;
  inline ::google::protobuf::int32 awardscore() const;
  inline void set_awardscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GPAwardList)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_awardscore();
  inline void clear_has_awardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardsdata_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 awardscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static GPAwardList* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameEnd : public ::google::protobuf::Message {
 public:
  ProGPGameEnd();
  virtual ~ProGPGameEnd();

  ProGPGameEnd(const ProGPGameEnd& from);

  inline ProGPGameEnd& operator=(const ProGPGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameEnd& default_instance();

  void Swap(ProGPGameEnd* other);

  // implements Message ----------------------------------------------

  ProGPGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameEnd& from);
  void MergeFrom(const ProGPGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameEnd_MSGID MSGID;
  static const MSGID ID = ProGPGameEnd_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameEnd_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameEnd_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameEnd_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameEnd_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameEnd_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameEnd_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameEnd_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 lGameTax = 2;
  inline bool has_lgametax() const;
  inline void clear_lgametax();
  static const int kLGameTaxFieldNumber = 2;
  inline ::google::protobuf::int32 lgametax() const;
  inline void set_lgametax(::google::protobuf::int32 value);

  // repeated int32 cbChongGuang = 3;
  inline int cbchongguang_size() const;
  inline void clear_cbchongguang();
  static const int kCbChongGuangFieldNumber = 3;
  inline ::google::protobuf::int32 cbchongguang(int index) const;
  inline void set_cbchongguang(int index, ::google::protobuf::int32 value);
  inline void add_cbchongguang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbchongguang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbchongguang();

  // repeated int32 cbBaWangKing = 4;
  inline int cbbawangking_size() const;
  inline void clear_cbbawangking();
  static const int kCbBaWangKingFieldNumber = 4;
  inline ::google::protobuf::int32 cbbawangking(int index) const;
  inline void set_cbbawangking(int index, ::google::protobuf::int32 value);
  inline void add_cbbawangking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbbawangking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbbawangking();

  // optional int32 wProvideUser = 5;
  inline bool has_wprovideuser() const;
  inline void clear_wprovideuser();
  static const int kWProvideUserFieldNumber = 5;
  inline ::google::protobuf::int32 wprovideuser() const;
  inline void set_wprovideuser(::google::protobuf::int32 value);

  // optional int32 cbChiHuCard = 6;
  inline bool has_cbchihucard() const;
  inline void clear_cbchihucard();
  static const int kCbChiHuCardFieldNumber = 6;
  inline ::google::protobuf::int32 cbchihucard() const;
  inline void set_cbchihucard(::google::protobuf::int32 value);

  // repeated int32 dwChiHuKind = 7;
  inline int dwchihukind_size() const;
  inline void clear_dwchihukind();
  static const int kDwChiHuKindFieldNumber = 7;
  inline ::google::protobuf::int32 dwchihukind(int index) const;
  inline void set_dwchihukind(int index, ::google::protobuf::int32 value);
  inline void add_dwchihukind(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwchihukind() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwchihukind();

  // repeated int32 dwChiHuRight = 8;
  inline int dwchihuright_size() const;
  inline void clear_dwchihuright();
  static const int kDwChiHuRightFieldNumber = 8;
  inline ::google::protobuf::int32 dwchihuright(int index) const;
  inline void set_dwchihuright(int index, ::google::protobuf::int32 value);
  inline void add_dwchihuright(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwchihuright() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwchihuright();

  // repeated int32 lTotaslGameScore = 9;
  inline int ltotaslgamescore_size() const;
  inline void clear_ltotaslgamescore();
  static const int kLTotaslGameScoreFieldNumber = 9;
  inline ::google::protobuf::int32 ltotaslgamescore(int index) const;
  inline void set_ltotaslgamescore(int index, ::google::protobuf::int32 value);
  inline void add_ltotaslgamescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ltotaslgamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ltotaslgamescore();

  // repeated int32 lCurrentGameScore = 10;
  inline int lcurrentgamescore_size() const;
  inline void clear_lcurrentgamescore();
  static const int kLCurrentGameScoreFieldNumber = 10;
  inline ::google::protobuf::int32 lcurrentgamescore(int index) const;
  inline void set_lcurrentgamescore(int index, ::google::protobuf::int32 value);
  inline void add_lcurrentgamescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lcurrentgamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lcurrentgamescore();

  // repeated int32 lCurrentPointScore = 11;
  inline int lcurrentpointscore_size() const;
  inline void clear_lcurrentpointscore();
  static const int kLCurrentPointScoreFieldNumber = 11;
  inline ::google::protobuf::int32 lcurrentpointscore(int index) const;
  inline void set_lcurrentpointscore(int index, ::google::protobuf::int32 value);
  inline void add_lcurrentpointscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lcurrentpointscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lcurrentpointscore();

  // repeated int32 lAttachScore = 12;
  inline int lattachscore_size() const;
  inline void clear_lattachscore();
  static const int kLAttachScoreFieldNumber = 12;
  inline ::google::protobuf::int32 lattachscore(int index) const;
  inline void set_lattachscore(int index, ::google::protobuf::int32 value);
  inline void add_lattachscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lattachscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lattachscore();

  // repeated .GPMahList cbHandCardData = 13;
  inline int cbhandcarddata_size() const;
  inline void clear_cbhandcarddata();
  static const int kCbHandCardDataFieldNumber = 13;
  inline const ::GPMahList& cbhandcarddata(int index) const;
  inline ::GPMahList* mutable_cbhandcarddata(int index);
  inline ::GPMahList* add_cbhandcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GPMahList >&
      cbhandcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GPMahList >*
      mutable_cbhandcarddata();

  // repeated .GPAwardList cbAwardCardData = 14;
  inline int cbawardcarddata_size() const;
  inline void clear_cbawardcarddata();
  static const int kCbAwardCardDataFieldNumber = 14;
  inline const ::GPAwardList& cbawardcarddata(int index) const;
  inline ::GPAwardList* mutable_cbawardcarddata(int index);
  inline ::GPAwardList* add_cbawardcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GPAwardList >&
      cbawardcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GPAwardList >*
      mutable_cbawardcarddata();

  // repeated int32 lOnlyWinScore = 15;
  inline int lonlywinscore_size() const;
  inline void clear_lonlywinscore();
  static const int kLOnlyWinScoreFieldNumber = 15;
  inline ::google::protobuf::int32 lonlywinscore(int index) const;
  inline void set_lonlywinscore(int index, ::google::protobuf::int32 value);
  inline void add_lonlywinscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lonlywinscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lonlywinscore();

  // optional bool bRoundEnd = 16;
  inline bool has_broundend() const;
  inline void clear_broundend();
  static const int kBRoundEndFieldNumber = 16;
  inline bool broundend() const;
  inline void set_broundend(bool value);

  // repeated int32 lHuiTouScore = 17;
  inline int lhuitouscore_size() const;
  inline void clear_lhuitouscore();
  static const int kLHuiTouScoreFieldNumber = 17;
  inline ::google::protobuf::int32 lhuitouscore(int index) const;
  inline void set_lhuitouscore(int index, ::google::protobuf::int32 value);
  inline void add_lhuitouscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lhuitouscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lhuitouscore();

  // optional bool bZhuangWin = 18;
  inline bool has_bzhuangwin() const;
  inline void clear_bzhuangwin();
  static const int kBZhuangWinFieldNumber = 18;
  inline bool bzhuangwin() const;
  inline void set_bzhuangwin(bool value);

  // repeated int32 cbJiangMaCardData = 19;
  inline int cbjiangmacarddata_size() const;
  inline void clear_cbjiangmacarddata();
  static const int kCbJiangMaCardDataFieldNumber = 19;
  inline ::google::protobuf::int32 cbjiangmacarddata(int index) const;
  inline void set_cbjiangmacarddata(int index, ::google::protobuf::int32 value);
  inline void add_cbjiangmacarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbjiangmacarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbjiangmacarddata();

  // repeated .GPScoreList detailedScores = 20;
  inline int detailedscores_size() const;
  inline void clear_detailedscores();
  static const int kDetailedScoresFieldNumber = 20;
  inline const ::GPScoreList& detailedscores(int index) const;
  inline ::GPScoreList* mutable_detailedscores(int index);
  inline ::GPScoreList* add_detailedscores();
  inline const ::google::protobuf::RepeatedPtrField< ::GPScoreList >&
      detailedscores() const;
  inline ::google::protobuf::RepeatedPtrField< ::GPScoreList >*
      mutable_detailedscores();

  // optional int32 fangShuiSaet = 21;
  inline bool has_fangshuisaet() const;
  inline void clear_fangshuisaet();
  static const int kFangShuiSaetFieldNumber = 21;
  inline ::google::protobuf::int32 fangshuisaet() const;
  inline void set_fangshuisaet(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameEnd)
 private:
  inline void set_has_lgametax();
  inline void clear_has_lgametax();
  inline void set_has_wprovideuser();
  inline void clear_has_wprovideuser();
  inline void set_has_cbchihucard();
  inline void clear_has_cbchihucard();
  inline void set_has_broundend();
  inline void clear_has_broundend();
  inline void set_has_bzhuangwin();
  inline void clear_has_bzhuangwin();
  inline void set_has_fangshuisaet();
  inline void clear_has_fangshuisaet();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbchongguang_;
  ::google::protobuf::int32 lgametax_;
  ::google::protobuf::int32 wprovideuser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbbawangking_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwchihukind_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwchihuright_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ltotaslgamescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lcurrentgamescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lcurrentpointscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lattachscore_;
  ::google::protobuf::RepeatedPtrField< ::GPMahList > cbhandcarddata_;
  ::google::protobuf::int32 cbchihucard_;
  bool broundend_;
  bool bzhuangwin_;
  ::google::protobuf::RepeatedPtrField< ::GPAwardList > cbawardcarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lonlywinscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lhuitouscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbjiangmacarddata_;
  ::google::protobuf::RepeatedPtrField< ::GPScoreList > detailedscores_;
  ::google::protobuf::int32 fangshuisaet_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameQuickSoundRequest : public ::google::protobuf::Message {
 public:
  ProGPGameQuickSoundRequest();
  virtual ~ProGPGameQuickSoundRequest();

  ProGPGameQuickSoundRequest(const ProGPGameQuickSoundRequest& from);

  inline ProGPGameQuickSoundRequest& operator=(const ProGPGameQuickSoundRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameQuickSoundRequest& default_instance();

  void Swap(ProGPGameQuickSoundRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameQuickSoundRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameQuickSoundRequest& from);
  void MergeFrom(const ProGPGameQuickSoundRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameQuickSoundRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameQuickSoundRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameQuickSoundRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameQuickSoundRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameQuickSoundRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameQuickSoundRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameQuickSoundRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameQuickSoundRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameQuickSoundRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 desk_id = 2;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 desk_id() const;
  inline void set_desk_id(::google::protobuf::int32 value);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 sound_id = 4;
  inline bool has_sound_id() const;
  inline void clear_sound_id();
  static const int kSoundIdFieldNumber = 4;
  inline ::google::protobuf::int32 sound_id() const;
  inline void set_sound_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ProGPGameQuickSoundRequest)
 private:
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_sound_id();
  inline void clear_has_sound_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 desk_id_;
  ::google::protobuf::int32 seat_id_;
  ::std::string* text_;
  ::google::protobuf::int32 sound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameQuickSoundRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameQuickSoundResponse : public ::google::protobuf::Message {
 public:
  ProGPGameQuickSoundResponse();
  virtual ~ProGPGameQuickSoundResponse();

  ProGPGameQuickSoundResponse(const ProGPGameQuickSoundResponse& from);

  inline ProGPGameQuickSoundResponse& operator=(const ProGPGameQuickSoundResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameQuickSoundResponse& default_instance();

  void Swap(ProGPGameQuickSoundResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameQuickSoundResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameQuickSoundResponse& from);
  void MergeFrom(const ProGPGameQuickSoundResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameQuickSoundResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameQuickSoundResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameQuickSoundResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameQuickSoundResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameQuickSoundResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameQuickSoundResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameQuickSoundResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameQuickSoundResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameQuickSoundResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 desk_id = 2;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 desk_id() const;
  inline void set_desk_id(::google::protobuf::int32 value);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 sound_id = 4;
  inline bool has_sound_id() const;
  inline void clear_sound_id();
  static const int kSoundIdFieldNumber = 4;
  inline ::google::protobuf::int32 sound_id() const;
  inline void set_sound_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ProGPGameQuickSoundResponse)
 private:
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_sound_id();
  inline void clear_has_sound_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 desk_id_;
  ::google::protobuf::int32 seat_id_;
  ::std::string* text_;
  ::google::protobuf::int32 sound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameQuickSoundResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameSendDiscardMahs : public ::google::protobuf::Message {
 public:
  ProGPGameSendDiscardMahs();
  virtual ~ProGPGameSendDiscardMahs();

  ProGPGameSendDiscardMahs(const ProGPGameSendDiscardMahs& from);

  inline ProGPGameSendDiscardMahs& operator=(const ProGPGameSendDiscardMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameSendDiscardMahs& default_instance();

  void Swap(ProGPGameSendDiscardMahs* other);

  // implements Message ----------------------------------------------

  ProGPGameSendDiscardMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameSendDiscardMahs& from);
  void MergeFrom(const ProGPGameSendDiscardMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameSendDiscardMahs_MSGID MSGID;
  static const MSGID ID = ProGPGameSendDiscardMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameSendDiscardMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameSendDiscardMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameSendDiscardMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameSendDiscardMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameSendDiscardMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameSendDiscardMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameSendDiscardMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // repeated .GPMahList cbCardData = 3;
  inline int cbcarddata_size() const;
  inline void clear_cbcarddata();
  static const int kCbCardDataFieldNumber = 3;
  inline const ::GPMahList& cbcarddata(int index) const;
  inline ::GPMahList* mutable_cbcarddata(int index);
  inline ::GPMahList* add_cbcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GPMahList >&
      cbcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GPMahList >*
      mutable_cbcarddata();

  // optional int32 deskCount = 4;
  inline bool has_deskcount() const;
  inline void clear_deskcount();
  static const int kDeskCountFieldNumber = 4;
  inline ::google::protobuf::int32 deskcount() const;
  inline void set_deskcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameSendDiscardMahs)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_deskcount();
  inline void clear_has_deskcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GPMahList > cbcarddata_;
  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 deskcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameSendDiscardMahs* default_instance_;
};
// -------------------------------------------------------------------

class GPWeaveItem : public ::google::protobuf::Message {
 public:
  GPWeaveItem();
  virtual ~GPWeaveItem();

  GPWeaveItem(const GPWeaveItem& from);

  inline GPWeaveItem& operator=(const GPWeaveItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPWeaveItem& default_instance();

  void Swap(GPWeaveItem* other);

  // implements Message ----------------------------------------------

  GPWeaveItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPWeaveItem& from);
  void MergeFrom(const GPWeaveItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 weaveKind = 1;
  inline bool has_weavekind() const;
  inline void clear_weavekind();
  static const int kWeaveKindFieldNumber = 1;
  inline ::google::protobuf::int32 weavekind() const;
  inline void set_weavekind(::google::protobuf::int32 value);

  // optional int32 centercard = 2;
  inline bool has_centercard() const;
  inline void clear_centercard();
  static const int kCentercardFieldNumber = 2;
  inline ::google::protobuf::int32 centercard() const;
  inline void set_centercard(::google::protobuf::int32 value);

  // optional int32 provideUser = 3;
  inline bool has_provideuser() const;
  inline void clear_provideuser();
  static const int kProvideUserFieldNumber = 3;
  inline ::google::protobuf::int32 provideuser() const;
  inline void set_provideuser(::google::protobuf::int32 value);

  // optional int32 cardsize = 4;
  inline bool has_cardsize() const;
  inline void clear_cardsize();
  static const int kCardsizeFieldNumber = 4;
  inline ::google::protobuf::int32 cardsize() const;
  inline void set_cardsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GPWeaveItem)
 private:
  inline void set_has_weavekind();
  inline void clear_has_weavekind();
  inline void set_has_centercard();
  inline void clear_has_centercard();
  inline void set_has_provideuser();
  inline void clear_has_provideuser();
  inline void set_has_cardsize();
  inline void clear_has_cardsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 weavekind_;
  ::google::protobuf::int32 centercard_;
  ::google::protobuf::int32 provideuser_;
  ::google::protobuf::int32 cardsize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static GPWeaveItem* default_instance_;
};
// -------------------------------------------------------------------

class GPWeaveItems : public ::google::protobuf::Message {
 public:
  GPWeaveItems();
  virtual ~GPWeaveItems();

  GPWeaveItems(const GPWeaveItems& from);

  inline GPWeaveItems& operator=(const GPWeaveItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPWeaveItems& default_instance();

  void Swap(GPWeaveItems* other);

  // implements Message ----------------------------------------------

  GPWeaveItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPWeaveItems& from);
  void MergeFrom(const GPWeaveItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GPWeaveItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::GPWeaveItem& items(int index) const;
  inline ::GPWeaveItem* mutable_items(int index);
  inline ::GPWeaveItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::GPWeaveItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::GPWeaveItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:GPWeaveItems)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GPWeaveItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static GPWeaveItems* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameSendActionMahs : public ::google::protobuf::Message {
 public:
  ProGPGameSendActionMahs();
  virtual ~ProGPGameSendActionMahs();

  ProGPGameSendActionMahs(const ProGPGameSendActionMahs& from);

  inline ProGPGameSendActionMahs& operator=(const ProGPGameSendActionMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameSendActionMahs& default_instance();

  void Swap(ProGPGameSendActionMahs* other);

  // implements Message ----------------------------------------------

  ProGPGameSendActionMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameSendActionMahs& from);
  void MergeFrom(const ProGPGameSendActionMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameSendActionMahs_MSGID MSGID;
  static const MSGID ID = ProGPGameSendActionMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameSendActionMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameSendActionMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameSendActionMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameSendActionMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameSendActionMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameSendActionMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameSendActionMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // repeated .GPWeaveItems weaves = 3;
  inline int weaves_size() const;
  inline void clear_weaves();
  static const int kWeavesFieldNumber = 3;
  inline const ::GPWeaveItems& weaves(int index) const;
  inline ::GPWeaveItems* mutable_weaves(int index);
  inline ::GPWeaveItems* add_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::GPWeaveItems >&
      weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::GPWeaveItems >*
      mutable_weaves();

  // @@protoc_insertion_point(class_scope:ProGPGameSendActionMahs)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GPWeaveItems > weaves_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameSendActionMahs* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameBrokenRequest : public ::google::protobuf::Message {
 public:
  ProGPGameBrokenRequest();
  virtual ~ProGPGameBrokenRequest();

  ProGPGameBrokenRequest(const ProGPGameBrokenRequest& from);

  inline ProGPGameBrokenRequest& operator=(const ProGPGameBrokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameBrokenRequest& default_instance();

  void Swap(ProGPGameBrokenRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameBrokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameBrokenRequest& from);
  void MergeFrom(const ProGPGameBrokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameBrokenRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameBrokenRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameBrokenRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameBrokenRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameBrokenRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameBrokenRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameBrokenRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameBrokenRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameBrokenRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .GPBROKEN_TYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::GPBROKEN_TYPE type() const;
  inline void set_type(::GPBROKEN_TYPE value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameBrokenRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int type_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameBrokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameBrokenOperate : public ::google::protobuf::Message {
 public:
  ProGPGameBrokenOperate();
  virtual ~ProGPGameBrokenOperate();

  ProGPGameBrokenOperate(const ProGPGameBrokenOperate& from);

  inline ProGPGameBrokenOperate& operator=(const ProGPGameBrokenOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameBrokenOperate& default_instance();

  void Swap(ProGPGameBrokenOperate* other);

  // implements Message ----------------------------------------------

  ProGPGameBrokenOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameBrokenOperate& from);
  void MergeFrom(const ProGPGameBrokenOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameBrokenOperate_MSGID MSGID;
  static const MSGID ID = ProGPGameBrokenOperate_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameBrokenOperate_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameBrokenOperate_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameBrokenOperate_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameBrokenOperate_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameBrokenOperate_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameBrokenOperate_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameBrokenOperate_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .GPBROKEN_OPERATE result = 3 [default = GP_BO_DISAGREE];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::GPBROKEN_OPERATE result() const;
  inline void set_result(::GPBROKEN_OPERATE value);

  // @@protoc_insertion_point(class_scope:ProGPGameBrokenOperate)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameBrokenOperate* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameBrokenNotify : public ::google::protobuf::Message {
 public:
  ProGPGameBrokenNotify();
  virtual ~ProGPGameBrokenNotify();

  ProGPGameBrokenNotify(const ProGPGameBrokenNotify& from);

  inline ProGPGameBrokenNotify& operator=(const ProGPGameBrokenNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameBrokenNotify& default_instance();

  void Swap(ProGPGameBrokenNotify* other);

  // implements Message ----------------------------------------------

  ProGPGameBrokenNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameBrokenNotify& from);
  void MergeFrom(const ProGPGameBrokenNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameBrokenNotify_MSGID MSGID;
  static const MSGID ID = ProGPGameBrokenNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameBrokenNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameBrokenNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameBrokenNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameBrokenNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameBrokenNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameBrokenNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameBrokenNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .GPBROKEN_CODE operate_code = 3 [default = GP_BC_SUCCESS];
  inline bool has_operate_code() const;
  inline void clear_operate_code();
  static const int kOperateCodeFieldNumber = 3;
  inline ::GPBROKEN_CODE operate_code() const;
  inline void set_operate_code(::GPBROKEN_CODE value);

  // @@protoc_insertion_point(class_scope:ProGPGameBrokenNotify)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_operate_code();
  inline void clear_has_operate_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int operate_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameBrokenNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameRuleConfig : public ::google::protobuf::Message {
 public:
  ProGPGameRuleConfig();
  virtual ~ProGPGameRuleConfig();

  ProGPGameRuleConfig(const ProGPGameRuleConfig& from);

  inline ProGPGameRuleConfig& operator=(const ProGPGameRuleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameRuleConfig& default_instance();

  void Swap(ProGPGameRuleConfig* other);

  // implements Message ----------------------------------------------

  ProGPGameRuleConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameRuleConfig& from);
  void MergeFrom(const ProGPGameRuleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameRuleConfig_MSGID MSGID;
  static const MSGID ID = ProGPGameRuleConfig_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameRuleConfig_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameRuleConfig_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameRuleConfig_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameRuleConfig_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameRuleConfig_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameRuleConfig_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameRuleConfig_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 game_round = 1;
  inline bool has_game_round() const;
  inline void clear_game_round();
  static const int kGameRoundFieldNumber = 1;
  inline ::google::protobuf::int32 game_round() const;
  inline void set_game_round(::google::protobuf::int32 value);

  // optional int32 need_card = 2;
  inline bool has_need_card() const;
  inline void clear_need_card();
  static const int kNeedCardFieldNumber = 2;
  inline ::google::protobuf::int32 need_card() const;
  inline void set_need_card(::google::protobuf::int32 value);

  // optional bool have_MagicCard = 3;
  inline bool has_have_magiccard() const;
  inline void clear_have_magiccard();
  static const int kHaveMagicCardFieldNumber = 3;
  inline bool have_magiccard() const;
  inline void set_have_magiccard(bool value);

  // optional bool have_RedPeach3FirstOut = 4;
  inline bool has_have_redpeach3firstout() const;
  inline void clear_have_redpeach3firstout();
  static const int kHaveRedPeach3FirstOutFieldNumber = 4;
  inline bool have_redpeach3firstout() const;
  inline void set_have_redpeach3firstout(bool value);

  // optional bool hava_MustOutCard = 5;
  inline bool has_hava_mustoutcard() const;
  inline void clear_hava_mustoutcard();
  static const int kHavaMustOutCardFieldNumber = 5;
  inline bool hava_mustoutcard() const;
  inline void set_hava_mustoutcard(bool value);

  // optional int32 nMasterSeat = 6;
  inline bool has_nmasterseat() const;
  inline void clear_nmasterseat();
  static const int kNMasterSeatFieldNumber = 6;
  inline ::google::protobuf::int32 nmasterseat() const;
  inline void set_nmasterseat(::google::protobuf::int32 value);

  // optional int32 current_game_count = 7;
  inline bool has_current_game_count() const;
  inline void clear_current_game_count();
  static const int kCurrentGameCountFieldNumber = 7;
  inline ::google::protobuf::int32 current_game_count() const;
  inline void set_current_game_count(::google::protobuf::int32 value);

  // optional bool have_jianma = 8;
  inline bool has_have_jianma() const;
  inline void clear_have_jianma();
  static const int kHaveJianmaFieldNumber = 8;
  inline bool have_jianma() const;
  inline void set_have_jianma(bool value);

  // optional int32 nChongguanNum = 9;
  inline bool has_nchongguannum() const;
  inline void clear_nchongguannum();
  static const int kNChongguanNumFieldNumber = 9;
  inline ::google::protobuf::int32 nchongguannum() const;
  inline void set_nchongguannum(::google::protobuf::int32 value);

  // optional bool hava_BaoPei = 10;
  inline bool has_hava_baopei() const;
  inline void clear_hava_baopei();
  static const int kHavaBaoPeiFieldNumber = 10;
  inline bool hava_baopei() const;
  inline void set_hava_baopei(bool value);

  // optional int32 nPlayerNum = 11;
  inline bool has_nplayernum() const;
  inline void clear_nplayernum();
  static const int kNPlayerNumFieldNumber = 11;
  inline ::google::protobuf::int32 nplayernum() const;
  inline void set_nplayernum(::google::protobuf::int32 value);

  // optional bytes sRoomNum = 12;
  inline bool has_sroomnum() const;
  inline void clear_sroomnum();
  static const int kSRoomNumFieldNumber = 12;
  inline const ::std::string& sroomnum() const;
  inline void set_sroomnum(const ::std::string& value);
  inline void set_sroomnum(const char* value);
  inline void set_sroomnum(const void* value, size_t size);
  inline ::std::string* mutable_sroomnum();
  inline ::std::string* release_sroomnum();
  inline void set_allocated_sroomnum(::std::string* sroomnum);

  // optional bytes sPlayTime = 13;
  inline bool has_splaytime() const;
  inline void clear_splaytime();
  static const int kSPlayTimeFieldNumber = 13;
  inline const ::std::string& splaytime() const;
  inline void set_splaytime(const ::std::string& value);
  inline void set_splaytime(const char* value);
  inline void set_splaytime(const void* value, size_t size);
  inline ::std::string* mutable_splaytime();
  inline ::std::string* release_splaytime();
  inline void set_allocated_splaytime(::std::string* splaytime);

  // @@protoc_insertion_point(class_scope:ProGPGameRuleConfig)
 private:
  inline void set_has_game_round();
  inline void clear_has_game_round();
  inline void set_has_need_card();
  inline void clear_has_need_card();
  inline void set_has_have_magiccard();
  inline void clear_has_have_magiccard();
  inline void set_has_have_redpeach3firstout();
  inline void clear_has_have_redpeach3firstout();
  inline void set_has_hava_mustoutcard();
  inline void clear_has_hava_mustoutcard();
  inline void set_has_nmasterseat();
  inline void clear_has_nmasterseat();
  inline void set_has_current_game_count();
  inline void clear_has_current_game_count();
  inline void set_has_have_jianma();
  inline void clear_has_have_jianma();
  inline void set_has_nchongguannum();
  inline void clear_has_nchongguannum();
  inline void set_has_hava_baopei();
  inline void clear_has_hava_baopei();
  inline void set_has_nplayernum();
  inline void clear_has_nplayernum();
  inline void set_has_sroomnum();
  inline void clear_has_sroomnum();
  inline void set_has_splaytime();
  inline void clear_has_splaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_round_;
  ::google::protobuf::int32 need_card_;
  bool have_magiccard_;
  bool have_redpeach3firstout_;
  bool hava_mustoutcard_;
  bool have_jianma_;
  ::google::protobuf::int32 nmasterseat_;
  ::google::protobuf::int32 current_game_count_;
  ::google::protobuf::int32 nchongguannum_;
  bool hava_baopei_;
  ::google::protobuf::int32 nplayernum_;
  ::std::string* sroomnum_;
  ::std::string* splaytime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameRuleConfig* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameBrokenStatus : public ::google::protobuf::Message {
 public:
  ProGPGameBrokenStatus();
  virtual ~ProGPGameBrokenStatus();

  ProGPGameBrokenStatus(const ProGPGameBrokenStatus& from);

  inline ProGPGameBrokenStatus& operator=(const ProGPGameBrokenStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameBrokenStatus& default_instance();

  void Swap(ProGPGameBrokenStatus* other);

  // implements Message ----------------------------------------------

  ProGPGameBrokenStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameBrokenStatus& from);
  void MergeFrom(const ProGPGameBrokenStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameBrokenStatus_MSGID MSGID;
  static const MSGID ID = ProGPGameBrokenStatus_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameBrokenStatus_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameBrokenStatus_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameBrokenStatus_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameBrokenStatus_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameBrokenStatus_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameBrokenStatus_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameBrokenStatus_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 broken_seat = 1;
  inline bool has_broken_seat() const;
  inline void clear_broken_seat();
  static const int kBrokenSeatFieldNumber = 1;
  inline ::google::protobuf::int32 broken_seat() const;
  inline void set_broken_seat(::google::protobuf::int32 value);

  // repeated bool broken_status = 2;
  inline int broken_status_size() const;
  inline void clear_broken_status();
  static const int kBrokenStatusFieldNumber = 2;
  inline bool broken_status(int index) const;
  inline void set_broken_status(int index, bool value);
  inline void add_broken_status(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      broken_status() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_broken_status();

  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameBrokenStatus)
 private:
  inline void set_has_broken_seat();
  inline void clear_has_broken_seat();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > broken_status_;
  ::google::protobuf::int32 broken_seat_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameBrokenStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameDataResp : public ::google::protobuf::Message {
 public:
  ProGPGameDataResp();
  virtual ~ProGPGameDataResp();

  ProGPGameDataResp(const ProGPGameDataResp& from);

  inline ProGPGameDataResp& operator=(const ProGPGameDataResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameDataResp& default_instance();

  void Swap(ProGPGameDataResp* other);

  // implements Message ----------------------------------------------

  ProGPGameDataResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameDataResp& from);
  void MergeFrom(const ProGPGameDataResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameDataResp_MSGID MSGID;
  static const MSGID ID = ProGPGameDataResp_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameDataResp_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameDataResp_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameDataResp_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameDataResp_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameDataResp_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameDataResp_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameDataResp_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 total_score = 1;
  inline int total_score_size() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 1;
  inline ::google::protobuf::int32 total_score(int index) const;
  inline void set_total_score(int index, ::google::protobuf::int32 value);
  inline void add_total_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_score();

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 boomPlaayerSeat = 3;
  inline bool has_boomplaayerseat() const;
  inline void clear_boomplaayerseat();
  static const int kBoomPlaayerSeatFieldNumber = 3;
  inline ::google::protobuf::int32 boomplaayerseat() const;
  inline void set_boomplaayerseat(::google::protobuf::int32 value);

  // optional bool isboom = 4;
  inline bool has_isboom() const;
  inline void clear_isboom();
  static const int kIsboomFieldNumber = 4;
  inline bool isboom() const;
  inline void set_isboom(bool value);

  // @@protoc_insertion_point(class_scope:ProGPGameDataResp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_boomplaayerseat();
  inline void clear_has_boomplaayerseat();
  inline void set_has_isboom();
  inline void clear_has_isboom();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_score_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 boomplaayerseat_;
  bool isboom_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameDataResp* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameRecordRequest : public ::google::protobuf::Message {
 public:
  ProGPGameRecordRequest();
  virtual ~ProGPGameRecordRequest();

  ProGPGameRecordRequest(const ProGPGameRecordRequest& from);

  inline ProGPGameRecordRequest& operator=(const ProGPGameRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameRecordRequest& default_instance();

  void Swap(ProGPGameRecordRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameRecordRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameRecordRequest& from);
  void MergeFrom(const ProGPGameRecordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameRecordRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameRecordRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameRecordRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameRecordRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameRecordRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameRecordRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameRecordRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameRecordRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameRecordRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ProGPGameRecordRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameRecordRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameRecordResponse : public ::google::protobuf::Message {
 public:
  ProGPGameRecordResponse();
  virtual ~ProGPGameRecordResponse();

  ProGPGameRecordResponse(const ProGPGameRecordResponse& from);

  inline ProGPGameRecordResponse& operator=(const ProGPGameRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameRecordResponse& default_instance();

  void Swap(ProGPGameRecordResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameRecordResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameRecordResponse& from);
  void MergeFrom(const ProGPGameRecordResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameRecordResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameRecordResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameRecordResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameRecordResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameRecordResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameRecordResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameRecordResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameRecordResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameRecordResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ProGPGameRecordResponse)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameRecordResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserLocationRequest : public ::google::protobuf::Message {
 public:
  ProGPGameUserLocationRequest();
  virtual ~ProGPGameUserLocationRequest();

  ProGPGameUserLocationRequest(const ProGPGameUserLocationRequest& from);

  inline ProGPGameUserLocationRequest& operator=(const ProGPGameUserLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserLocationRequest& default_instance();

  void Swap(ProGPGameUserLocationRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameUserLocationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserLocationRequest& from);
  void MergeFrom(const ProGPGameUserLocationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserLocationRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameUserLocationRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserLocationRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserLocationRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserLocationRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserLocationRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserLocationRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserLocationRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserLocationRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional double dwlongitude = 2;
  inline bool has_dwlongitude() const;
  inline void clear_dwlongitude();
  static const int kDwlongitudeFieldNumber = 2;
  inline double dwlongitude() const;
  inline void set_dwlongitude(double value);

  // optional double dwlatitude = 3;
  inline bool has_dwlatitude() const;
  inline void clear_dwlatitude();
  static const int kDwlatitudeFieldNumber = 3;
  inline double dwlatitude() const;
  inline void set_dwlatitude(double value);

  // optional bytes strDistrict = 4;
  inline bool has_strdistrict() const;
  inline void clear_strdistrict();
  static const int kStrDistrictFieldNumber = 4;
  inline const ::std::string& strdistrict() const;
  inline void set_strdistrict(const ::std::string& value);
  inline void set_strdistrict(const char* value);
  inline void set_strdistrict(const void* value, size_t size);
  inline ::std::string* mutable_strdistrict();
  inline ::std::string* release_strdistrict();
  inline void set_allocated_strdistrict(::std::string* strdistrict);

  // optional bytes strStreetName = 5;
  inline bool has_strstreetname() const;
  inline void clear_strstreetname();
  static const int kStrStreetNameFieldNumber = 5;
  inline const ::std::string& strstreetname() const;
  inline void set_strstreetname(const ::std::string& value);
  inline void set_strstreetname(const char* value);
  inline void set_strstreetname(const void* value, size_t size);
  inline ::std::string* mutable_strstreetname();
  inline ::std::string* release_strstreetname();
  inline void set_allocated_strstreetname(::std::string* strstreetname);

  // @@protoc_insertion_point(class_scope:ProGPGameUserLocationRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_dwlongitude();
  inline void clear_has_dwlongitude();
  inline void set_has_dwlatitude();
  inline void clear_has_dwlatitude();
  inline void set_has_strdistrict();
  inline void clear_has_strdistrict();
  inline void set_has_strstreetname();
  inline void clear_has_strstreetname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double dwlongitude_;
  double dwlatitude_;
  ::std::string* strdistrict_;
  ::std::string* strstreetname_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserLocationRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameSyncCardResponse : public ::google::protobuf::Message {
 public:
  ProGPGameSyncCardResponse();
  virtual ~ProGPGameSyncCardResponse();

  ProGPGameSyncCardResponse(const ProGPGameSyncCardResponse& from);

  inline ProGPGameSyncCardResponse& operator=(const ProGPGameSyncCardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameSyncCardResponse& default_instance();

  void Swap(ProGPGameSyncCardResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameSyncCardResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameSyncCardResponse& from);
  void MergeFrom(const ProGPGameSyncCardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameSyncCardResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameSyncCardResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameSyncCardResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameSyncCardResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameSyncCardResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameSyncCardResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameSyncCardResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameSyncCardResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameSyncCardResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 handmahs = 3;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 3;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // @@protoc_insertion_point(class_scope:ProGPGameSyncCardResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameSyncCardResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserPhoneStatusRequest : public ::google::protobuf::Message {
 public:
  ProGPGameUserPhoneStatusRequest();
  virtual ~ProGPGameUserPhoneStatusRequest();

  ProGPGameUserPhoneStatusRequest(const ProGPGameUserPhoneStatusRequest& from);

  inline ProGPGameUserPhoneStatusRequest& operator=(const ProGPGameUserPhoneStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserPhoneStatusRequest& default_instance();

  void Swap(ProGPGameUserPhoneStatusRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameUserPhoneStatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserPhoneStatusRequest& from);
  void MergeFrom(const ProGPGameUserPhoneStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserPhoneStatusRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameUserPhoneStatusRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserPhoneStatusRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserPhoneStatusRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserPhoneStatusRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserPhoneStatusRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserPhoneStatusRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserPhoneStatusRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserPhoneStatusRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 userstatus = 2;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserstatusFieldNumber = 2;
  inline ::google::protobuf::int32 userstatus() const;
  inline void set_userstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameUserPhoneStatusRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 userstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserPhoneStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserGiveUpRequest : public ::google::protobuf::Message {
 public:
  ProGPGameUserGiveUpRequest();
  virtual ~ProGPGameUserGiveUpRequest();

  ProGPGameUserGiveUpRequest(const ProGPGameUserGiveUpRequest& from);

  inline ProGPGameUserGiveUpRequest& operator=(const ProGPGameUserGiveUpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserGiveUpRequest& default_instance();

  void Swap(ProGPGameUserGiveUpRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameUserGiveUpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserGiveUpRequest& from);
  void MergeFrom(const ProGPGameUserGiveUpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserGiveUpRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameUserGiveUpRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserGiveUpRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserGiveUpRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserGiveUpRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserGiveUpRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserGiveUpRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserGiveUpRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserGiveUpRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameUserGiveUpRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserGiveUpRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserHintRequest : public ::google::protobuf::Message {
 public:
  ProGPGameUserHintRequest();
  virtual ~ProGPGameUserHintRequest();

  ProGPGameUserHintRequest(const ProGPGameUserHintRequest& from);

  inline ProGPGameUserHintRequest& operator=(const ProGPGameUserHintRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserHintRequest& default_instance();

  void Swap(ProGPGameUserHintRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameUserHintRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserHintRequest& from);
  void MergeFrom(const ProGPGameUserHintRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserHintRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameUserHintRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserHintRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserHintRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserHintRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserHintRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserHintRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserHintRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserHintRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProGPGameUserHintRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserHintRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserHintResponse : public ::google::protobuf::Message {
 public:
  ProGPGameUserHintResponse();
  virtual ~ProGPGameUserHintResponse();

  ProGPGameUserHintResponse(const ProGPGameUserHintResponse& from);

  inline ProGPGameUserHintResponse& operator=(const ProGPGameUserHintResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserHintResponse& default_instance();

  void Swap(ProGPGameUserHintResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameUserHintResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserHintResponse& from);
  void MergeFrom(const ProGPGameUserHintResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserHintResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameUserHintResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserHintResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserHintResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserHintResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserHintResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserHintResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserHintResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserHintResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 lenth = 1;
  inline bool has_lenth() const;
  inline void clear_lenth();
  static const int kLenthFieldNumber = 1;
  inline ::google::protobuf::int32 lenth() const;
  inline void set_lenth(::google::protobuf::int32 value);

  // repeated int32 outMahs = 2;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 2;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // @@protoc_insertion_point(class_scope:ProGPGameUserHintResponse)
 private:
  inline void set_has_lenth();
  inline void clear_has_lenth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 lenth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserHintResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserCallScoreResponse : public ::google::protobuf::Message {
 public:
  ProGPGameUserCallScoreResponse();
  virtual ~ProGPGameUserCallScoreResponse();

  ProGPGameUserCallScoreResponse(const ProGPGameUserCallScoreResponse& from);

  inline ProGPGameUserCallScoreResponse& operator=(const ProGPGameUserCallScoreResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserCallScoreResponse& default_instance();

  void Swap(ProGPGameUserCallScoreResponse* other);

  // implements Message ----------------------------------------------

  ProGPGameUserCallScoreResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserCallScoreResponse& from);
  void MergeFrom(const ProGPGameUserCallScoreResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserCallScoreResponse_MSGID MSGID;
  static const MSGID ID = ProGPGameUserCallScoreResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserCallScoreResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserCallScoreResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserCallScoreResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserCallScoreResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserCallScoreResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserCallScoreResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserCallScoreResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 usercallscore = 2;
  inline bool has_usercallscore() const;
  inline void clear_usercallscore();
  static const int kUsercallscoreFieldNumber = 2;
  inline ::google::protobuf::int32 usercallscore() const;
  inline void set_usercallscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameUserCallScoreResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_usercallscore();
  inline void clear_has_usercallscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 usercallscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserCallScoreResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGPGameUserCallScoreRequest : public ::google::protobuf::Message {
 public:
  ProGPGameUserCallScoreRequest();
  virtual ~ProGPGameUserCallScoreRequest();

  ProGPGameUserCallScoreRequest(const ProGPGameUserCallScoreRequest& from);

  inline ProGPGameUserCallScoreRequest& operator=(const ProGPGameUserCallScoreRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGPGameUserCallScoreRequest& default_instance();

  void Swap(ProGPGameUserCallScoreRequest* other);

  // implements Message ----------------------------------------------

  ProGPGameUserCallScoreRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGPGameUserCallScoreRequest& from);
  void MergeFrom(const ProGPGameUserCallScoreRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGPGameUserCallScoreRequest_MSGID MSGID;
  static const MSGID ID = ProGPGameUserCallScoreRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGPGameUserCallScoreRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGPGameUserCallScoreRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGPGameUserCallScoreRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGPGameUserCallScoreRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGPGameUserCallScoreRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGPGameUserCallScoreRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGPGameUserCallScoreRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 usercallscore = 2;
  inline bool has_usercallscore() const;
  inline void clear_usercallscore();
  static const int kUsercallscoreFieldNumber = 2;
  inline ::google::protobuf::int32 usercallscore() const;
  inline void set_usercallscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGPGameUserCallScoreRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_usercallscore();
  inline void clear_has_usercallscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 usercallscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gppk_2eproto();
  friend void protobuf_AssignDesc_gppk_2eproto();
  friend void protobuf_ShutdownFile_gppk_2eproto();

  void InitAsDefaultInstance();
  static ProGPGameUserCallScoreRequest* default_instance_;
};
// ===================================================================


// ===================================================================

// ProGPGameStatusResponse

// optional .GPGameState status = 2;
inline bool ProGPGameStatusResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameStatusResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameStatusResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameStatusResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::GPGameState ProGPGameStatusResponse::status() const {
  return static_cast< ::GPGameState >(status_);
}
inline void ProGPGameStatusResponse::set_status(::GPGameState value) {
  assert(::GPGameState_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// ProGPGameDeskInfoResponse

// optional int32 CellScore = 2;
inline bool ProGPGameDeskInfoResponse::has_cellscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameDeskInfoResponse::set_has_cellscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameDeskInfoResponse::clear_has_cellscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameDeskInfoResponse::clear_cellscore() {
  cellscore_ = 0;
  clear_has_cellscore();
}
inline ::google::protobuf::int32 ProGPGameDeskInfoResponse::cellscore() const {
  return cellscore_;
}
inline void ProGPGameDeskInfoResponse::set_cellscore(::google::protobuf::int32 value) {
  set_has_cellscore();
  cellscore_ = value;
}

// -------------------------------------------------------------------

// ProGPGameReadyNotify

// optional int32 seat = 2;
inline bool ProGPGameReadyNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameReadyNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameReadyNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameReadyNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameReadyNotify::seat() const {
  return seat_;
}
inline void ProGPGameReadyNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProGPGameReadyNotify::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameReadyNotify::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameReadyNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameReadyNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGPGameReadyNotify::time() const {
  return time_;
}
inline void ProGPGameReadyNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProGPGameReadyRequest

// optional int32 seat = 2;
inline bool ProGPGameReadyRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameReadyRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameReadyRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameReadyRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameReadyRequest::seat() const {
  return seat_;
}
inline void ProGPGameReadyRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProGPGameReadyResponse

// optional int32 seat = 2;
inline bool ProGPGameReadyResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameReadyResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameReadyResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameReadyResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameReadyResponse::seat() const {
  return seat_;
}
inline void ProGPGameReadyResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProGPGameStart

// optional int32 bankerseat = 2;
inline bool ProGPGameStart::has_bankerseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameStart::set_has_bankerseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameStart::clear_has_bankerseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameStart::clear_bankerseat() {
  bankerseat_ = 0;
  clear_has_bankerseat();
}
inline ::google::protobuf::int32 ProGPGameStart::bankerseat() const {
  return bankerseat_;
}
inline void ProGPGameStart::set_bankerseat(::google::protobuf::int32 value) {
  set_has_bankerseat();
  bankerseat_ = value;
}

// optional int32 gamecount = 3;
inline bool ProGPGameStart::has_gamecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameStart::set_has_gamecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameStart::clear_has_gamecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameStart::clear_gamecount() {
  gamecount_ = 0;
  clear_has_gamecount();
}
inline ::google::protobuf::int32 ProGPGameStart::gamecount() const {
  return gamecount_;
}
inline void ProGPGameStart::set_gamecount(::google::protobuf::int32 value) {
  set_has_gamecount();
  gamecount_ = value;
}

// optional int32 outCardtimes = 4;
inline bool ProGPGameStart::has_outcardtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameStart::set_has_outcardtimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameStart::clear_has_outcardtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameStart::clear_outcardtimes() {
  outcardtimes_ = 0;
  clear_has_outcardtimes();
}
inline ::google::protobuf::int32 ProGPGameStart::outcardtimes() const {
  return outcardtimes_;
}
inline void ProGPGameStart::set_outcardtimes(::google::protobuf::int32 value) {
  set_has_outcardtimes();
  outcardtimes_ = value;
}

// -------------------------------------------------------------------

// ProGPGameDiceNotify

// optional int32 seat = 2;
inline bool ProGPGameDiceNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameDiceNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameDiceNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameDiceNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameDiceNotify::seat() const {
  return seat_;
}
inline void ProGPGameDiceNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProGPGameDiceNotify::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameDiceNotify::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameDiceNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameDiceNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGPGameDiceNotify::time() const {
  return time_;
}
inline void ProGPGameDiceNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 dicecount = 4;
inline bool ProGPGameDiceNotify::has_dicecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameDiceNotify::set_has_dicecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameDiceNotify::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameDiceNotify::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProGPGameDiceNotify::dicecount() const {
  return dicecount_;
}
inline void ProGPGameDiceNotify::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProGPGameDiceRequest

// optional int32 seat = 2;
inline bool ProGPGameDiceRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameDiceRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameDiceRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameDiceRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameDiceRequest::seat() const {
  return seat_;
}
inline void ProGPGameDiceRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 dicecount = 3;
inline bool ProGPGameDiceRequest::has_dicecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameDiceRequest::set_has_dicecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameDiceRequest::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameDiceRequest::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProGPGameDiceRequest::dicecount() const {
  return dicecount_;
}
inline void ProGPGameDiceRequest::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProGPGameDiceResult

// optional int32 seat = 2;
inline bool ProGPGameDiceResult::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameDiceResult::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameDiceResult::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameDiceResult::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameDiceResult::seat() const {
  return seat_;
}
inline void ProGPGameDiceResult::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 result = 3;
inline int ProGPGameDiceResult::result_size() const {
  return result_.size();
}
inline void ProGPGameDiceResult::clear_result() {
  result_.Clear();
}
inline ::google::protobuf::int32 ProGPGameDiceResult::result(int index) const {
  return result_.Get(index);
}
inline void ProGPGameDiceResult::set_result(int index, ::google::protobuf::int32 value) {
  result_.Set(index, value);
}
inline void ProGPGameDiceResult::add_result(::google::protobuf::int32 value) {
  result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameDiceResult::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameDiceResult::mutable_result() {
  return &result_;
}

// optional int32 dicecount = 4;
inline bool ProGPGameDiceResult::has_dicecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameDiceResult::set_has_dicecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameDiceResult::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameDiceResult::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProGPGameDiceResult::dicecount() const {
  return dicecount_;
}
inline void ProGPGameDiceResult::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProGPGameSendMahs

// optional int32 seat = 2;
inline bool ProGPGameSendMahs::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameSendMahs::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameSendMahs::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameSendMahs::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameSendMahs::seat() const {
  return seat_;
}
inline void ProGPGameSendMahs::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 mahs = 3;
inline int ProGPGameSendMahs::mahs_size() const {
  return mahs_.size();
}
inline void ProGPGameSendMahs::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameSendMahs::mahs(int index) const {
  return mahs_.Get(index);
}
inline void ProGPGameSendMahs::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void ProGPGameSendMahs::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameSendMahs::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameSendMahs::mutable_mahs() {
  return &mahs_;
}

// repeated int32 mahscount = 4;
inline int ProGPGameSendMahs::mahscount_size() const {
  return mahscount_.size();
}
inline void ProGPGameSendMahs::clear_mahscount() {
  mahscount_.Clear();
}
inline ::google::protobuf::int32 ProGPGameSendMahs::mahscount(int index) const {
  return mahscount_.Get(index);
}
inline void ProGPGameSendMahs::set_mahscount(int index, ::google::protobuf::int32 value) {
  mahscount_.Set(index, value);
}
inline void ProGPGameSendMahs::add_mahscount(::google::protobuf::int32 value) {
  mahscount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameSendMahs::mahscount() const {
  return mahscount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameSendMahs::mutable_mahscount() {
  return &mahscount_;
}

// optional int32 cbLeftCount = 5;
inline bool ProGPGameSendMahs::has_cbleftcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameSendMahs::set_has_cbleftcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameSendMahs::clear_has_cbleftcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameSendMahs::clear_cbleftcount() {
  cbleftcount_ = 0;
  clear_has_cbleftcount();
}
inline ::google::protobuf::int32 ProGPGameSendMahs::cbleftcount() const {
  return cbleftcount_;
}
inline void ProGPGameSendMahs::set_cbleftcount(::google::protobuf::int32 value) {
  set_has_cbleftcount();
  cbleftcount_ = value;
}

// optional int32 magicCardLogicValue = 6;
inline bool ProGPGameSendMahs::has_magiccardlogicvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameSendMahs::set_has_magiccardlogicvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameSendMahs::clear_has_magiccardlogicvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameSendMahs::clear_magiccardlogicvalue() {
  magiccardlogicvalue_ = 0;
  clear_has_magiccardlogicvalue();
}
inline ::google::protobuf::int32 ProGPGameSendMahs::magiccardlogicvalue() const {
  return magiccardlogicvalue_;
}
inline void ProGPGameSendMahs::set_magiccardlogicvalue(::google::protobuf::int32 value) {
  set_has_magiccardlogicvalue();
  magiccardlogicvalue_ = value;
}

// optional bool bRecome = 7;
inline bool ProGPGameSendMahs::has_brecome() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGPGameSendMahs::set_has_brecome() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGPGameSendMahs::clear_has_brecome() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGPGameSendMahs::clear_brecome() {
  brecome_ = false;
  clear_has_brecome();
}
inline bool ProGPGameSendMahs::brecome() const {
  return brecome_;
}
inline void ProGPGameSendMahs::set_brecome(bool value) {
  set_has_brecome();
  brecome_ = value;
}

// -------------------------------------------------------------------

// ProGPGameKingData

// optional int32 seat = 2;
inline bool ProGPGameKingData::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameKingData::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameKingData::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameKingData::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameKingData::seat() const {
  return seat_;
}
inline void ProGPGameKingData::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 mahs = 3;
inline int ProGPGameKingData::mahs_size() const {
  return mahs_.size();
}
inline void ProGPGameKingData::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameKingData::mahs(int index) const {
  return mahs_.Get(index);
}
inline void ProGPGameKingData::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void ProGPGameKingData::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameKingData::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameKingData::mutable_mahs() {
  return &mahs_;
}

// repeated int32 downKingScore = 4;
inline int ProGPGameKingData::downkingscore_size() const {
  return downkingscore_.size();
}
inline void ProGPGameKingData::clear_downkingscore() {
  downkingscore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameKingData::downkingscore(int index) const {
  return downkingscore_.Get(index);
}
inline void ProGPGameKingData::set_downkingscore(int index, ::google::protobuf::int32 value) {
  downkingscore_.Set(index, value);
}
inline void ProGPGameKingData::add_downkingscore(::google::protobuf::int32 value) {
  downkingscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameKingData::downkingscore() const {
  return downkingscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameKingData::mutable_downkingscore() {
  return &downkingscore_;
}

// repeated int32 kingcount = 5;
inline int ProGPGameKingData::kingcount_size() const {
  return kingcount_.size();
}
inline void ProGPGameKingData::clear_kingcount() {
  kingcount_.Clear();
}
inline ::google::protobuf::int32 ProGPGameKingData::kingcount(int index) const {
  return kingcount_.Get(index);
}
inline void ProGPGameKingData::set_kingcount(int index, ::google::protobuf::int32 value) {
  kingcount_.Set(index, value);
}
inline void ProGPGameKingData::add_kingcount(::google::protobuf::int32 value) {
  kingcount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameKingData::kingcount() const {
  return kingcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameKingData::mutable_kingcount() {
  return &kingcount_;
}

// repeated int32 viceking = 6;
inline int ProGPGameKingData::viceking_size() const {
  return viceking_.size();
}
inline void ProGPGameKingData::clear_viceking() {
  viceking_.Clear();
}
inline ::google::protobuf::int32 ProGPGameKingData::viceking(int index) const {
  return viceking_.Get(index);
}
inline void ProGPGameKingData::set_viceking(int index, ::google::protobuf::int32 value) {
  viceking_.Set(index, value);
}
inline void ProGPGameKingData::add_viceking(::google::protobuf::int32 value) {
  viceking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameKingData::viceking() const {
  return viceking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameKingData::mutable_viceking() {
  return &viceking_;
}

// optional .GPSEND_TYPE notify_type = 7 [default = GP_NORMAL_SEND];
inline bool ProGPGameKingData::has_notify_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGPGameKingData::set_has_notify_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGPGameKingData::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGPGameKingData::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::GPSEND_TYPE ProGPGameKingData::notify_type() const {
  return static_cast< ::GPSEND_TYPE >(notify_type_);
}
inline void ProGPGameKingData::set_notify_type(::GPSEND_TYPE value) {
  assert(::GPSEND_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// optional .GPKIGN_TYPE king_type = 8 [default = GP_KING_UP];
inline bool ProGPGameKingData::has_king_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProGPGameKingData::set_has_king_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProGPGameKingData::clear_has_king_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProGPGameKingData::clear_king_type() {
  king_type_ = 1;
  clear_has_king_type();
}
inline ::GPKIGN_TYPE ProGPGameKingData::king_type() const {
  return static_cast< ::GPKIGN_TYPE >(king_type_);
}
inline void ProGPGameKingData::set_king_type(::GPKIGN_TYPE value) {
  assert(::GPKIGN_TYPE_IsValid(value));
  set_has_king_type();
  king_type_ = value;
}

// repeated int32 cbChongGuang = 9;
inline int ProGPGameKingData::cbchongguang_size() const {
  return cbchongguang_.size();
}
inline void ProGPGameKingData::clear_cbchongguang() {
  cbchongguang_.Clear();
}
inline ::google::protobuf::int32 ProGPGameKingData::cbchongguang(int index) const {
  return cbchongguang_.Get(index);
}
inline void ProGPGameKingData::set_cbchongguang(int index, ::google::protobuf::int32 value) {
  cbchongguang_.Set(index, value);
}
inline void ProGPGameKingData::add_cbchongguang(::google::protobuf::int32 value) {
  cbchongguang_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameKingData::cbchongguang() const {
  return cbchongguang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameKingData::mutable_cbchongguang() {
  return &cbchongguang_;
}

// repeated int32 cbBaWangKing = 10;
inline int ProGPGameKingData::cbbawangking_size() const {
  return cbbawangking_.size();
}
inline void ProGPGameKingData::clear_cbbawangking() {
  cbbawangking_.Clear();
}
inline ::google::protobuf::int32 ProGPGameKingData::cbbawangking(int index) const {
  return cbbawangking_.Get(index);
}
inline void ProGPGameKingData::set_cbbawangking(int index, ::google::protobuf::int32 value) {
  cbbawangking_.Set(index, value);
}
inline void ProGPGameKingData::add_cbbawangking(::google::protobuf::int32 value) {
  cbbawangking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameKingData::cbbawangking() const {
  return cbbawangking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameKingData::mutable_cbbawangking() {
  return &cbbawangking_;
}

// -------------------------------------------------------------------

// ProGPGameOutMahsResponse

// optional int32 seat = 2;
inline bool ProGPGameOutMahsResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameOutMahsResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameOutMahsResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameOutMahsResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::seat() const {
  return seat_;
}
inline void ProGPGameOutMahsResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 outMahs = 3;
inline int ProGPGameOutMahsResponse::outmahs_size() const {
  return outmahs_.size();
}
inline void ProGPGameOutMahsResponse::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProGPGameOutMahsResponse::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProGPGameOutMahsResponse::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameOutMahsResponse::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameOutMahsResponse::mutable_outmahs() {
  return &outmahs_;
}

// repeated int32 handmahs = 4;
inline int ProGPGameOutMahsResponse::handmahs_size() const {
  return handmahs_.size();
}
inline void ProGPGameOutMahsResponse::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProGPGameOutMahsResponse::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProGPGameOutMahsResponse::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameOutMahsResponse::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameOutMahsResponse::mutable_handmahs() {
  return &handmahs_;
}

// optional int32 cardCount = 5;
inline bool ProGPGameOutMahsResponse::has_cardcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameOutMahsResponse::set_has_cardcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameOutMahsResponse::clear_has_cardcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameOutMahsResponse::clear_cardcount() {
  cardcount_ = 0;
  clear_has_cardcount();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::cardcount() const {
  return cardcount_;
}
inline void ProGPGameOutMahsResponse::set_cardcount(::google::protobuf::int32 value) {
  set_has_cardcount();
  cardcount_ = value;
}

// optional int32 cardType = 6;
inline bool ProGPGameOutMahsResponse::has_cardtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameOutMahsResponse::set_has_cardtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameOutMahsResponse::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameOutMahsResponse::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::cardtype() const {
  return cardtype_;
}
inline void ProGPGameOutMahsResponse::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// optional int32 seriesFlag = 7;
inline bool ProGPGameOutMahsResponse::has_seriesflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGPGameOutMahsResponse::set_has_seriesflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGPGameOutMahsResponse::clear_has_seriesflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGPGameOutMahsResponse::clear_seriesflag() {
  seriesflag_ = 0;
  clear_has_seriesflag();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::seriesflag() const {
  return seriesflag_;
}
inline void ProGPGameOutMahsResponse::set_seriesflag(::google::protobuf::int32 value) {
  set_has_seriesflag();
  seriesflag_ = value;
}

// optional int32 seriesNums = 8;
inline bool ProGPGameOutMahsResponse::has_seriesnums() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProGPGameOutMahsResponse::set_has_seriesnums() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProGPGameOutMahsResponse::clear_has_seriesnums() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProGPGameOutMahsResponse::clear_seriesnums() {
  seriesnums_ = 0;
  clear_has_seriesnums();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::seriesnums() const {
  return seriesnums_;
}
inline void ProGPGameOutMahsResponse::set_seriesnums(::google::protobuf::int32 value) {
  set_has_seriesnums();
  seriesnums_ = value;
}

// optional int32 point = 9;
inline bool ProGPGameOutMahsResponse::has_point() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProGPGameOutMahsResponse::set_has_point() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProGPGameOutMahsResponse::clear_has_point() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProGPGameOutMahsResponse::clear_point() {
  point_ = 0;
  clear_has_point();
}
inline ::google::protobuf::int32 ProGPGameOutMahsResponse::point() const {
  return point_;
}
inline void ProGPGameOutMahsResponse::set_point(::google::protobuf::int32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// ProGPGameTimerPower

// optional int32 seat = 2;
inline bool ProGPGameTimerPower::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameTimerPower::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameTimerPower::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameTimerPower::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameTimerPower::seat() const {
  return seat_;
}
inline void ProGPGameTimerPower::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProGPGameTimerPower::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameTimerPower::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameTimerPower::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameTimerPower::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGPGameTimerPower::time() const {
  return time_;
}
inline void ProGPGameTimerPower::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 outcardTime = 4;
inline bool ProGPGameTimerPower::has_outcardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameTimerPower::set_has_outcardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameTimerPower::clear_has_outcardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameTimerPower::clear_outcardtime() {
  outcardtime_ = 0;
  clear_has_outcardtime();
}
inline ::google::protobuf::int32 ProGPGameTimerPower::outcardtime() const {
  return outcardtime_;
}
inline void ProGPGameTimerPower::set_outcardtime(::google::protobuf::int32 value) {
  set_has_outcardtime();
  outcardtime_ = value;
}

// -------------------------------------------------------------------

// ProGPGameOperateNotify

// optional int32 resumeSeat = 2;
inline bool ProGPGameOperateNotify::has_resumeseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameOperateNotify::set_has_resumeseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameOperateNotify::clear_has_resumeseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameOperateNotify::clear_resumeseat() {
  resumeseat_ = 0;
  clear_has_resumeseat();
}
inline ::google::protobuf::int32 ProGPGameOperateNotify::resumeseat() const {
  return resumeseat_;
}
inline void ProGPGameOperateNotify::set_resumeseat(::google::protobuf::int32 value) {
  set_has_resumeseat();
  resumeseat_ = value;
}

// optional int32 ActionMask = 3;
inline bool ProGPGameOperateNotify::has_actionmask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameOperateNotify::set_has_actionmask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameOperateNotify::clear_has_actionmask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameOperateNotify::clear_actionmask() {
  actionmask_ = 0;
  clear_has_actionmask();
}
inline ::google::protobuf::int32 ProGPGameOperateNotify::actionmask() const {
  return actionmask_;
}
inline void ProGPGameOperateNotify::set_actionmask(::google::protobuf::int32 value) {
  set_has_actionmask();
  actionmask_ = value;
}

// optional int32 ActionCard = 4;
inline bool ProGPGameOperateNotify::has_actioncard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameOperateNotify::set_has_actioncard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameOperateNotify::clear_has_actioncard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameOperateNotify::clear_actioncard() {
  actioncard_ = 0;
  clear_has_actioncard();
}
inline ::google::protobuf::int32 ProGPGameOperateNotify::actioncard() const {
  return actioncard_;
}
inline void ProGPGameOperateNotify::set_actioncard(::google::protobuf::int32 value) {
  set_has_actioncard();
  actioncard_ = value;
}

// optional int32 time = 5;
inline bool ProGPGameOperateNotify::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameOperateNotify::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameOperateNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameOperateNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGPGameOperateNotify::time() const {
  return time_;
}
inline void ProGPGameOperateNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 operateseat = 6;
inline bool ProGPGameOperateNotify::has_operateseat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameOperateNotify::set_has_operateseat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameOperateNotify::clear_has_operateseat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameOperateNotify::clear_operateseat() {
  operateseat_ = 0;
  clear_has_operateseat();
}
inline ::google::protobuf::int32 ProGPGameOperateNotify::operateseat() const {
  return operateseat_;
}
inline void ProGPGameOperateNotify::set_operateseat(::google::protobuf::int32 value) {
  set_has_operateseat();
  operateseat_ = value;
}

// -------------------------------------------------------------------

// ProGPGameOperateResult

// optional int32 wOperateUser = 2;
inline bool ProGPGameOperateResult::has_woperateuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameOperateResult::set_has_woperateuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameOperateResult::clear_has_woperateuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameOperateResult::clear_woperateuser() {
  woperateuser_ = 0;
  clear_has_woperateuser();
}
inline ::google::protobuf::int32 ProGPGameOperateResult::woperateuser() const {
  return woperateuser_;
}
inline void ProGPGameOperateResult::set_woperateuser(::google::protobuf::int32 value) {
  set_has_woperateuser();
  woperateuser_ = value;
}

// optional int32 wProvideUser = 3;
inline bool ProGPGameOperateResult::has_wprovideuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameOperateResult::set_has_wprovideuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameOperateResult::clear_has_wprovideuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameOperateResult::clear_wprovideuser() {
  wprovideuser_ = 0;
  clear_has_wprovideuser();
}
inline ::google::protobuf::int32 ProGPGameOperateResult::wprovideuser() const {
  return wprovideuser_;
}
inline void ProGPGameOperateResult::set_wprovideuser(::google::protobuf::int32 value) {
  set_has_wprovideuser();
  wprovideuser_ = value;
}

// optional int32 wOperateCode = 4;
inline bool ProGPGameOperateResult::has_woperatecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameOperateResult::set_has_woperatecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameOperateResult::clear_has_woperatecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameOperateResult::clear_woperatecode() {
  woperatecode_ = 0;
  clear_has_woperatecode();
}
inline ::google::protobuf::int32 ProGPGameOperateResult::woperatecode() const {
  return woperatecode_;
}
inline void ProGPGameOperateResult::set_woperatecode(::google::protobuf::int32 value) {
  set_has_woperatecode();
  woperatecode_ = value;
}

// optional int32 cbOperateCard = 5;
inline bool ProGPGameOperateResult::has_cboperatecard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameOperateResult::set_has_cboperatecard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameOperateResult::clear_has_cboperatecard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameOperateResult::clear_cboperatecard() {
  cboperatecard_ = 0;
  clear_has_cboperatecard();
}
inline ::google::protobuf::int32 ProGPGameOperateResult::cboperatecard() const {
  return cboperatecard_;
}
inline void ProGPGameOperateResult::set_cboperatecard(::google::protobuf::int32 value) {
  set_has_cboperatecard();
  cboperatecard_ = value;
}

// repeated int32 handmahs = 6;
inline int ProGPGameOperateResult::handmahs_size() const {
  return handmahs_.size();
}
inline void ProGPGameOperateResult::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameOperateResult::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProGPGameOperateResult::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProGPGameOperateResult::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameOperateResult::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameOperateResult::mutable_handmahs() {
  return &handmahs_;
}

// optional int32 handcount = 7;
inline bool ProGPGameOperateResult::has_handcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGPGameOperateResult::set_has_handcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGPGameOperateResult::clear_has_handcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGPGameOperateResult::clear_handcount() {
  handcount_ = 0;
  clear_has_handcount();
}
inline ::google::protobuf::int32 ProGPGameOperateResult::handcount() const {
  return handcount_;
}
inline void ProGPGameOperateResult::set_handcount(::google::protobuf::int32 value) {
  set_has_handcount();
  handcount_ = value;
}

// -------------------------------------------------------------------

// ProGPGameOperateRequest

// optional int32 seat = 2;
inline bool ProGPGameOperateRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameOperateRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameOperateRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameOperateRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameOperateRequest::seat() const {
  return seat_;
}
inline void ProGPGameOperateRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 wOperateCode = 3;
inline bool ProGPGameOperateRequest::has_woperatecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameOperateRequest::set_has_woperatecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameOperateRequest::clear_has_woperatecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameOperateRequest::clear_woperatecode() {
  woperatecode_ = 0;
  clear_has_woperatecode();
}
inline ::google::protobuf::int32 ProGPGameOperateRequest::woperatecode() const {
  return woperatecode_;
}
inline void ProGPGameOperateRequest::set_woperatecode(::google::protobuf::int32 value) {
  set_has_woperatecode();
  woperatecode_ = value;
}

// optional int32 cbOperateCard = 4;
inline bool ProGPGameOperateRequest::has_cboperatecard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameOperateRequest::set_has_cboperatecard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameOperateRequest::clear_has_cboperatecard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameOperateRequest::clear_cboperatecard() {
  cboperatecard_ = 0;
  clear_has_cboperatecard();
}
inline ::google::protobuf::int32 ProGPGameOperateRequest::cboperatecard() const {
  return cboperatecard_;
}
inline void ProGPGameOperateRequest::set_cboperatecard(::google::protobuf::int32 value) {
  set_has_cboperatecard();
  cboperatecard_ = value;
}

// -------------------------------------------------------------------

// ProGPGameTrust

// optional int32 seat = 2;
inline bool ProGPGameTrust::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameTrust::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameTrust::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameTrust::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameTrust::seat() const {
  return seat_;
}
inline void ProGPGameTrust::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional bool isTrust = 3;
inline bool ProGPGameTrust::has_istrust() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameTrust::set_has_istrust() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameTrust::clear_has_istrust() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameTrust::clear_istrust() {
  istrust_ = false;
  clear_has_istrust();
}
inline bool ProGPGameTrust::istrust() const {
  return istrust_;
}
inline void ProGPGameTrust::set_istrust(bool value) {
  set_has_istrust();
  istrust_ = value;
}

// -------------------------------------------------------------------

// ProGPGameOutMahRequest

// optional int32 seat = 2;
inline bool ProGPGameOutMahRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameOutMahRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameOutMahRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameOutMahRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameOutMahRequest::seat() const {
  return seat_;
}
inline void ProGPGameOutMahRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 outMahs = 3;
inline int ProGPGameOutMahRequest::outmahs_size() const {
  return outmahs_.size();
}
inline void ProGPGameOutMahRequest::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameOutMahRequest::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProGPGameOutMahRequest::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProGPGameOutMahRequest::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameOutMahRequest::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameOutMahRequest::mutable_outmahs() {
  return &outmahs_;
}

// -------------------------------------------------------------------

// ProGPGameCatchCard

// optional int32 seat = 2;
inline bool ProGPGameCatchCard::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameCatchCard::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameCatchCard::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameCatchCard::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameCatchCard::seat() const {
  return seat_;
}
inline void ProGPGameCatchCard::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 cbCardData = 3;
inline bool ProGPGameCatchCard::has_cbcarddata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameCatchCard::set_has_cbcarddata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameCatchCard::clear_has_cbcarddata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameCatchCard::clear_cbcarddata() {
  cbcarddata_ = 0;
  clear_has_cbcarddata();
}
inline ::google::protobuf::int32 ProGPGameCatchCard::cbcarddata() const {
  return cbcarddata_;
}
inline void ProGPGameCatchCard::set_cbcarddata(::google::protobuf::int32 value) {
  set_has_cbcarddata();
  cbcarddata_ = value;
}

// optional int32 wActionMask = 4;
inline bool ProGPGameCatchCard::has_wactionmask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameCatchCard::set_has_wactionmask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameCatchCard::clear_has_wactionmask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameCatchCard::clear_wactionmask() {
  wactionmask_ = 0;
  clear_has_wactionmask();
}
inline ::google::protobuf::int32 ProGPGameCatchCard::wactionmask() const {
  return wactionmask_;
}
inline void ProGPGameCatchCard::set_wactionmask(::google::protobuf::int32 value) {
  set_has_wactionmask();
  wactionmask_ = value;
}

// optional bool cbIsNotGang = 5;
inline bool ProGPGameCatchCard::has_cbisnotgang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameCatchCard::set_has_cbisnotgang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameCatchCard::clear_has_cbisnotgang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameCatchCard::clear_cbisnotgang() {
  cbisnotgang_ = false;
  clear_has_cbisnotgang();
}
inline bool ProGPGameCatchCard::cbisnotgang() const {
  return cbisnotgang_;
}
inline void ProGPGameCatchCard::set_cbisnotgang(bool value) {
  set_has_cbisnotgang();
  cbisnotgang_ = value;
}

// optional int32 cbLeftCount = 6;
inline bool ProGPGameCatchCard::has_cbleftcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameCatchCard::set_has_cbleftcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameCatchCard::clear_has_cbleftcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameCatchCard::clear_cbleftcount() {
  cbleftcount_ = 0;
  clear_has_cbleftcount();
}
inline ::google::protobuf::int32 ProGPGameCatchCard::cbleftcount() const {
  return cbleftcount_;
}
inline void ProGPGameCatchCard::set_cbleftcount(::google::protobuf::int32 value) {
  set_has_cbleftcount();
  cbleftcount_ = value;
}

// -------------------------------------------------------------------

// GPMahList

// repeated int32 Mahs = 1;
inline int GPMahList::mahs_size() const {
  return mahs_.size();
}
inline void GPMahList::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 GPMahList::mahs(int index) const {
  return mahs_.Get(index);
}
inline void GPMahList::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void GPMahList::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GPMahList::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GPMahList::mutable_mahs() {
  return &mahs_;
}

// -------------------------------------------------------------------

// GPScoreList

// repeated int32 roundScore = 1;
inline int GPScoreList::roundscore_size() const {
  return roundscore_.size();
}
inline void GPScoreList::clear_roundscore() {
  roundscore_.Clear();
}
inline ::google::protobuf::int32 GPScoreList::roundscore(int index) const {
  return roundscore_.Get(index);
}
inline void GPScoreList::set_roundscore(int index, ::google::protobuf::int32 value) {
  roundscore_.Set(index, value);
}
inline void GPScoreList::add_roundscore(::google::protobuf::int32 value) {
  roundscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GPScoreList::roundscore() const {
  return roundscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GPScoreList::mutable_roundscore() {
  return &roundscore_;
}

// -------------------------------------------------------------------

// GPAwardList

// optional int32 seat = 1;
inline bool GPAwardList::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPAwardList::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPAwardList::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPAwardList::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 GPAwardList::seat() const {
  return seat_;
}
inline void GPAwardList::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 CardsData = 2;
inline int GPAwardList::cardsdata_size() const {
  return cardsdata_.size();
}
inline void GPAwardList::clear_cardsdata() {
  cardsdata_.Clear();
}
inline ::google::protobuf::int32 GPAwardList::cardsdata(int index) const {
  return cardsdata_.Get(index);
}
inline void GPAwardList::set_cardsdata(int index, ::google::protobuf::int32 value) {
  cardsdata_.Set(index, value);
}
inline void GPAwardList::add_cardsdata(::google::protobuf::int32 value) {
  cardsdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GPAwardList::cardsdata() const {
  return cardsdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GPAwardList::mutable_cardsdata() {
  return &cardsdata_;
}

// optional int32 awardScore = 3;
inline bool GPAwardList::has_awardscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPAwardList::set_has_awardscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPAwardList::clear_has_awardscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPAwardList::clear_awardscore() {
  awardscore_ = 0;
  clear_has_awardscore();
}
inline ::google::protobuf::int32 GPAwardList::awardscore() const {
  return awardscore_;
}
inline void GPAwardList::set_awardscore(::google::protobuf::int32 value) {
  set_has_awardscore();
  awardscore_ = value;
}

// -------------------------------------------------------------------

// ProGPGameEnd

// optional int32 lGameTax = 2;
inline bool ProGPGameEnd::has_lgametax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameEnd::set_has_lgametax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameEnd::clear_has_lgametax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameEnd::clear_lgametax() {
  lgametax_ = 0;
  clear_has_lgametax();
}
inline ::google::protobuf::int32 ProGPGameEnd::lgametax() const {
  return lgametax_;
}
inline void ProGPGameEnd::set_lgametax(::google::protobuf::int32 value) {
  set_has_lgametax();
  lgametax_ = value;
}

// repeated int32 cbChongGuang = 3;
inline int ProGPGameEnd::cbchongguang_size() const {
  return cbchongguang_.size();
}
inline void ProGPGameEnd::clear_cbchongguang() {
  cbchongguang_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::cbchongguang(int index) const {
  return cbchongguang_.Get(index);
}
inline void ProGPGameEnd::set_cbchongguang(int index, ::google::protobuf::int32 value) {
  cbchongguang_.Set(index, value);
}
inline void ProGPGameEnd::add_cbchongguang(::google::protobuf::int32 value) {
  cbchongguang_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::cbchongguang() const {
  return cbchongguang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_cbchongguang() {
  return &cbchongguang_;
}

// repeated int32 cbBaWangKing = 4;
inline int ProGPGameEnd::cbbawangking_size() const {
  return cbbawangking_.size();
}
inline void ProGPGameEnd::clear_cbbawangking() {
  cbbawangking_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::cbbawangking(int index) const {
  return cbbawangking_.Get(index);
}
inline void ProGPGameEnd::set_cbbawangking(int index, ::google::protobuf::int32 value) {
  cbbawangking_.Set(index, value);
}
inline void ProGPGameEnd::add_cbbawangking(::google::protobuf::int32 value) {
  cbbawangking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::cbbawangking() const {
  return cbbawangking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_cbbawangking() {
  return &cbbawangking_;
}

// optional int32 wProvideUser = 5;
inline bool ProGPGameEnd::has_wprovideuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameEnd::set_has_wprovideuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameEnd::clear_has_wprovideuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameEnd::clear_wprovideuser() {
  wprovideuser_ = 0;
  clear_has_wprovideuser();
}
inline ::google::protobuf::int32 ProGPGameEnd::wprovideuser() const {
  return wprovideuser_;
}
inline void ProGPGameEnd::set_wprovideuser(::google::protobuf::int32 value) {
  set_has_wprovideuser();
  wprovideuser_ = value;
}

// optional int32 cbChiHuCard = 6;
inline bool ProGPGameEnd::has_cbchihucard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameEnd::set_has_cbchihucard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameEnd::clear_has_cbchihucard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameEnd::clear_cbchihucard() {
  cbchihucard_ = 0;
  clear_has_cbchihucard();
}
inline ::google::protobuf::int32 ProGPGameEnd::cbchihucard() const {
  return cbchihucard_;
}
inline void ProGPGameEnd::set_cbchihucard(::google::protobuf::int32 value) {
  set_has_cbchihucard();
  cbchihucard_ = value;
}

// repeated int32 dwChiHuKind = 7;
inline int ProGPGameEnd::dwchihukind_size() const {
  return dwchihukind_.size();
}
inline void ProGPGameEnd::clear_dwchihukind() {
  dwchihukind_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::dwchihukind(int index) const {
  return dwchihukind_.Get(index);
}
inline void ProGPGameEnd::set_dwchihukind(int index, ::google::protobuf::int32 value) {
  dwchihukind_.Set(index, value);
}
inline void ProGPGameEnd::add_dwchihukind(::google::protobuf::int32 value) {
  dwchihukind_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::dwchihukind() const {
  return dwchihukind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_dwchihukind() {
  return &dwchihukind_;
}

// repeated int32 dwChiHuRight = 8;
inline int ProGPGameEnd::dwchihuright_size() const {
  return dwchihuright_.size();
}
inline void ProGPGameEnd::clear_dwchihuright() {
  dwchihuright_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::dwchihuright(int index) const {
  return dwchihuright_.Get(index);
}
inline void ProGPGameEnd::set_dwchihuright(int index, ::google::protobuf::int32 value) {
  dwchihuright_.Set(index, value);
}
inline void ProGPGameEnd::add_dwchihuright(::google::protobuf::int32 value) {
  dwchihuright_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::dwchihuright() const {
  return dwchihuright_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_dwchihuright() {
  return &dwchihuright_;
}

// repeated int32 lTotaslGameScore = 9;
inline int ProGPGameEnd::ltotaslgamescore_size() const {
  return ltotaslgamescore_.size();
}
inline void ProGPGameEnd::clear_ltotaslgamescore() {
  ltotaslgamescore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::ltotaslgamescore(int index) const {
  return ltotaslgamescore_.Get(index);
}
inline void ProGPGameEnd::set_ltotaslgamescore(int index, ::google::protobuf::int32 value) {
  ltotaslgamescore_.Set(index, value);
}
inline void ProGPGameEnd::add_ltotaslgamescore(::google::protobuf::int32 value) {
  ltotaslgamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::ltotaslgamescore() const {
  return ltotaslgamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_ltotaslgamescore() {
  return &ltotaslgamescore_;
}

// repeated int32 lCurrentGameScore = 10;
inline int ProGPGameEnd::lcurrentgamescore_size() const {
  return lcurrentgamescore_.size();
}
inline void ProGPGameEnd::clear_lcurrentgamescore() {
  lcurrentgamescore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::lcurrentgamescore(int index) const {
  return lcurrentgamescore_.Get(index);
}
inline void ProGPGameEnd::set_lcurrentgamescore(int index, ::google::protobuf::int32 value) {
  lcurrentgamescore_.Set(index, value);
}
inline void ProGPGameEnd::add_lcurrentgamescore(::google::protobuf::int32 value) {
  lcurrentgamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::lcurrentgamescore() const {
  return lcurrentgamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_lcurrentgamescore() {
  return &lcurrentgamescore_;
}

// repeated int32 lCurrentPointScore = 11;
inline int ProGPGameEnd::lcurrentpointscore_size() const {
  return lcurrentpointscore_.size();
}
inline void ProGPGameEnd::clear_lcurrentpointscore() {
  lcurrentpointscore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::lcurrentpointscore(int index) const {
  return lcurrentpointscore_.Get(index);
}
inline void ProGPGameEnd::set_lcurrentpointscore(int index, ::google::protobuf::int32 value) {
  lcurrentpointscore_.Set(index, value);
}
inline void ProGPGameEnd::add_lcurrentpointscore(::google::protobuf::int32 value) {
  lcurrentpointscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::lcurrentpointscore() const {
  return lcurrentpointscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_lcurrentpointscore() {
  return &lcurrentpointscore_;
}

// repeated int32 lAttachScore = 12;
inline int ProGPGameEnd::lattachscore_size() const {
  return lattachscore_.size();
}
inline void ProGPGameEnd::clear_lattachscore() {
  lattachscore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::lattachscore(int index) const {
  return lattachscore_.Get(index);
}
inline void ProGPGameEnd::set_lattachscore(int index, ::google::protobuf::int32 value) {
  lattachscore_.Set(index, value);
}
inline void ProGPGameEnd::add_lattachscore(::google::protobuf::int32 value) {
  lattachscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::lattachscore() const {
  return lattachscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_lattachscore() {
  return &lattachscore_;
}

// repeated .GPMahList cbHandCardData = 13;
inline int ProGPGameEnd::cbhandcarddata_size() const {
  return cbhandcarddata_.size();
}
inline void ProGPGameEnd::clear_cbhandcarddata() {
  cbhandcarddata_.Clear();
}
inline const ::GPMahList& ProGPGameEnd::cbhandcarddata(int index) const {
  return cbhandcarddata_.Get(index);
}
inline ::GPMahList* ProGPGameEnd::mutable_cbhandcarddata(int index) {
  return cbhandcarddata_.Mutable(index);
}
inline ::GPMahList* ProGPGameEnd::add_cbhandcarddata() {
  return cbhandcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GPMahList >&
ProGPGameEnd::cbhandcarddata() const {
  return cbhandcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GPMahList >*
ProGPGameEnd::mutable_cbhandcarddata() {
  return &cbhandcarddata_;
}

// repeated .GPAwardList cbAwardCardData = 14;
inline int ProGPGameEnd::cbawardcarddata_size() const {
  return cbawardcarddata_.size();
}
inline void ProGPGameEnd::clear_cbawardcarddata() {
  cbawardcarddata_.Clear();
}
inline const ::GPAwardList& ProGPGameEnd::cbawardcarddata(int index) const {
  return cbawardcarddata_.Get(index);
}
inline ::GPAwardList* ProGPGameEnd::mutable_cbawardcarddata(int index) {
  return cbawardcarddata_.Mutable(index);
}
inline ::GPAwardList* ProGPGameEnd::add_cbawardcarddata() {
  return cbawardcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GPAwardList >&
ProGPGameEnd::cbawardcarddata() const {
  return cbawardcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GPAwardList >*
ProGPGameEnd::mutable_cbawardcarddata() {
  return &cbawardcarddata_;
}

// repeated int32 lOnlyWinScore = 15;
inline int ProGPGameEnd::lonlywinscore_size() const {
  return lonlywinscore_.size();
}
inline void ProGPGameEnd::clear_lonlywinscore() {
  lonlywinscore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::lonlywinscore(int index) const {
  return lonlywinscore_.Get(index);
}
inline void ProGPGameEnd::set_lonlywinscore(int index, ::google::protobuf::int32 value) {
  lonlywinscore_.Set(index, value);
}
inline void ProGPGameEnd::add_lonlywinscore(::google::protobuf::int32 value) {
  lonlywinscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::lonlywinscore() const {
  return lonlywinscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_lonlywinscore() {
  return &lonlywinscore_;
}

// optional bool bRoundEnd = 16;
inline bool ProGPGameEnd::has_broundend() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProGPGameEnd::set_has_broundend() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProGPGameEnd::clear_has_broundend() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProGPGameEnd::clear_broundend() {
  broundend_ = false;
  clear_has_broundend();
}
inline bool ProGPGameEnd::broundend() const {
  return broundend_;
}
inline void ProGPGameEnd::set_broundend(bool value) {
  set_has_broundend();
  broundend_ = value;
}

// repeated int32 lHuiTouScore = 17;
inline int ProGPGameEnd::lhuitouscore_size() const {
  return lhuitouscore_.size();
}
inline void ProGPGameEnd::clear_lhuitouscore() {
  lhuitouscore_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::lhuitouscore(int index) const {
  return lhuitouscore_.Get(index);
}
inline void ProGPGameEnd::set_lhuitouscore(int index, ::google::protobuf::int32 value) {
  lhuitouscore_.Set(index, value);
}
inline void ProGPGameEnd::add_lhuitouscore(::google::protobuf::int32 value) {
  lhuitouscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::lhuitouscore() const {
  return lhuitouscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_lhuitouscore() {
  return &lhuitouscore_;
}

// optional bool bZhuangWin = 18;
inline bool ProGPGameEnd::has_bzhuangwin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProGPGameEnd::set_has_bzhuangwin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProGPGameEnd::clear_has_bzhuangwin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProGPGameEnd::clear_bzhuangwin() {
  bzhuangwin_ = false;
  clear_has_bzhuangwin();
}
inline bool ProGPGameEnd::bzhuangwin() const {
  return bzhuangwin_;
}
inline void ProGPGameEnd::set_bzhuangwin(bool value) {
  set_has_bzhuangwin();
  bzhuangwin_ = value;
}

// repeated int32 cbJiangMaCardData = 19;
inline int ProGPGameEnd::cbjiangmacarddata_size() const {
  return cbjiangmacarddata_.size();
}
inline void ProGPGameEnd::clear_cbjiangmacarddata() {
  cbjiangmacarddata_.Clear();
}
inline ::google::protobuf::int32 ProGPGameEnd::cbjiangmacarddata(int index) const {
  return cbjiangmacarddata_.Get(index);
}
inline void ProGPGameEnd::set_cbjiangmacarddata(int index, ::google::protobuf::int32 value) {
  cbjiangmacarddata_.Set(index, value);
}
inline void ProGPGameEnd::add_cbjiangmacarddata(::google::protobuf::int32 value) {
  cbjiangmacarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameEnd::cbjiangmacarddata() const {
  return cbjiangmacarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameEnd::mutable_cbjiangmacarddata() {
  return &cbjiangmacarddata_;
}

// repeated .GPScoreList detailedScores = 20;
inline int ProGPGameEnd::detailedscores_size() const {
  return detailedscores_.size();
}
inline void ProGPGameEnd::clear_detailedscores() {
  detailedscores_.Clear();
}
inline const ::GPScoreList& ProGPGameEnd::detailedscores(int index) const {
  return detailedscores_.Get(index);
}
inline ::GPScoreList* ProGPGameEnd::mutable_detailedscores(int index) {
  return detailedscores_.Mutable(index);
}
inline ::GPScoreList* ProGPGameEnd::add_detailedscores() {
  return detailedscores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GPScoreList >&
ProGPGameEnd::detailedscores() const {
  return detailedscores_;
}
inline ::google::protobuf::RepeatedPtrField< ::GPScoreList >*
ProGPGameEnd::mutable_detailedscores() {
  return &detailedscores_;
}

// optional int32 fangShuiSaet = 21;
inline bool ProGPGameEnd::has_fangshuisaet() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProGPGameEnd::set_has_fangshuisaet() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProGPGameEnd::clear_has_fangshuisaet() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProGPGameEnd::clear_fangshuisaet() {
  fangshuisaet_ = 0;
  clear_has_fangshuisaet();
}
inline ::google::protobuf::int32 ProGPGameEnd::fangshuisaet() const {
  return fangshuisaet_;
}
inline void ProGPGameEnd::set_fangshuisaet(::google::protobuf::int32 value) {
  set_has_fangshuisaet();
  fangshuisaet_ = value;
}

// -------------------------------------------------------------------

// ProGPGameQuickSoundRequest

// optional int32 desk_id = 2;
inline bool ProGPGameQuickSoundRequest::has_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameQuickSoundRequest::set_has_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameQuickSoundRequest::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameQuickSoundRequest::clear_desk_id() {
  desk_id_ = 0;
  clear_has_desk_id();
}
inline ::google::protobuf::int32 ProGPGameQuickSoundRequest::desk_id() const {
  return desk_id_;
}
inline void ProGPGameQuickSoundRequest::set_desk_id(::google::protobuf::int32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional int32 seat_id = 3;
inline bool ProGPGameQuickSoundRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameQuickSoundRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameQuickSoundRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameQuickSoundRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameQuickSoundRequest::seat_id() const {
  return seat_id_;
}
inline void ProGPGameQuickSoundRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 sound_id = 4;
inline bool ProGPGameQuickSoundRequest::has_sound_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameQuickSoundRequest::set_has_sound_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameQuickSoundRequest::clear_has_sound_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameQuickSoundRequest::clear_sound_id() {
  sound_id_ = 0;
  clear_has_sound_id();
}
inline ::google::protobuf::int32 ProGPGameQuickSoundRequest::sound_id() const {
  return sound_id_;
}
inline void ProGPGameQuickSoundRequest::set_sound_id(::google::protobuf::int32 value) {
  set_has_sound_id();
  sound_id_ = value;
}

// optional bytes text = 5;
inline bool ProGPGameQuickSoundRequest::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameQuickSoundRequest::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameQuickSoundRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameQuickSoundRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ProGPGameQuickSoundRequest::text() const {
  return *text_;
}
inline void ProGPGameQuickSoundRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGPGameQuickSoundRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGPGameQuickSoundRequest::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameQuickSoundRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ProGPGameQuickSoundRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameQuickSoundRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGPGameQuickSoundResponse

// optional int32 desk_id = 2;
inline bool ProGPGameQuickSoundResponse::has_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameQuickSoundResponse::set_has_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameQuickSoundResponse::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameQuickSoundResponse::clear_desk_id() {
  desk_id_ = 0;
  clear_has_desk_id();
}
inline ::google::protobuf::int32 ProGPGameQuickSoundResponse::desk_id() const {
  return desk_id_;
}
inline void ProGPGameQuickSoundResponse::set_desk_id(::google::protobuf::int32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional int32 seat_id = 3;
inline bool ProGPGameQuickSoundResponse::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameQuickSoundResponse::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameQuickSoundResponse::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameQuickSoundResponse::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameQuickSoundResponse::seat_id() const {
  return seat_id_;
}
inline void ProGPGameQuickSoundResponse::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 sound_id = 4;
inline bool ProGPGameQuickSoundResponse::has_sound_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameQuickSoundResponse::set_has_sound_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameQuickSoundResponse::clear_has_sound_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameQuickSoundResponse::clear_sound_id() {
  sound_id_ = 0;
  clear_has_sound_id();
}
inline ::google::protobuf::int32 ProGPGameQuickSoundResponse::sound_id() const {
  return sound_id_;
}
inline void ProGPGameQuickSoundResponse::set_sound_id(::google::protobuf::int32 value) {
  set_has_sound_id();
  sound_id_ = value;
}

// optional bytes text = 5;
inline bool ProGPGameQuickSoundResponse::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameQuickSoundResponse::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameQuickSoundResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameQuickSoundResponse::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ProGPGameQuickSoundResponse::text() const {
  return *text_;
}
inline void ProGPGameQuickSoundResponse::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGPGameQuickSoundResponse::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGPGameQuickSoundResponse::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameQuickSoundResponse::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ProGPGameQuickSoundResponse::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameQuickSoundResponse::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGPGameSendDiscardMahs

// optional int32 seat_id = 2;
inline bool ProGPGameSendDiscardMahs::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameSendDiscardMahs::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameSendDiscardMahs::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameSendDiscardMahs::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameSendDiscardMahs::seat_id() const {
  return seat_id_;
}
inline void ProGPGameSendDiscardMahs::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// repeated .GPMahList cbCardData = 3;
inline int ProGPGameSendDiscardMahs::cbcarddata_size() const {
  return cbcarddata_.size();
}
inline void ProGPGameSendDiscardMahs::clear_cbcarddata() {
  cbcarddata_.Clear();
}
inline const ::GPMahList& ProGPGameSendDiscardMahs::cbcarddata(int index) const {
  return cbcarddata_.Get(index);
}
inline ::GPMahList* ProGPGameSendDiscardMahs::mutable_cbcarddata(int index) {
  return cbcarddata_.Mutable(index);
}
inline ::GPMahList* ProGPGameSendDiscardMahs::add_cbcarddata() {
  return cbcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GPMahList >&
ProGPGameSendDiscardMahs::cbcarddata() const {
  return cbcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GPMahList >*
ProGPGameSendDiscardMahs::mutable_cbcarddata() {
  return &cbcarddata_;
}

// optional int32 deskCount = 4;
inline bool ProGPGameSendDiscardMahs::has_deskcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameSendDiscardMahs::set_has_deskcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameSendDiscardMahs::clear_has_deskcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameSendDiscardMahs::clear_deskcount() {
  deskcount_ = 0;
  clear_has_deskcount();
}
inline ::google::protobuf::int32 ProGPGameSendDiscardMahs::deskcount() const {
  return deskcount_;
}
inline void ProGPGameSendDiscardMahs::set_deskcount(::google::protobuf::int32 value) {
  set_has_deskcount();
  deskcount_ = value;
}

// -------------------------------------------------------------------

// GPWeaveItem

// optional int32 weaveKind = 1;
inline bool GPWeaveItem::has_weavekind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPWeaveItem::set_has_weavekind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPWeaveItem::clear_has_weavekind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPWeaveItem::clear_weavekind() {
  weavekind_ = 0;
  clear_has_weavekind();
}
inline ::google::protobuf::int32 GPWeaveItem::weavekind() const {
  return weavekind_;
}
inline void GPWeaveItem::set_weavekind(::google::protobuf::int32 value) {
  set_has_weavekind();
  weavekind_ = value;
}

// optional int32 centercard = 2;
inline bool GPWeaveItem::has_centercard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPWeaveItem::set_has_centercard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPWeaveItem::clear_has_centercard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPWeaveItem::clear_centercard() {
  centercard_ = 0;
  clear_has_centercard();
}
inline ::google::protobuf::int32 GPWeaveItem::centercard() const {
  return centercard_;
}
inline void GPWeaveItem::set_centercard(::google::protobuf::int32 value) {
  set_has_centercard();
  centercard_ = value;
}

// optional int32 provideUser = 3;
inline bool GPWeaveItem::has_provideuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPWeaveItem::set_has_provideuser() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPWeaveItem::clear_has_provideuser() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPWeaveItem::clear_provideuser() {
  provideuser_ = 0;
  clear_has_provideuser();
}
inline ::google::protobuf::int32 GPWeaveItem::provideuser() const {
  return provideuser_;
}
inline void GPWeaveItem::set_provideuser(::google::protobuf::int32 value) {
  set_has_provideuser();
  provideuser_ = value;
}

// optional int32 cardsize = 4;
inline bool GPWeaveItem::has_cardsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPWeaveItem::set_has_cardsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPWeaveItem::clear_has_cardsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPWeaveItem::clear_cardsize() {
  cardsize_ = 0;
  clear_has_cardsize();
}
inline ::google::protobuf::int32 GPWeaveItem::cardsize() const {
  return cardsize_;
}
inline void GPWeaveItem::set_cardsize(::google::protobuf::int32 value) {
  set_has_cardsize();
  cardsize_ = value;
}

// -------------------------------------------------------------------

// GPWeaveItems

// repeated .GPWeaveItem items = 1;
inline int GPWeaveItems::items_size() const {
  return items_.size();
}
inline void GPWeaveItems::clear_items() {
  items_.Clear();
}
inline const ::GPWeaveItem& GPWeaveItems::items(int index) const {
  return items_.Get(index);
}
inline ::GPWeaveItem* GPWeaveItems::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::GPWeaveItem* GPWeaveItems::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GPWeaveItem >&
GPWeaveItems::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::GPWeaveItem >*
GPWeaveItems::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ProGPGameSendActionMahs

// optional int32 seat_id = 2;
inline bool ProGPGameSendActionMahs::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameSendActionMahs::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameSendActionMahs::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameSendActionMahs::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameSendActionMahs::seat_id() const {
  return seat_id_;
}
inline void ProGPGameSendActionMahs::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// repeated .GPWeaveItems weaves = 3;
inline int ProGPGameSendActionMahs::weaves_size() const {
  return weaves_.size();
}
inline void ProGPGameSendActionMahs::clear_weaves() {
  weaves_.Clear();
}
inline const ::GPWeaveItems& ProGPGameSendActionMahs::weaves(int index) const {
  return weaves_.Get(index);
}
inline ::GPWeaveItems* ProGPGameSendActionMahs::mutable_weaves(int index) {
  return weaves_.Mutable(index);
}
inline ::GPWeaveItems* ProGPGameSendActionMahs::add_weaves() {
  return weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GPWeaveItems >&
ProGPGameSendActionMahs::weaves() const {
  return weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::GPWeaveItems >*
ProGPGameSendActionMahs::mutable_weaves() {
  return &weaves_;
}

// -------------------------------------------------------------------

// ProGPGameBrokenRequest

// optional int32 seat_id = 2;
inline bool ProGPGameBrokenRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameBrokenRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameBrokenRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameBrokenRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameBrokenRequest::seat_id() const {
  return seat_id_;
}
inline void ProGPGameBrokenRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .GPBROKEN_TYPE type = 3;
inline bool ProGPGameBrokenRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameBrokenRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameBrokenRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameBrokenRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::GPBROKEN_TYPE ProGPGameBrokenRequest::type() const {
  return static_cast< ::GPBROKEN_TYPE >(type_);
}
inline void ProGPGameBrokenRequest::set_type(::GPBROKEN_TYPE value) {
  assert(::GPBROKEN_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 time = 4;
inline bool ProGPGameBrokenRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameBrokenRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameBrokenRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameBrokenRequest::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGPGameBrokenRequest::time() const {
  return time_;
}
inline void ProGPGameBrokenRequest::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProGPGameBrokenOperate

// optional int32 seat_id = 2;
inline bool ProGPGameBrokenOperate::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameBrokenOperate::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameBrokenOperate::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameBrokenOperate::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameBrokenOperate::seat_id() const {
  return seat_id_;
}
inline void ProGPGameBrokenOperate::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .GPBROKEN_OPERATE result = 3 [default = GP_BO_DISAGREE];
inline bool ProGPGameBrokenOperate::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameBrokenOperate::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameBrokenOperate::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameBrokenOperate::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::GPBROKEN_OPERATE ProGPGameBrokenOperate::result() const {
  return static_cast< ::GPBROKEN_OPERATE >(result_);
}
inline void ProGPGameBrokenOperate::set_result(::GPBROKEN_OPERATE value) {
  assert(::GPBROKEN_OPERATE_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ProGPGameBrokenNotify

// optional int32 seat_id = 2;
inline bool ProGPGameBrokenNotify::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameBrokenNotify::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameBrokenNotify::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameBrokenNotify::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameBrokenNotify::seat_id() const {
  return seat_id_;
}
inline void ProGPGameBrokenNotify::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .GPBROKEN_CODE operate_code = 3 [default = GP_BC_SUCCESS];
inline bool ProGPGameBrokenNotify::has_operate_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameBrokenNotify::set_has_operate_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameBrokenNotify::clear_has_operate_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameBrokenNotify::clear_operate_code() {
  operate_code_ = 0;
  clear_has_operate_code();
}
inline ::GPBROKEN_CODE ProGPGameBrokenNotify::operate_code() const {
  return static_cast< ::GPBROKEN_CODE >(operate_code_);
}
inline void ProGPGameBrokenNotify::set_operate_code(::GPBROKEN_CODE value) {
  assert(::GPBROKEN_CODE_IsValid(value));
  set_has_operate_code();
  operate_code_ = value;
}

// -------------------------------------------------------------------

// ProGPGameRuleConfig

// optional int32 game_round = 1;
inline bool ProGPGameRuleConfig::has_game_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameRuleConfig::set_has_game_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameRuleConfig::clear_has_game_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameRuleConfig::clear_game_round() {
  game_round_ = 0;
  clear_has_game_round();
}
inline ::google::protobuf::int32 ProGPGameRuleConfig::game_round() const {
  return game_round_;
}
inline void ProGPGameRuleConfig::set_game_round(::google::protobuf::int32 value) {
  set_has_game_round();
  game_round_ = value;
}

// optional int32 need_card = 2;
inline bool ProGPGameRuleConfig::has_need_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameRuleConfig::set_has_need_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameRuleConfig::clear_has_need_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameRuleConfig::clear_need_card() {
  need_card_ = 0;
  clear_has_need_card();
}
inline ::google::protobuf::int32 ProGPGameRuleConfig::need_card() const {
  return need_card_;
}
inline void ProGPGameRuleConfig::set_need_card(::google::protobuf::int32 value) {
  set_has_need_card();
  need_card_ = value;
}

// optional bool have_MagicCard = 3;
inline bool ProGPGameRuleConfig::has_have_magiccard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameRuleConfig::set_has_have_magiccard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameRuleConfig::clear_has_have_magiccard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameRuleConfig::clear_have_magiccard() {
  have_magiccard_ = false;
  clear_has_have_magiccard();
}
inline bool ProGPGameRuleConfig::have_magiccard() const {
  return have_magiccard_;
}
inline void ProGPGameRuleConfig::set_have_magiccard(bool value) {
  set_has_have_magiccard();
  have_magiccard_ = value;
}

// optional bool have_RedPeach3FirstOut = 4;
inline bool ProGPGameRuleConfig::has_have_redpeach3firstout() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameRuleConfig::set_has_have_redpeach3firstout() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameRuleConfig::clear_has_have_redpeach3firstout() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameRuleConfig::clear_have_redpeach3firstout() {
  have_redpeach3firstout_ = false;
  clear_has_have_redpeach3firstout();
}
inline bool ProGPGameRuleConfig::have_redpeach3firstout() const {
  return have_redpeach3firstout_;
}
inline void ProGPGameRuleConfig::set_have_redpeach3firstout(bool value) {
  set_has_have_redpeach3firstout();
  have_redpeach3firstout_ = value;
}

// optional bool hava_MustOutCard = 5;
inline bool ProGPGameRuleConfig::has_hava_mustoutcard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameRuleConfig::set_has_hava_mustoutcard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameRuleConfig::clear_has_hava_mustoutcard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameRuleConfig::clear_hava_mustoutcard() {
  hava_mustoutcard_ = false;
  clear_has_hava_mustoutcard();
}
inline bool ProGPGameRuleConfig::hava_mustoutcard() const {
  return hava_mustoutcard_;
}
inline void ProGPGameRuleConfig::set_hava_mustoutcard(bool value) {
  set_has_hava_mustoutcard();
  hava_mustoutcard_ = value;
}

// optional int32 nMasterSeat = 6;
inline bool ProGPGameRuleConfig::has_nmasterseat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGPGameRuleConfig::set_has_nmasterseat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGPGameRuleConfig::clear_has_nmasterseat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGPGameRuleConfig::clear_nmasterseat() {
  nmasterseat_ = 0;
  clear_has_nmasterseat();
}
inline ::google::protobuf::int32 ProGPGameRuleConfig::nmasterseat() const {
  return nmasterseat_;
}
inline void ProGPGameRuleConfig::set_nmasterseat(::google::protobuf::int32 value) {
  set_has_nmasterseat();
  nmasterseat_ = value;
}

// optional int32 current_game_count = 7;
inline bool ProGPGameRuleConfig::has_current_game_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProGPGameRuleConfig::set_has_current_game_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProGPGameRuleConfig::clear_has_current_game_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProGPGameRuleConfig::clear_current_game_count() {
  current_game_count_ = 0;
  clear_has_current_game_count();
}
inline ::google::protobuf::int32 ProGPGameRuleConfig::current_game_count() const {
  return current_game_count_;
}
inline void ProGPGameRuleConfig::set_current_game_count(::google::protobuf::int32 value) {
  set_has_current_game_count();
  current_game_count_ = value;
}

// optional bool have_jianma = 8;
inline bool ProGPGameRuleConfig::has_have_jianma() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProGPGameRuleConfig::set_has_have_jianma() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProGPGameRuleConfig::clear_has_have_jianma() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProGPGameRuleConfig::clear_have_jianma() {
  have_jianma_ = false;
  clear_has_have_jianma();
}
inline bool ProGPGameRuleConfig::have_jianma() const {
  return have_jianma_;
}
inline void ProGPGameRuleConfig::set_have_jianma(bool value) {
  set_has_have_jianma();
  have_jianma_ = value;
}

// optional int32 nChongguanNum = 9;
inline bool ProGPGameRuleConfig::has_nchongguannum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProGPGameRuleConfig::set_has_nchongguannum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProGPGameRuleConfig::clear_has_nchongguannum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProGPGameRuleConfig::clear_nchongguannum() {
  nchongguannum_ = 0;
  clear_has_nchongguannum();
}
inline ::google::protobuf::int32 ProGPGameRuleConfig::nchongguannum() const {
  return nchongguannum_;
}
inline void ProGPGameRuleConfig::set_nchongguannum(::google::protobuf::int32 value) {
  set_has_nchongguannum();
  nchongguannum_ = value;
}

// optional bool hava_BaoPei = 10;
inline bool ProGPGameRuleConfig::has_hava_baopei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProGPGameRuleConfig::set_has_hava_baopei() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProGPGameRuleConfig::clear_has_hava_baopei() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProGPGameRuleConfig::clear_hava_baopei() {
  hava_baopei_ = false;
  clear_has_hava_baopei();
}
inline bool ProGPGameRuleConfig::hava_baopei() const {
  return hava_baopei_;
}
inline void ProGPGameRuleConfig::set_hava_baopei(bool value) {
  set_has_hava_baopei();
  hava_baopei_ = value;
}

// optional int32 nPlayerNum = 11;
inline bool ProGPGameRuleConfig::has_nplayernum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProGPGameRuleConfig::set_has_nplayernum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProGPGameRuleConfig::clear_has_nplayernum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProGPGameRuleConfig::clear_nplayernum() {
  nplayernum_ = 0;
  clear_has_nplayernum();
}
inline ::google::protobuf::int32 ProGPGameRuleConfig::nplayernum() const {
  return nplayernum_;
}
inline void ProGPGameRuleConfig::set_nplayernum(::google::protobuf::int32 value) {
  set_has_nplayernum();
  nplayernum_ = value;
}

// optional bytes sRoomNum = 12;
inline bool ProGPGameRuleConfig::has_sroomnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProGPGameRuleConfig::set_has_sroomnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProGPGameRuleConfig::clear_has_sroomnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProGPGameRuleConfig::clear_sroomnum() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    sroomnum_->clear();
  }
  clear_has_sroomnum();
}
inline const ::std::string& ProGPGameRuleConfig::sroomnum() const {
  return *sroomnum_;
}
inline void ProGPGameRuleConfig::set_sroomnum(const ::std::string& value) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(value);
}
inline void ProGPGameRuleConfig::set_sroomnum(const char* value) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(value);
}
inline void ProGPGameRuleConfig::set_sroomnum(const void* value, size_t size) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameRuleConfig::mutable_sroomnum() {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  return sroomnum_;
}
inline ::std::string* ProGPGameRuleConfig::release_sroomnum() {
  clear_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sroomnum_;
    sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameRuleConfig::set_allocated_sroomnum(::std::string* sroomnum) {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (sroomnum) {
    set_has_sroomnum();
    sroomnum_ = sroomnum;
  } else {
    clear_has_sroomnum();
    sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sPlayTime = 13;
inline bool ProGPGameRuleConfig::has_splaytime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProGPGameRuleConfig::set_has_splaytime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProGPGameRuleConfig::clear_has_splaytime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProGPGameRuleConfig::clear_splaytime() {
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    splaytime_->clear();
  }
  clear_has_splaytime();
}
inline const ::std::string& ProGPGameRuleConfig::splaytime() const {
  return *splaytime_;
}
inline void ProGPGameRuleConfig::set_splaytime(const ::std::string& value) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(value);
}
inline void ProGPGameRuleConfig::set_splaytime(const char* value) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(value);
}
inline void ProGPGameRuleConfig::set_splaytime(const void* value, size_t size) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameRuleConfig::mutable_splaytime() {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  return splaytime_;
}
inline ::std::string* ProGPGameRuleConfig::release_splaytime() {
  clear_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splaytime_;
    splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameRuleConfig::set_allocated_splaytime(::std::string* splaytime) {
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (splaytime) {
    set_has_splaytime();
    splaytime_ = splaytime;
  } else {
    clear_has_splaytime();
    splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGPGameBrokenStatus

// optional int32 broken_seat = 1;
inline bool ProGPGameBrokenStatus::has_broken_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameBrokenStatus::set_has_broken_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameBrokenStatus::clear_has_broken_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameBrokenStatus::clear_broken_seat() {
  broken_seat_ = 0;
  clear_has_broken_seat();
}
inline ::google::protobuf::int32 ProGPGameBrokenStatus::broken_seat() const {
  return broken_seat_;
}
inline void ProGPGameBrokenStatus::set_broken_seat(::google::protobuf::int32 value) {
  set_has_broken_seat();
  broken_seat_ = value;
}

// repeated bool broken_status = 2;
inline int ProGPGameBrokenStatus::broken_status_size() const {
  return broken_status_.size();
}
inline void ProGPGameBrokenStatus::clear_broken_status() {
  broken_status_.Clear();
}
inline bool ProGPGameBrokenStatus::broken_status(int index) const {
  return broken_status_.Get(index);
}
inline void ProGPGameBrokenStatus::set_broken_status(int index, bool value) {
  broken_status_.Set(index, value);
}
inline void ProGPGameBrokenStatus::add_broken_status(bool value) {
  broken_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProGPGameBrokenStatus::broken_status() const {
  return broken_status_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProGPGameBrokenStatus::mutable_broken_status() {
  return &broken_status_;
}

// optional int32 left_time = 3;
inline bool ProGPGameBrokenStatus::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameBrokenStatus::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameBrokenStatus::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameBrokenStatus::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProGPGameBrokenStatus::left_time() const {
  return left_time_;
}
inline void ProGPGameBrokenStatus::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// ProGPGameDataResp

// repeated int32 total_score = 1;
inline int ProGPGameDataResp::total_score_size() const {
  return total_score_.size();
}
inline void ProGPGameDataResp::clear_total_score() {
  total_score_.Clear();
}
inline ::google::protobuf::int32 ProGPGameDataResp::total_score(int index) const {
  return total_score_.Get(index);
}
inline void ProGPGameDataResp::set_total_score(int index, ::google::protobuf::int32 value) {
  total_score_.Set(index, value);
}
inline void ProGPGameDataResp::add_total_score(::google::protobuf::int32 value) {
  total_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameDataResp::total_score() const {
  return total_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameDataResp::mutable_total_score() {
  return &total_score_;
}

// optional int32 type = 2;
inline bool ProGPGameDataResp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameDataResp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameDataResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameDataResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProGPGameDataResp::type() const {
  return type_;
}
inline void ProGPGameDataResp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 boomPlaayerSeat = 3;
inline bool ProGPGameDataResp::has_boomplaayerseat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameDataResp::set_has_boomplaayerseat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameDataResp::clear_has_boomplaayerseat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameDataResp::clear_boomplaayerseat() {
  boomplaayerseat_ = 0;
  clear_has_boomplaayerseat();
}
inline ::google::protobuf::int32 ProGPGameDataResp::boomplaayerseat() const {
  return boomplaayerseat_;
}
inline void ProGPGameDataResp::set_boomplaayerseat(::google::protobuf::int32 value) {
  set_has_boomplaayerseat();
  boomplaayerseat_ = value;
}

// optional bool isboom = 4;
inline bool ProGPGameDataResp::has_isboom() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameDataResp::set_has_isboom() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameDataResp::clear_has_isboom() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameDataResp::clear_isboom() {
  isboom_ = false;
  clear_has_isboom();
}
inline bool ProGPGameDataResp::isboom() const {
  return isboom_;
}
inline void ProGPGameDataResp::set_isboom(bool value) {
  set_has_isboom();
  isboom_ = value;
}

// -------------------------------------------------------------------

// ProGPGameRecordRequest

// optional int32 seat_id = 1;
inline bool ProGPGameRecordRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameRecordRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameRecordRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameRecordRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameRecordRequest::seat_id() const {
  return seat_id_;
}
inline void ProGPGameRecordRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional bytes url = 2;
inline bool ProGPGameRecordRequest::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameRecordRequest::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameRecordRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameRecordRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ProGPGameRecordRequest::url() const {
  return *url_;
}
inline void ProGPGameRecordRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGPGameRecordRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGPGameRecordRequest::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameRecordRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ProGPGameRecordRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameRecordRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGPGameRecordResponse

// optional int32 seat_id = 1;
inline bool ProGPGameRecordResponse::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameRecordResponse::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameRecordResponse::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameRecordResponse::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameRecordResponse::seat_id() const {
  return seat_id_;
}
inline void ProGPGameRecordResponse::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional bytes url = 2;
inline bool ProGPGameRecordResponse::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameRecordResponse::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameRecordResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameRecordResponse::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ProGPGameRecordResponse::url() const {
  return *url_;
}
inline void ProGPGameRecordResponse::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGPGameRecordResponse::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGPGameRecordResponse::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameRecordResponse::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ProGPGameRecordResponse::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameRecordResponse::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGPGameUserLocationRequest

// optional int32 seat_id = 1;
inline bool ProGPGameUserLocationRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameUserLocationRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameUserLocationRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameUserLocationRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameUserLocationRequest::seat_id() const {
  return seat_id_;
}
inline void ProGPGameUserLocationRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional double dwlongitude = 2;
inline bool ProGPGameUserLocationRequest::has_dwlongitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameUserLocationRequest::set_has_dwlongitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameUserLocationRequest::clear_has_dwlongitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameUserLocationRequest::clear_dwlongitude() {
  dwlongitude_ = 0;
  clear_has_dwlongitude();
}
inline double ProGPGameUserLocationRequest::dwlongitude() const {
  return dwlongitude_;
}
inline void ProGPGameUserLocationRequest::set_dwlongitude(double value) {
  set_has_dwlongitude();
  dwlongitude_ = value;
}

// optional double dwlatitude = 3;
inline bool ProGPGameUserLocationRequest::has_dwlatitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGPGameUserLocationRequest::set_has_dwlatitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGPGameUserLocationRequest::clear_has_dwlatitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGPGameUserLocationRequest::clear_dwlatitude() {
  dwlatitude_ = 0;
  clear_has_dwlatitude();
}
inline double ProGPGameUserLocationRequest::dwlatitude() const {
  return dwlatitude_;
}
inline void ProGPGameUserLocationRequest::set_dwlatitude(double value) {
  set_has_dwlatitude();
  dwlatitude_ = value;
}

// optional bytes strDistrict = 4;
inline bool ProGPGameUserLocationRequest::has_strdistrict() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGPGameUserLocationRequest::set_has_strdistrict() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGPGameUserLocationRequest::clear_has_strdistrict() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGPGameUserLocationRequest::clear_strdistrict() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    strdistrict_->clear();
  }
  clear_has_strdistrict();
}
inline const ::std::string& ProGPGameUserLocationRequest::strdistrict() const {
  return *strdistrict_;
}
inline void ProGPGameUserLocationRequest::set_strdistrict(const ::std::string& value) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(value);
}
inline void ProGPGameUserLocationRequest::set_strdistrict(const char* value) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(value);
}
inline void ProGPGameUserLocationRequest::set_strdistrict(const void* value, size_t size) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameUserLocationRequest::mutable_strdistrict() {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  return strdistrict_;
}
inline ::std::string* ProGPGameUserLocationRequest::release_strdistrict() {
  clear_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdistrict_;
    strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameUserLocationRequest::set_allocated_strdistrict(::std::string* strdistrict) {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strdistrict) {
    set_has_strdistrict();
    strdistrict_ = strdistrict;
  } else {
    clear_has_strdistrict();
    strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strStreetName = 5;
inline bool ProGPGameUserLocationRequest::has_strstreetname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGPGameUserLocationRequest::set_has_strstreetname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGPGameUserLocationRequest::clear_has_strstreetname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGPGameUserLocationRequest::clear_strstreetname() {
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    strstreetname_->clear();
  }
  clear_has_strstreetname();
}
inline const ::std::string& ProGPGameUserLocationRequest::strstreetname() const {
  return *strstreetname_;
}
inline void ProGPGameUserLocationRequest::set_strstreetname(const ::std::string& value) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(value);
}
inline void ProGPGameUserLocationRequest::set_strstreetname(const char* value) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(value);
}
inline void ProGPGameUserLocationRequest::set_strstreetname(const void* value, size_t size) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGPGameUserLocationRequest::mutable_strstreetname() {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  return strstreetname_;
}
inline ::std::string* ProGPGameUserLocationRequest::release_strstreetname() {
  clear_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strstreetname_;
    strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGPGameUserLocationRequest::set_allocated_strstreetname(::std::string* strstreetname) {
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (strstreetname) {
    set_has_strstreetname();
    strstreetname_ = strstreetname;
  } else {
    clear_has_strstreetname();
    strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGPGameSyncCardResponse

// optional int32 seat = 2;
inline bool ProGPGameSyncCardResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameSyncCardResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameSyncCardResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameSyncCardResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameSyncCardResponse::seat() const {
  return seat_;
}
inline void ProGPGameSyncCardResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 handmahs = 3;
inline int ProGPGameSyncCardResponse::handmahs_size() const {
  return handmahs_.size();
}
inline void ProGPGameSyncCardResponse::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameSyncCardResponse::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProGPGameSyncCardResponse::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProGPGameSyncCardResponse::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameSyncCardResponse::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameSyncCardResponse::mutable_handmahs() {
  return &handmahs_;
}

// -------------------------------------------------------------------

// ProGPGameUserPhoneStatusRequest

// optional int32 seat_id = 1;
inline bool ProGPGameUserPhoneStatusRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameUserPhoneStatusRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameUserPhoneStatusRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameUserPhoneStatusRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameUserPhoneStatusRequest::seat_id() const {
  return seat_id_;
}
inline void ProGPGameUserPhoneStatusRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 userstatus = 2;
inline bool ProGPGameUserPhoneStatusRequest::has_userstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameUserPhoneStatusRequest::set_has_userstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameUserPhoneStatusRequest::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameUserPhoneStatusRequest::clear_userstatus() {
  userstatus_ = 0;
  clear_has_userstatus();
}
inline ::google::protobuf::int32 ProGPGameUserPhoneStatusRequest::userstatus() const {
  return userstatus_;
}
inline void ProGPGameUserPhoneStatusRequest::set_userstatus(::google::protobuf::int32 value) {
  set_has_userstatus();
  userstatus_ = value;
}

// -------------------------------------------------------------------

// ProGPGameUserGiveUpRequest

// optional int32 seat_id = 1;
inline bool ProGPGameUserGiveUpRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameUserGiveUpRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameUserGiveUpRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameUserGiveUpRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGPGameUserGiveUpRequest::seat_id() const {
  return seat_id_;
}
inline void ProGPGameUserGiveUpRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// -------------------------------------------------------------------

// ProGPGameUserHintRequest

// -------------------------------------------------------------------

// ProGPGameUserHintResponse

// optional int32 lenth = 1;
inline bool ProGPGameUserHintResponse::has_lenth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameUserHintResponse::set_has_lenth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameUserHintResponse::clear_has_lenth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameUserHintResponse::clear_lenth() {
  lenth_ = 0;
  clear_has_lenth();
}
inline ::google::protobuf::int32 ProGPGameUserHintResponse::lenth() const {
  return lenth_;
}
inline void ProGPGameUserHintResponse::set_lenth(::google::protobuf::int32 value) {
  set_has_lenth();
  lenth_ = value;
}

// repeated int32 outMahs = 2;
inline int ProGPGameUserHintResponse::outmahs_size() const {
  return outmahs_.size();
}
inline void ProGPGameUserHintResponse::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProGPGameUserHintResponse::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProGPGameUserHintResponse::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProGPGameUserHintResponse::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGPGameUserHintResponse::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGPGameUserHintResponse::mutable_outmahs() {
  return &outmahs_;
}

// -------------------------------------------------------------------

// ProGPGameUserCallScoreResponse

// optional int32 seat = 1;
inline bool ProGPGameUserCallScoreResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameUserCallScoreResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameUserCallScoreResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameUserCallScoreResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameUserCallScoreResponse::seat() const {
  return seat_;
}
inline void ProGPGameUserCallScoreResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 usercallscore = 2;
inline bool ProGPGameUserCallScoreResponse::has_usercallscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameUserCallScoreResponse::set_has_usercallscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameUserCallScoreResponse::clear_has_usercallscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameUserCallScoreResponse::clear_usercallscore() {
  usercallscore_ = 0;
  clear_has_usercallscore();
}
inline ::google::protobuf::int32 ProGPGameUserCallScoreResponse::usercallscore() const {
  return usercallscore_;
}
inline void ProGPGameUserCallScoreResponse::set_usercallscore(::google::protobuf::int32 value) {
  set_has_usercallscore();
  usercallscore_ = value;
}

// -------------------------------------------------------------------

// ProGPGameUserCallScoreRequest

// optional int32 seat = 1;
inline bool ProGPGameUserCallScoreRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGPGameUserCallScoreRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGPGameUserCallScoreRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGPGameUserCallScoreRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGPGameUserCallScoreRequest::seat() const {
  return seat_;
}
inline void ProGPGameUserCallScoreRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 usercallscore = 2;
inline bool ProGPGameUserCallScoreRequest::has_usercallscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGPGameUserCallScoreRequest::set_has_usercallscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGPGameUserCallScoreRequest::clear_has_usercallscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGPGameUserCallScoreRequest::clear_usercallscore() {
  usercallscore_ = 0;
  clear_has_usercallscore();
}
inline ::google::protobuf::int32 ProGPGameUserCallScoreRequest::usercallscore() const {
  return usercallscore_;
}
inline void ProGPGameUserCallScoreRequest::set_usercallscore(::google::protobuf::int32 value) {
  set_has_usercallscore();
  usercallscore_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameStatusResponse_MSGID>() {
  return ::ProGPGameStatusResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameDeskInfoResponse_MSGID>() {
  return ::ProGPGameDeskInfoResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameReadyNotify_MSGID>() {
  return ::ProGPGameReadyNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameReadyRequest_MSGID>() {
  return ::ProGPGameReadyRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameReadyResponse_MSGID>() {
  return ::ProGPGameReadyResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameStart_MSGID>() {
  return ::ProGPGameStart_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameDiceNotify_MSGID>() {
  return ::ProGPGameDiceNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameDiceRequest_MSGID>() {
  return ::ProGPGameDiceRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameDiceResult_MSGID>() {
  return ::ProGPGameDiceResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameSendMahs_MSGID>() {
  return ::ProGPGameSendMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameKingData_MSGID>() {
  return ::ProGPGameKingData_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameOutMahsResponse_MSGID>() {
  return ::ProGPGameOutMahsResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameTimerPower_MSGID>() {
  return ::ProGPGameTimerPower_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameOperateNotify_MSGID>() {
  return ::ProGPGameOperateNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameOperateResult_MSGID>() {
  return ::ProGPGameOperateResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameOperateRequest_MSGID>() {
  return ::ProGPGameOperateRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameTrust_MSGID>() {
  return ::ProGPGameTrust_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameOutMahRequest_MSGID>() {
  return ::ProGPGameOutMahRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameCatchCard_MSGID>() {
  return ::ProGPGameCatchCard_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameEnd_MSGID>() {
  return ::ProGPGameEnd_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameQuickSoundRequest_MSGID>() {
  return ::ProGPGameQuickSoundRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameQuickSoundResponse_MSGID>() {
  return ::ProGPGameQuickSoundResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameSendDiscardMahs_MSGID>() {
  return ::ProGPGameSendDiscardMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameSendActionMahs_MSGID>() {
  return ::ProGPGameSendActionMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameBrokenRequest_MSGID>() {
  return ::ProGPGameBrokenRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameBrokenOperate_MSGID>() {
  return ::ProGPGameBrokenOperate_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameBrokenNotify_MSGID>() {
  return ::ProGPGameBrokenNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameRuleConfig_MSGID>() {
  return ::ProGPGameRuleConfig_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameBrokenStatus_MSGID>() {
  return ::ProGPGameBrokenStatus_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameDataResp_MSGID>() {
  return ::ProGPGameDataResp_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameRecordRequest_MSGID>() {
  return ::ProGPGameRecordRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameRecordResponse_MSGID>() {
  return ::ProGPGameRecordResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserLocationRequest_MSGID>() {
  return ::ProGPGameUserLocationRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameSyncCardResponse_MSGID>() {
  return ::ProGPGameSyncCardResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserPhoneStatusRequest_MSGID>() {
  return ::ProGPGameUserPhoneStatusRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserGiveUpRequest_MSGID>() {
  return ::ProGPGameUserGiveUpRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserHintRequest_MSGID>() {
  return ::ProGPGameUserHintRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserHintResponse_MSGID>() {
  return ::ProGPGameUserHintResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserCallScoreResponse_MSGID>() {
  return ::ProGPGameUserCallScoreResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGPGameUserCallScoreRequest_MSGID>() {
  return ::ProGPGameUserCallScoreRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GPGameState>() {
  return ::GPGameState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GPSEND_TYPE>() {
  return ::GPSEND_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GPKIGN_TYPE>() {
  return ::GPKIGN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GPBROKEN_TYPE>() {
  return ::GPBROKEN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GPBROKEN_OPERATE>() {
  return ::GPBROKEN_OPERATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GPBROKEN_CODE>() {
  return ::GPBROKEN_CODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gppk_2eproto__INCLUDED
