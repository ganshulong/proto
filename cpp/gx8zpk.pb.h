// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gx8zpk.proto

#ifndef PROTOBUF_gx8zpk_2eproto__INCLUDED
#define PROTOBUF_gx8zpk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gx8zpk_2eproto();
void protobuf_AssignDesc_gx8zpk_2eproto();
void protobuf_ShutdownFile_gx8zpk_2eproto();

class ProGX8ZGameStatusResponse;
class ProGX8ZGameDeskInfoResponse;
class ProGX8ZGameReadyNotify;
class ProGX8ZGameReadyRequest;
class ProGX8ZGameReadyResponse;
class ProGX8ZGameStart;
class ProGX8ZGameDiceNotify;
class ProGX8ZGameDiceRequest;
class ProGX8ZGameDiceResult;
class ProGX8ZGameSendMahs;
class ProGX8ZGameKingData;
class ProGX8ZGameOutMahsResponse;
class ProGX8ZGameTimerPower;
class ProGX8ZGameOperateNotify;
class ProGX8ZGameOperateResult;
class ProGX8ZGameOperateRequest;
class ProGX8ZGameTrust;
class ProGX8ZGameOutMahRequest;
class ProGX8ZGameCatchCard;
class GX8ZMahList;
class GX8ZScoreList;
class GX8ZAwardList;
class ProGX8ZGameEnd;
class ProGX8ZGameQuickSoundRequest;
class ProGX8ZGameQuickSoundResponse;
class ProGX8ZGameSendDiscardMahs;
class GX8ZWeaveItem;
class GX8ZWeaveItems;
class ProGX8ZGameSendActionMahs;
class ProGX8ZGameBrokenRequest;
class ProGX8ZGameBrokenOperate;
class ProGX8ZGameBrokenNotify;
class ProGX8ZGameRuleConfig;
class ProGX8ZGameBrokenStatus;
class ProGX8ZGameDataResp;
class ProGX8ZGameRecordRequest;
class ProGX8ZGameRecordResponse;
class ProGX8ZGameUserLocationRequest;
class ProGX8ZGameSyncCardResponse;
class ProGX8ZGameUserPhoneStatusRequest;
class ProGX8ZGameUserGiveUpRequest;
class ProGX8ZGameUserHintRequest;
class ProGX8ZGameUserHintResponse;
class ProGX8ZGameUserDaTuNotify;
class ProGX8ZGameUserTeammateRequest;
class ProGX8ZGameUserDaTuRequest;
class ProGX8ZGameUserDaTuResponse;
class ProGX8ZGameUserDaTuResult;
class ProGX8ZGameShangYouResult;
class ProGX8ZGameShowFriendNotify;
class ProGX8ZGameBoomNumNotify;
class ProGX8ZGameShowBoomDataRequest;
class ProGX8ZGameShowBoomDataResponse;
class ProGX8ZGameCardTypeSelect;
class ProGX8ZGameIsSurrenderSelect;
class ProGX8ZGameIsSurrenderOperate;
class ProGX8ZGameIsAgreeSurrenderSelect;
class ProGX8ZGameIsAgreeSurrenderOperate;
class ProGX8ZGameIsAgreeSurrenderStatus;
class ProGX8ZGameSurrenderResult;
class ProGX8ZGameShowBoomNotify;
class ProGX8ZGameShowBoomOperate;
class ProGX8ZGameShowBoomResponse;

enum ProGX8ZGameStatusResponse_MSGID {
  ProGX8ZGameStatusResponse_MSGID_ID = 2200
};
bool ProGX8ZGameStatusResponse_MSGID_IsValid(int value);
const ProGX8ZGameStatusResponse_MSGID ProGX8ZGameStatusResponse_MSGID_MSGID_MIN = ProGX8ZGameStatusResponse_MSGID_ID;
const ProGX8ZGameStatusResponse_MSGID ProGX8ZGameStatusResponse_MSGID_MSGID_MAX = ProGX8ZGameStatusResponse_MSGID_ID;
const int ProGX8ZGameStatusResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameStatusResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameStatusResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameStatusResponse_MSGID_Name(ProGX8ZGameStatusResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameStatusResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameStatusResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameStatusResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameStatusResponse_MSGID>(
    ProGX8ZGameStatusResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameDeskInfoResponse_MSGID {
  ProGX8ZGameDeskInfoResponse_MSGID_ID = 2201
};
bool ProGX8ZGameDeskInfoResponse_MSGID_IsValid(int value);
const ProGX8ZGameDeskInfoResponse_MSGID ProGX8ZGameDeskInfoResponse_MSGID_MSGID_MIN = ProGX8ZGameDeskInfoResponse_MSGID_ID;
const ProGX8ZGameDeskInfoResponse_MSGID ProGX8ZGameDeskInfoResponse_MSGID_MSGID_MAX = ProGX8ZGameDeskInfoResponse_MSGID_ID;
const int ProGX8ZGameDeskInfoResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameDeskInfoResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDeskInfoResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameDeskInfoResponse_MSGID_Name(ProGX8ZGameDeskInfoResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameDeskInfoResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameDeskInfoResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameDeskInfoResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameDeskInfoResponse_MSGID>(
    ProGX8ZGameDeskInfoResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameReadyNotify_MSGID {
  ProGX8ZGameReadyNotify_MSGID_ID = 2202
};
bool ProGX8ZGameReadyNotify_MSGID_IsValid(int value);
const ProGX8ZGameReadyNotify_MSGID ProGX8ZGameReadyNotify_MSGID_MSGID_MIN = ProGX8ZGameReadyNotify_MSGID_ID;
const ProGX8ZGameReadyNotify_MSGID ProGX8ZGameReadyNotify_MSGID_MSGID_MAX = ProGX8ZGameReadyNotify_MSGID_ID;
const int ProGX8ZGameReadyNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameReadyNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameReadyNotify_MSGID_Name(ProGX8ZGameReadyNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameReadyNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameReadyNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameReadyNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameReadyNotify_MSGID>(
    ProGX8ZGameReadyNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameReadyRequest_MSGID {
  ProGX8ZGameReadyRequest_MSGID_ID = 2203
};
bool ProGX8ZGameReadyRequest_MSGID_IsValid(int value);
const ProGX8ZGameReadyRequest_MSGID ProGX8ZGameReadyRequest_MSGID_MSGID_MIN = ProGX8ZGameReadyRequest_MSGID_ID;
const ProGX8ZGameReadyRequest_MSGID ProGX8ZGameReadyRequest_MSGID_MSGID_MAX = ProGX8ZGameReadyRequest_MSGID_ID;
const int ProGX8ZGameReadyRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameReadyRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameReadyRequest_MSGID_Name(ProGX8ZGameReadyRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameReadyRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameReadyRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameReadyRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameReadyRequest_MSGID>(
    ProGX8ZGameReadyRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameReadyResponse_MSGID {
  ProGX8ZGameReadyResponse_MSGID_ID = 2204
};
bool ProGX8ZGameReadyResponse_MSGID_IsValid(int value);
const ProGX8ZGameReadyResponse_MSGID ProGX8ZGameReadyResponse_MSGID_MSGID_MIN = ProGX8ZGameReadyResponse_MSGID_ID;
const ProGX8ZGameReadyResponse_MSGID ProGX8ZGameReadyResponse_MSGID_MSGID_MAX = ProGX8ZGameReadyResponse_MSGID_ID;
const int ProGX8ZGameReadyResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameReadyResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameReadyResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameReadyResponse_MSGID_Name(ProGX8ZGameReadyResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameReadyResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameReadyResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameReadyResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameReadyResponse_MSGID>(
    ProGX8ZGameReadyResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameStart_MSGID {
  ProGX8ZGameStart_MSGID_ID = 2205
};
bool ProGX8ZGameStart_MSGID_IsValid(int value);
const ProGX8ZGameStart_MSGID ProGX8ZGameStart_MSGID_MSGID_MIN = ProGX8ZGameStart_MSGID_ID;
const ProGX8ZGameStart_MSGID ProGX8ZGameStart_MSGID_MSGID_MAX = ProGX8ZGameStart_MSGID_ID;
const int ProGX8ZGameStart_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameStart_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameStart_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameStart_MSGID_Name(ProGX8ZGameStart_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameStart_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameStart_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameStart_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameStart_MSGID>(
    ProGX8ZGameStart_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameDiceNotify_MSGID {
  ProGX8ZGameDiceNotify_MSGID_ID = 2206
};
bool ProGX8ZGameDiceNotify_MSGID_IsValid(int value);
const ProGX8ZGameDiceNotify_MSGID ProGX8ZGameDiceNotify_MSGID_MSGID_MIN = ProGX8ZGameDiceNotify_MSGID_ID;
const ProGX8ZGameDiceNotify_MSGID ProGX8ZGameDiceNotify_MSGID_MSGID_MAX = ProGX8ZGameDiceNotify_MSGID_ID;
const int ProGX8ZGameDiceNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameDiceNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameDiceNotify_MSGID_Name(ProGX8ZGameDiceNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameDiceNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameDiceNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameDiceNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameDiceNotify_MSGID>(
    ProGX8ZGameDiceNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameDiceRequest_MSGID {
  ProGX8ZGameDiceRequest_MSGID_ID = 2207
};
bool ProGX8ZGameDiceRequest_MSGID_IsValid(int value);
const ProGX8ZGameDiceRequest_MSGID ProGX8ZGameDiceRequest_MSGID_MSGID_MIN = ProGX8ZGameDiceRequest_MSGID_ID;
const ProGX8ZGameDiceRequest_MSGID ProGX8ZGameDiceRequest_MSGID_MSGID_MAX = ProGX8ZGameDiceRequest_MSGID_ID;
const int ProGX8ZGameDiceRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameDiceRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameDiceRequest_MSGID_Name(ProGX8ZGameDiceRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameDiceRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameDiceRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameDiceRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameDiceRequest_MSGID>(
    ProGX8ZGameDiceRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameDiceResult_MSGID {
  ProGX8ZGameDiceResult_MSGID_ID = 2208
};
bool ProGX8ZGameDiceResult_MSGID_IsValid(int value);
const ProGX8ZGameDiceResult_MSGID ProGX8ZGameDiceResult_MSGID_MSGID_MIN = ProGX8ZGameDiceResult_MSGID_ID;
const ProGX8ZGameDiceResult_MSGID ProGX8ZGameDiceResult_MSGID_MSGID_MAX = ProGX8ZGameDiceResult_MSGID_ID;
const int ProGX8ZGameDiceResult_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameDiceResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDiceResult_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameDiceResult_MSGID_Name(ProGX8ZGameDiceResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameDiceResult_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameDiceResult_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameDiceResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameDiceResult_MSGID>(
    ProGX8ZGameDiceResult_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameSendMahs_MSGID {
  ProGX8ZGameSendMahs_MSGID_ID = 2209
};
bool ProGX8ZGameSendMahs_MSGID_IsValid(int value);
const ProGX8ZGameSendMahs_MSGID ProGX8ZGameSendMahs_MSGID_MSGID_MIN = ProGX8ZGameSendMahs_MSGID_ID;
const ProGX8ZGameSendMahs_MSGID ProGX8ZGameSendMahs_MSGID_MSGID_MAX = ProGX8ZGameSendMahs_MSGID_ID;
const int ProGX8ZGameSendMahs_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameSendMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendMahs_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameSendMahs_MSGID_Name(ProGX8ZGameSendMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameSendMahs_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameSendMahs_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameSendMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameSendMahs_MSGID>(
    ProGX8ZGameSendMahs_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameKingData_MSGID {
  ProGX8ZGameKingData_MSGID_ID = 2210
};
bool ProGX8ZGameKingData_MSGID_IsValid(int value);
const ProGX8ZGameKingData_MSGID ProGX8ZGameKingData_MSGID_MSGID_MIN = ProGX8ZGameKingData_MSGID_ID;
const ProGX8ZGameKingData_MSGID ProGX8ZGameKingData_MSGID_MSGID_MAX = ProGX8ZGameKingData_MSGID_ID;
const int ProGX8ZGameKingData_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameKingData_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameKingData_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameKingData_MSGID_Name(ProGX8ZGameKingData_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameKingData_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameKingData_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameKingData_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameKingData_MSGID>(
    ProGX8ZGameKingData_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameOutMahsResponse_MSGID {
  ProGX8ZGameOutMahsResponse_MSGID_ID = 2211
};
bool ProGX8ZGameOutMahsResponse_MSGID_IsValid(int value);
const ProGX8ZGameOutMahsResponse_MSGID ProGX8ZGameOutMahsResponse_MSGID_MSGID_MIN = ProGX8ZGameOutMahsResponse_MSGID_ID;
const ProGX8ZGameOutMahsResponse_MSGID ProGX8ZGameOutMahsResponse_MSGID_MSGID_MAX = ProGX8ZGameOutMahsResponse_MSGID_ID;
const int ProGX8ZGameOutMahsResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameOutMahsResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOutMahsResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameOutMahsResponse_MSGID_Name(ProGX8ZGameOutMahsResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameOutMahsResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameOutMahsResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameOutMahsResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameOutMahsResponse_MSGID>(
    ProGX8ZGameOutMahsResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameTimerPower_MSGID {
  ProGX8ZGameTimerPower_MSGID_ID = 2212
};
bool ProGX8ZGameTimerPower_MSGID_IsValid(int value);
const ProGX8ZGameTimerPower_MSGID ProGX8ZGameTimerPower_MSGID_MSGID_MIN = ProGX8ZGameTimerPower_MSGID_ID;
const ProGX8ZGameTimerPower_MSGID ProGX8ZGameTimerPower_MSGID_MSGID_MAX = ProGX8ZGameTimerPower_MSGID_ID;
const int ProGX8ZGameTimerPower_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameTimerPower_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameTimerPower_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameTimerPower_MSGID_Name(ProGX8ZGameTimerPower_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameTimerPower_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameTimerPower_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameTimerPower_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameTimerPower_MSGID>(
    ProGX8ZGameTimerPower_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameOperateNotify_MSGID {
  ProGX8ZGameOperateNotify_MSGID_ID = 2213
};
bool ProGX8ZGameOperateNotify_MSGID_IsValid(int value);
const ProGX8ZGameOperateNotify_MSGID ProGX8ZGameOperateNotify_MSGID_MSGID_MIN = ProGX8ZGameOperateNotify_MSGID_ID;
const ProGX8ZGameOperateNotify_MSGID ProGX8ZGameOperateNotify_MSGID_MSGID_MAX = ProGX8ZGameOperateNotify_MSGID_ID;
const int ProGX8ZGameOperateNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameOperateNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameOperateNotify_MSGID_Name(ProGX8ZGameOperateNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameOperateNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameOperateNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameOperateNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameOperateNotify_MSGID>(
    ProGX8ZGameOperateNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameOperateResult_MSGID {
  ProGX8ZGameOperateResult_MSGID_ID = 2214
};
bool ProGX8ZGameOperateResult_MSGID_IsValid(int value);
const ProGX8ZGameOperateResult_MSGID ProGX8ZGameOperateResult_MSGID_MSGID_MIN = ProGX8ZGameOperateResult_MSGID_ID;
const ProGX8ZGameOperateResult_MSGID ProGX8ZGameOperateResult_MSGID_MSGID_MAX = ProGX8ZGameOperateResult_MSGID_ID;
const int ProGX8ZGameOperateResult_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameOperateResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateResult_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameOperateResult_MSGID_Name(ProGX8ZGameOperateResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameOperateResult_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameOperateResult_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameOperateResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameOperateResult_MSGID>(
    ProGX8ZGameOperateResult_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameOperateRequest_MSGID {
  ProGX8ZGameOperateRequest_MSGID_ID = 2215
};
bool ProGX8ZGameOperateRequest_MSGID_IsValid(int value);
const ProGX8ZGameOperateRequest_MSGID ProGX8ZGameOperateRequest_MSGID_MSGID_MIN = ProGX8ZGameOperateRequest_MSGID_ID;
const ProGX8ZGameOperateRequest_MSGID ProGX8ZGameOperateRequest_MSGID_MSGID_MAX = ProGX8ZGameOperateRequest_MSGID_ID;
const int ProGX8ZGameOperateRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameOperateRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOperateRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameOperateRequest_MSGID_Name(ProGX8ZGameOperateRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameOperateRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameOperateRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameOperateRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameOperateRequest_MSGID>(
    ProGX8ZGameOperateRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameTrust_MSGID {
  ProGX8ZGameTrust_MSGID_ID = 2216
};
bool ProGX8ZGameTrust_MSGID_IsValid(int value);
const ProGX8ZGameTrust_MSGID ProGX8ZGameTrust_MSGID_MSGID_MIN = ProGX8ZGameTrust_MSGID_ID;
const ProGX8ZGameTrust_MSGID ProGX8ZGameTrust_MSGID_MSGID_MAX = ProGX8ZGameTrust_MSGID_ID;
const int ProGX8ZGameTrust_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameTrust_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameTrust_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameTrust_MSGID_Name(ProGX8ZGameTrust_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameTrust_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameTrust_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameTrust_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameTrust_MSGID>(
    ProGX8ZGameTrust_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameOutMahRequest_MSGID {
  ProGX8ZGameOutMahRequest_MSGID_ID = 2217
};
bool ProGX8ZGameOutMahRequest_MSGID_IsValid(int value);
const ProGX8ZGameOutMahRequest_MSGID ProGX8ZGameOutMahRequest_MSGID_MSGID_MIN = ProGX8ZGameOutMahRequest_MSGID_ID;
const ProGX8ZGameOutMahRequest_MSGID ProGX8ZGameOutMahRequest_MSGID_MSGID_MAX = ProGX8ZGameOutMahRequest_MSGID_ID;
const int ProGX8ZGameOutMahRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameOutMahRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameOutMahRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameOutMahRequest_MSGID_Name(ProGX8ZGameOutMahRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameOutMahRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameOutMahRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameOutMahRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameOutMahRequest_MSGID>(
    ProGX8ZGameOutMahRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameCatchCard_MSGID {
  ProGX8ZGameCatchCard_MSGID_ID = 2218
};
bool ProGX8ZGameCatchCard_MSGID_IsValid(int value);
const ProGX8ZGameCatchCard_MSGID ProGX8ZGameCatchCard_MSGID_MSGID_MIN = ProGX8ZGameCatchCard_MSGID_ID;
const ProGX8ZGameCatchCard_MSGID ProGX8ZGameCatchCard_MSGID_MSGID_MAX = ProGX8ZGameCatchCard_MSGID_ID;
const int ProGX8ZGameCatchCard_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameCatchCard_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameCatchCard_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameCatchCard_MSGID_Name(ProGX8ZGameCatchCard_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameCatchCard_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameCatchCard_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameCatchCard_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameCatchCard_MSGID>(
    ProGX8ZGameCatchCard_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameEnd_MSGID {
  ProGX8ZGameEnd_MSGID_ID = 2219
};
bool ProGX8ZGameEnd_MSGID_IsValid(int value);
const ProGX8ZGameEnd_MSGID ProGX8ZGameEnd_MSGID_MSGID_MIN = ProGX8ZGameEnd_MSGID_ID;
const ProGX8ZGameEnd_MSGID ProGX8ZGameEnd_MSGID_MSGID_MAX = ProGX8ZGameEnd_MSGID_ID;
const int ProGX8ZGameEnd_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameEnd_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameEnd_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameEnd_MSGID_Name(ProGX8ZGameEnd_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameEnd_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameEnd_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameEnd_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameEnd_MSGID>(
    ProGX8ZGameEnd_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameQuickSoundRequest_MSGID {
  ProGX8ZGameQuickSoundRequest_MSGID_ID = 2220
};
bool ProGX8ZGameQuickSoundRequest_MSGID_IsValid(int value);
const ProGX8ZGameQuickSoundRequest_MSGID ProGX8ZGameQuickSoundRequest_MSGID_MSGID_MIN = ProGX8ZGameQuickSoundRequest_MSGID_ID;
const ProGX8ZGameQuickSoundRequest_MSGID ProGX8ZGameQuickSoundRequest_MSGID_MSGID_MAX = ProGX8ZGameQuickSoundRequest_MSGID_ID;
const int ProGX8ZGameQuickSoundRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameQuickSoundRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameQuickSoundRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameQuickSoundRequest_MSGID_Name(ProGX8ZGameQuickSoundRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameQuickSoundRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameQuickSoundRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameQuickSoundRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameQuickSoundRequest_MSGID>(
    ProGX8ZGameQuickSoundRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameQuickSoundResponse_MSGID {
  ProGX8ZGameQuickSoundResponse_MSGID_ID = 2221
};
bool ProGX8ZGameQuickSoundResponse_MSGID_IsValid(int value);
const ProGX8ZGameQuickSoundResponse_MSGID ProGX8ZGameQuickSoundResponse_MSGID_MSGID_MIN = ProGX8ZGameQuickSoundResponse_MSGID_ID;
const ProGX8ZGameQuickSoundResponse_MSGID ProGX8ZGameQuickSoundResponse_MSGID_MSGID_MAX = ProGX8ZGameQuickSoundResponse_MSGID_ID;
const int ProGX8ZGameQuickSoundResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameQuickSoundResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameQuickSoundResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameQuickSoundResponse_MSGID_Name(ProGX8ZGameQuickSoundResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameQuickSoundResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameQuickSoundResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameQuickSoundResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameQuickSoundResponse_MSGID>(
    ProGX8ZGameQuickSoundResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameSendDiscardMahs_MSGID {
  ProGX8ZGameSendDiscardMahs_MSGID_ID = 2222
};
bool ProGX8ZGameSendDiscardMahs_MSGID_IsValid(int value);
const ProGX8ZGameSendDiscardMahs_MSGID ProGX8ZGameSendDiscardMahs_MSGID_MSGID_MIN = ProGX8ZGameSendDiscardMahs_MSGID_ID;
const ProGX8ZGameSendDiscardMahs_MSGID ProGX8ZGameSendDiscardMahs_MSGID_MSGID_MAX = ProGX8ZGameSendDiscardMahs_MSGID_ID;
const int ProGX8ZGameSendDiscardMahs_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameSendDiscardMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendDiscardMahs_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameSendDiscardMahs_MSGID_Name(ProGX8ZGameSendDiscardMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameSendDiscardMahs_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameSendDiscardMahs_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameSendDiscardMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameSendDiscardMahs_MSGID>(
    ProGX8ZGameSendDiscardMahs_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameSendActionMahs_MSGID {
  ProGX8ZGameSendActionMahs_MSGID_ID = 2223
};
bool ProGX8ZGameSendActionMahs_MSGID_IsValid(int value);
const ProGX8ZGameSendActionMahs_MSGID ProGX8ZGameSendActionMahs_MSGID_MSGID_MIN = ProGX8ZGameSendActionMahs_MSGID_ID;
const ProGX8ZGameSendActionMahs_MSGID ProGX8ZGameSendActionMahs_MSGID_MSGID_MAX = ProGX8ZGameSendActionMahs_MSGID_ID;
const int ProGX8ZGameSendActionMahs_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameSendActionMahs_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSendActionMahs_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameSendActionMahs_MSGID_Name(ProGX8ZGameSendActionMahs_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameSendActionMahs_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameSendActionMahs_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameSendActionMahs_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameSendActionMahs_MSGID>(
    ProGX8ZGameSendActionMahs_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameBrokenRequest_MSGID {
  ProGX8ZGameBrokenRequest_MSGID_ID = 2224
};
bool ProGX8ZGameBrokenRequest_MSGID_IsValid(int value);
const ProGX8ZGameBrokenRequest_MSGID ProGX8ZGameBrokenRequest_MSGID_MSGID_MIN = ProGX8ZGameBrokenRequest_MSGID_ID;
const ProGX8ZGameBrokenRequest_MSGID ProGX8ZGameBrokenRequest_MSGID_MSGID_MAX = ProGX8ZGameBrokenRequest_MSGID_ID;
const int ProGX8ZGameBrokenRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameBrokenRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameBrokenRequest_MSGID_Name(ProGX8ZGameBrokenRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameBrokenRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameBrokenRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameBrokenRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameBrokenRequest_MSGID>(
    ProGX8ZGameBrokenRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameBrokenOperate_MSGID {
  ProGX8ZGameBrokenOperate_MSGID_ID = 2225
};
bool ProGX8ZGameBrokenOperate_MSGID_IsValid(int value);
const ProGX8ZGameBrokenOperate_MSGID ProGX8ZGameBrokenOperate_MSGID_MSGID_MIN = ProGX8ZGameBrokenOperate_MSGID_ID;
const ProGX8ZGameBrokenOperate_MSGID ProGX8ZGameBrokenOperate_MSGID_MSGID_MAX = ProGX8ZGameBrokenOperate_MSGID_ID;
const int ProGX8ZGameBrokenOperate_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameBrokenOperate_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenOperate_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameBrokenOperate_MSGID_Name(ProGX8ZGameBrokenOperate_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameBrokenOperate_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameBrokenOperate_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameBrokenOperate_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameBrokenOperate_MSGID>(
    ProGX8ZGameBrokenOperate_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameBrokenNotify_MSGID {
  ProGX8ZGameBrokenNotify_MSGID_ID = 2226
};
bool ProGX8ZGameBrokenNotify_MSGID_IsValid(int value);
const ProGX8ZGameBrokenNotify_MSGID ProGX8ZGameBrokenNotify_MSGID_MSGID_MIN = ProGX8ZGameBrokenNotify_MSGID_ID;
const ProGX8ZGameBrokenNotify_MSGID ProGX8ZGameBrokenNotify_MSGID_MSGID_MAX = ProGX8ZGameBrokenNotify_MSGID_ID;
const int ProGX8ZGameBrokenNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameBrokenNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameBrokenNotify_MSGID_Name(ProGX8ZGameBrokenNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameBrokenNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameBrokenNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameBrokenNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameBrokenNotify_MSGID>(
    ProGX8ZGameBrokenNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameRuleConfig_MSGID {
  ProGX8ZGameRuleConfig_MSGID_ID = 2227
};
bool ProGX8ZGameRuleConfig_MSGID_IsValid(int value);
const ProGX8ZGameRuleConfig_MSGID ProGX8ZGameRuleConfig_MSGID_MSGID_MIN = ProGX8ZGameRuleConfig_MSGID_ID;
const ProGX8ZGameRuleConfig_MSGID ProGX8ZGameRuleConfig_MSGID_MSGID_MAX = ProGX8ZGameRuleConfig_MSGID_ID;
const int ProGX8ZGameRuleConfig_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameRuleConfig_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameRuleConfig_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameRuleConfig_MSGID_Name(ProGX8ZGameRuleConfig_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameRuleConfig_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameRuleConfig_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameRuleConfig_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameRuleConfig_MSGID>(
    ProGX8ZGameRuleConfig_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameBrokenStatus_MSGID {
  ProGX8ZGameBrokenStatus_MSGID_ID = 2228
};
bool ProGX8ZGameBrokenStatus_MSGID_IsValid(int value);
const ProGX8ZGameBrokenStatus_MSGID ProGX8ZGameBrokenStatus_MSGID_MSGID_MIN = ProGX8ZGameBrokenStatus_MSGID_ID;
const ProGX8ZGameBrokenStatus_MSGID ProGX8ZGameBrokenStatus_MSGID_MSGID_MAX = ProGX8ZGameBrokenStatus_MSGID_ID;
const int ProGX8ZGameBrokenStatus_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameBrokenStatus_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBrokenStatus_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameBrokenStatus_MSGID_Name(ProGX8ZGameBrokenStatus_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameBrokenStatus_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameBrokenStatus_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameBrokenStatus_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameBrokenStatus_MSGID>(
    ProGX8ZGameBrokenStatus_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameDataResp_MSGID {
  ProGX8ZGameDataResp_MSGID_ID = 2229
};
bool ProGX8ZGameDataResp_MSGID_IsValid(int value);
const ProGX8ZGameDataResp_MSGID ProGX8ZGameDataResp_MSGID_MSGID_MIN = ProGX8ZGameDataResp_MSGID_ID;
const ProGX8ZGameDataResp_MSGID ProGX8ZGameDataResp_MSGID_MSGID_MAX = ProGX8ZGameDataResp_MSGID_ID;
const int ProGX8ZGameDataResp_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameDataResp_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameDataResp_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameDataResp_MSGID_Name(ProGX8ZGameDataResp_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameDataResp_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameDataResp_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameDataResp_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameDataResp_MSGID>(
    ProGX8ZGameDataResp_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameRecordRequest_MSGID {
  ProGX8ZGameRecordRequest_MSGID_ID = 2230
};
bool ProGX8ZGameRecordRequest_MSGID_IsValid(int value);
const ProGX8ZGameRecordRequest_MSGID ProGX8ZGameRecordRequest_MSGID_MSGID_MIN = ProGX8ZGameRecordRequest_MSGID_ID;
const ProGX8ZGameRecordRequest_MSGID ProGX8ZGameRecordRequest_MSGID_MSGID_MAX = ProGX8ZGameRecordRequest_MSGID_ID;
const int ProGX8ZGameRecordRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameRecordRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameRecordRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameRecordRequest_MSGID_Name(ProGX8ZGameRecordRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameRecordRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameRecordRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameRecordRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameRecordRequest_MSGID>(
    ProGX8ZGameRecordRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameRecordResponse_MSGID {
  ProGX8ZGameRecordResponse_MSGID_ID = 2231
};
bool ProGX8ZGameRecordResponse_MSGID_IsValid(int value);
const ProGX8ZGameRecordResponse_MSGID ProGX8ZGameRecordResponse_MSGID_MSGID_MIN = ProGX8ZGameRecordResponse_MSGID_ID;
const ProGX8ZGameRecordResponse_MSGID ProGX8ZGameRecordResponse_MSGID_MSGID_MAX = ProGX8ZGameRecordResponse_MSGID_ID;
const int ProGX8ZGameRecordResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameRecordResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameRecordResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameRecordResponse_MSGID_Name(ProGX8ZGameRecordResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameRecordResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameRecordResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameRecordResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameRecordResponse_MSGID>(
    ProGX8ZGameRecordResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserLocationRequest_MSGID {
  ProGX8ZGameUserLocationRequest_MSGID_ID = 2232
};
bool ProGX8ZGameUserLocationRequest_MSGID_IsValid(int value);
const ProGX8ZGameUserLocationRequest_MSGID ProGX8ZGameUserLocationRequest_MSGID_MSGID_MIN = ProGX8ZGameUserLocationRequest_MSGID_ID;
const ProGX8ZGameUserLocationRequest_MSGID ProGX8ZGameUserLocationRequest_MSGID_MSGID_MAX = ProGX8ZGameUserLocationRequest_MSGID_ID;
const int ProGX8ZGameUserLocationRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserLocationRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserLocationRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserLocationRequest_MSGID_Name(ProGX8ZGameUserLocationRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserLocationRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserLocationRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserLocationRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserLocationRequest_MSGID>(
    ProGX8ZGameUserLocationRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameSyncCardResponse_MSGID {
  ProGX8ZGameSyncCardResponse_MSGID_ID = 2233
};
bool ProGX8ZGameSyncCardResponse_MSGID_IsValid(int value);
const ProGX8ZGameSyncCardResponse_MSGID ProGX8ZGameSyncCardResponse_MSGID_MSGID_MIN = ProGX8ZGameSyncCardResponse_MSGID_ID;
const ProGX8ZGameSyncCardResponse_MSGID ProGX8ZGameSyncCardResponse_MSGID_MSGID_MAX = ProGX8ZGameSyncCardResponse_MSGID_ID;
const int ProGX8ZGameSyncCardResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameSyncCardResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSyncCardResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameSyncCardResponse_MSGID_Name(ProGX8ZGameSyncCardResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameSyncCardResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameSyncCardResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameSyncCardResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameSyncCardResponse_MSGID>(
    ProGX8ZGameSyncCardResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserPhoneStatusRequest_MSGID {
  ProGX8ZGameUserPhoneStatusRequest_MSGID_ID = 2234
};
bool ProGX8ZGameUserPhoneStatusRequest_MSGID_IsValid(int value);
const ProGX8ZGameUserPhoneStatusRequest_MSGID ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_MIN = ProGX8ZGameUserPhoneStatusRequest_MSGID_ID;
const ProGX8ZGameUserPhoneStatusRequest_MSGID ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_MAX = ProGX8ZGameUserPhoneStatusRequest_MSGID_ID;
const int ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserPhoneStatusRequest_MSGID_Name(ProGX8ZGameUserPhoneStatusRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserPhoneStatusRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserPhoneStatusRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserPhoneStatusRequest_MSGID>(
    ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserGiveUpRequest_MSGID {
  ProGX8ZGameUserGiveUpRequest_MSGID_ID = 2235
};
bool ProGX8ZGameUserGiveUpRequest_MSGID_IsValid(int value);
const ProGX8ZGameUserGiveUpRequest_MSGID ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_MIN = ProGX8ZGameUserGiveUpRequest_MSGID_ID;
const ProGX8ZGameUserGiveUpRequest_MSGID ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_MAX = ProGX8ZGameUserGiveUpRequest_MSGID_ID;
const int ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserGiveUpRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserGiveUpRequest_MSGID_Name(ProGX8ZGameUserGiveUpRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserGiveUpRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserGiveUpRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserGiveUpRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserGiveUpRequest_MSGID>(
    ProGX8ZGameUserGiveUpRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserHintRequest_MSGID {
  ProGX8ZGameUserHintRequest_MSGID_ID = 2236
};
bool ProGX8ZGameUserHintRequest_MSGID_IsValid(int value);
const ProGX8ZGameUserHintRequest_MSGID ProGX8ZGameUserHintRequest_MSGID_MSGID_MIN = ProGX8ZGameUserHintRequest_MSGID_ID;
const ProGX8ZGameUserHintRequest_MSGID ProGX8ZGameUserHintRequest_MSGID_MSGID_MAX = ProGX8ZGameUserHintRequest_MSGID_ID;
const int ProGX8ZGameUserHintRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserHintRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserHintRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserHintRequest_MSGID_Name(ProGX8ZGameUserHintRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserHintRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserHintRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserHintRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserHintRequest_MSGID>(
    ProGX8ZGameUserHintRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserHintResponse_MSGID {
  ProGX8ZGameUserHintResponse_MSGID_ID = 2237
};
bool ProGX8ZGameUserHintResponse_MSGID_IsValid(int value);
const ProGX8ZGameUserHintResponse_MSGID ProGX8ZGameUserHintResponse_MSGID_MSGID_MIN = ProGX8ZGameUserHintResponse_MSGID_ID;
const ProGX8ZGameUserHintResponse_MSGID ProGX8ZGameUserHintResponse_MSGID_MSGID_MAX = ProGX8ZGameUserHintResponse_MSGID_ID;
const int ProGX8ZGameUserHintResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserHintResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserHintResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserHintResponse_MSGID_Name(ProGX8ZGameUserHintResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserHintResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserHintResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserHintResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserHintResponse_MSGID>(
    ProGX8ZGameUserHintResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserDaTuNotify_MSGID {
  ProGX8ZGameUserDaTuNotify_MSGID_ID = 2238
};
bool ProGX8ZGameUserDaTuNotify_MSGID_IsValid(int value);
const ProGX8ZGameUserDaTuNotify_MSGID ProGX8ZGameUserDaTuNotify_MSGID_MSGID_MIN = ProGX8ZGameUserDaTuNotify_MSGID_ID;
const ProGX8ZGameUserDaTuNotify_MSGID ProGX8ZGameUserDaTuNotify_MSGID_MSGID_MAX = ProGX8ZGameUserDaTuNotify_MSGID_ID;
const int ProGX8ZGameUserDaTuNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserDaTuNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserDaTuNotify_MSGID_Name(ProGX8ZGameUserDaTuNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserDaTuNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserDaTuNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserDaTuNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserDaTuNotify_MSGID>(
    ProGX8ZGameUserDaTuNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserTeammateRequest_MSGID {
  ProGX8ZGameUserTeammateRequest_MSGID_ID = 2239
};
bool ProGX8ZGameUserTeammateRequest_MSGID_IsValid(int value);
const ProGX8ZGameUserTeammateRequest_MSGID ProGX8ZGameUserTeammateRequest_MSGID_MSGID_MIN = ProGX8ZGameUserTeammateRequest_MSGID_ID;
const ProGX8ZGameUserTeammateRequest_MSGID ProGX8ZGameUserTeammateRequest_MSGID_MSGID_MAX = ProGX8ZGameUserTeammateRequest_MSGID_ID;
const int ProGX8ZGameUserTeammateRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserTeammateRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserTeammateRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserTeammateRequest_MSGID_Name(ProGX8ZGameUserTeammateRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserTeammateRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserTeammateRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserTeammateRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserTeammateRequest_MSGID>(
    ProGX8ZGameUserTeammateRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserDaTuRequest_MSGID {
  ProGX8ZGameUserDaTuRequest_MSGID_ID = 2240
};
bool ProGX8ZGameUserDaTuRequest_MSGID_IsValid(int value);
const ProGX8ZGameUserDaTuRequest_MSGID ProGX8ZGameUserDaTuRequest_MSGID_MSGID_MIN = ProGX8ZGameUserDaTuRequest_MSGID_ID;
const ProGX8ZGameUserDaTuRequest_MSGID ProGX8ZGameUserDaTuRequest_MSGID_MSGID_MAX = ProGX8ZGameUserDaTuRequest_MSGID_ID;
const int ProGX8ZGameUserDaTuRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserDaTuRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserDaTuRequest_MSGID_Name(ProGX8ZGameUserDaTuRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserDaTuRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserDaTuRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserDaTuRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserDaTuRequest_MSGID>(
    ProGX8ZGameUserDaTuRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserDaTuResponse_MSGID {
  ProGX8ZGameUserDaTuResponse_MSGID_ID = 2241
};
bool ProGX8ZGameUserDaTuResponse_MSGID_IsValid(int value);
const ProGX8ZGameUserDaTuResponse_MSGID ProGX8ZGameUserDaTuResponse_MSGID_MSGID_MIN = ProGX8ZGameUserDaTuResponse_MSGID_ID;
const ProGX8ZGameUserDaTuResponse_MSGID ProGX8ZGameUserDaTuResponse_MSGID_MSGID_MAX = ProGX8ZGameUserDaTuResponse_MSGID_ID;
const int ProGX8ZGameUserDaTuResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserDaTuResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserDaTuResponse_MSGID_Name(ProGX8ZGameUserDaTuResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserDaTuResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserDaTuResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserDaTuResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserDaTuResponse_MSGID>(
    ProGX8ZGameUserDaTuResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameUserDaTuResult_MSGID {
  ProGX8ZGameUserDaTuResult_MSGID_ID = 2242
};
bool ProGX8ZGameUserDaTuResult_MSGID_IsValid(int value);
const ProGX8ZGameUserDaTuResult_MSGID ProGX8ZGameUserDaTuResult_MSGID_MSGID_MIN = ProGX8ZGameUserDaTuResult_MSGID_ID;
const ProGX8ZGameUserDaTuResult_MSGID ProGX8ZGameUserDaTuResult_MSGID_MSGID_MAX = ProGX8ZGameUserDaTuResult_MSGID_ID;
const int ProGX8ZGameUserDaTuResult_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameUserDaTuResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameUserDaTuResult_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameUserDaTuResult_MSGID_Name(ProGX8ZGameUserDaTuResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameUserDaTuResult_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameUserDaTuResult_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameUserDaTuResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameUserDaTuResult_MSGID>(
    ProGX8ZGameUserDaTuResult_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShangYouResult_MSGID {
  ProGX8ZGameShangYouResult_MSGID_ID = 2243
};
bool ProGX8ZGameShangYouResult_MSGID_IsValid(int value);
const ProGX8ZGameShangYouResult_MSGID ProGX8ZGameShangYouResult_MSGID_MSGID_MIN = ProGX8ZGameShangYouResult_MSGID_ID;
const ProGX8ZGameShangYouResult_MSGID ProGX8ZGameShangYouResult_MSGID_MSGID_MAX = ProGX8ZGameShangYouResult_MSGID_ID;
const int ProGX8ZGameShangYouResult_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShangYouResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShangYouResult_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShangYouResult_MSGID_Name(ProGX8ZGameShangYouResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShangYouResult_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShangYouResult_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShangYouResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShangYouResult_MSGID>(
    ProGX8ZGameShangYouResult_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShowFriendNotify_MSGID {
  ProGX8ZGameShowFriendNotify_MSGID_ID = 2244
};
bool ProGX8ZGameShowFriendNotify_MSGID_IsValid(int value);
const ProGX8ZGameShowFriendNotify_MSGID ProGX8ZGameShowFriendNotify_MSGID_MSGID_MIN = ProGX8ZGameShowFriendNotify_MSGID_ID;
const ProGX8ZGameShowFriendNotify_MSGID ProGX8ZGameShowFriendNotify_MSGID_MSGID_MAX = ProGX8ZGameShowFriendNotify_MSGID_ID;
const int ProGX8ZGameShowFriendNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShowFriendNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowFriendNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShowFriendNotify_MSGID_Name(ProGX8ZGameShowFriendNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShowFriendNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShowFriendNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShowFriendNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShowFriendNotify_MSGID>(
    ProGX8ZGameShowFriendNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameBoomNumNotify_MSGID {
  ProGX8ZGameBoomNumNotify_MSGID_ID = 2245
};
bool ProGX8ZGameBoomNumNotify_MSGID_IsValid(int value);
const ProGX8ZGameBoomNumNotify_MSGID ProGX8ZGameBoomNumNotify_MSGID_MSGID_MIN = ProGX8ZGameBoomNumNotify_MSGID_ID;
const ProGX8ZGameBoomNumNotify_MSGID ProGX8ZGameBoomNumNotify_MSGID_MSGID_MAX = ProGX8ZGameBoomNumNotify_MSGID_ID;
const int ProGX8ZGameBoomNumNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameBoomNumNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameBoomNumNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameBoomNumNotify_MSGID_Name(ProGX8ZGameBoomNumNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameBoomNumNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameBoomNumNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameBoomNumNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameBoomNumNotify_MSGID>(
    ProGX8ZGameBoomNumNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShowBoomDataRequest_MSGID {
  ProGX8ZGameShowBoomDataRequest_MSGID_ID = 2246
};
bool ProGX8ZGameShowBoomDataRequest_MSGID_IsValid(int value);
const ProGX8ZGameShowBoomDataRequest_MSGID ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_MIN = ProGX8ZGameShowBoomDataRequest_MSGID_ID;
const ProGX8ZGameShowBoomDataRequest_MSGID ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_MAX = ProGX8ZGameShowBoomDataRequest_MSGID_ID;
const int ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomDataRequest_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShowBoomDataRequest_MSGID_Name(ProGX8ZGameShowBoomDataRequest_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShowBoomDataRequest_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShowBoomDataRequest_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShowBoomDataRequest_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShowBoomDataRequest_MSGID>(
    ProGX8ZGameShowBoomDataRequest_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShowBoomDataResponse_MSGID {
  ProGX8ZGameShowBoomDataResponse_MSGID_ID = 2247
};
bool ProGX8ZGameShowBoomDataResponse_MSGID_IsValid(int value);
const ProGX8ZGameShowBoomDataResponse_MSGID ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_MIN = ProGX8ZGameShowBoomDataResponse_MSGID_ID;
const ProGX8ZGameShowBoomDataResponse_MSGID ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_MAX = ProGX8ZGameShowBoomDataResponse_MSGID_ID;
const int ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomDataResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShowBoomDataResponse_MSGID_Name(ProGX8ZGameShowBoomDataResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShowBoomDataResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShowBoomDataResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShowBoomDataResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShowBoomDataResponse_MSGID>(
    ProGX8ZGameShowBoomDataResponse_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameCardTypeSelect_MSGID {
  ProGX8ZGameCardTypeSelect_MSGID_ID = 2248
};
bool ProGX8ZGameCardTypeSelect_MSGID_IsValid(int value);
const ProGX8ZGameCardTypeSelect_MSGID ProGX8ZGameCardTypeSelect_MSGID_MSGID_MIN = ProGX8ZGameCardTypeSelect_MSGID_ID;
const ProGX8ZGameCardTypeSelect_MSGID ProGX8ZGameCardTypeSelect_MSGID_MSGID_MAX = ProGX8ZGameCardTypeSelect_MSGID_ID;
const int ProGX8ZGameCardTypeSelect_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameCardTypeSelect_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameCardTypeSelect_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameCardTypeSelect_MSGID_Name(ProGX8ZGameCardTypeSelect_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameCardTypeSelect_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameCardTypeSelect_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameCardTypeSelect_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameCardTypeSelect_MSGID>(
    ProGX8ZGameCardTypeSelect_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameIsSurrenderSelect_MSGID {
  ProGX8ZGameIsSurrenderSelect_MSGID_ID = 2249
};
bool ProGX8ZGameIsSurrenderSelect_MSGID_IsValid(int value);
const ProGX8ZGameIsSurrenderSelect_MSGID ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_MIN = ProGX8ZGameIsSurrenderSelect_MSGID_ID;
const ProGX8ZGameIsSurrenderSelect_MSGID ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_MAX = ProGX8ZGameIsSurrenderSelect_MSGID_ID;
const int ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsSurrenderSelect_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameIsSurrenderSelect_MSGID_Name(ProGX8ZGameIsSurrenderSelect_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameIsSurrenderSelect_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameIsSurrenderSelect_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameIsSurrenderSelect_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameIsSurrenderSelect_MSGID>(
    ProGX8ZGameIsSurrenderSelect_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameIsSurrenderOperate_MSGID {
  ProGX8ZGameIsSurrenderOperate_MSGID_ID = 2250
};
bool ProGX8ZGameIsSurrenderOperate_MSGID_IsValid(int value);
const ProGX8ZGameIsSurrenderOperate_MSGID ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_MIN = ProGX8ZGameIsSurrenderOperate_MSGID_ID;
const ProGX8ZGameIsSurrenderOperate_MSGID ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_MAX = ProGX8ZGameIsSurrenderOperate_MSGID_ID;
const int ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsSurrenderOperate_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameIsSurrenderOperate_MSGID_Name(ProGX8ZGameIsSurrenderOperate_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameIsSurrenderOperate_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameIsSurrenderOperate_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameIsSurrenderOperate_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameIsSurrenderOperate_MSGID>(
    ProGX8ZGameIsSurrenderOperate_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameIsAgreeSurrenderSelect_MSGID {
  ProGX8ZGameIsAgreeSurrenderSelect_MSGID_ID = 2251
};
bool ProGX8ZGameIsAgreeSurrenderSelect_MSGID_IsValid(int value);
const ProGX8ZGameIsAgreeSurrenderSelect_MSGID ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_MIN = ProGX8ZGameIsAgreeSurrenderSelect_MSGID_ID;
const ProGX8ZGameIsAgreeSurrenderSelect_MSGID ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_MAX = ProGX8ZGameIsAgreeSurrenderSelect_MSGID_ID;
const int ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameIsAgreeSurrenderSelect_MSGID_Name(ProGX8ZGameIsAgreeSurrenderSelect_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameIsAgreeSurrenderSelect_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameIsAgreeSurrenderSelect_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameIsAgreeSurrenderSelect_MSGID>(
    ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameIsAgreeSurrenderOperate_MSGID {
  ProGX8ZGameIsAgreeSurrenderOperate_MSGID_ID = 2252
};
bool ProGX8ZGameIsAgreeSurrenderOperate_MSGID_IsValid(int value);
const ProGX8ZGameIsAgreeSurrenderOperate_MSGID ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_MIN = ProGX8ZGameIsAgreeSurrenderOperate_MSGID_ID;
const ProGX8ZGameIsAgreeSurrenderOperate_MSGID ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_MAX = ProGX8ZGameIsAgreeSurrenderOperate_MSGID_ID;
const int ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameIsAgreeSurrenderOperate_MSGID_Name(ProGX8ZGameIsAgreeSurrenderOperate_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameIsAgreeSurrenderOperate_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameIsAgreeSurrenderOperate_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameIsAgreeSurrenderOperate_MSGID>(
    ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameIsAgreeSurrenderStatus_MSGID {
  ProGX8ZGameIsAgreeSurrenderStatus_MSGID_ID = 2253
};
bool ProGX8ZGameIsAgreeSurrenderStatus_MSGID_IsValid(int value);
const ProGX8ZGameIsAgreeSurrenderStatus_MSGID ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_MIN = ProGX8ZGameIsAgreeSurrenderStatus_MSGID_ID;
const ProGX8ZGameIsAgreeSurrenderStatus_MSGID ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_MAX = ProGX8ZGameIsAgreeSurrenderStatus_MSGID_ID;
const int ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameIsAgreeSurrenderStatus_MSGID_Name(ProGX8ZGameIsAgreeSurrenderStatus_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameIsAgreeSurrenderStatus_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameIsAgreeSurrenderStatus_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameIsAgreeSurrenderStatus_MSGID>(
    ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameSurrenderResult_MSGID {
  ProGX8ZGameSurrenderResult_MSGID_ID = 2254
};
bool ProGX8ZGameSurrenderResult_MSGID_IsValid(int value);
const ProGX8ZGameSurrenderResult_MSGID ProGX8ZGameSurrenderResult_MSGID_MSGID_MIN = ProGX8ZGameSurrenderResult_MSGID_ID;
const ProGX8ZGameSurrenderResult_MSGID ProGX8ZGameSurrenderResult_MSGID_MSGID_MAX = ProGX8ZGameSurrenderResult_MSGID_ID;
const int ProGX8ZGameSurrenderResult_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameSurrenderResult_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameSurrenderResult_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameSurrenderResult_MSGID_Name(ProGX8ZGameSurrenderResult_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameSurrenderResult_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameSurrenderResult_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameSurrenderResult_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameSurrenderResult_MSGID>(
    ProGX8ZGameSurrenderResult_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShowBoomNotify_MSGID {
  ProGX8ZGameShowBoomNotify_MSGID_ID = 2255
};
bool ProGX8ZGameShowBoomNotify_MSGID_IsValid(int value);
const ProGX8ZGameShowBoomNotify_MSGID ProGX8ZGameShowBoomNotify_MSGID_MSGID_MIN = ProGX8ZGameShowBoomNotify_MSGID_ID;
const ProGX8ZGameShowBoomNotify_MSGID ProGX8ZGameShowBoomNotify_MSGID_MSGID_MAX = ProGX8ZGameShowBoomNotify_MSGID_ID;
const int ProGX8ZGameShowBoomNotify_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShowBoomNotify_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomNotify_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShowBoomNotify_MSGID_Name(ProGX8ZGameShowBoomNotify_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShowBoomNotify_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShowBoomNotify_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShowBoomNotify_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShowBoomNotify_MSGID>(
    ProGX8ZGameShowBoomNotify_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShowBoomOperate_MSGID {
  ProGX8ZGameShowBoomOperate_MSGID_ID = 2256
};
bool ProGX8ZGameShowBoomOperate_MSGID_IsValid(int value);
const ProGX8ZGameShowBoomOperate_MSGID ProGX8ZGameShowBoomOperate_MSGID_MSGID_MIN = ProGX8ZGameShowBoomOperate_MSGID_ID;
const ProGX8ZGameShowBoomOperate_MSGID ProGX8ZGameShowBoomOperate_MSGID_MSGID_MAX = ProGX8ZGameShowBoomOperate_MSGID_ID;
const int ProGX8ZGameShowBoomOperate_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShowBoomOperate_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomOperate_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShowBoomOperate_MSGID_Name(ProGX8ZGameShowBoomOperate_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShowBoomOperate_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShowBoomOperate_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShowBoomOperate_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShowBoomOperate_MSGID>(
    ProGX8ZGameShowBoomOperate_MSGID_descriptor(), name, value);
}
enum ProGX8ZGameShowBoomResponse_MSGID {
  ProGX8ZGameShowBoomResponse_MSGID_ID = 2257
};
bool ProGX8ZGameShowBoomResponse_MSGID_IsValid(int value);
const ProGX8ZGameShowBoomResponse_MSGID ProGX8ZGameShowBoomResponse_MSGID_MSGID_MIN = ProGX8ZGameShowBoomResponse_MSGID_ID;
const ProGX8ZGameShowBoomResponse_MSGID ProGX8ZGameShowBoomResponse_MSGID_MSGID_MAX = ProGX8ZGameShowBoomResponse_MSGID_ID;
const int ProGX8ZGameShowBoomResponse_MSGID_MSGID_ARRAYSIZE = ProGX8ZGameShowBoomResponse_MSGID_MSGID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProGX8ZGameShowBoomResponse_MSGID_descriptor();
inline const ::std::string& ProGX8ZGameShowBoomResponse_MSGID_Name(ProGX8ZGameShowBoomResponse_MSGID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProGX8ZGameShowBoomResponse_MSGID_descriptor(), value);
}
inline bool ProGX8ZGameShowBoomResponse_MSGID_Parse(
    const ::std::string& name, ProGX8ZGameShowBoomResponse_MSGID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProGX8ZGameShowBoomResponse_MSGID>(
    ProGX8ZGameShowBoomResponse_MSGID_descriptor(), name, value);
}
enum GX8ZGameState {
  GX8Z_GAME_IDLE = 1,
  GX8Z_GAME_DICE_BANK = 2,
  GX8Z_GAME_SEND = 3,
  GX8Z_GAME_DATU = 4,
  GX8Z_GAME_PLAY = 6,
  GX8Z_GAME_END = 7
};
bool GX8ZGameState_IsValid(int value);
const GX8ZGameState GX8ZGameState_MIN = GX8Z_GAME_IDLE;
const GX8ZGameState GX8ZGameState_MAX = GX8Z_GAME_END;
const int GX8ZGameState_ARRAYSIZE = GX8ZGameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* GX8ZGameState_descriptor();
inline const ::std::string& GX8ZGameState_Name(GX8ZGameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    GX8ZGameState_descriptor(), value);
}
inline bool GX8ZGameState_Parse(
    const ::std::string& name, GX8ZGameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GX8ZGameState>(
    GX8ZGameState_descriptor(), name, value);
}
enum GX8ZSEND_TYPE {
  GX8Z_NORMAL_SEND = 1,
  GX8Z_RECOME_SEND = 2
};
bool GX8ZSEND_TYPE_IsValid(int value);
const GX8ZSEND_TYPE GX8ZSEND_TYPE_MIN = GX8Z_NORMAL_SEND;
const GX8ZSEND_TYPE GX8ZSEND_TYPE_MAX = GX8Z_RECOME_SEND;
const int GX8ZSEND_TYPE_ARRAYSIZE = GX8ZSEND_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GX8ZSEND_TYPE_descriptor();
inline const ::std::string& GX8ZSEND_TYPE_Name(GX8ZSEND_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GX8ZSEND_TYPE_descriptor(), value);
}
inline bool GX8ZSEND_TYPE_Parse(
    const ::std::string& name, GX8ZSEND_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GX8ZSEND_TYPE>(
    GX8ZSEND_TYPE_descriptor(), name, value);
}
enum GX8ZKING_TYPE {
  GX8Z_KING_UP = 1,
  GX8Z_KING_HUITOU = 2,
  GX8Z_KING_MAILEI = 3
};
bool GX8ZKING_TYPE_IsValid(int value);
const GX8ZKING_TYPE GX8ZKING_TYPE_MIN = GX8Z_KING_UP;
const GX8ZKING_TYPE GX8ZKING_TYPE_MAX = GX8Z_KING_MAILEI;
const int GX8ZKING_TYPE_ARRAYSIZE = GX8ZKING_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GX8ZKING_TYPE_descriptor();
inline const ::std::string& GX8ZKING_TYPE_Name(GX8ZKING_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GX8ZKING_TYPE_descriptor(), value);
}
inline bool GX8ZKING_TYPE_Parse(
    const ::std::string& name, GX8ZKING_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GX8ZKING_TYPE>(
    GX8ZKING_TYPE_descriptor(), name, value);
}
enum GX8ZBROKEN_TYPE {
  GX8Z_BT_MASTER_QUIT = 0,
  GX8Z_BT_USER_QUIT = 1,
  GX8Z_BT_BROKEN = 2
};
bool GX8ZBROKEN_TYPE_IsValid(int value);
const GX8ZBROKEN_TYPE GX8ZBROKEN_TYPE_MIN = GX8Z_BT_MASTER_QUIT;
const GX8ZBROKEN_TYPE GX8ZBROKEN_TYPE_MAX = GX8Z_BT_BROKEN;
const int GX8ZBROKEN_TYPE_ARRAYSIZE = GX8ZBROKEN_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_TYPE_descriptor();
inline const ::std::string& GX8ZBROKEN_TYPE_Name(GX8ZBROKEN_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GX8ZBROKEN_TYPE_descriptor(), value);
}
inline bool GX8ZBROKEN_TYPE_Parse(
    const ::std::string& name, GX8ZBROKEN_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GX8ZBROKEN_TYPE>(
    GX8ZBROKEN_TYPE_descriptor(), name, value);
}
enum GX8ZBROKEN_OPERATE {
  GX8Z_BO_DISAGREE = 0,
  GX8Z_BO_AGREE = 1
};
bool GX8ZBROKEN_OPERATE_IsValid(int value);
const GX8ZBROKEN_OPERATE GX8ZBROKEN_OPERATE_MIN = GX8Z_BO_DISAGREE;
const GX8ZBROKEN_OPERATE GX8ZBROKEN_OPERATE_MAX = GX8Z_BO_AGREE;
const int GX8ZBROKEN_OPERATE_ARRAYSIZE = GX8ZBROKEN_OPERATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_OPERATE_descriptor();
inline const ::std::string& GX8ZBROKEN_OPERATE_Name(GX8ZBROKEN_OPERATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GX8ZBROKEN_OPERATE_descriptor(), value);
}
inline bool GX8ZBROKEN_OPERATE_Parse(
    const ::std::string& name, GX8ZBROKEN_OPERATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GX8ZBROKEN_OPERATE>(
    GX8ZBROKEN_OPERATE_descriptor(), name, value);
}
enum GX8ZBROKEN_CODE {
  GX8Z_BC_SUCCESS = 0,
  GX8Z_BC_DISAGREE = 1,
  GX8Z_BC_QUIT_SUCCESS = 2,
  GX8Z_BC_EXCEPTION = 3
};
bool GX8ZBROKEN_CODE_IsValid(int value);
const GX8ZBROKEN_CODE GX8ZBROKEN_CODE_MIN = GX8Z_BC_SUCCESS;
const GX8ZBROKEN_CODE GX8ZBROKEN_CODE_MAX = GX8Z_BC_EXCEPTION;
const int GX8ZBROKEN_CODE_ARRAYSIZE = GX8ZBROKEN_CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GX8ZBROKEN_CODE_descriptor();
inline const ::std::string& GX8ZBROKEN_CODE_Name(GX8ZBROKEN_CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GX8ZBROKEN_CODE_descriptor(), value);
}
inline bool GX8ZBROKEN_CODE_Parse(
    const ::std::string& name, GX8ZBROKEN_CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GX8ZBROKEN_CODE>(
    GX8ZBROKEN_CODE_descriptor(), name, value);
}
// ===================================================================

class ProGX8ZGameStatusResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameStatusResponse();
  virtual ~ProGX8ZGameStatusResponse();

  ProGX8ZGameStatusResponse(const ProGX8ZGameStatusResponse& from);

  inline ProGX8ZGameStatusResponse& operator=(const ProGX8ZGameStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameStatusResponse& default_instance();

  void Swap(ProGX8ZGameStatusResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameStatusResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameStatusResponse& from);
  void MergeFrom(const ProGX8ZGameStatusResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameStatusResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameStatusResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameStatusResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameStatusResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameStatusResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameStatusResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameStatusResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameStatusResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameStatusResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .GX8ZGameState status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::GX8ZGameState status() const;
  inline void set_status(::GX8ZGameState value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameStatusResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameStatusResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameDeskInfoResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameDeskInfoResponse();
  virtual ~ProGX8ZGameDeskInfoResponse();

  ProGX8ZGameDeskInfoResponse(const ProGX8ZGameDeskInfoResponse& from);

  inline ProGX8ZGameDeskInfoResponse& operator=(const ProGX8ZGameDeskInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameDeskInfoResponse& default_instance();

  void Swap(ProGX8ZGameDeskInfoResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameDeskInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameDeskInfoResponse& from);
  void MergeFrom(const ProGX8ZGameDeskInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameDeskInfoResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameDeskInfoResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameDeskInfoResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameDeskInfoResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameDeskInfoResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameDeskInfoResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameDeskInfoResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameDeskInfoResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameDeskInfoResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 CellScore = 2;
  inline bool has_cellscore() const;
  inline void clear_cellscore();
  static const int kCellScoreFieldNumber = 2;
  inline ::google::protobuf::int32 cellscore() const;
  inline void set_cellscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameDeskInfoResponse)
 private:
  inline void set_has_cellscore();
  inline void clear_has_cellscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 cellscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameDeskInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameReadyNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameReadyNotify();
  virtual ~ProGX8ZGameReadyNotify();

  ProGX8ZGameReadyNotify(const ProGX8ZGameReadyNotify& from);

  inline ProGX8ZGameReadyNotify& operator=(const ProGX8ZGameReadyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameReadyNotify& default_instance();

  void Swap(ProGX8ZGameReadyNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameReadyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameReadyNotify& from);
  void MergeFrom(const ProGX8ZGameReadyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameReadyNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameReadyNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameReadyNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameReadyNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameReadyNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameReadyNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameReadyNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameReadyNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameReadyNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameReadyNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameReadyNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameReadyRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameReadyRequest();
  virtual ~ProGX8ZGameReadyRequest();

  ProGX8ZGameReadyRequest(const ProGX8ZGameReadyRequest& from);

  inline ProGX8ZGameReadyRequest& operator=(const ProGX8ZGameReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameReadyRequest& default_instance();

  void Swap(ProGX8ZGameReadyRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameReadyRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameReadyRequest& from);
  void MergeFrom(const ProGX8ZGameReadyRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameReadyRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameReadyRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameReadyRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameReadyRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameReadyRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameReadyRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameReadyRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameReadyRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameReadyRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameReadyRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameReadyRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameReadyResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameReadyResponse();
  virtual ~ProGX8ZGameReadyResponse();

  ProGX8ZGameReadyResponse(const ProGX8ZGameReadyResponse& from);

  inline ProGX8ZGameReadyResponse& operator=(const ProGX8ZGameReadyResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameReadyResponse& default_instance();

  void Swap(ProGX8ZGameReadyResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameReadyResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameReadyResponse& from);
  void MergeFrom(const ProGX8ZGameReadyResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameReadyResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameReadyResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameReadyResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameReadyResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameReadyResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameReadyResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameReadyResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameReadyResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameReadyResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameReadyResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameReadyResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameStart : public ::google::protobuf::Message {
 public:
  ProGX8ZGameStart();
  virtual ~ProGX8ZGameStart();

  ProGX8ZGameStart(const ProGX8ZGameStart& from);

  inline ProGX8ZGameStart& operator=(const ProGX8ZGameStart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameStart& default_instance();

  void Swap(ProGX8ZGameStart* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameStart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameStart& from);
  void MergeFrom(const ProGX8ZGameStart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameStart_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameStart_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameStart_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameStart_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameStart_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameStart_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameStart_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameStart_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameStart_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 bankerseat = 2;
  inline bool has_bankerseat() const;
  inline void clear_bankerseat();
  static const int kBankerseatFieldNumber = 2;
  inline ::google::protobuf::int32 bankerseat() const;
  inline void set_bankerseat(::google::protobuf::int32 value);

  // optional int32 gamecount = 3;
  inline bool has_gamecount() const;
  inline void clear_gamecount();
  static const int kGamecountFieldNumber = 3;
  inline ::google::protobuf::int32 gamecount() const;
  inline void set_gamecount(::google::protobuf::int32 value);

  // optional int32 outCardtimes = 4;
  inline bool has_outcardtimes() const;
  inline void clear_outcardtimes();
  static const int kOutCardtimesFieldNumber = 4;
  inline ::google::protobuf::int32 outcardtimes() const;
  inline void set_outcardtimes(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameStart)
 private:
  inline void set_has_bankerseat();
  inline void clear_has_bankerseat();
  inline void set_has_gamecount();
  inline void clear_has_gamecount();
  inline void set_has_outcardtimes();
  inline void clear_has_outcardtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bankerseat_;
  ::google::protobuf::int32 gamecount_;
  ::google::protobuf::int32 outcardtimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameStart* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameDiceNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameDiceNotify();
  virtual ~ProGX8ZGameDiceNotify();

  ProGX8ZGameDiceNotify(const ProGX8ZGameDiceNotify& from);

  inline ProGX8ZGameDiceNotify& operator=(const ProGX8ZGameDiceNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameDiceNotify& default_instance();

  void Swap(ProGX8ZGameDiceNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameDiceNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameDiceNotify& from);
  void MergeFrom(const ProGX8ZGameDiceNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameDiceNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameDiceNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameDiceNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameDiceNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameDiceNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameDiceNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameDiceNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameDiceNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameDiceNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 dicecount = 4;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 4;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameDiceNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameDiceNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameDiceRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameDiceRequest();
  virtual ~ProGX8ZGameDiceRequest();

  ProGX8ZGameDiceRequest(const ProGX8ZGameDiceRequest& from);

  inline ProGX8ZGameDiceRequest& operator=(const ProGX8ZGameDiceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameDiceRequest& default_instance();

  void Swap(ProGX8ZGameDiceRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameDiceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameDiceRequest& from);
  void MergeFrom(const ProGX8ZGameDiceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameDiceRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameDiceRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameDiceRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameDiceRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameDiceRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameDiceRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameDiceRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameDiceRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameDiceRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 dicecount = 3;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 3;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameDiceRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameDiceRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameDiceResult : public ::google::protobuf::Message {
 public:
  ProGX8ZGameDiceResult();
  virtual ~ProGX8ZGameDiceResult();

  ProGX8ZGameDiceResult(const ProGX8ZGameDiceResult& from);

  inline ProGX8ZGameDiceResult& operator=(const ProGX8ZGameDiceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameDiceResult& default_instance();

  void Swap(ProGX8ZGameDiceResult* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameDiceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameDiceResult& from);
  void MergeFrom(const ProGX8ZGameDiceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameDiceResult_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameDiceResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameDiceResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameDiceResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameDiceResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameDiceResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameDiceResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameDiceResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameDiceResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 result = 3;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result(int index) const;
  inline void set_result(int index, ::google::protobuf::int32 value);
  inline void add_result(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      result() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_result();

  // optional int32 dicecount = 4;
  inline bool has_dicecount() const;
  inline void clear_dicecount();
  static const int kDicecountFieldNumber = 4;
  inline ::google::protobuf::int32 dicecount() const;
  inline void set_dicecount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameDiceResult)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_dicecount();
  inline void clear_has_dicecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > result_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 dicecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameDiceResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameSendMahs : public ::google::protobuf::Message {
 public:
  ProGX8ZGameSendMahs();
  virtual ~ProGX8ZGameSendMahs();

  ProGX8ZGameSendMahs(const ProGX8ZGameSendMahs& from);

  inline ProGX8ZGameSendMahs& operator=(const ProGX8ZGameSendMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameSendMahs& default_instance();

  void Swap(ProGX8ZGameSendMahs* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameSendMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameSendMahs& from);
  void MergeFrom(const ProGX8ZGameSendMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameSendMahs_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameSendMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameSendMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameSendMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameSendMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameSendMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameSendMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameSendMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameSendMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 mahs = 3;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 3;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // repeated int32 mahscount = 4;
  inline int mahscount_size() const;
  inline void clear_mahscount();
  static const int kMahscountFieldNumber = 4;
  inline ::google::protobuf::int32 mahscount(int index) const;
  inline void set_mahscount(int index, ::google::protobuf::int32 value);
  inline void add_mahscount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahscount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahscount();

  // optional int32 cbLeftCount = 5;
  inline bool has_cbleftcount() const;
  inline void clear_cbleftcount();
  static const int kCbLeftCountFieldNumber = 5;
  inline ::google::protobuf::int32 cbleftcount() const;
  inline void set_cbleftcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameSendMahs)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cbleftcount();
  inline void clear_has_cbleftcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cbleftcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahscount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameSendMahs* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameKingData : public ::google::protobuf::Message {
 public:
  ProGX8ZGameKingData();
  virtual ~ProGX8ZGameKingData();

  ProGX8ZGameKingData(const ProGX8ZGameKingData& from);

  inline ProGX8ZGameKingData& operator=(const ProGX8ZGameKingData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameKingData& default_instance();

  void Swap(ProGX8ZGameKingData* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameKingData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameKingData& from);
  void MergeFrom(const ProGX8ZGameKingData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameKingData_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameKingData_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameKingData_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameKingData_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameKingData_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameKingData_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameKingData_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameKingData_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameKingData_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 mahs = 3;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 3;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // repeated int32 downKingScore = 4;
  inline int downkingscore_size() const;
  inline void clear_downkingscore();
  static const int kDownKingScoreFieldNumber = 4;
  inline ::google::protobuf::int32 downkingscore(int index) const;
  inline void set_downkingscore(int index, ::google::protobuf::int32 value);
  inline void add_downkingscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      downkingscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_downkingscore();

  // repeated int32 kingcount = 5;
  inline int kingcount_size() const;
  inline void clear_kingcount();
  static const int kKingcountFieldNumber = 5;
  inline ::google::protobuf::int32 kingcount(int index) const;
  inline void set_kingcount(int index, ::google::protobuf::int32 value);
  inline void add_kingcount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      kingcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_kingcount();

  // repeated int32 viceking = 6;
  inline int viceking_size() const;
  inline void clear_viceking();
  static const int kVicekingFieldNumber = 6;
  inline ::google::protobuf::int32 viceking(int index) const;
  inline void set_viceking(int index, ::google::protobuf::int32 value);
  inline void add_viceking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      viceking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_viceking();

  // optional .GX8ZSEND_TYPE notify_type = 7 [default = GX8Z_NORMAL_SEND];
  inline bool has_notify_type() const;
  inline void clear_notify_type();
  static const int kNotifyTypeFieldNumber = 7;
  inline ::GX8ZSEND_TYPE notify_type() const;
  inline void set_notify_type(::GX8ZSEND_TYPE value);

  // optional .GX8ZKING_TYPE king_type = 8 [default = GX8Z_KING_UP];
  inline bool has_king_type() const;
  inline void clear_king_type();
  static const int kKingTypeFieldNumber = 8;
  inline ::GX8ZKING_TYPE king_type() const;
  inline void set_king_type(::GX8ZKING_TYPE value);

  // repeated int32 cbChongGuang = 9;
  inline int cbchongguang_size() const;
  inline void clear_cbchongguang();
  static const int kCbChongGuangFieldNumber = 9;
  inline ::google::protobuf::int32 cbchongguang(int index) const;
  inline void set_cbchongguang(int index, ::google::protobuf::int32 value);
  inline void add_cbchongguang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbchongguang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbchongguang();

  // repeated int32 cbBaWangKing = 10;
  inline int cbbawangking_size() const;
  inline void clear_cbbawangking();
  static const int kCbBaWangKingFieldNumber = 10;
  inline ::google::protobuf::int32 cbbawangking(int index) const;
  inline void set_cbbawangking(int index, ::google::protobuf::int32 value);
  inline void add_cbbawangking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbbawangking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbbawangking();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameKingData)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_notify_type();
  inline void clear_has_notify_type();
  inline void set_has_king_type();
  inline void clear_has_king_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > downkingscore_;
  ::google::protobuf::int32 seat_;
  int notify_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > kingcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > viceking_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbchongguang_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbbawangking_;
  int king_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameKingData* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameOutMahsResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameOutMahsResponse();
  virtual ~ProGX8ZGameOutMahsResponse();

  ProGX8ZGameOutMahsResponse(const ProGX8ZGameOutMahsResponse& from);

  inline ProGX8ZGameOutMahsResponse& operator=(const ProGX8ZGameOutMahsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameOutMahsResponse& default_instance();

  void Swap(ProGX8ZGameOutMahsResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameOutMahsResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameOutMahsResponse& from);
  void MergeFrom(const ProGX8ZGameOutMahsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameOutMahsResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameOutMahsResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameOutMahsResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameOutMahsResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameOutMahsResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameOutMahsResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameOutMahsResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameOutMahsResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameOutMahsResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 outMahs = 3;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 3;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // repeated int32 handmahs = 4;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 4;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // optional int32 cardCount = 5;
  inline bool has_cardcount() const;
  inline void clear_cardcount();
  static const int kCardCountFieldNumber = 5;
  inline ::google::protobuf::int32 cardcount() const;
  inline void set_cardcount(::google::protobuf::int32 value);

  // optional int32 cardType = 6;
  inline bool has_cardtype() const;
  inline void clear_cardtype();
  static const int kCardTypeFieldNumber = 6;
  inline ::google::protobuf::int32 cardtype() const;
  inline void set_cardtype(::google::protobuf::int32 value);

  // optional int32 cardtypeflg = 7;
  inline bool has_cardtypeflg() const;
  inline void clear_cardtypeflg();
  static const int kCardtypeflgFieldNumber = 7;
  inline ::google::protobuf::int32 cardtypeflg() const;
  inline void set_cardtypeflg(::google::protobuf::int32 value);

  // optional int32 cardPoint = 8;
  inline bool has_cardpoint() const;
  inline void clear_cardpoint();
  static const int kCardPointFieldNumber = 8;
  inline ::google::protobuf::int32 cardpoint() const;
  inline void set_cardpoint(::google::protobuf::int32 value);

  // optional int32 seriesFlag = 9;
  inline bool has_seriesflag() const;
  inline void clear_seriesflag();
  static const int kSeriesFlagFieldNumber = 9;
  inline ::google::protobuf::int32 seriesflag() const;
  inline void set_seriesflag(::google::protobuf::int32 value);

  // optional int32 seriesNums = 10;
  inline bool has_seriesnums() const;
  inline void clear_seriesnums();
  static const int kSeriesNumsFieldNumber = 10;
  inline ::google::protobuf::int32 seriesnums() const;
  inline void set_seriesnums(::google::protobuf::int32 value);

  // repeated int32 noChangeMahs = 11;
  inline int nochangemahs_size() const;
  inline void clear_nochangemahs();
  static const int kNoChangeMahsFieldNumber = 11;
  inline ::google::protobuf::int32 nochangemahs(int index) const;
  inline void set_nochangemahs(int index, ::google::protobuf::int32 value);
  inline void add_nochangemahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nochangemahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nochangemahs();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameOutMahsResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cardcount();
  inline void clear_has_cardcount();
  inline void set_has_cardtype();
  inline void clear_has_cardtype();
  inline void set_has_cardtypeflg();
  inline void clear_has_cardtypeflg();
  inline void set_has_cardpoint();
  inline void clear_has_cardpoint();
  inline void set_has_seriesflag();
  inline void clear_has_seriesflag();
  inline void set_has_seriesnums();
  inline void clear_has_seriesnums();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cardcount_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 cardtype_;
  ::google::protobuf::int32 cardtypeflg_;
  ::google::protobuf::int32 cardpoint_;
  ::google::protobuf::int32 seriesflag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nochangemahs_;
  ::google::protobuf::int32 seriesnums_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameOutMahsResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameTimerPower : public ::google::protobuf::Message {
 public:
  ProGX8ZGameTimerPower();
  virtual ~ProGX8ZGameTimerPower();

  ProGX8ZGameTimerPower(const ProGX8ZGameTimerPower& from);

  inline ProGX8ZGameTimerPower& operator=(const ProGX8ZGameTimerPower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameTimerPower& default_instance();

  void Swap(ProGX8ZGameTimerPower* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameTimerPower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameTimerPower& from);
  void MergeFrom(const ProGX8ZGameTimerPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameTimerPower_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameTimerPower_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameTimerPower_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameTimerPower_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameTimerPower_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameTimerPower_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameTimerPower_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameTimerPower_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameTimerPower_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 outcardTime = 4;
  inline bool has_outcardtime() const;
  inline void clear_outcardtime();
  static const int kOutcardTimeFieldNumber = 4;
  inline ::google::protobuf::int32 outcardtime() const;
  inline void set_outcardtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameTimerPower)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_outcardtime();
  inline void clear_has_outcardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 outcardtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameTimerPower* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameOperateNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameOperateNotify();
  virtual ~ProGX8ZGameOperateNotify();

  ProGX8ZGameOperateNotify(const ProGX8ZGameOperateNotify& from);

  inline ProGX8ZGameOperateNotify& operator=(const ProGX8ZGameOperateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameOperateNotify& default_instance();

  void Swap(ProGX8ZGameOperateNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameOperateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameOperateNotify& from);
  void MergeFrom(const ProGX8ZGameOperateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameOperateNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameOperateNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameOperateNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameOperateNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameOperateNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameOperateNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameOperateNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameOperateNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameOperateNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 resumeSeat = 2;
  inline bool has_resumeseat() const;
  inline void clear_resumeseat();
  static const int kResumeSeatFieldNumber = 2;
  inline ::google::protobuf::int32 resumeseat() const;
  inline void set_resumeseat(::google::protobuf::int32 value);

  // optional int32 ActionMask = 3;
  inline bool has_actionmask() const;
  inline void clear_actionmask();
  static const int kActionMaskFieldNumber = 3;
  inline ::google::protobuf::int32 actionmask() const;
  inline void set_actionmask(::google::protobuf::int32 value);

  // optional int32 ActionCard = 4;
  inline bool has_actioncard() const;
  inline void clear_actioncard();
  static const int kActionCardFieldNumber = 4;
  inline ::google::protobuf::int32 actioncard() const;
  inline void set_actioncard(::google::protobuf::int32 value);

  // optional int32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // optional int32 operateseat = 6;
  inline bool has_operateseat() const;
  inline void clear_operateseat();
  static const int kOperateseatFieldNumber = 6;
  inline ::google::protobuf::int32 operateseat() const;
  inline void set_operateseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameOperateNotify)
 private:
  inline void set_has_resumeseat();
  inline void clear_has_resumeseat();
  inline void set_has_actionmask();
  inline void clear_has_actionmask();
  inline void set_has_actioncard();
  inline void clear_has_actioncard();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_operateseat();
  inline void clear_has_operateseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 resumeseat_;
  ::google::protobuf::int32 actionmask_;
  ::google::protobuf::int32 actioncard_;
  ::google::protobuf::int32 time_;
  ::google::protobuf::int32 operateseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameOperateNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameOperateResult : public ::google::protobuf::Message {
 public:
  ProGX8ZGameOperateResult();
  virtual ~ProGX8ZGameOperateResult();

  ProGX8ZGameOperateResult(const ProGX8ZGameOperateResult& from);

  inline ProGX8ZGameOperateResult& operator=(const ProGX8ZGameOperateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameOperateResult& default_instance();

  void Swap(ProGX8ZGameOperateResult* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameOperateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameOperateResult& from);
  void MergeFrom(const ProGX8ZGameOperateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameOperateResult_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameOperateResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameOperateResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameOperateResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameOperateResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameOperateResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameOperateResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameOperateResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameOperateResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 wOperateUser = 2;
  inline bool has_woperateuser() const;
  inline void clear_woperateuser();
  static const int kWOperateUserFieldNumber = 2;
  inline ::google::protobuf::int32 woperateuser() const;
  inline void set_woperateuser(::google::protobuf::int32 value);

  // optional int32 wProvideUser = 3;
  inline bool has_wprovideuser() const;
  inline void clear_wprovideuser();
  static const int kWProvideUserFieldNumber = 3;
  inline ::google::protobuf::int32 wprovideuser() const;
  inline void set_wprovideuser(::google::protobuf::int32 value);

  // optional int32 wOperateCode = 4;
  inline bool has_woperatecode() const;
  inline void clear_woperatecode();
  static const int kWOperateCodeFieldNumber = 4;
  inline ::google::protobuf::int32 woperatecode() const;
  inline void set_woperatecode(::google::protobuf::int32 value);

  // optional int32 cbOperateCard = 5;
  inline bool has_cboperatecard() const;
  inline void clear_cboperatecard();
  static const int kCbOperateCardFieldNumber = 5;
  inline ::google::protobuf::int32 cboperatecard() const;
  inline void set_cboperatecard(::google::protobuf::int32 value);

  // repeated int32 handmahs = 6;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 6;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // optional int32 handcount = 7;
  inline bool has_handcount() const;
  inline void clear_handcount();
  static const int kHandcountFieldNumber = 7;
  inline ::google::protobuf::int32 handcount() const;
  inline void set_handcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameOperateResult)
 private:
  inline void set_has_woperateuser();
  inline void clear_has_woperateuser();
  inline void set_has_wprovideuser();
  inline void clear_has_wprovideuser();
  inline void set_has_woperatecode();
  inline void clear_has_woperatecode();
  inline void set_has_cboperatecard();
  inline void clear_has_cboperatecard();
  inline void set_has_handcount();
  inline void clear_has_handcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 woperateuser_;
  ::google::protobuf::int32 wprovideuser_;
  ::google::protobuf::int32 woperatecode_;
  ::google::protobuf::int32 cboperatecard_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 handcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameOperateResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameOperateRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameOperateRequest();
  virtual ~ProGX8ZGameOperateRequest();

  ProGX8ZGameOperateRequest(const ProGX8ZGameOperateRequest& from);

  inline ProGX8ZGameOperateRequest& operator=(const ProGX8ZGameOperateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameOperateRequest& default_instance();

  void Swap(ProGX8ZGameOperateRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameOperateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameOperateRequest& from);
  void MergeFrom(const ProGX8ZGameOperateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameOperateRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameOperateRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameOperateRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameOperateRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameOperateRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameOperateRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameOperateRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameOperateRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameOperateRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 wOperateCode = 3;
  inline bool has_woperatecode() const;
  inline void clear_woperatecode();
  static const int kWOperateCodeFieldNumber = 3;
  inline ::google::protobuf::int32 woperatecode() const;
  inline void set_woperatecode(::google::protobuf::int32 value);

  // optional int32 cbOperateCard = 4;
  inline bool has_cboperatecard() const;
  inline void clear_cboperatecard();
  static const int kCbOperateCardFieldNumber = 4;
  inline ::google::protobuf::int32 cboperatecard() const;
  inline void set_cboperatecard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameOperateRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_woperatecode();
  inline void clear_has_woperatecode();
  inline void set_has_cboperatecard();
  inline void clear_has_cboperatecard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 woperatecode_;
  ::google::protobuf::int32 cboperatecard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameOperateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameTrust : public ::google::protobuf::Message {
 public:
  ProGX8ZGameTrust();
  virtual ~ProGX8ZGameTrust();

  ProGX8ZGameTrust(const ProGX8ZGameTrust& from);

  inline ProGX8ZGameTrust& operator=(const ProGX8ZGameTrust& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameTrust& default_instance();

  void Swap(ProGX8ZGameTrust* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameTrust* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameTrust& from);
  void MergeFrom(const ProGX8ZGameTrust& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameTrust_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameTrust_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameTrust_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameTrust_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameTrust_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameTrust_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameTrust_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameTrust_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameTrust_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional bool isTrust = 3;
  inline bool has_istrust() const;
  inline void clear_istrust();
  static const int kIsTrustFieldNumber = 3;
  inline bool istrust() const;
  inline void set_istrust(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameTrust)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_istrust();
  inline void clear_has_istrust();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  bool istrust_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameTrust* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameOutMahRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameOutMahRequest();
  virtual ~ProGX8ZGameOutMahRequest();

  ProGX8ZGameOutMahRequest(const ProGX8ZGameOutMahRequest& from);

  inline ProGX8ZGameOutMahRequest& operator=(const ProGX8ZGameOutMahRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameOutMahRequest& default_instance();

  void Swap(ProGX8ZGameOutMahRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameOutMahRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameOutMahRequest& from);
  void MergeFrom(const ProGX8ZGameOutMahRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameOutMahRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameOutMahRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameOutMahRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameOutMahRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameOutMahRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameOutMahRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameOutMahRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameOutMahRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameOutMahRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 outMahs = 3;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 3;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // repeated int32 nochangemahs = 4;
  inline int nochangemahs_size() const;
  inline void clear_nochangemahs();
  static const int kNochangemahsFieldNumber = 4;
  inline ::google::protobuf::int32 nochangemahs(int index) const;
  inline void set_nochangemahs(int index, ::google::protobuf::int32 value);
  inline void add_nochangemahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nochangemahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nochangemahs();

  // optional bool bIsChanged = 5;
  inline bool has_bischanged() const;
  inline void clear_bischanged();
  static const int kBIsChangedFieldNumber = 5;
  inline bool bischanged() const;
  inline void set_bischanged(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameOutMahRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_bischanged();
  inline void clear_has_bischanged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 seat_;
  bool bischanged_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nochangemahs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameOutMahRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameCatchCard : public ::google::protobuf::Message {
 public:
  ProGX8ZGameCatchCard();
  virtual ~ProGX8ZGameCatchCard();

  ProGX8ZGameCatchCard(const ProGX8ZGameCatchCard& from);

  inline ProGX8ZGameCatchCard& operator=(const ProGX8ZGameCatchCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameCatchCard& default_instance();

  void Swap(ProGX8ZGameCatchCard* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameCatchCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameCatchCard& from);
  void MergeFrom(const ProGX8ZGameCatchCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameCatchCard_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameCatchCard_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameCatchCard_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameCatchCard_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameCatchCard_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameCatchCard_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameCatchCard_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameCatchCard_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameCatchCard_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional int32 cbCardData = 3;
  inline bool has_cbcarddata() const;
  inline void clear_cbcarddata();
  static const int kCbCardDataFieldNumber = 3;
  inline ::google::protobuf::int32 cbcarddata() const;
  inline void set_cbcarddata(::google::protobuf::int32 value);

  // optional int32 wActionMask = 4;
  inline bool has_wactionmask() const;
  inline void clear_wactionmask();
  static const int kWActionMaskFieldNumber = 4;
  inline ::google::protobuf::int32 wactionmask() const;
  inline void set_wactionmask(::google::protobuf::int32 value);

  // optional bool cbIsNotGang = 5;
  inline bool has_cbisnotgang() const;
  inline void clear_cbisnotgang();
  static const int kCbIsNotGangFieldNumber = 5;
  inline bool cbisnotgang() const;
  inline void set_cbisnotgang(bool value);

  // optional int32 cbLeftCount = 6;
  inline bool has_cbleftcount() const;
  inline void clear_cbleftcount();
  static const int kCbLeftCountFieldNumber = 6;
  inline ::google::protobuf::int32 cbleftcount() const;
  inline void set_cbleftcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameCatchCard)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_cbcarddata();
  inline void clear_has_cbcarddata();
  inline void set_has_wactionmask();
  inline void clear_has_wactionmask();
  inline void set_has_cbisnotgang();
  inline void clear_has_cbisnotgang();
  inline void set_has_cbleftcount();
  inline void clear_has_cbleftcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 cbcarddata_;
  ::google::protobuf::int32 wactionmask_;
  bool cbisnotgang_;
  ::google::protobuf::int32 cbleftcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameCatchCard* default_instance_;
};
// -------------------------------------------------------------------

class GX8ZMahList : public ::google::protobuf::Message {
 public:
  GX8ZMahList();
  virtual ~GX8ZMahList();

  GX8ZMahList(const GX8ZMahList& from);

  inline GX8ZMahList& operator=(const GX8ZMahList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GX8ZMahList& default_instance();

  void Swap(GX8ZMahList* other);

  // implements Message ----------------------------------------------

  GX8ZMahList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GX8ZMahList& from);
  void MergeFrom(const GX8ZMahList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 Mahs = 1;
  inline int mahs_size() const;
  inline void clear_mahs();
  static const int kMahsFieldNumber = 1;
  inline ::google::protobuf::int32 mahs(int index) const;
  inline void set_mahs(int index, ::google::protobuf::int32 value);
  inline void add_mahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mahs();

  // @@protoc_insertion_point(class_scope:GX8ZMahList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mahs_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static GX8ZMahList* default_instance_;
};
// -------------------------------------------------------------------

class GX8ZScoreList : public ::google::protobuf::Message {
 public:
  GX8ZScoreList();
  virtual ~GX8ZScoreList();

  GX8ZScoreList(const GX8ZScoreList& from);

  inline GX8ZScoreList& operator=(const GX8ZScoreList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GX8ZScoreList& default_instance();

  void Swap(GX8ZScoreList* other);

  // implements Message ----------------------------------------------

  GX8ZScoreList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GX8ZScoreList& from);
  void MergeFrom(const GX8ZScoreList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 roundScore = 1;
  inline int roundscore_size() const;
  inline void clear_roundscore();
  static const int kRoundScoreFieldNumber = 1;
  inline ::google::protobuf::int32 roundscore(int index) const;
  inline void set_roundscore(int index, ::google::protobuf::int32 value);
  inline void add_roundscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      roundscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_roundscore();

  // @@protoc_insertion_point(class_scope:GX8ZScoreList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > roundscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static GX8ZScoreList* default_instance_;
};
// -------------------------------------------------------------------

class GX8ZAwardList : public ::google::protobuf::Message {
 public:
  GX8ZAwardList();
  virtual ~GX8ZAwardList();

  GX8ZAwardList(const GX8ZAwardList& from);

  inline GX8ZAwardList& operator=(const GX8ZAwardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GX8ZAwardList& default_instance();

  void Swap(GX8ZAwardList* other);

  // implements Message ----------------------------------------------

  GX8ZAwardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GX8ZAwardList& from);
  void MergeFrom(const GX8ZAwardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 CardsData = 2;
  inline int cardsdata_size() const;
  inline void clear_cardsdata();
  static const int kCardsDataFieldNumber = 2;
  inline ::google::protobuf::int32 cardsdata(int index) const;
  inline void set_cardsdata(int index, ::google::protobuf::int32 value);
  inline void add_cardsdata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cardsdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cardsdata();

  // optional int32 awardScore = 3;
  inline bool has_awardscore() const;
  inline void clear_awardscore();
  static const int kAwardScoreFieldNumber = 3;
  inline ::google::protobuf::int32 awardscore() const;
  inline void set_awardscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GX8ZAwardList)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_awardscore();
  inline void clear_has_awardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cardsdata_;
  ::google::protobuf::int32 seat_;
  ::google::protobuf::int32 awardscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static GX8ZAwardList* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameEnd : public ::google::protobuf::Message {
 public:
  ProGX8ZGameEnd();
  virtual ~ProGX8ZGameEnd();

  ProGX8ZGameEnd(const ProGX8ZGameEnd& from);

  inline ProGX8ZGameEnd& operator=(const ProGX8ZGameEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameEnd& default_instance();

  void Swap(ProGX8ZGameEnd* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameEnd& from);
  void MergeFrom(const ProGX8ZGameEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameEnd_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameEnd_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameEnd_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameEnd_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameEnd_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameEnd_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameEnd_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameEnd_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameEnd_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 lGameTax = 2;
  inline bool has_lgametax() const;
  inline void clear_lgametax();
  static const int kLGameTaxFieldNumber = 2;
  inline ::google::protobuf::int32 lgametax() const;
  inline void set_lgametax(::google::protobuf::int32 value);

  // repeated int32 cbChongGuang = 3;
  inline int cbchongguang_size() const;
  inline void clear_cbchongguang();
  static const int kCbChongGuangFieldNumber = 3;
  inline ::google::protobuf::int32 cbchongguang(int index) const;
  inline void set_cbchongguang(int index, ::google::protobuf::int32 value);
  inline void add_cbchongguang(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbchongguang() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbchongguang();

  // repeated int32 cbBaWangKing = 4;
  inline int cbbawangking_size() const;
  inline void clear_cbbawangking();
  static const int kCbBaWangKingFieldNumber = 4;
  inline ::google::protobuf::int32 cbbawangking(int index) const;
  inline void set_cbbawangking(int index, ::google::protobuf::int32 value);
  inline void add_cbbawangking(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbbawangking() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbbawangking();

  // optional int32 wProvideUser = 5;
  inline bool has_wprovideuser() const;
  inline void clear_wprovideuser();
  static const int kWProvideUserFieldNumber = 5;
  inline ::google::protobuf::int32 wprovideuser() const;
  inline void set_wprovideuser(::google::protobuf::int32 value);

  // optional int32 cbChiHuCard = 6;
  inline bool has_cbchihucard() const;
  inline void clear_cbchihucard();
  static const int kCbChiHuCardFieldNumber = 6;
  inline ::google::protobuf::int32 cbchihucard() const;
  inline void set_cbchihucard(::google::protobuf::int32 value);

  // repeated int32 dwChiHuKind = 7;
  inline int dwchihukind_size() const;
  inline void clear_dwchihukind();
  static const int kDwChiHuKindFieldNumber = 7;
  inline ::google::protobuf::int32 dwchihukind(int index) const;
  inline void set_dwchihukind(int index, ::google::protobuf::int32 value);
  inline void add_dwchihukind(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwchihukind() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwchihukind();

  // repeated int32 dwChiHuRight = 8;
  inline int dwchihuright_size() const;
  inline void clear_dwchihuright();
  static const int kDwChiHuRightFieldNumber = 8;
  inline ::google::protobuf::int32 dwchihuright(int index) const;
  inline void set_dwchihuright(int index, ::google::protobuf::int32 value);
  inline void add_dwchihuright(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dwchihuright() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dwchihuright();

  // repeated int32 lTotaslGameScore = 9;
  inline int ltotaslgamescore_size() const;
  inline void clear_ltotaslgamescore();
  static const int kLTotaslGameScoreFieldNumber = 9;
  inline ::google::protobuf::int32 ltotaslgamescore(int index) const;
  inline void set_ltotaslgamescore(int index, ::google::protobuf::int32 value);
  inline void add_ltotaslgamescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ltotaslgamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ltotaslgamescore();

  // repeated int32 lCurrentGameScore = 10;
  inline int lcurrentgamescore_size() const;
  inline void clear_lcurrentgamescore();
  static const int kLCurrentGameScoreFieldNumber = 10;
  inline ::google::protobuf::int32 lcurrentgamescore(int index) const;
  inline void set_lcurrentgamescore(int index, ::google::protobuf::int32 value);
  inline void add_lcurrentgamescore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lcurrentgamescore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lcurrentgamescore();

  // repeated int32 lCurrentPointScore = 11;
  inline int lcurrentpointscore_size() const;
  inline void clear_lcurrentpointscore();
  static const int kLCurrentPointScoreFieldNumber = 11;
  inline ::google::protobuf::int32 lcurrentpointscore(int index) const;
  inline void set_lcurrentpointscore(int index, ::google::protobuf::int32 value);
  inline void add_lcurrentpointscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lcurrentpointscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lcurrentpointscore();

  // repeated int32 lAttachScore = 12;
  inline int lattachscore_size() const;
  inline void clear_lattachscore();
  static const int kLAttachScoreFieldNumber = 12;
  inline ::google::protobuf::int32 lattachscore(int index) const;
  inline void set_lattachscore(int index, ::google::protobuf::int32 value);
  inline void add_lattachscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lattachscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lattachscore();

  // repeated .GX8ZMahList cbHandCardData = 13;
  inline int cbhandcarddata_size() const;
  inline void clear_cbhandcarddata();
  static const int kCbHandCardDataFieldNumber = 13;
  inline const ::GX8ZMahList& cbhandcarddata(int index) const;
  inline ::GX8ZMahList* mutable_cbhandcarddata(int index);
  inline ::GX8ZMahList* add_cbhandcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
      cbhandcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
      mutable_cbhandcarddata();

  // repeated .GX8ZAwardList cbAwardCardData = 14;
  inline int cbawardcarddata_size() const;
  inline void clear_cbawardcarddata();
  static const int kCbAwardCardDataFieldNumber = 14;
  inline const ::GX8ZAwardList& cbawardcarddata(int index) const;
  inline ::GX8ZAwardList* mutable_cbawardcarddata(int index);
  inline ::GX8ZAwardList* add_cbawardcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >&
      cbawardcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >*
      mutable_cbawardcarddata();

  // repeated int32 lOnlyWinScore = 15;
  inline int lonlywinscore_size() const;
  inline void clear_lonlywinscore();
  static const int kLOnlyWinScoreFieldNumber = 15;
  inline ::google::protobuf::int32 lonlywinscore(int index) const;
  inline void set_lonlywinscore(int index, ::google::protobuf::int32 value);
  inline void add_lonlywinscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lonlywinscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lonlywinscore();

  // optional bool bRoundEnd = 16;
  inline bool has_broundend() const;
  inline void clear_broundend();
  static const int kBRoundEndFieldNumber = 16;
  inline bool broundend() const;
  inline void set_broundend(bool value);

  // repeated int32 lHuiTouScore = 17;
  inline int lhuitouscore_size() const;
  inline void clear_lhuitouscore();
  static const int kLHuiTouScoreFieldNumber = 17;
  inline ::google::protobuf::int32 lhuitouscore(int index) const;
  inline void set_lhuitouscore(int index, ::google::protobuf::int32 value);
  inline void add_lhuitouscore(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lhuitouscore() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lhuitouscore();

  // optional bool bZhuangWin = 18;
  inline bool has_bzhuangwin() const;
  inline void clear_bzhuangwin();
  static const int kBZhuangWinFieldNumber = 18;
  inline bool bzhuangwin() const;
  inline void set_bzhuangwin(bool value);

  // repeated int32 cbJiangMaCardData = 19;
  inline int cbjiangmacarddata_size() const;
  inline void clear_cbjiangmacarddata();
  static const int kCbJiangMaCardDataFieldNumber = 19;
  inline ::google::protobuf::int32 cbjiangmacarddata(int index) const;
  inline void set_cbjiangmacarddata(int index, ::google::protobuf::int32 value);
  inline void add_cbjiangmacarddata(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cbjiangmacarddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cbjiangmacarddata();

  // repeated .GX8ZScoreList detailedScores = 20;
  inline int detailedscores_size() const;
  inline void clear_detailedscores();
  static const int kDetailedScoresFieldNumber = 20;
  inline const ::GX8ZScoreList& detailedscores(int index) const;
  inline ::GX8ZScoreList* mutable_detailedscores(int index);
  inline ::GX8ZScoreList* add_detailedscores();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZScoreList >&
      detailedscores() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZScoreList >*
      mutable_detailedscores();

  // optional bool bIsDaTu = 21;
  inline bool has_bisdatu() const;
  inline void clear_bisdatu();
  static const int kBIsDaTuFieldNumber = 21;
  inline bool bisdatu() const;
  inline void set_bisdatu(bool value);

  // optional bool bIsKuTong = 22;
  inline bool has_biskutong() const;
  inline void clear_biskutong();
  static const int kBIsKuTongFieldNumber = 22;
  inline bool biskutong() const;
  inline void set_biskutong(bool value);

  // optional int32 nNo1Seat = 23;
  inline bool has_nno1seat() const;
  inline void clear_nno1seat();
  static const int kNNo1SeatFieldNumber = 23;
  inline ::google::protobuf::int32 nno1seat() const;
  inline void set_nno1seat(::google::protobuf::int32 value);

  // optional int32 nWinerSeat = 24;
  inline bool has_nwinerseat() const;
  inline void clear_nwinerseat();
  static const int kNWinerSeatFieldNumber = 24;
  inline ::google::protobuf::int32 nwinerseat() const;
  inline void set_nwinerseat(::google::protobuf::int32 value);

  // optional int32 nWinersMate = 25;
  inline bool has_nwinersmate() const;
  inline void clear_nwinersmate();
  static const int kNWinersMateFieldNumber = 25;
  inline ::google::protobuf::int32 nwinersmate() const;
  inline void set_nwinersmate(::google::protobuf::int32 value);

  // optional int32 nNo2Seat = 26;
  inline bool has_nno2seat() const;
  inline void clear_nno2seat();
  static const int kNNo2SeatFieldNumber = 26;
  inline ::google::protobuf::int32 nno2seat() const;
  inline void set_nno2seat(::google::protobuf::int32 value);

  // optional int32 nNo3Seat = 27;
  inline bool has_nno3seat() const;
  inline void clear_nno3seat();
  static const int kNNo3SeatFieldNumber = 27;
  inline ::google::protobuf::int32 nno3seat() const;
  inline void set_nno3seat(::google::protobuf::int32 value);

  // optional int32 nNo4Seat = 28;
  inline bool has_nno4seat() const;
  inline void clear_nno4seat();
  static const int kNNo4SeatFieldNumber = 28;
  inline ::google::protobuf::int32 nno4seat() const;
  inline void set_nno4seat(::google::protobuf::int32 value);

  // optional bool bBroken = 29;
  inline bool has_bbroken() const;
  inline void clear_bbroken();
  static const int kBBrokenFieldNumber = 29;
  inline bool bbroken() const;
  inline void set_bbroken(bool value);

  // optional int32 nBrokenPlayerSeat = 30;
  inline bool has_nbrokenplayerseat() const;
  inline void clear_nbrokenplayerseat();
  static const int kNBrokenPlayerSeatFieldNumber = 30;
  inline ::google::protobuf::int32 nbrokenplayerseat() const;
  inline void set_nbrokenplayerseat(::google::protobuf::int32 value);

  // optional bool bSurrender = 31;
  inline bool has_bsurrender() const;
  inline void clear_bsurrender();
  static const int kBSurrenderFieldNumber = 31;
  inline bool bsurrender() const;
  inline void set_bsurrender(bool value);

  // optional int32 nSurrenderPlayerSeat = 32;
  inline bool has_nsurrenderplayerseat() const;
  inline void clear_nsurrenderplayerseat();
  static const int kNSurrenderPlayerSeatFieldNumber = 32;
  inline ::google::protobuf::int32 nsurrenderplayerseat() const;
  inline void set_nsurrenderplayerseat(::google::protobuf::int32 value);

  // repeated bool bIsSpring = 33;
  inline int bisspring_size() const;
  inline void clear_bisspring();
  static const int kBIsSpringFieldNumber = 33;
  inline bool bisspring(int index) const;
  inline void set_bisspring(int index, bool value);
  inline void add_bisspring(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      bisspring() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_bisspring();

  // repeated int32 nSurplusCardCount = 34;
  inline int nsurpluscardcount_size() const;
  inline void clear_nsurpluscardcount();
  static const int kNSurplusCardCountFieldNumber = 34;
  inline ::google::protobuf::int32 nsurpluscardcount(int index) const;
  inline void set_nsurpluscardcount(int index, ::google::protobuf::int32 value);
  inline void add_nsurpluscardcount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      nsurpluscardcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_nsurpluscardcount();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameEnd)
 private:
  inline void set_has_lgametax();
  inline void clear_has_lgametax();
  inline void set_has_wprovideuser();
  inline void clear_has_wprovideuser();
  inline void set_has_cbchihucard();
  inline void clear_has_cbchihucard();
  inline void set_has_broundend();
  inline void clear_has_broundend();
  inline void set_has_bzhuangwin();
  inline void clear_has_bzhuangwin();
  inline void set_has_bisdatu();
  inline void clear_has_bisdatu();
  inline void set_has_biskutong();
  inline void clear_has_biskutong();
  inline void set_has_nno1seat();
  inline void clear_has_nno1seat();
  inline void set_has_nwinerseat();
  inline void clear_has_nwinerseat();
  inline void set_has_nwinersmate();
  inline void clear_has_nwinersmate();
  inline void set_has_nno2seat();
  inline void clear_has_nno2seat();
  inline void set_has_nno3seat();
  inline void clear_has_nno3seat();
  inline void set_has_nno4seat();
  inline void clear_has_nno4seat();
  inline void set_has_bbroken();
  inline void clear_has_bbroken();
  inline void set_has_nbrokenplayerseat();
  inline void clear_has_nbrokenplayerseat();
  inline void set_has_bsurrender();
  inline void clear_has_bsurrender();
  inline void set_has_nsurrenderplayerseat();
  inline void clear_has_nsurrenderplayerseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbchongguang_;
  ::google::protobuf::int32 lgametax_;
  ::google::protobuf::int32 wprovideuser_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbbawangking_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwchihukind_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dwchihuright_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ltotaslgamescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lcurrentgamescore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lcurrentpointscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lattachscore_;
  ::google::protobuf::RepeatedPtrField< ::GX8ZMahList > cbhandcarddata_;
  ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList > cbawardcarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lonlywinscore_;
  ::google::protobuf::int32 cbchihucard_;
  bool broundend_;
  bool bzhuangwin_;
  bool bisdatu_;
  bool biskutong_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lhuitouscore_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cbjiangmacarddata_;
  ::google::protobuf::RepeatedPtrField< ::GX8ZScoreList > detailedscores_;
  ::google::protobuf::int32 nno1seat_;
  ::google::protobuf::int32 nwinerseat_;
  ::google::protobuf::int32 nwinersmate_;
  ::google::protobuf::int32 nno2seat_;
  ::google::protobuf::int32 nno3seat_;
  ::google::protobuf::int32 nno4seat_;
  ::google::protobuf::int32 nbrokenplayerseat_;
  bool bbroken_;
  bool bsurrender_;
  ::google::protobuf::RepeatedField< bool > bisspring_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > nsurpluscardcount_;
  ::google::protobuf::int32 nsurrenderplayerseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(33 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameEnd* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameQuickSoundRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameQuickSoundRequest();
  virtual ~ProGX8ZGameQuickSoundRequest();

  ProGX8ZGameQuickSoundRequest(const ProGX8ZGameQuickSoundRequest& from);

  inline ProGX8ZGameQuickSoundRequest& operator=(const ProGX8ZGameQuickSoundRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameQuickSoundRequest& default_instance();

  void Swap(ProGX8ZGameQuickSoundRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameQuickSoundRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameQuickSoundRequest& from);
  void MergeFrom(const ProGX8ZGameQuickSoundRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameQuickSoundRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameQuickSoundRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameQuickSoundRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameQuickSoundRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameQuickSoundRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameQuickSoundRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameQuickSoundRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameQuickSoundRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameQuickSoundRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 desk_id = 2;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 desk_id() const;
  inline void set_desk_id(::google::protobuf::int32 value);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 sound_id = 4;
  inline bool has_sound_id() const;
  inline void clear_sound_id();
  static const int kSoundIdFieldNumber = 4;
  inline ::google::protobuf::int32 sound_id() const;
  inline void set_sound_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameQuickSoundRequest)
 private:
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_sound_id();
  inline void clear_has_sound_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 desk_id_;
  ::google::protobuf::int32 seat_id_;
  ::std::string* text_;
  ::google::protobuf::int32 sound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameQuickSoundRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameQuickSoundResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameQuickSoundResponse();
  virtual ~ProGX8ZGameQuickSoundResponse();

  ProGX8ZGameQuickSoundResponse(const ProGX8ZGameQuickSoundResponse& from);

  inline ProGX8ZGameQuickSoundResponse& operator=(const ProGX8ZGameQuickSoundResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameQuickSoundResponse& default_instance();

  void Swap(ProGX8ZGameQuickSoundResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameQuickSoundResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameQuickSoundResponse& from);
  void MergeFrom(const ProGX8ZGameQuickSoundResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameQuickSoundResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameQuickSoundResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameQuickSoundResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameQuickSoundResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameQuickSoundResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameQuickSoundResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameQuickSoundResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameQuickSoundResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameQuickSoundResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 desk_id = 2;
  inline bool has_desk_id() const;
  inline void clear_desk_id();
  static const int kDeskIdFieldNumber = 2;
  inline ::google::protobuf::int32 desk_id() const;
  inline void set_desk_id(::google::protobuf::int32 value);

  // optional int32 seat_id = 3;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 3;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 sound_id = 4;
  inline bool has_sound_id() const;
  inline void clear_sound_id();
  static const int kSoundIdFieldNumber = 4;
  inline ::google::protobuf::int32 sound_id() const;
  inline void set_sound_id(::google::protobuf::int32 value);

  // optional bytes text = 5;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 5;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const void* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameQuickSoundResponse)
 private:
  inline void set_has_desk_id();
  inline void clear_has_desk_id();
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_sound_id();
  inline void clear_has_sound_id();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 desk_id_;
  ::google::protobuf::int32 seat_id_;
  ::std::string* text_;
  ::google::protobuf::int32 sound_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameQuickSoundResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameSendDiscardMahs : public ::google::protobuf::Message {
 public:
  ProGX8ZGameSendDiscardMahs();
  virtual ~ProGX8ZGameSendDiscardMahs();

  ProGX8ZGameSendDiscardMahs(const ProGX8ZGameSendDiscardMahs& from);

  inline ProGX8ZGameSendDiscardMahs& operator=(const ProGX8ZGameSendDiscardMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameSendDiscardMahs& default_instance();

  void Swap(ProGX8ZGameSendDiscardMahs* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameSendDiscardMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameSendDiscardMahs& from);
  void MergeFrom(const ProGX8ZGameSendDiscardMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameSendDiscardMahs_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameSendDiscardMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameSendDiscardMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameSendDiscardMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameSendDiscardMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameSendDiscardMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameSendDiscardMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameSendDiscardMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameSendDiscardMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // repeated .GX8ZMahList cbCardData = 3;
  inline int cbcarddata_size() const;
  inline void clear_cbcarddata();
  static const int kCbCardDataFieldNumber = 3;
  inline const ::GX8ZMahList& cbcarddata(int index) const;
  inline ::GX8ZMahList* mutable_cbcarddata(int index);
  inline ::GX8ZMahList* add_cbcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
      cbcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
      mutable_cbcarddata();

  // repeated .GX8ZMahList cbNoChangeCardData = 4;
  inline int cbnochangecarddata_size() const;
  inline void clear_cbnochangecarddata();
  static const int kCbNoChangeCardDataFieldNumber = 4;
  inline const ::GX8ZMahList& cbnochangecarddata(int index) const;
  inline ::GX8ZMahList* mutable_cbnochangecarddata(int index);
  inline ::GX8ZMahList* add_cbnochangecarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
      cbnochangecarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
      mutable_cbnochangecarddata();

  // optional int32 deskCount = 5;
  inline bool has_deskcount() const;
  inline void clear_deskcount();
  static const int kDeskCountFieldNumber = 5;
  inline ::google::protobuf::int32 deskcount() const;
  inline void set_deskcount(::google::protobuf::int32 value);

  // repeated int32 outCardCount = 6;
  inline int outcardcount_size() const;
  inline void clear_outcardcount();
  static const int kOutCardCountFieldNumber = 6;
  inline ::google::protobuf::int32 outcardcount(int index) const;
  inline void set_outcardcount(int index, ::google::protobuf::int32 value);
  inline void add_outcardcount(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outcardcount() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outcardcount();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameSendDiscardMahs)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_deskcount();
  inline void clear_has_deskcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GX8ZMahList > cbcarddata_;
  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 deskcount_;
  ::google::protobuf::RepeatedPtrField< ::GX8ZMahList > cbnochangecarddata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outcardcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameSendDiscardMahs* default_instance_;
};
// -------------------------------------------------------------------

class GX8ZWeaveItem : public ::google::protobuf::Message {
 public:
  GX8ZWeaveItem();
  virtual ~GX8ZWeaveItem();

  GX8ZWeaveItem(const GX8ZWeaveItem& from);

  inline GX8ZWeaveItem& operator=(const GX8ZWeaveItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GX8ZWeaveItem& default_instance();

  void Swap(GX8ZWeaveItem* other);

  // implements Message ----------------------------------------------

  GX8ZWeaveItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GX8ZWeaveItem& from);
  void MergeFrom(const GX8ZWeaveItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 weaveKind = 1;
  inline bool has_weavekind() const;
  inline void clear_weavekind();
  static const int kWeaveKindFieldNumber = 1;
  inline ::google::protobuf::int32 weavekind() const;
  inline void set_weavekind(::google::protobuf::int32 value);

  // optional int32 centercard = 2;
  inline bool has_centercard() const;
  inline void clear_centercard();
  static const int kCentercardFieldNumber = 2;
  inline ::google::protobuf::int32 centercard() const;
  inline void set_centercard(::google::protobuf::int32 value);

  // optional int32 provideUser = 3;
  inline bool has_provideuser() const;
  inline void clear_provideuser();
  static const int kProvideUserFieldNumber = 3;
  inline ::google::protobuf::int32 provideuser() const;
  inline void set_provideuser(::google::protobuf::int32 value);

  // optional int32 cardsize = 4;
  inline bool has_cardsize() const;
  inline void clear_cardsize();
  static const int kCardsizeFieldNumber = 4;
  inline ::google::protobuf::int32 cardsize() const;
  inline void set_cardsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GX8ZWeaveItem)
 private:
  inline void set_has_weavekind();
  inline void clear_has_weavekind();
  inline void set_has_centercard();
  inline void clear_has_centercard();
  inline void set_has_provideuser();
  inline void clear_has_provideuser();
  inline void set_has_cardsize();
  inline void clear_has_cardsize();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 weavekind_;
  ::google::protobuf::int32 centercard_;
  ::google::protobuf::int32 provideuser_;
  ::google::protobuf::int32 cardsize_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static GX8ZWeaveItem* default_instance_;
};
// -------------------------------------------------------------------

class GX8ZWeaveItems : public ::google::protobuf::Message {
 public:
  GX8ZWeaveItems();
  virtual ~GX8ZWeaveItems();

  GX8ZWeaveItems(const GX8ZWeaveItems& from);

  inline GX8ZWeaveItems& operator=(const GX8ZWeaveItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GX8ZWeaveItems& default_instance();

  void Swap(GX8ZWeaveItems* other);

  // implements Message ----------------------------------------------

  GX8ZWeaveItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GX8ZWeaveItems& from);
  void MergeFrom(const GX8ZWeaveItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .GX8ZWeaveItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::GX8ZWeaveItem& items(int index) const;
  inline ::GX8ZWeaveItem* mutable_items(int index);
  inline ::GX8ZWeaveItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:GX8ZWeaveItems)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static GX8ZWeaveItems* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameSendActionMahs : public ::google::protobuf::Message {
 public:
  ProGX8ZGameSendActionMahs();
  virtual ~ProGX8ZGameSendActionMahs();

  ProGX8ZGameSendActionMahs(const ProGX8ZGameSendActionMahs& from);

  inline ProGX8ZGameSendActionMahs& operator=(const ProGX8ZGameSendActionMahs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameSendActionMahs& default_instance();

  void Swap(ProGX8ZGameSendActionMahs* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameSendActionMahs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameSendActionMahs& from);
  void MergeFrom(const ProGX8ZGameSendActionMahs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameSendActionMahs_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameSendActionMahs_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameSendActionMahs_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameSendActionMahs_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameSendActionMahs_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameSendActionMahs_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameSendActionMahs_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameSendActionMahs_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameSendActionMahs_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // repeated .GX8ZWeaveItems weaves = 3;
  inline int weaves_size() const;
  inline void clear_weaves();
  static const int kWeavesFieldNumber = 3;
  inline const ::GX8ZWeaveItems& weaves(int index) const;
  inline ::GX8ZWeaveItems* mutable_weaves(int index);
  inline ::GX8ZWeaveItems* add_weaves();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItems >&
      weaves() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItems >*
      mutable_weaves();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameSendActionMahs)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItems > weaves_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameSendActionMahs* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameBrokenRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameBrokenRequest();
  virtual ~ProGX8ZGameBrokenRequest();

  ProGX8ZGameBrokenRequest(const ProGX8ZGameBrokenRequest& from);

  inline ProGX8ZGameBrokenRequest& operator=(const ProGX8ZGameBrokenRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameBrokenRequest& default_instance();

  void Swap(ProGX8ZGameBrokenRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameBrokenRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameBrokenRequest& from);
  void MergeFrom(const ProGX8ZGameBrokenRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameBrokenRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameBrokenRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameBrokenRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameBrokenRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameBrokenRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameBrokenRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameBrokenRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameBrokenRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameBrokenRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .GX8ZBROKEN_TYPE type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::GX8ZBROKEN_TYPE type() const;
  inline void set_type(::GX8ZBROKEN_TYPE value);

  // optional int32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameBrokenRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int type_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameBrokenRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameBrokenOperate : public ::google::protobuf::Message {
 public:
  ProGX8ZGameBrokenOperate();
  virtual ~ProGX8ZGameBrokenOperate();

  ProGX8ZGameBrokenOperate(const ProGX8ZGameBrokenOperate& from);

  inline ProGX8ZGameBrokenOperate& operator=(const ProGX8ZGameBrokenOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameBrokenOperate& default_instance();

  void Swap(ProGX8ZGameBrokenOperate* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameBrokenOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameBrokenOperate& from);
  void MergeFrom(const ProGX8ZGameBrokenOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameBrokenOperate_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameBrokenOperate_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameBrokenOperate_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameBrokenOperate_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameBrokenOperate_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameBrokenOperate_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameBrokenOperate_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameBrokenOperate_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameBrokenOperate_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .GX8ZBROKEN_OPERATE result = 3 [default = GX8Z_BO_DISAGREE];
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::GX8ZBROKEN_OPERATE result() const;
  inline void set_result(::GX8ZBROKEN_OPERATE value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameBrokenOperate)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameBrokenOperate* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameBrokenNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameBrokenNotify();
  virtual ~ProGX8ZGameBrokenNotify();

  ProGX8ZGameBrokenNotify(const ProGX8ZGameBrokenNotify& from);

  inline ProGX8ZGameBrokenNotify& operator=(const ProGX8ZGameBrokenNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameBrokenNotify& default_instance();

  void Swap(ProGX8ZGameBrokenNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameBrokenNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameBrokenNotify& from);
  void MergeFrom(const ProGX8ZGameBrokenNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameBrokenNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameBrokenNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameBrokenNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameBrokenNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameBrokenNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameBrokenNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameBrokenNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameBrokenNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameBrokenNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 2;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 2;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional .GX8ZBROKEN_CODE operate_code = 3 [default = GX8Z_BC_SUCCESS];
  inline bool has_operate_code() const;
  inline void clear_operate_code();
  static const int kOperateCodeFieldNumber = 3;
  inline ::GX8ZBROKEN_CODE operate_code() const;
  inline void set_operate_code(::GX8ZBROKEN_CODE value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameBrokenNotify)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_operate_code();
  inline void clear_has_operate_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  int operate_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameBrokenNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameRuleConfig : public ::google::protobuf::Message {
 public:
  ProGX8ZGameRuleConfig();
  virtual ~ProGX8ZGameRuleConfig();

  ProGX8ZGameRuleConfig(const ProGX8ZGameRuleConfig& from);

  inline ProGX8ZGameRuleConfig& operator=(const ProGX8ZGameRuleConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameRuleConfig& default_instance();

  void Swap(ProGX8ZGameRuleConfig* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameRuleConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameRuleConfig& from);
  void MergeFrom(const ProGX8ZGameRuleConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameRuleConfig_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameRuleConfig_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameRuleConfig_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameRuleConfig_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameRuleConfig_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameRuleConfig_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameRuleConfig_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameRuleConfig_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameRuleConfig_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 game_round = 1;
  inline bool has_game_round() const;
  inline void clear_game_round();
  static const int kGameRoundFieldNumber = 1;
  inline ::google::protobuf::int32 game_round() const;
  inline void set_game_round(::google::protobuf::int32 value);

  // optional int32 need_card = 2;
  inline bool has_need_card() const;
  inline void clear_need_card();
  static const int kNeedCardFieldNumber = 2;
  inline ::google::protobuf::int32 need_card() const;
  inline void set_need_card(::google::protobuf::int32 value);

  // optional bool have_bottom_king = 3;
  inline bool has_have_bottom_king() const;
  inline void clear_have_bottom_king();
  static const int kHaveBottomKingFieldNumber = 3;
  inline bool have_bottom_king() const;
  inline void set_have_bottom_king(bool value);

  // optional bool have_mai_lei = 4;
  inline bool has_have_mai_lei() const;
  inline void clear_have_mai_lei();
  static const int kHaveMaiLeiFieldNumber = 4;
  inline bool have_mai_lei() const;
  inline void set_have_mai_lei(bool value);

  // optional bool hava_hui_tou = 5;
  inline bool has_hava_hui_tou() const;
  inline void clear_hava_hui_tou();
  static const int kHavaHuiTouFieldNumber = 5;
  inline bool hava_hui_tou() const;
  inline void set_hava_hui_tou(bool value);

  // optional int32 nMasterSeat = 6;
  inline bool has_nmasterseat() const;
  inline void clear_nmasterseat();
  static const int kNMasterSeatFieldNumber = 6;
  inline ::google::protobuf::int32 nmasterseat() const;
  inline void set_nmasterseat(::google::protobuf::int32 value);

  // optional int32 current_game_count = 7;
  inline bool has_current_game_count() const;
  inline void clear_current_game_count();
  static const int kCurrentGameCountFieldNumber = 7;
  inline ::google::protobuf::int32 current_game_count() const;
  inline void set_current_game_count(::google::protobuf::int32 value);

  // optional bool have_jianma = 8;
  inline bool has_have_jianma() const;
  inline void clear_have_jianma();
  static const int kHaveJianmaFieldNumber = 8;
  inline bool have_jianma() const;
  inline void set_have_jianma(bool value);

  // optional int32 nChongguanNum = 9;
  inline bool has_nchongguannum() const;
  inline void clear_nchongguannum();
  static const int kNChongguanNumFieldNumber = 9;
  inline ::google::protobuf::int32 nchongguannum() const;
  inline void set_nchongguannum(::google::protobuf::int32 value);

  // optional bool bbawangfanbei = 10;
  inline bool has_bbawangfanbei() const;
  inline void clear_bbawangfanbei();
  static const int kBbawangfanbeiFieldNumber = 10;
  inline bool bbawangfanbei() const;
  inline void set_bbawangfanbei(bool value);

  // optional int32 nPlayerNum = 11;
  inline bool has_nplayernum() const;
  inline void clear_nplayernum();
  static const int kNPlayerNumFieldNumber = 11;
  inline ::google::protobuf::int32 nplayernum() const;
  inline void set_nplayernum(::google::protobuf::int32 value);

  // optional bytes sRoomNum = 12;
  inline bool has_sroomnum() const;
  inline void clear_sroomnum();
  static const int kSRoomNumFieldNumber = 12;
  inline const ::std::string& sroomnum() const;
  inline void set_sroomnum(const ::std::string& value);
  inline void set_sroomnum(const char* value);
  inline void set_sroomnum(const void* value, size_t size);
  inline ::std::string* mutable_sroomnum();
  inline ::std::string* release_sroomnum();
  inline void set_allocated_sroomnum(::std::string* sroomnum);

  // optional bytes sPlayTime = 13;
  inline bool has_splaytime() const;
  inline void clear_splaytime();
  static const int kSPlayTimeFieldNumber = 13;
  inline const ::std::string& splaytime() const;
  inline void set_splaytime(const ::std::string& value);
  inline void set_splaytime(const char* value);
  inline void set_splaytime(const void* value, size_t size);
  inline ::std::string* mutable_splaytime();
  inline ::std::string* release_splaytime();
  inline void set_allocated_splaytime(::std::string* splaytime);

  // optional int32 gametype = 14;
  inline bool has_gametype() const;
  inline void clear_gametype();
  static const int kGametypeFieldNumber = 14;
  inline ::google::protobuf::int32 gametype() const;
  inline void set_gametype(::google::protobuf::int32 value);

  // optional bool isJingDian = 15;
  inline bool has_isjingdian() const;
  inline void clear_isjingdian();
  static const int kIsJingDianFieldNumber = 15;
  inline bool isjingdian() const;
  inline void set_isjingdian(bool value);

  // optional bool isOpenTeammate = 16;
  inline bool has_isopenteammate() const;
  inline void clear_isopenteammate();
  static const int kIsOpenTeammateFieldNumber = 16;
  inline bool isopenteammate() const;
  inline void set_isopenteammate(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameRuleConfig)
 private:
  inline void set_has_game_round();
  inline void clear_has_game_round();
  inline void set_has_need_card();
  inline void clear_has_need_card();
  inline void set_has_have_bottom_king();
  inline void clear_has_have_bottom_king();
  inline void set_has_have_mai_lei();
  inline void clear_has_have_mai_lei();
  inline void set_has_hava_hui_tou();
  inline void clear_has_hava_hui_tou();
  inline void set_has_nmasterseat();
  inline void clear_has_nmasterseat();
  inline void set_has_current_game_count();
  inline void clear_has_current_game_count();
  inline void set_has_have_jianma();
  inline void clear_has_have_jianma();
  inline void set_has_nchongguannum();
  inline void clear_has_nchongguannum();
  inline void set_has_bbawangfanbei();
  inline void clear_has_bbawangfanbei();
  inline void set_has_nplayernum();
  inline void clear_has_nplayernum();
  inline void set_has_sroomnum();
  inline void clear_has_sroomnum();
  inline void set_has_splaytime();
  inline void clear_has_splaytime();
  inline void set_has_gametype();
  inline void clear_has_gametype();
  inline void set_has_isjingdian();
  inline void clear_has_isjingdian();
  inline void set_has_isopenteammate();
  inline void clear_has_isopenteammate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 game_round_;
  ::google::protobuf::int32 need_card_;
  bool have_bottom_king_;
  bool have_mai_lei_;
  bool hava_hui_tou_;
  bool have_jianma_;
  ::google::protobuf::int32 nmasterseat_;
  ::google::protobuf::int32 current_game_count_;
  ::google::protobuf::int32 nchongguannum_;
  ::std::string* sroomnum_;
  ::std::string* splaytime_;
  ::google::protobuf::int32 nplayernum_;
  bool bbawangfanbei_;
  bool isjingdian_;
  bool isopenteammate_;
  ::google::protobuf::int32 gametype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameRuleConfig* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameBrokenStatus : public ::google::protobuf::Message {
 public:
  ProGX8ZGameBrokenStatus();
  virtual ~ProGX8ZGameBrokenStatus();

  ProGX8ZGameBrokenStatus(const ProGX8ZGameBrokenStatus& from);

  inline ProGX8ZGameBrokenStatus& operator=(const ProGX8ZGameBrokenStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameBrokenStatus& default_instance();

  void Swap(ProGX8ZGameBrokenStatus* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameBrokenStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameBrokenStatus& from);
  void MergeFrom(const ProGX8ZGameBrokenStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameBrokenStatus_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameBrokenStatus_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameBrokenStatus_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameBrokenStatus_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameBrokenStatus_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameBrokenStatus_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameBrokenStatus_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameBrokenStatus_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameBrokenStatus_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 broken_seat = 1;
  inline bool has_broken_seat() const;
  inline void clear_broken_seat();
  static const int kBrokenSeatFieldNumber = 1;
  inline ::google::protobuf::int32 broken_seat() const;
  inline void set_broken_seat(::google::protobuf::int32 value);

  // repeated bool broken_status = 2;
  inline int broken_status_size() const;
  inline void clear_broken_status();
  static const int kBrokenStatusFieldNumber = 2;
  inline bool broken_status(int index) const;
  inline void set_broken_status(int index, bool value);
  inline void add_broken_status(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      broken_status() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_broken_status();

  // optional int32 left_time = 3;
  inline bool has_left_time() const;
  inline void clear_left_time();
  static const int kLeftTimeFieldNumber = 3;
  inline ::google::protobuf::int32 left_time() const;
  inline void set_left_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameBrokenStatus)
 private:
  inline void set_has_broken_seat();
  inline void clear_has_broken_seat();
  inline void set_has_left_time();
  inline void clear_has_left_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< bool > broken_status_;
  ::google::protobuf::int32 broken_seat_;
  ::google::protobuf::int32 left_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameBrokenStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameDataResp : public ::google::protobuf::Message {
 public:
  ProGX8ZGameDataResp();
  virtual ~ProGX8ZGameDataResp();

  ProGX8ZGameDataResp(const ProGX8ZGameDataResp& from);

  inline ProGX8ZGameDataResp& operator=(const ProGX8ZGameDataResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameDataResp& default_instance();

  void Swap(ProGX8ZGameDataResp* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameDataResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameDataResp& from);
  void MergeFrom(const ProGX8ZGameDataResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameDataResp_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameDataResp_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameDataResp_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameDataResp_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameDataResp_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameDataResp_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameDataResp_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameDataResp_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameDataResp_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 total_score = 1;
  inline int total_score_size() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 1;
  inline ::google::protobuf::int32 total_score(int index) const;
  inline void set_total_score(int index, ::google::protobuf::int32 value);
  inline void add_total_score(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      total_score() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_total_score();

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameDataResp)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > total_score_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameDataResp* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameRecordRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameRecordRequest();
  virtual ~ProGX8ZGameRecordRequest();

  ProGX8ZGameRecordRequest(const ProGX8ZGameRecordRequest& from);

  inline ProGX8ZGameRecordRequest& operator=(const ProGX8ZGameRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameRecordRequest& default_instance();

  void Swap(ProGX8ZGameRecordRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameRecordRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameRecordRequest& from);
  void MergeFrom(const ProGX8ZGameRecordRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameRecordRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameRecordRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameRecordRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameRecordRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameRecordRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameRecordRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameRecordRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameRecordRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameRecordRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameRecordRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameRecordRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameRecordResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameRecordResponse();
  virtual ~ProGX8ZGameRecordResponse();

  ProGX8ZGameRecordResponse(const ProGX8ZGameRecordResponse& from);

  inline ProGX8ZGameRecordResponse& operator=(const ProGX8ZGameRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameRecordResponse& default_instance();

  void Swap(ProGX8ZGameRecordResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameRecordResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameRecordResponse& from);
  void MergeFrom(const ProGX8ZGameRecordResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameRecordResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameRecordResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameRecordResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameRecordResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameRecordResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameRecordResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameRecordResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameRecordResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameRecordResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional bytes url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameRecordResponse)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameRecordResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserLocationRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserLocationRequest();
  virtual ~ProGX8ZGameUserLocationRequest();

  ProGX8ZGameUserLocationRequest(const ProGX8ZGameUserLocationRequest& from);

  inline ProGX8ZGameUserLocationRequest& operator=(const ProGX8ZGameUserLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserLocationRequest& default_instance();

  void Swap(ProGX8ZGameUserLocationRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserLocationRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserLocationRequest& from);
  void MergeFrom(const ProGX8ZGameUserLocationRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserLocationRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserLocationRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserLocationRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserLocationRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserLocationRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserLocationRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserLocationRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserLocationRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserLocationRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional double dwlongitude = 2;
  inline bool has_dwlongitude() const;
  inline void clear_dwlongitude();
  static const int kDwlongitudeFieldNumber = 2;
  inline double dwlongitude() const;
  inline void set_dwlongitude(double value);

  // optional double dwlatitude = 3;
  inline bool has_dwlatitude() const;
  inline void clear_dwlatitude();
  static const int kDwlatitudeFieldNumber = 3;
  inline double dwlatitude() const;
  inline void set_dwlatitude(double value);

  // optional bytes strDistrict = 4;
  inline bool has_strdistrict() const;
  inline void clear_strdistrict();
  static const int kStrDistrictFieldNumber = 4;
  inline const ::std::string& strdistrict() const;
  inline void set_strdistrict(const ::std::string& value);
  inline void set_strdistrict(const char* value);
  inline void set_strdistrict(const void* value, size_t size);
  inline ::std::string* mutable_strdistrict();
  inline ::std::string* release_strdistrict();
  inline void set_allocated_strdistrict(::std::string* strdistrict);

  // optional bytes strStreetName = 5;
  inline bool has_strstreetname() const;
  inline void clear_strstreetname();
  static const int kStrStreetNameFieldNumber = 5;
  inline const ::std::string& strstreetname() const;
  inline void set_strstreetname(const ::std::string& value);
  inline void set_strstreetname(const char* value);
  inline void set_strstreetname(const void* value, size_t size);
  inline ::std::string* mutable_strstreetname();
  inline ::std::string* release_strstreetname();
  inline void set_allocated_strstreetname(::std::string* strstreetname);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserLocationRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_dwlongitude();
  inline void clear_has_dwlongitude();
  inline void set_has_dwlatitude();
  inline void clear_has_dwlatitude();
  inline void set_has_strdistrict();
  inline void clear_has_strdistrict();
  inline void set_has_strstreetname();
  inline void clear_has_strstreetname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double dwlongitude_;
  double dwlatitude_;
  ::std::string* strdistrict_;
  ::std::string* strstreetname_;
  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserLocationRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameSyncCardResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameSyncCardResponse();
  virtual ~ProGX8ZGameSyncCardResponse();

  ProGX8ZGameSyncCardResponse(const ProGX8ZGameSyncCardResponse& from);

  inline ProGX8ZGameSyncCardResponse& operator=(const ProGX8ZGameSyncCardResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameSyncCardResponse& default_instance();

  void Swap(ProGX8ZGameSyncCardResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameSyncCardResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameSyncCardResponse& from);
  void MergeFrom(const ProGX8ZGameSyncCardResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameSyncCardResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameSyncCardResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameSyncCardResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameSyncCardResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameSyncCardResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameSyncCardResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameSyncCardResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameSyncCardResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameSyncCardResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 2;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 2;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // repeated int32 handmahs = 3;
  inline int handmahs_size() const;
  inline void clear_handmahs();
  static const int kHandmahsFieldNumber = 3;
  inline ::google::protobuf::int32 handmahs(int index) const;
  inline void set_handmahs(int index, ::google::protobuf::int32 value);
  inline void add_handmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      handmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_handmahs();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameSyncCardResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > handmahs_;
  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameSyncCardResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserPhoneStatusRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserPhoneStatusRequest();
  virtual ~ProGX8ZGameUserPhoneStatusRequest();

  ProGX8ZGameUserPhoneStatusRequest(const ProGX8ZGameUserPhoneStatusRequest& from);

  inline ProGX8ZGameUserPhoneStatusRequest& operator=(const ProGX8ZGameUserPhoneStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserPhoneStatusRequest& default_instance();

  void Swap(ProGX8ZGameUserPhoneStatusRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserPhoneStatusRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserPhoneStatusRequest& from);
  void MergeFrom(const ProGX8ZGameUserPhoneStatusRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserPhoneStatusRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserPhoneStatusRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserPhoneStatusRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserPhoneStatusRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserPhoneStatusRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserPhoneStatusRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // optional int32 userstatus = 2;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserstatusFieldNumber = 2;
  inline ::google::protobuf::int32 userstatus() const;
  inline void set_userstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserPhoneStatusRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;
  ::google::protobuf::int32 userstatus_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserPhoneStatusRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserGiveUpRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserGiveUpRequest();
  virtual ~ProGX8ZGameUserGiveUpRequest();

  ProGX8ZGameUserGiveUpRequest(const ProGX8ZGameUserGiveUpRequest& from);

  inline ProGX8ZGameUserGiveUpRequest& operator=(const ProGX8ZGameUserGiveUpRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserGiveUpRequest& default_instance();

  void Swap(ProGX8ZGameUserGiveUpRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserGiveUpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserGiveUpRequest& from);
  void MergeFrom(const ProGX8ZGameUserGiveUpRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserGiveUpRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserGiveUpRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserGiveUpRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserGiveUpRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserGiveUpRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserGiveUpRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserGiveUpRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat_id = 1;
  inline bool has_seat_id() const;
  inline void clear_seat_id();
  static const int kSeatIdFieldNumber = 1;
  inline ::google::protobuf::int32 seat_id() const;
  inline void set_seat_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserGiveUpRequest)
 private:
  inline void set_has_seat_id();
  inline void clear_has_seat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserGiveUpRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserHintRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserHintRequest();
  virtual ~ProGX8ZGameUserHintRequest();

  ProGX8ZGameUserHintRequest(const ProGX8ZGameUserHintRequest& from);

  inline ProGX8ZGameUserHintRequest& operator=(const ProGX8ZGameUserHintRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserHintRequest& default_instance();

  void Swap(ProGX8ZGameUserHintRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserHintRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserHintRequest& from);
  void MergeFrom(const ProGX8ZGameUserHintRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserHintRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserHintRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserHintRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserHintRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserHintRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserHintRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserHintRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserHintRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserHintRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserHintRequest)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserHintRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserHintResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserHintResponse();
  virtual ~ProGX8ZGameUserHintResponse();

  ProGX8ZGameUserHintResponse(const ProGX8ZGameUserHintResponse& from);

  inline ProGX8ZGameUserHintResponse& operator=(const ProGX8ZGameUserHintResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserHintResponse& default_instance();

  void Swap(ProGX8ZGameUserHintResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserHintResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserHintResponse& from);
  void MergeFrom(const ProGX8ZGameUserHintResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserHintResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserHintResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserHintResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserHintResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserHintResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserHintResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserHintResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserHintResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserHintResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 lenth = 1;
  inline bool has_lenth() const;
  inline void clear_lenth();
  static const int kLenthFieldNumber = 1;
  inline ::google::protobuf::int32 lenth() const;
  inline void set_lenth(::google::protobuf::int32 value);

  // repeated int32 outMahs = 2;
  inline int outmahs_size() const;
  inline void clear_outmahs();
  static const int kOutMahsFieldNumber = 2;
  inline ::google::protobuf::int32 outmahs(int index) const;
  inline void set_outmahs(int index, ::google::protobuf::int32 value);
  inline void add_outmahs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      outmahs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_outmahs();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserHintResponse)
 private:
  inline void set_has_lenth();
  inline void clear_has_lenth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > outmahs_;
  ::google::protobuf::int32 lenth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserHintResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserDaTuNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserDaTuNotify();
  virtual ~ProGX8ZGameUserDaTuNotify();

  ProGX8ZGameUserDaTuNotify(const ProGX8ZGameUserDaTuNotify& from);

  inline ProGX8ZGameUserDaTuNotify& operator=(const ProGX8ZGameUserDaTuNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserDaTuNotify& default_instance();

  void Swap(ProGX8ZGameUserDaTuNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserDaTuNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserDaTuNotify& from);
  void MergeFrom(const ProGX8ZGameUserDaTuNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserDaTuNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserDaTuNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserDaTuNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserDaTuNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserDaTuNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserDaTuNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserDaTuNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserDaTuNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserDaTuNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserDaTuNotify)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserDaTuNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserTeammateRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserTeammateRequest();
  virtual ~ProGX8ZGameUserTeammateRequest();

  ProGX8ZGameUserTeammateRequest(const ProGX8ZGameUserTeammateRequest& from);

  inline ProGX8ZGameUserTeammateRequest& operator=(const ProGX8ZGameUserTeammateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserTeammateRequest& default_instance();

  void Swap(ProGX8ZGameUserTeammateRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserTeammateRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserTeammateRequest& from);
  void MergeFrom(const ProGX8ZGameUserTeammateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserTeammateRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserTeammateRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserTeammateRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserTeammateRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserTeammateRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserTeammateRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserTeammateRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserTeammateRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserTeammateRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 bankerMateSeat = 1;
  inline bool has_bankermateseat() const;
  inline void clear_bankermateseat();
  static const int kBankerMateSeatFieldNumber = 1;
  inline ::google::protobuf::int32 bankermateseat() const;
  inline void set_bankermateseat(::google::protobuf::int32 value);

  // optional int32 mateCard = 2;
  inline bool has_matecard() const;
  inline void clear_matecard();
  static const int kMateCardFieldNumber = 2;
  inline ::google::protobuf::int32 matecard() const;
  inline void set_matecard(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserTeammateRequest)
 private:
  inline void set_has_bankermateseat();
  inline void clear_has_bankermateseat();
  inline void set_has_matecard();
  inline void clear_has_matecard();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 bankermateseat_;
  ::google::protobuf::int32 matecard_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserTeammateRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserDaTuRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserDaTuRequest();
  virtual ~ProGX8ZGameUserDaTuRequest();

  ProGX8ZGameUserDaTuRequest(const ProGX8ZGameUserDaTuRequest& from);

  inline ProGX8ZGameUserDaTuRequest& operator=(const ProGX8ZGameUserDaTuRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserDaTuRequest& default_instance();

  void Swap(ProGX8ZGameUserDaTuRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserDaTuRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserDaTuRequest& from);
  void MergeFrom(const ProGX8ZGameUserDaTuRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserDaTuRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserDaTuRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserDaTuRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserDaTuRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserDaTuRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserDaTuRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserDaTuRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserDaTuRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserDaTuRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional bool bIsDaTu = 2;
  inline bool has_bisdatu() const;
  inline void clear_bisdatu();
  static const int kBIsDaTuFieldNumber = 2;
  inline bool bisdatu() const;
  inline void set_bisdatu(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserDaTuRequest)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_bisdatu();
  inline void clear_has_bisdatu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  bool bisdatu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserDaTuRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserDaTuResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserDaTuResponse();
  virtual ~ProGX8ZGameUserDaTuResponse();

  ProGX8ZGameUserDaTuResponse(const ProGX8ZGameUserDaTuResponse& from);

  inline ProGX8ZGameUserDaTuResponse& operator=(const ProGX8ZGameUserDaTuResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserDaTuResponse& default_instance();

  void Swap(ProGX8ZGameUserDaTuResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserDaTuResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserDaTuResponse& from);
  void MergeFrom(const ProGX8ZGameUserDaTuResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserDaTuResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserDaTuResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserDaTuResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserDaTuResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserDaTuResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserDaTuResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserDaTuResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserDaTuResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserDaTuResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional bool bIsDaTu = 2;
  inline bool has_bisdatu() const;
  inline void clear_bisdatu();
  static const int kBIsDaTuFieldNumber = 2;
  inline bool bisdatu() const;
  inline void set_bisdatu(bool value);

  // optional int32 nextSeat = 3;
  inline bool has_nextseat() const;
  inline void clear_nextseat();
  static const int kNextSeatFieldNumber = 3;
  inline ::google::protobuf::int32 nextseat() const;
  inline void set_nextseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserDaTuResponse)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_bisdatu();
  inline void clear_has_bisdatu();
  inline void set_has_nextseat();
  inline void clear_has_nextseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  bool bisdatu_;
  ::google::protobuf::int32 nextseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserDaTuResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameUserDaTuResult : public ::google::protobuf::Message {
 public:
  ProGX8ZGameUserDaTuResult();
  virtual ~ProGX8ZGameUserDaTuResult();

  ProGX8ZGameUserDaTuResult(const ProGX8ZGameUserDaTuResult& from);

  inline ProGX8ZGameUserDaTuResult& operator=(const ProGX8ZGameUserDaTuResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameUserDaTuResult& default_instance();

  void Swap(ProGX8ZGameUserDaTuResult* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameUserDaTuResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameUserDaTuResult& from);
  void MergeFrom(const ProGX8ZGameUserDaTuResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameUserDaTuResult_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameUserDaTuResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameUserDaTuResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameUserDaTuResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameUserDaTuResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameUserDaTuResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameUserDaTuResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameUserDaTuResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameUserDaTuResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 seat = 1;
  inline bool has_seat() const;
  inline void clear_seat();
  static const int kSeatFieldNumber = 1;
  inline ::google::protobuf::int32 seat() const;
  inline void set_seat(::google::protobuf::int32 value);

  // optional bool bIsDaTu = 2;
  inline bool has_bisdatu() const;
  inline void clear_bisdatu();
  static const int kBIsDaTuFieldNumber = 2;
  inline bool bisdatu() const;
  inline void set_bisdatu(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameUserDaTuResult)
 private:
  inline void set_has_seat();
  inline void clear_has_seat();
  inline void set_has_bisdatu();
  inline void clear_has_bisdatu();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 seat_;
  bool bisdatu_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameUserDaTuResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShangYouResult : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShangYouResult();
  virtual ~ProGX8ZGameShangYouResult();

  ProGX8ZGameShangYouResult(const ProGX8ZGameShangYouResult& from);

  inline ProGX8ZGameShangYouResult& operator=(const ProGX8ZGameShangYouResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShangYouResult& default_instance();

  void Swap(ProGX8ZGameShangYouResult* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShangYouResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShangYouResult& from);
  void MergeFrom(const ProGX8ZGameShangYouResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShangYouResult_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShangYouResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShangYouResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShangYouResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShangYouResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShangYouResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShangYouResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShangYouResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShangYouResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 shangyouSeat = 1;
  inline int shangyouseat_size() const;
  inline void clear_shangyouseat();
  static const int kShangyouSeatFieldNumber = 1;
  inline ::google::protobuf::int32 shangyouseat(int index) const;
  inline void set_shangyouseat(int index, ::google::protobuf::int32 value);
  inline void add_shangyouseat(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shangyouseat() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shangyouseat();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShangYouResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shangyouseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShangYouResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShowFriendNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShowFriendNotify();
  virtual ~ProGX8ZGameShowFriendNotify();

  ProGX8ZGameShowFriendNotify(const ProGX8ZGameShowFriendNotify& from);

  inline ProGX8ZGameShowFriendNotify& operator=(const ProGX8ZGameShowFriendNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShowFriendNotify& default_instance();

  void Swap(ProGX8ZGameShowFriendNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShowFriendNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShowFriendNotify& from);
  void MergeFrom(const ProGX8ZGameShowFriendNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShowFriendNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShowFriendNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShowFriendNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShowFriendNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShowFriendNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShowFriendNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShowFriendNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShowFriendNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShowFriendNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool bShow = 1;
  inline bool has_bshow() const;
  inline void clear_bshow();
  static const int kBShowFieldNumber = 1;
  inline bool bshow() const;
  inline void set_bshow(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShowFriendNotify)
 private:
  inline void set_has_bshow();
  inline void clear_has_bshow();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool bshow_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShowFriendNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameBoomNumNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameBoomNumNotify();
  virtual ~ProGX8ZGameBoomNumNotify();

  ProGX8ZGameBoomNumNotify(const ProGX8ZGameBoomNumNotify& from);

  inline ProGX8ZGameBoomNumNotify& operator=(const ProGX8ZGameBoomNumNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameBoomNumNotify& default_instance();

  void Swap(ProGX8ZGameBoomNumNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameBoomNumNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameBoomNumNotify& from);
  void MergeFrom(const ProGX8ZGameBoomNumNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameBoomNumNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameBoomNumNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameBoomNumNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameBoomNumNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameBoomNumNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameBoomNumNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameBoomNumNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameBoomNumNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameBoomNumNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // optional int32 nBoomNum = 2;
  inline bool has_nboomnum() const;
  inline void clear_nboomnum();
  static const int kNBoomNumFieldNumber = 2;
  inline ::google::protobuf::int32 nboomnum() const;
  inline void set_nboomnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameBoomNumNotify)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();
  inline void set_has_nboomnum();
  inline void clear_has_nboomnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;
  ::google::protobuf::int32 nboomnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameBoomNumNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShowBoomDataRequest : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShowBoomDataRequest();
  virtual ~ProGX8ZGameShowBoomDataRequest();

  ProGX8ZGameShowBoomDataRequest(const ProGX8ZGameShowBoomDataRequest& from);

  inline ProGX8ZGameShowBoomDataRequest& operator=(const ProGX8ZGameShowBoomDataRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShowBoomDataRequest& default_instance();

  void Swap(ProGX8ZGameShowBoomDataRequest* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShowBoomDataRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShowBoomDataRequest& from);
  void MergeFrom(const ProGX8ZGameShowBoomDataRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShowBoomDataRequest_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShowBoomDataRequest_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShowBoomDataRequest_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShowBoomDataRequest_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShowBoomDataRequest_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShowBoomDataRequest_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShowBoomDataRequest_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShowBoomDataRequest)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShowBoomDataRequest* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShowBoomDataResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShowBoomDataResponse();
  virtual ~ProGX8ZGameShowBoomDataResponse();

  ProGX8ZGameShowBoomDataResponse(const ProGX8ZGameShowBoomDataResponse& from);

  inline ProGX8ZGameShowBoomDataResponse& operator=(const ProGX8ZGameShowBoomDataResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShowBoomDataResponse& default_instance();

  void Swap(ProGX8ZGameShowBoomDataResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShowBoomDataResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShowBoomDataResponse& from);
  void MergeFrom(const ProGX8ZGameShowBoomDataResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShowBoomDataResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShowBoomDataResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShowBoomDataResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShowBoomDataResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShowBoomDataResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShowBoomDataResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShowBoomDataResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // optional bool bIsSendToAll = 2;
  inline bool has_bissendtoall() const;
  inline void clear_bissendtoall();
  static const int kBIsSendToAllFieldNumber = 2;
  inline bool bissendtoall() const;
  inline void set_bissendtoall(bool value);

  // repeated .GX8ZAwardList cbAwardCardData = 3;
  inline int cbawardcarddata_size() const;
  inline void clear_cbawardcarddata();
  static const int kCbAwardCardDataFieldNumber = 3;
  inline const ::GX8ZAwardList& cbawardcarddata(int index) const;
  inline ::GX8ZAwardList* mutable_cbawardcarddata(int index);
  inline ::GX8ZAwardList* add_cbawardcarddata();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >&
      cbawardcarddata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >*
      mutable_cbawardcarddata();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShowBoomDataResponse)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();
  inline void set_has_bissendtoall();
  inline void clear_has_bissendtoall();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;
  bool bissendtoall_;
  ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList > cbawardcarddata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShowBoomDataResponse* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameCardTypeSelect : public ::google::protobuf::Message {
 public:
  ProGX8ZGameCardTypeSelect();
  virtual ~ProGX8ZGameCardTypeSelect();

  ProGX8ZGameCardTypeSelect(const ProGX8ZGameCardTypeSelect& from);

  inline ProGX8ZGameCardTypeSelect& operator=(const ProGX8ZGameCardTypeSelect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameCardTypeSelect& default_instance();

  void Swap(ProGX8ZGameCardTypeSelect* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameCardTypeSelect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameCardTypeSelect& from);
  void MergeFrom(const ProGX8ZGameCardTypeSelect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameCardTypeSelect_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameCardTypeSelect_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameCardTypeSelect_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameCardTypeSelect_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameCardTypeSelect_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameCardTypeSelect_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameCardTypeSelect_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameCardTypeSelect_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameCardTypeSelect_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // repeated .GX8ZMahList CardTypeSelectData = 2;
  inline int cardtypeselectdata_size() const;
  inline void clear_cardtypeselectdata();
  static const int kCardTypeSelectDataFieldNumber = 2;
  inline const ::GX8ZMahList& cardtypeselectdata(int index) const;
  inline ::GX8ZMahList* mutable_cardtypeselectdata(int index);
  inline ::GX8ZMahList* add_cardtypeselectdata();
  inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
      cardtypeselectdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
      mutable_cardtypeselectdata();

  // @@protoc_insertion_point(class_scope:ProGX8ZGameCardTypeSelect)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GX8ZMahList > cardtypeselectdata_;
  ::google::protobuf::int32 nseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameCardTypeSelect* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameIsSurrenderSelect : public ::google::protobuf::Message {
 public:
  ProGX8ZGameIsSurrenderSelect();
  virtual ~ProGX8ZGameIsSurrenderSelect();

  ProGX8ZGameIsSurrenderSelect(const ProGX8ZGameIsSurrenderSelect& from);

  inline ProGX8ZGameIsSurrenderSelect& operator=(const ProGX8ZGameIsSurrenderSelect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameIsSurrenderSelect& default_instance();

  void Swap(ProGX8ZGameIsSurrenderSelect* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameIsSurrenderSelect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameIsSurrenderSelect& from);
  void MergeFrom(const ProGX8ZGameIsSurrenderSelect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameIsSurrenderSelect_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameIsSurrenderSelect_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameIsSurrenderSelect_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameIsSurrenderSelect_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameIsSurrenderSelect_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameIsSurrenderSelect_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameIsSurrenderSelect_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameIsSurrenderSelect)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameIsSurrenderSelect* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameIsSurrenderOperate : public ::google::protobuf::Message {
 public:
  ProGX8ZGameIsSurrenderOperate();
  virtual ~ProGX8ZGameIsSurrenderOperate();

  ProGX8ZGameIsSurrenderOperate(const ProGX8ZGameIsSurrenderOperate& from);

  inline ProGX8ZGameIsSurrenderOperate& operator=(const ProGX8ZGameIsSurrenderOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameIsSurrenderOperate& default_instance();

  void Swap(ProGX8ZGameIsSurrenderOperate* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameIsSurrenderOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameIsSurrenderOperate& from);
  void MergeFrom(const ProGX8ZGameIsSurrenderOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameIsSurrenderOperate_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameIsSurrenderOperate_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameIsSurrenderOperate_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameIsSurrenderOperate_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameIsSurrenderOperate_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameIsSurrenderOperate_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameIsSurrenderOperate_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // optional bool bIsSurrender = 2;
  inline bool has_bissurrender() const;
  inline void clear_bissurrender();
  static const int kBIsSurrenderFieldNumber = 2;
  inline bool bissurrender() const;
  inline void set_bissurrender(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameIsSurrenderOperate)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();
  inline void set_has_bissurrender();
  inline void clear_has_bissurrender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;
  bool bissurrender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameIsSurrenderOperate* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameIsAgreeSurrenderSelect : public ::google::protobuf::Message {
 public:
  ProGX8ZGameIsAgreeSurrenderSelect();
  virtual ~ProGX8ZGameIsAgreeSurrenderSelect();

  ProGX8ZGameIsAgreeSurrenderSelect(const ProGX8ZGameIsAgreeSurrenderSelect& from);

  inline ProGX8ZGameIsAgreeSurrenderSelect& operator=(const ProGX8ZGameIsAgreeSurrenderSelect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameIsAgreeSurrenderSelect& default_instance();

  void Swap(ProGX8ZGameIsAgreeSurrenderSelect* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameIsAgreeSurrenderSelect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameIsAgreeSurrenderSelect& from);
  void MergeFrom(const ProGX8ZGameIsAgreeSurrenderSelect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameIsAgreeSurrenderSelect_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameIsAgreeSurrenderSelect_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameIsAgreeSurrenderSelect_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameIsAgreeSurrenderSelect_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameIsAgreeSurrenderSelect_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameIsAgreeSurrenderSelect_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSurrenderSeat = 1;
  inline bool has_nsurrenderseat() const;
  inline void clear_nsurrenderseat();
  static const int kNSurrenderSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nsurrenderseat() const;
  inline void set_nsurrenderseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameIsAgreeSurrenderSelect)
 private:
  inline void set_has_nsurrenderseat();
  inline void clear_has_nsurrenderseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nsurrenderseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameIsAgreeSurrenderSelect* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameIsAgreeSurrenderOperate : public ::google::protobuf::Message {
 public:
  ProGX8ZGameIsAgreeSurrenderOperate();
  virtual ~ProGX8ZGameIsAgreeSurrenderOperate();

  ProGX8ZGameIsAgreeSurrenderOperate(const ProGX8ZGameIsAgreeSurrenderOperate& from);

  inline ProGX8ZGameIsAgreeSurrenderOperate& operator=(const ProGX8ZGameIsAgreeSurrenderOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameIsAgreeSurrenderOperate& default_instance();

  void Swap(ProGX8ZGameIsAgreeSurrenderOperate* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameIsAgreeSurrenderOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameIsAgreeSurrenderOperate& from);
  void MergeFrom(const ProGX8ZGameIsAgreeSurrenderOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameIsAgreeSurrenderOperate_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameIsAgreeSurrenderOperate_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameIsAgreeSurrenderOperate_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameIsAgreeSurrenderOperate_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameIsAgreeSurrenderOperate_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameIsAgreeSurrenderOperate_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // optional bool bIsAgreeSurrender = 2;
  inline bool has_bisagreesurrender() const;
  inline void clear_bisagreesurrender();
  static const int kBIsAgreeSurrenderFieldNumber = 2;
  inline bool bisagreesurrender() const;
  inline void set_bisagreesurrender(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameIsAgreeSurrenderOperate)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();
  inline void set_has_bisagreesurrender();
  inline void clear_has_bisagreesurrender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;
  bool bisagreesurrender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameIsAgreeSurrenderOperate* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameIsAgreeSurrenderStatus : public ::google::protobuf::Message {
 public:
  ProGX8ZGameIsAgreeSurrenderStatus();
  virtual ~ProGX8ZGameIsAgreeSurrenderStatus();

  ProGX8ZGameIsAgreeSurrenderStatus(const ProGX8ZGameIsAgreeSurrenderStatus& from);

  inline ProGX8ZGameIsAgreeSurrenderStatus& operator=(const ProGX8ZGameIsAgreeSurrenderStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameIsAgreeSurrenderStatus& default_instance();

  void Swap(ProGX8ZGameIsAgreeSurrenderStatus* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameIsAgreeSurrenderStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameIsAgreeSurrenderStatus& from);
  void MergeFrom(const ProGX8ZGameIsAgreeSurrenderStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameIsAgreeSurrenderStatus_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameIsAgreeSurrenderStatus_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameIsAgreeSurrenderStatus_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameIsAgreeSurrenderStatus_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameIsAgreeSurrenderStatus_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameIsAgreeSurrenderStatus_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // optional bool bIsAgreeSurrender = 2;
  inline bool has_bisagreesurrender() const;
  inline void clear_bisagreesurrender();
  static const int kBIsAgreeSurrenderFieldNumber = 2;
  inline bool bisagreesurrender() const;
  inline void set_bisagreesurrender(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameIsAgreeSurrenderStatus)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();
  inline void set_has_bisagreesurrender();
  inline void clear_has_bisagreesurrender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;
  bool bisagreesurrender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameIsAgreeSurrenderStatus* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameSurrenderResult : public ::google::protobuf::Message {
 public:
  ProGX8ZGameSurrenderResult();
  virtual ~ProGX8ZGameSurrenderResult();

  ProGX8ZGameSurrenderResult(const ProGX8ZGameSurrenderResult& from);

  inline ProGX8ZGameSurrenderResult& operator=(const ProGX8ZGameSurrenderResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameSurrenderResult& default_instance();

  void Swap(ProGX8ZGameSurrenderResult* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameSurrenderResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameSurrenderResult& from);
  void MergeFrom(const ProGX8ZGameSurrenderResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameSurrenderResult_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameSurrenderResult_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameSurrenderResult_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameSurrenderResult_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameSurrenderResult_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameSurrenderResult_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameSurrenderResult_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameSurrenderResult_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameSurrenderResult_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool bSurrenderResult = 1;
  inline bool has_bsurrenderresult() const;
  inline void clear_bsurrenderresult();
  static const int kBSurrenderResultFieldNumber = 1;
  inline bool bsurrenderresult() const;
  inline void set_bsurrenderresult(bool value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameSurrenderResult)
 private:
  inline void set_has_bsurrenderresult();
  inline void clear_has_bsurrenderresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool bsurrenderresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameSurrenderResult* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShowBoomNotify : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShowBoomNotify();
  virtual ~ProGX8ZGameShowBoomNotify();

  ProGX8ZGameShowBoomNotify(const ProGX8ZGameShowBoomNotify& from);

  inline ProGX8ZGameShowBoomNotify& operator=(const ProGX8ZGameShowBoomNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShowBoomNotify& default_instance();

  void Swap(ProGX8ZGameShowBoomNotify* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShowBoomNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShowBoomNotify& from);
  void MergeFrom(const ProGX8ZGameShowBoomNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShowBoomNotify_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShowBoomNotify_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShowBoomNotify_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShowBoomNotify_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShowBoomNotify_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShowBoomNotify_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShowBoomNotify_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShowBoomNotify_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShowBoomNotify_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShowBoomNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShowBoomNotify* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShowBoomOperate : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShowBoomOperate();
  virtual ~ProGX8ZGameShowBoomOperate();

  ProGX8ZGameShowBoomOperate(const ProGX8ZGameShowBoomOperate& from);

  inline ProGX8ZGameShowBoomOperate& operator=(const ProGX8ZGameShowBoomOperate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShowBoomOperate& default_instance();

  void Swap(ProGX8ZGameShowBoomOperate* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShowBoomOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShowBoomOperate& from);
  void MergeFrom(const ProGX8ZGameShowBoomOperate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShowBoomOperate_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShowBoomOperate_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShowBoomOperate_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShowBoomOperate_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShowBoomOperate_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShowBoomOperate_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShowBoomOperate_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShowBoomOperate_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShowBoomOperate_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShowBoomOperate)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShowBoomOperate* default_instance_;
};
// -------------------------------------------------------------------

class ProGX8ZGameShowBoomResponse : public ::google::protobuf::Message {
 public:
  ProGX8ZGameShowBoomResponse();
  virtual ~ProGX8ZGameShowBoomResponse();

  ProGX8ZGameShowBoomResponse(const ProGX8ZGameShowBoomResponse& from);

  inline ProGX8ZGameShowBoomResponse& operator=(const ProGX8ZGameShowBoomResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGX8ZGameShowBoomResponse& default_instance();

  void Swap(ProGX8ZGameShowBoomResponse* other);

  // implements Message ----------------------------------------------

  ProGX8ZGameShowBoomResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGX8ZGameShowBoomResponse& from);
  void MergeFrom(const ProGX8ZGameShowBoomResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProGX8ZGameShowBoomResponse_MSGID MSGID;
  static const MSGID ID = ProGX8ZGameShowBoomResponse_MSGID_ID;
  static inline bool MSGID_IsValid(int value) {
    return ProGX8ZGameShowBoomResponse_MSGID_IsValid(value);
  }
  static const MSGID MSGID_MIN =
    ProGX8ZGameShowBoomResponse_MSGID_MSGID_MIN;
  static const MSGID MSGID_MAX =
    ProGX8ZGameShowBoomResponse_MSGID_MSGID_MAX;
  static const int MSGID_ARRAYSIZE =
    ProGX8ZGameShowBoomResponse_MSGID_MSGID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MSGID_descriptor() {
    return ProGX8ZGameShowBoomResponse_MSGID_descriptor();
  }
  static inline const ::std::string& MSGID_Name(MSGID value) {
    return ProGX8ZGameShowBoomResponse_MSGID_Name(value);
  }
  static inline bool MSGID_Parse(const ::std::string& name,
      MSGID* value) {
    return ProGX8ZGameShowBoomResponse_MSGID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 nSeat = 1;
  inline bool has_nseat() const;
  inline void clear_nseat();
  static const int kNSeatFieldNumber = 1;
  inline ::google::protobuf::int32 nseat() const;
  inline void set_nseat(::google::protobuf::int32 value);

  // optional int32 AwardScore = 2;
  inline bool has_awardscore() const;
  inline void clear_awardscore();
  static const int kAwardScoreFieldNumber = 2;
  inline ::google::protobuf::int32 awardscore() const;
  inline void set_awardscore(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProGX8ZGameShowBoomResponse)
 private:
  inline void set_has_nseat();
  inline void clear_has_nseat();
  inline void set_has_awardscore();
  inline void clear_has_awardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 nseat_;
  ::google::protobuf::int32 awardscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gx8zpk_2eproto();
  friend void protobuf_AssignDesc_gx8zpk_2eproto();
  friend void protobuf_ShutdownFile_gx8zpk_2eproto();

  void InitAsDefaultInstance();
  static ProGX8ZGameShowBoomResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ProGX8ZGameStatusResponse

// optional .GX8ZGameState status = 2;
inline bool ProGX8ZGameStatusResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameStatusResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameStatusResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameStatusResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::GX8ZGameState ProGX8ZGameStatusResponse::status() const {
  return static_cast< ::GX8ZGameState >(status_);
}
inline void ProGX8ZGameStatusResponse::set_status(::GX8ZGameState value) {
  assert(::GX8ZGameState_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameDeskInfoResponse

// optional int32 CellScore = 2;
inline bool ProGX8ZGameDeskInfoResponse::has_cellscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameDeskInfoResponse::set_has_cellscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameDeskInfoResponse::clear_has_cellscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameDeskInfoResponse::clear_cellscore() {
  cellscore_ = 0;
  clear_has_cellscore();
}
inline ::google::protobuf::int32 ProGX8ZGameDeskInfoResponse::cellscore() const {
  return cellscore_;
}
inline void ProGX8ZGameDeskInfoResponse::set_cellscore(::google::protobuf::int32 value) {
  set_has_cellscore();
  cellscore_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameReadyNotify

// optional int32 seat = 2;
inline bool ProGX8ZGameReadyNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameReadyNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameReadyNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameReadyNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameReadyNotify::seat() const {
  return seat_;
}
inline void ProGX8ZGameReadyNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProGX8ZGameReadyNotify::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameReadyNotify::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameReadyNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameReadyNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGX8ZGameReadyNotify::time() const {
  return time_;
}
inline void ProGX8ZGameReadyNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameReadyRequest

// optional int32 seat = 2;
inline bool ProGX8ZGameReadyRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameReadyRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameReadyRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameReadyRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameReadyRequest::seat() const {
  return seat_;
}
inline void ProGX8ZGameReadyRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameReadyResponse

// optional int32 seat = 2;
inline bool ProGX8ZGameReadyResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameReadyResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameReadyResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameReadyResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameReadyResponse::seat() const {
  return seat_;
}
inline void ProGX8ZGameReadyResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameStart

// optional int32 bankerseat = 2;
inline bool ProGX8ZGameStart::has_bankerseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameStart::set_has_bankerseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameStart::clear_has_bankerseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameStart::clear_bankerseat() {
  bankerseat_ = 0;
  clear_has_bankerseat();
}
inline ::google::protobuf::int32 ProGX8ZGameStart::bankerseat() const {
  return bankerseat_;
}
inline void ProGX8ZGameStart::set_bankerseat(::google::protobuf::int32 value) {
  set_has_bankerseat();
  bankerseat_ = value;
}

// optional int32 gamecount = 3;
inline bool ProGX8ZGameStart::has_gamecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameStart::set_has_gamecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameStart::clear_has_gamecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameStart::clear_gamecount() {
  gamecount_ = 0;
  clear_has_gamecount();
}
inline ::google::protobuf::int32 ProGX8ZGameStart::gamecount() const {
  return gamecount_;
}
inline void ProGX8ZGameStart::set_gamecount(::google::protobuf::int32 value) {
  set_has_gamecount();
  gamecount_ = value;
}

// optional int32 outCardtimes = 4;
inline bool ProGX8ZGameStart::has_outcardtimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameStart::set_has_outcardtimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameStart::clear_has_outcardtimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameStart::clear_outcardtimes() {
  outcardtimes_ = 0;
  clear_has_outcardtimes();
}
inline ::google::protobuf::int32 ProGX8ZGameStart::outcardtimes() const {
  return outcardtimes_;
}
inline void ProGX8ZGameStart::set_outcardtimes(::google::protobuf::int32 value) {
  set_has_outcardtimes();
  outcardtimes_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameDiceNotify

// optional int32 seat = 2;
inline bool ProGX8ZGameDiceNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameDiceNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameDiceNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameDiceNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceNotify::seat() const {
  return seat_;
}
inline void ProGX8ZGameDiceNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProGX8ZGameDiceNotify::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameDiceNotify::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameDiceNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameDiceNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceNotify::time() const {
  return time_;
}
inline void ProGX8ZGameDiceNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 dicecount = 4;
inline bool ProGX8ZGameDiceNotify::has_dicecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameDiceNotify::set_has_dicecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameDiceNotify::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameDiceNotify::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceNotify::dicecount() const {
  return dicecount_;
}
inline void ProGX8ZGameDiceNotify::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameDiceRequest

// optional int32 seat = 2;
inline bool ProGX8ZGameDiceRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameDiceRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameDiceRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameDiceRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceRequest::seat() const {
  return seat_;
}
inline void ProGX8ZGameDiceRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 dicecount = 3;
inline bool ProGX8ZGameDiceRequest::has_dicecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameDiceRequest::set_has_dicecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameDiceRequest::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameDiceRequest::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceRequest::dicecount() const {
  return dicecount_;
}
inline void ProGX8ZGameDiceRequest::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameDiceResult

// optional int32 seat = 2;
inline bool ProGX8ZGameDiceResult::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameDiceResult::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameDiceResult::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameDiceResult::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceResult::seat() const {
  return seat_;
}
inline void ProGX8ZGameDiceResult::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 result = 3;
inline int ProGX8ZGameDiceResult::result_size() const {
  return result_.size();
}
inline void ProGX8ZGameDiceResult::clear_result() {
  result_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceResult::result(int index) const {
  return result_.Get(index);
}
inline void ProGX8ZGameDiceResult::set_result(int index, ::google::protobuf::int32 value) {
  result_.Set(index, value);
}
inline void ProGX8ZGameDiceResult::add_result(::google::protobuf::int32 value) {
  result_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameDiceResult::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameDiceResult::mutable_result() {
  return &result_;
}

// optional int32 dicecount = 4;
inline bool ProGX8ZGameDiceResult::has_dicecount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameDiceResult::set_has_dicecount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameDiceResult::clear_has_dicecount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameDiceResult::clear_dicecount() {
  dicecount_ = 0;
  clear_has_dicecount();
}
inline ::google::protobuf::int32 ProGX8ZGameDiceResult::dicecount() const {
  return dicecount_;
}
inline void ProGX8ZGameDiceResult::set_dicecount(::google::protobuf::int32 value) {
  set_has_dicecount();
  dicecount_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameSendMahs

// optional int32 seat = 2;
inline bool ProGX8ZGameSendMahs::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameSendMahs::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameSendMahs::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameSendMahs::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameSendMahs::seat() const {
  return seat_;
}
inline void ProGX8ZGameSendMahs::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 mahs = 3;
inline int ProGX8ZGameSendMahs::mahs_size() const {
  return mahs_.size();
}
inline void ProGX8ZGameSendMahs::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameSendMahs::mahs(int index) const {
  return mahs_.Get(index);
}
inline void ProGX8ZGameSendMahs::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void ProGX8ZGameSendMahs::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameSendMahs::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameSendMahs::mutable_mahs() {
  return &mahs_;
}

// repeated int32 mahscount = 4;
inline int ProGX8ZGameSendMahs::mahscount_size() const {
  return mahscount_.size();
}
inline void ProGX8ZGameSendMahs::clear_mahscount() {
  mahscount_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameSendMahs::mahscount(int index) const {
  return mahscount_.Get(index);
}
inline void ProGX8ZGameSendMahs::set_mahscount(int index, ::google::protobuf::int32 value) {
  mahscount_.Set(index, value);
}
inline void ProGX8ZGameSendMahs::add_mahscount(::google::protobuf::int32 value) {
  mahscount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameSendMahs::mahscount() const {
  return mahscount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameSendMahs::mutable_mahscount() {
  return &mahscount_;
}

// optional int32 cbLeftCount = 5;
inline bool ProGX8ZGameSendMahs::has_cbleftcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameSendMahs::set_has_cbleftcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameSendMahs::clear_has_cbleftcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameSendMahs::clear_cbleftcount() {
  cbleftcount_ = 0;
  clear_has_cbleftcount();
}
inline ::google::protobuf::int32 ProGX8ZGameSendMahs::cbleftcount() const {
  return cbleftcount_;
}
inline void ProGX8ZGameSendMahs::set_cbleftcount(::google::protobuf::int32 value) {
  set_has_cbleftcount();
  cbleftcount_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameKingData

// optional int32 seat = 2;
inline bool ProGX8ZGameKingData::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameKingData::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameKingData::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameKingData::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::seat() const {
  return seat_;
}
inline void ProGX8ZGameKingData::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 mahs = 3;
inline int ProGX8ZGameKingData::mahs_size() const {
  return mahs_.size();
}
inline void ProGX8ZGameKingData::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::mahs(int index) const {
  return mahs_.Get(index);
}
inline void ProGX8ZGameKingData::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void ProGX8ZGameKingData::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameKingData::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameKingData::mutable_mahs() {
  return &mahs_;
}

// repeated int32 downKingScore = 4;
inline int ProGX8ZGameKingData::downkingscore_size() const {
  return downkingscore_.size();
}
inline void ProGX8ZGameKingData::clear_downkingscore() {
  downkingscore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::downkingscore(int index) const {
  return downkingscore_.Get(index);
}
inline void ProGX8ZGameKingData::set_downkingscore(int index, ::google::protobuf::int32 value) {
  downkingscore_.Set(index, value);
}
inline void ProGX8ZGameKingData::add_downkingscore(::google::protobuf::int32 value) {
  downkingscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameKingData::downkingscore() const {
  return downkingscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameKingData::mutable_downkingscore() {
  return &downkingscore_;
}

// repeated int32 kingcount = 5;
inline int ProGX8ZGameKingData::kingcount_size() const {
  return kingcount_.size();
}
inline void ProGX8ZGameKingData::clear_kingcount() {
  kingcount_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::kingcount(int index) const {
  return kingcount_.Get(index);
}
inline void ProGX8ZGameKingData::set_kingcount(int index, ::google::protobuf::int32 value) {
  kingcount_.Set(index, value);
}
inline void ProGX8ZGameKingData::add_kingcount(::google::protobuf::int32 value) {
  kingcount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameKingData::kingcount() const {
  return kingcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameKingData::mutable_kingcount() {
  return &kingcount_;
}

// repeated int32 viceking = 6;
inline int ProGX8ZGameKingData::viceking_size() const {
  return viceking_.size();
}
inline void ProGX8ZGameKingData::clear_viceking() {
  viceking_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::viceking(int index) const {
  return viceking_.Get(index);
}
inline void ProGX8ZGameKingData::set_viceking(int index, ::google::protobuf::int32 value) {
  viceking_.Set(index, value);
}
inline void ProGX8ZGameKingData::add_viceking(::google::protobuf::int32 value) {
  viceking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameKingData::viceking() const {
  return viceking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameKingData::mutable_viceking() {
  return &viceking_;
}

// optional .GX8ZSEND_TYPE notify_type = 7 [default = GX8Z_NORMAL_SEND];
inline bool ProGX8ZGameKingData::has_notify_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGX8ZGameKingData::set_has_notify_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGX8ZGameKingData::clear_has_notify_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGX8ZGameKingData::clear_notify_type() {
  notify_type_ = 1;
  clear_has_notify_type();
}
inline ::GX8ZSEND_TYPE ProGX8ZGameKingData::notify_type() const {
  return static_cast< ::GX8ZSEND_TYPE >(notify_type_);
}
inline void ProGX8ZGameKingData::set_notify_type(::GX8ZSEND_TYPE value) {
  assert(::GX8ZSEND_TYPE_IsValid(value));
  set_has_notify_type();
  notify_type_ = value;
}

// optional .GX8ZKING_TYPE king_type = 8 [default = GX8Z_KING_UP];
inline bool ProGX8ZGameKingData::has_king_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProGX8ZGameKingData::set_has_king_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProGX8ZGameKingData::clear_has_king_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProGX8ZGameKingData::clear_king_type() {
  king_type_ = 1;
  clear_has_king_type();
}
inline ::GX8ZKING_TYPE ProGX8ZGameKingData::king_type() const {
  return static_cast< ::GX8ZKING_TYPE >(king_type_);
}
inline void ProGX8ZGameKingData::set_king_type(::GX8ZKING_TYPE value) {
  assert(::GX8ZKING_TYPE_IsValid(value));
  set_has_king_type();
  king_type_ = value;
}

// repeated int32 cbChongGuang = 9;
inline int ProGX8ZGameKingData::cbchongguang_size() const {
  return cbchongguang_.size();
}
inline void ProGX8ZGameKingData::clear_cbchongguang() {
  cbchongguang_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::cbchongguang(int index) const {
  return cbchongguang_.Get(index);
}
inline void ProGX8ZGameKingData::set_cbchongguang(int index, ::google::protobuf::int32 value) {
  cbchongguang_.Set(index, value);
}
inline void ProGX8ZGameKingData::add_cbchongguang(::google::protobuf::int32 value) {
  cbchongguang_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameKingData::cbchongguang() const {
  return cbchongguang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameKingData::mutable_cbchongguang() {
  return &cbchongguang_;
}

// repeated int32 cbBaWangKing = 10;
inline int ProGX8ZGameKingData::cbbawangking_size() const {
  return cbbawangking_.size();
}
inline void ProGX8ZGameKingData::clear_cbbawangking() {
  cbbawangking_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameKingData::cbbawangking(int index) const {
  return cbbawangking_.Get(index);
}
inline void ProGX8ZGameKingData::set_cbbawangking(int index, ::google::protobuf::int32 value) {
  cbbawangking_.Set(index, value);
}
inline void ProGX8ZGameKingData::add_cbbawangking(::google::protobuf::int32 value) {
  cbbawangking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameKingData::cbbawangking() const {
  return cbbawangking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameKingData::mutable_cbbawangking() {
  return &cbbawangking_;
}

// -------------------------------------------------------------------

// ProGX8ZGameOutMahsResponse

// optional int32 seat = 2;
inline bool ProGX8ZGameOutMahsResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameOutMahsResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::seat() const {
  return seat_;
}
inline void ProGX8ZGameOutMahsResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 outMahs = 3;
inline int ProGX8ZGameOutMahsResponse::outmahs_size() const {
  return outmahs_.size();
}
inline void ProGX8ZGameOutMahsResponse::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProGX8ZGameOutMahsResponse::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProGX8ZGameOutMahsResponse::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameOutMahsResponse::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameOutMahsResponse::mutable_outmahs() {
  return &outmahs_;
}

// repeated int32 handmahs = 4;
inline int ProGX8ZGameOutMahsResponse::handmahs_size() const {
  return handmahs_.size();
}
inline void ProGX8ZGameOutMahsResponse::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProGX8ZGameOutMahsResponse::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProGX8ZGameOutMahsResponse::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameOutMahsResponse::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameOutMahsResponse::mutable_handmahs() {
  return &handmahs_;
}

// optional int32 cardCount = 5;
inline bool ProGX8ZGameOutMahsResponse::has_cardcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_cardcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_cardcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameOutMahsResponse::clear_cardcount() {
  cardcount_ = 0;
  clear_has_cardcount();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::cardcount() const {
  return cardcount_;
}
inline void ProGX8ZGameOutMahsResponse::set_cardcount(::google::protobuf::int32 value) {
  set_has_cardcount();
  cardcount_ = value;
}

// optional int32 cardType = 6;
inline bool ProGX8ZGameOutMahsResponse::has_cardtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_cardtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_cardtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGX8ZGameOutMahsResponse::clear_cardtype() {
  cardtype_ = 0;
  clear_has_cardtype();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::cardtype() const {
  return cardtype_;
}
inline void ProGX8ZGameOutMahsResponse::set_cardtype(::google::protobuf::int32 value) {
  set_has_cardtype();
  cardtype_ = value;
}

// optional int32 cardtypeflg = 7;
inline bool ProGX8ZGameOutMahsResponse::has_cardtypeflg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_cardtypeflg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_cardtypeflg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGX8ZGameOutMahsResponse::clear_cardtypeflg() {
  cardtypeflg_ = 0;
  clear_has_cardtypeflg();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::cardtypeflg() const {
  return cardtypeflg_;
}
inline void ProGX8ZGameOutMahsResponse::set_cardtypeflg(::google::protobuf::int32 value) {
  set_has_cardtypeflg();
  cardtypeflg_ = value;
}

// optional int32 cardPoint = 8;
inline bool ProGX8ZGameOutMahsResponse::has_cardpoint() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_cardpoint() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_cardpoint() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProGX8ZGameOutMahsResponse::clear_cardpoint() {
  cardpoint_ = 0;
  clear_has_cardpoint();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::cardpoint() const {
  return cardpoint_;
}
inline void ProGX8ZGameOutMahsResponse::set_cardpoint(::google::protobuf::int32 value) {
  set_has_cardpoint();
  cardpoint_ = value;
}

// optional int32 seriesFlag = 9;
inline bool ProGX8ZGameOutMahsResponse::has_seriesflag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_seriesflag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_seriesflag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProGX8ZGameOutMahsResponse::clear_seriesflag() {
  seriesflag_ = 0;
  clear_has_seriesflag();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::seriesflag() const {
  return seriesflag_;
}
inline void ProGX8ZGameOutMahsResponse::set_seriesflag(::google::protobuf::int32 value) {
  set_has_seriesflag();
  seriesflag_ = value;
}

// optional int32 seriesNums = 10;
inline bool ProGX8ZGameOutMahsResponse::has_seriesnums() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProGX8ZGameOutMahsResponse::set_has_seriesnums() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProGX8ZGameOutMahsResponse::clear_has_seriesnums() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProGX8ZGameOutMahsResponse::clear_seriesnums() {
  seriesnums_ = 0;
  clear_has_seriesnums();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::seriesnums() const {
  return seriesnums_;
}
inline void ProGX8ZGameOutMahsResponse::set_seriesnums(::google::protobuf::int32 value) {
  set_has_seriesnums();
  seriesnums_ = value;
}

// repeated int32 noChangeMahs = 11;
inline int ProGX8ZGameOutMahsResponse::nochangemahs_size() const {
  return nochangemahs_.size();
}
inline void ProGX8ZGameOutMahsResponse::clear_nochangemahs() {
  nochangemahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahsResponse::nochangemahs(int index) const {
  return nochangemahs_.Get(index);
}
inline void ProGX8ZGameOutMahsResponse::set_nochangemahs(int index, ::google::protobuf::int32 value) {
  nochangemahs_.Set(index, value);
}
inline void ProGX8ZGameOutMahsResponse::add_nochangemahs(::google::protobuf::int32 value) {
  nochangemahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameOutMahsResponse::nochangemahs() const {
  return nochangemahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameOutMahsResponse::mutable_nochangemahs() {
  return &nochangemahs_;
}

// -------------------------------------------------------------------

// ProGX8ZGameTimerPower

// optional int32 seat = 2;
inline bool ProGX8ZGameTimerPower::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameTimerPower::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameTimerPower::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameTimerPower::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameTimerPower::seat() const {
  return seat_;
}
inline void ProGX8ZGameTimerPower::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 time = 3;
inline bool ProGX8ZGameTimerPower::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameTimerPower::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameTimerPower::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameTimerPower::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGX8ZGameTimerPower::time() const {
  return time_;
}
inline void ProGX8ZGameTimerPower::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 outcardTime = 4;
inline bool ProGX8ZGameTimerPower::has_outcardtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameTimerPower::set_has_outcardtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameTimerPower::clear_has_outcardtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameTimerPower::clear_outcardtime() {
  outcardtime_ = 0;
  clear_has_outcardtime();
}
inline ::google::protobuf::int32 ProGX8ZGameTimerPower::outcardtime() const {
  return outcardtime_;
}
inline void ProGX8ZGameTimerPower::set_outcardtime(::google::protobuf::int32 value) {
  set_has_outcardtime();
  outcardtime_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameOperateNotify

// optional int32 resumeSeat = 2;
inline bool ProGX8ZGameOperateNotify::has_resumeseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameOperateNotify::set_has_resumeseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameOperateNotify::clear_has_resumeseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameOperateNotify::clear_resumeseat() {
  resumeseat_ = 0;
  clear_has_resumeseat();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateNotify::resumeseat() const {
  return resumeseat_;
}
inline void ProGX8ZGameOperateNotify::set_resumeseat(::google::protobuf::int32 value) {
  set_has_resumeseat();
  resumeseat_ = value;
}

// optional int32 ActionMask = 3;
inline bool ProGX8ZGameOperateNotify::has_actionmask() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameOperateNotify::set_has_actionmask() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameOperateNotify::clear_has_actionmask() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameOperateNotify::clear_actionmask() {
  actionmask_ = 0;
  clear_has_actionmask();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateNotify::actionmask() const {
  return actionmask_;
}
inline void ProGX8ZGameOperateNotify::set_actionmask(::google::protobuf::int32 value) {
  set_has_actionmask();
  actionmask_ = value;
}

// optional int32 ActionCard = 4;
inline bool ProGX8ZGameOperateNotify::has_actioncard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameOperateNotify::set_has_actioncard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameOperateNotify::clear_has_actioncard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameOperateNotify::clear_actioncard() {
  actioncard_ = 0;
  clear_has_actioncard();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateNotify::actioncard() const {
  return actioncard_;
}
inline void ProGX8ZGameOperateNotify::set_actioncard(::google::protobuf::int32 value) {
  set_has_actioncard();
  actioncard_ = value;
}

// optional int32 time = 5;
inline bool ProGX8ZGameOperateNotify::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameOperateNotify::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameOperateNotify::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameOperateNotify::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateNotify::time() const {
  return time_;
}
inline void ProGX8ZGameOperateNotify::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// optional int32 operateseat = 6;
inline bool ProGX8ZGameOperateNotify::has_operateseat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGX8ZGameOperateNotify::set_has_operateseat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGX8ZGameOperateNotify::clear_has_operateseat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGX8ZGameOperateNotify::clear_operateseat() {
  operateseat_ = 0;
  clear_has_operateseat();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateNotify::operateseat() const {
  return operateseat_;
}
inline void ProGX8ZGameOperateNotify::set_operateseat(::google::protobuf::int32 value) {
  set_has_operateseat();
  operateseat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameOperateResult

// optional int32 wOperateUser = 2;
inline bool ProGX8ZGameOperateResult::has_woperateuser() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameOperateResult::set_has_woperateuser() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameOperateResult::clear_has_woperateuser() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameOperateResult::clear_woperateuser() {
  woperateuser_ = 0;
  clear_has_woperateuser();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateResult::woperateuser() const {
  return woperateuser_;
}
inline void ProGX8ZGameOperateResult::set_woperateuser(::google::protobuf::int32 value) {
  set_has_woperateuser();
  woperateuser_ = value;
}

// optional int32 wProvideUser = 3;
inline bool ProGX8ZGameOperateResult::has_wprovideuser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameOperateResult::set_has_wprovideuser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameOperateResult::clear_has_wprovideuser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameOperateResult::clear_wprovideuser() {
  wprovideuser_ = 0;
  clear_has_wprovideuser();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateResult::wprovideuser() const {
  return wprovideuser_;
}
inline void ProGX8ZGameOperateResult::set_wprovideuser(::google::protobuf::int32 value) {
  set_has_wprovideuser();
  wprovideuser_ = value;
}

// optional int32 wOperateCode = 4;
inline bool ProGX8ZGameOperateResult::has_woperatecode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameOperateResult::set_has_woperatecode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameOperateResult::clear_has_woperatecode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameOperateResult::clear_woperatecode() {
  woperatecode_ = 0;
  clear_has_woperatecode();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateResult::woperatecode() const {
  return woperatecode_;
}
inline void ProGX8ZGameOperateResult::set_woperatecode(::google::protobuf::int32 value) {
  set_has_woperatecode();
  woperatecode_ = value;
}

// optional int32 cbOperateCard = 5;
inline bool ProGX8ZGameOperateResult::has_cboperatecard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameOperateResult::set_has_cboperatecard() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameOperateResult::clear_has_cboperatecard() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameOperateResult::clear_cboperatecard() {
  cboperatecard_ = 0;
  clear_has_cboperatecard();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateResult::cboperatecard() const {
  return cboperatecard_;
}
inline void ProGX8ZGameOperateResult::set_cboperatecard(::google::protobuf::int32 value) {
  set_has_cboperatecard();
  cboperatecard_ = value;
}

// repeated int32 handmahs = 6;
inline int ProGX8ZGameOperateResult::handmahs_size() const {
  return handmahs_.size();
}
inline void ProGX8ZGameOperateResult::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateResult::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProGX8ZGameOperateResult::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProGX8ZGameOperateResult::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameOperateResult::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameOperateResult::mutable_handmahs() {
  return &handmahs_;
}

// optional int32 handcount = 7;
inline bool ProGX8ZGameOperateResult::has_handcount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGX8ZGameOperateResult::set_has_handcount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGX8ZGameOperateResult::clear_has_handcount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGX8ZGameOperateResult::clear_handcount() {
  handcount_ = 0;
  clear_has_handcount();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateResult::handcount() const {
  return handcount_;
}
inline void ProGX8ZGameOperateResult::set_handcount(::google::protobuf::int32 value) {
  set_has_handcount();
  handcount_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameOperateRequest

// optional int32 seat = 2;
inline bool ProGX8ZGameOperateRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameOperateRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameOperateRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameOperateRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateRequest::seat() const {
  return seat_;
}
inline void ProGX8ZGameOperateRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 wOperateCode = 3;
inline bool ProGX8ZGameOperateRequest::has_woperatecode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameOperateRequest::set_has_woperatecode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameOperateRequest::clear_has_woperatecode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameOperateRequest::clear_woperatecode() {
  woperatecode_ = 0;
  clear_has_woperatecode();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateRequest::woperatecode() const {
  return woperatecode_;
}
inline void ProGX8ZGameOperateRequest::set_woperatecode(::google::protobuf::int32 value) {
  set_has_woperatecode();
  woperatecode_ = value;
}

// optional int32 cbOperateCard = 4;
inline bool ProGX8ZGameOperateRequest::has_cboperatecard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameOperateRequest::set_has_cboperatecard() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameOperateRequest::clear_has_cboperatecard() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameOperateRequest::clear_cboperatecard() {
  cboperatecard_ = 0;
  clear_has_cboperatecard();
}
inline ::google::protobuf::int32 ProGX8ZGameOperateRequest::cboperatecard() const {
  return cboperatecard_;
}
inline void ProGX8ZGameOperateRequest::set_cboperatecard(::google::protobuf::int32 value) {
  set_has_cboperatecard();
  cboperatecard_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameTrust

// optional int32 seat = 2;
inline bool ProGX8ZGameTrust::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameTrust::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameTrust::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameTrust::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameTrust::seat() const {
  return seat_;
}
inline void ProGX8ZGameTrust::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional bool isTrust = 3;
inline bool ProGX8ZGameTrust::has_istrust() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameTrust::set_has_istrust() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameTrust::clear_has_istrust() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameTrust::clear_istrust() {
  istrust_ = false;
  clear_has_istrust();
}
inline bool ProGX8ZGameTrust::istrust() const {
  return istrust_;
}
inline void ProGX8ZGameTrust::set_istrust(bool value) {
  set_has_istrust();
  istrust_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameOutMahRequest

// optional int32 seat = 2;
inline bool ProGX8ZGameOutMahRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameOutMahRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameOutMahRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameOutMahRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahRequest::seat() const {
  return seat_;
}
inline void ProGX8ZGameOutMahRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 outMahs = 3;
inline int ProGX8ZGameOutMahRequest::outmahs_size() const {
  return outmahs_.size();
}
inline void ProGX8ZGameOutMahRequest::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahRequest::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProGX8ZGameOutMahRequest::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProGX8ZGameOutMahRequest::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameOutMahRequest::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameOutMahRequest::mutable_outmahs() {
  return &outmahs_;
}

// repeated int32 nochangemahs = 4;
inline int ProGX8ZGameOutMahRequest::nochangemahs_size() const {
  return nochangemahs_.size();
}
inline void ProGX8ZGameOutMahRequest::clear_nochangemahs() {
  nochangemahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameOutMahRequest::nochangemahs(int index) const {
  return nochangemahs_.Get(index);
}
inline void ProGX8ZGameOutMahRequest::set_nochangemahs(int index, ::google::protobuf::int32 value) {
  nochangemahs_.Set(index, value);
}
inline void ProGX8ZGameOutMahRequest::add_nochangemahs(::google::protobuf::int32 value) {
  nochangemahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameOutMahRequest::nochangemahs() const {
  return nochangemahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameOutMahRequest::mutable_nochangemahs() {
  return &nochangemahs_;
}

// optional bool bIsChanged = 5;
inline bool ProGX8ZGameOutMahRequest::has_bischanged() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameOutMahRequest::set_has_bischanged() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameOutMahRequest::clear_has_bischanged() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameOutMahRequest::clear_bischanged() {
  bischanged_ = false;
  clear_has_bischanged();
}
inline bool ProGX8ZGameOutMahRequest::bischanged() const {
  return bischanged_;
}
inline void ProGX8ZGameOutMahRequest::set_bischanged(bool value) {
  set_has_bischanged();
  bischanged_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameCatchCard

// optional int32 seat = 2;
inline bool ProGX8ZGameCatchCard::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameCatchCard::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameCatchCard::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameCatchCard::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameCatchCard::seat() const {
  return seat_;
}
inline void ProGX8ZGameCatchCard::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional int32 cbCardData = 3;
inline bool ProGX8ZGameCatchCard::has_cbcarddata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameCatchCard::set_has_cbcarddata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameCatchCard::clear_has_cbcarddata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameCatchCard::clear_cbcarddata() {
  cbcarddata_ = 0;
  clear_has_cbcarddata();
}
inline ::google::protobuf::int32 ProGX8ZGameCatchCard::cbcarddata() const {
  return cbcarddata_;
}
inline void ProGX8ZGameCatchCard::set_cbcarddata(::google::protobuf::int32 value) {
  set_has_cbcarddata();
  cbcarddata_ = value;
}

// optional int32 wActionMask = 4;
inline bool ProGX8ZGameCatchCard::has_wactionmask() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameCatchCard::set_has_wactionmask() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameCatchCard::clear_has_wactionmask() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameCatchCard::clear_wactionmask() {
  wactionmask_ = 0;
  clear_has_wactionmask();
}
inline ::google::protobuf::int32 ProGX8ZGameCatchCard::wactionmask() const {
  return wactionmask_;
}
inline void ProGX8ZGameCatchCard::set_wactionmask(::google::protobuf::int32 value) {
  set_has_wactionmask();
  wactionmask_ = value;
}

// optional bool cbIsNotGang = 5;
inline bool ProGX8ZGameCatchCard::has_cbisnotgang() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameCatchCard::set_has_cbisnotgang() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameCatchCard::clear_has_cbisnotgang() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameCatchCard::clear_cbisnotgang() {
  cbisnotgang_ = false;
  clear_has_cbisnotgang();
}
inline bool ProGX8ZGameCatchCard::cbisnotgang() const {
  return cbisnotgang_;
}
inline void ProGX8ZGameCatchCard::set_cbisnotgang(bool value) {
  set_has_cbisnotgang();
  cbisnotgang_ = value;
}

// optional int32 cbLeftCount = 6;
inline bool ProGX8ZGameCatchCard::has_cbleftcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGX8ZGameCatchCard::set_has_cbleftcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGX8ZGameCatchCard::clear_has_cbleftcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGX8ZGameCatchCard::clear_cbleftcount() {
  cbleftcount_ = 0;
  clear_has_cbleftcount();
}
inline ::google::protobuf::int32 ProGX8ZGameCatchCard::cbleftcount() const {
  return cbleftcount_;
}
inline void ProGX8ZGameCatchCard::set_cbleftcount(::google::protobuf::int32 value) {
  set_has_cbleftcount();
  cbleftcount_ = value;
}

// -------------------------------------------------------------------

// GX8ZMahList

// repeated int32 Mahs = 1;
inline int GX8ZMahList::mahs_size() const {
  return mahs_.size();
}
inline void GX8ZMahList::clear_mahs() {
  mahs_.Clear();
}
inline ::google::protobuf::int32 GX8ZMahList::mahs(int index) const {
  return mahs_.Get(index);
}
inline void GX8ZMahList::set_mahs(int index, ::google::protobuf::int32 value) {
  mahs_.Set(index, value);
}
inline void GX8ZMahList::add_mahs(::google::protobuf::int32 value) {
  mahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GX8ZMahList::mahs() const {
  return mahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GX8ZMahList::mutable_mahs() {
  return &mahs_;
}

// -------------------------------------------------------------------

// GX8ZScoreList

// repeated int32 roundScore = 1;
inline int GX8ZScoreList::roundscore_size() const {
  return roundscore_.size();
}
inline void GX8ZScoreList::clear_roundscore() {
  roundscore_.Clear();
}
inline ::google::protobuf::int32 GX8ZScoreList::roundscore(int index) const {
  return roundscore_.Get(index);
}
inline void GX8ZScoreList::set_roundscore(int index, ::google::protobuf::int32 value) {
  roundscore_.Set(index, value);
}
inline void GX8ZScoreList::add_roundscore(::google::protobuf::int32 value) {
  roundscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GX8ZScoreList::roundscore() const {
  return roundscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GX8ZScoreList::mutable_roundscore() {
  return &roundscore_;
}

// -------------------------------------------------------------------

// GX8ZAwardList

// optional int32 seat = 1;
inline bool GX8ZAwardList::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GX8ZAwardList::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GX8ZAwardList::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GX8ZAwardList::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 GX8ZAwardList::seat() const {
  return seat_;
}
inline void GX8ZAwardList::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 CardsData = 2;
inline int GX8ZAwardList::cardsdata_size() const {
  return cardsdata_.size();
}
inline void GX8ZAwardList::clear_cardsdata() {
  cardsdata_.Clear();
}
inline ::google::protobuf::int32 GX8ZAwardList::cardsdata(int index) const {
  return cardsdata_.Get(index);
}
inline void GX8ZAwardList::set_cardsdata(int index, ::google::protobuf::int32 value) {
  cardsdata_.Set(index, value);
}
inline void GX8ZAwardList::add_cardsdata(::google::protobuf::int32 value) {
  cardsdata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GX8ZAwardList::cardsdata() const {
  return cardsdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GX8ZAwardList::mutable_cardsdata() {
  return &cardsdata_;
}

// optional int32 awardScore = 3;
inline bool GX8ZAwardList::has_awardscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GX8ZAwardList::set_has_awardscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GX8ZAwardList::clear_has_awardscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GX8ZAwardList::clear_awardscore() {
  awardscore_ = 0;
  clear_has_awardscore();
}
inline ::google::protobuf::int32 GX8ZAwardList::awardscore() const {
  return awardscore_;
}
inline void GX8ZAwardList::set_awardscore(::google::protobuf::int32 value) {
  set_has_awardscore();
  awardscore_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameEnd

// optional int32 lGameTax = 2;
inline bool ProGX8ZGameEnd::has_lgametax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameEnd::set_has_lgametax() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameEnd::clear_has_lgametax() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameEnd::clear_lgametax() {
  lgametax_ = 0;
  clear_has_lgametax();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::lgametax() const {
  return lgametax_;
}
inline void ProGX8ZGameEnd::set_lgametax(::google::protobuf::int32 value) {
  set_has_lgametax();
  lgametax_ = value;
}

// repeated int32 cbChongGuang = 3;
inline int ProGX8ZGameEnd::cbchongguang_size() const {
  return cbchongguang_.size();
}
inline void ProGX8ZGameEnd::clear_cbchongguang() {
  cbchongguang_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::cbchongguang(int index) const {
  return cbchongguang_.Get(index);
}
inline void ProGX8ZGameEnd::set_cbchongguang(int index, ::google::protobuf::int32 value) {
  cbchongguang_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_cbchongguang(::google::protobuf::int32 value) {
  cbchongguang_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::cbchongguang() const {
  return cbchongguang_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_cbchongguang() {
  return &cbchongguang_;
}

// repeated int32 cbBaWangKing = 4;
inline int ProGX8ZGameEnd::cbbawangking_size() const {
  return cbbawangking_.size();
}
inline void ProGX8ZGameEnd::clear_cbbawangking() {
  cbbawangking_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::cbbawangking(int index) const {
  return cbbawangking_.Get(index);
}
inline void ProGX8ZGameEnd::set_cbbawangking(int index, ::google::protobuf::int32 value) {
  cbbawangking_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_cbbawangking(::google::protobuf::int32 value) {
  cbbawangking_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::cbbawangking() const {
  return cbbawangking_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_cbbawangking() {
  return &cbbawangking_;
}

// optional int32 wProvideUser = 5;
inline bool ProGX8ZGameEnd::has_wprovideuser() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameEnd::set_has_wprovideuser() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameEnd::clear_has_wprovideuser() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameEnd::clear_wprovideuser() {
  wprovideuser_ = 0;
  clear_has_wprovideuser();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::wprovideuser() const {
  return wprovideuser_;
}
inline void ProGX8ZGameEnd::set_wprovideuser(::google::protobuf::int32 value) {
  set_has_wprovideuser();
  wprovideuser_ = value;
}

// optional int32 cbChiHuCard = 6;
inline bool ProGX8ZGameEnd::has_cbchihucard() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGX8ZGameEnd::set_has_cbchihucard() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGX8ZGameEnd::clear_has_cbchihucard() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGX8ZGameEnd::clear_cbchihucard() {
  cbchihucard_ = 0;
  clear_has_cbchihucard();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::cbchihucard() const {
  return cbchihucard_;
}
inline void ProGX8ZGameEnd::set_cbchihucard(::google::protobuf::int32 value) {
  set_has_cbchihucard();
  cbchihucard_ = value;
}

// repeated int32 dwChiHuKind = 7;
inline int ProGX8ZGameEnd::dwchihukind_size() const {
  return dwchihukind_.size();
}
inline void ProGX8ZGameEnd::clear_dwchihukind() {
  dwchihukind_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::dwchihukind(int index) const {
  return dwchihukind_.Get(index);
}
inline void ProGX8ZGameEnd::set_dwchihukind(int index, ::google::protobuf::int32 value) {
  dwchihukind_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_dwchihukind(::google::protobuf::int32 value) {
  dwchihukind_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::dwchihukind() const {
  return dwchihukind_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_dwchihukind() {
  return &dwchihukind_;
}

// repeated int32 dwChiHuRight = 8;
inline int ProGX8ZGameEnd::dwchihuright_size() const {
  return dwchihuright_.size();
}
inline void ProGX8ZGameEnd::clear_dwchihuright() {
  dwchihuright_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::dwchihuright(int index) const {
  return dwchihuright_.Get(index);
}
inline void ProGX8ZGameEnd::set_dwchihuright(int index, ::google::protobuf::int32 value) {
  dwchihuright_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_dwchihuright(::google::protobuf::int32 value) {
  dwchihuright_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::dwchihuright() const {
  return dwchihuright_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_dwchihuright() {
  return &dwchihuright_;
}

// repeated int32 lTotaslGameScore = 9;
inline int ProGX8ZGameEnd::ltotaslgamescore_size() const {
  return ltotaslgamescore_.size();
}
inline void ProGX8ZGameEnd::clear_ltotaslgamescore() {
  ltotaslgamescore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::ltotaslgamescore(int index) const {
  return ltotaslgamescore_.Get(index);
}
inline void ProGX8ZGameEnd::set_ltotaslgamescore(int index, ::google::protobuf::int32 value) {
  ltotaslgamescore_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_ltotaslgamescore(::google::protobuf::int32 value) {
  ltotaslgamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::ltotaslgamescore() const {
  return ltotaslgamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_ltotaslgamescore() {
  return &ltotaslgamescore_;
}

// repeated int32 lCurrentGameScore = 10;
inline int ProGX8ZGameEnd::lcurrentgamescore_size() const {
  return lcurrentgamescore_.size();
}
inline void ProGX8ZGameEnd::clear_lcurrentgamescore() {
  lcurrentgamescore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::lcurrentgamescore(int index) const {
  return lcurrentgamescore_.Get(index);
}
inline void ProGX8ZGameEnd::set_lcurrentgamescore(int index, ::google::protobuf::int32 value) {
  lcurrentgamescore_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_lcurrentgamescore(::google::protobuf::int32 value) {
  lcurrentgamescore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::lcurrentgamescore() const {
  return lcurrentgamescore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_lcurrentgamescore() {
  return &lcurrentgamescore_;
}

// repeated int32 lCurrentPointScore = 11;
inline int ProGX8ZGameEnd::lcurrentpointscore_size() const {
  return lcurrentpointscore_.size();
}
inline void ProGX8ZGameEnd::clear_lcurrentpointscore() {
  lcurrentpointscore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::lcurrentpointscore(int index) const {
  return lcurrentpointscore_.Get(index);
}
inline void ProGX8ZGameEnd::set_lcurrentpointscore(int index, ::google::protobuf::int32 value) {
  lcurrentpointscore_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_lcurrentpointscore(::google::protobuf::int32 value) {
  lcurrentpointscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::lcurrentpointscore() const {
  return lcurrentpointscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_lcurrentpointscore() {
  return &lcurrentpointscore_;
}

// repeated int32 lAttachScore = 12;
inline int ProGX8ZGameEnd::lattachscore_size() const {
  return lattachscore_.size();
}
inline void ProGX8ZGameEnd::clear_lattachscore() {
  lattachscore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::lattachscore(int index) const {
  return lattachscore_.Get(index);
}
inline void ProGX8ZGameEnd::set_lattachscore(int index, ::google::protobuf::int32 value) {
  lattachscore_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_lattachscore(::google::protobuf::int32 value) {
  lattachscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::lattachscore() const {
  return lattachscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_lattachscore() {
  return &lattachscore_;
}

// repeated .GX8ZMahList cbHandCardData = 13;
inline int ProGX8ZGameEnd::cbhandcarddata_size() const {
  return cbhandcarddata_.size();
}
inline void ProGX8ZGameEnd::clear_cbhandcarddata() {
  cbhandcarddata_.Clear();
}
inline const ::GX8ZMahList& ProGX8ZGameEnd::cbhandcarddata(int index) const {
  return cbhandcarddata_.Get(index);
}
inline ::GX8ZMahList* ProGX8ZGameEnd::mutable_cbhandcarddata(int index) {
  return cbhandcarddata_.Mutable(index);
}
inline ::GX8ZMahList* ProGX8ZGameEnd::add_cbhandcarddata() {
  return cbhandcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
ProGX8ZGameEnd::cbhandcarddata() const {
  return cbhandcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
ProGX8ZGameEnd::mutable_cbhandcarddata() {
  return &cbhandcarddata_;
}

// repeated .GX8ZAwardList cbAwardCardData = 14;
inline int ProGX8ZGameEnd::cbawardcarddata_size() const {
  return cbawardcarddata_.size();
}
inline void ProGX8ZGameEnd::clear_cbawardcarddata() {
  cbawardcarddata_.Clear();
}
inline const ::GX8ZAwardList& ProGX8ZGameEnd::cbawardcarddata(int index) const {
  return cbawardcarddata_.Get(index);
}
inline ::GX8ZAwardList* ProGX8ZGameEnd::mutable_cbawardcarddata(int index) {
  return cbawardcarddata_.Mutable(index);
}
inline ::GX8ZAwardList* ProGX8ZGameEnd::add_cbawardcarddata() {
  return cbawardcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >&
ProGX8ZGameEnd::cbawardcarddata() const {
  return cbawardcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >*
ProGX8ZGameEnd::mutable_cbawardcarddata() {
  return &cbawardcarddata_;
}

// repeated int32 lOnlyWinScore = 15;
inline int ProGX8ZGameEnd::lonlywinscore_size() const {
  return lonlywinscore_.size();
}
inline void ProGX8ZGameEnd::clear_lonlywinscore() {
  lonlywinscore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::lonlywinscore(int index) const {
  return lonlywinscore_.Get(index);
}
inline void ProGX8ZGameEnd::set_lonlywinscore(int index, ::google::protobuf::int32 value) {
  lonlywinscore_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_lonlywinscore(::google::protobuf::int32 value) {
  lonlywinscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::lonlywinscore() const {
  return lonlywinscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_lonlywinscore() {
  return &lonlywinscore_;
}

// optional bool bRoundEnd = 16;
inline bool ProGX8ZGameEnd::has_broundend() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_broundend() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProGX8ZGameEnd::clear_has_broundend() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProGX8ZGameEnd::clear_broundend() {
  broundend_ = false;
  clear_has_broundend();
}
inline bool ProGX8ZGameEnd::broundend() const {
  return broundend_;
}
inline void ProGX8ZGameEnd::set_broundend(bool value) {
  set_has_broundend();
  broundend_ = value;
}

// repeated int32 lHuiTouScore = 17;
inline int ProGX8ZGameEnd::lhuitouscore_size() const {
  return lhuitouscore_.size();
}
inline void ProGX8ZGameEnd::clear_lhuitouscore() {
  lhuitouscore_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::lhuitouscore(int index) const {
  return lhuitouscore_.Get(index);
}
inline void ProGX8ZGameEnd::set_lhuitouscore(int index, ::google::protobuf::int32 value) {
  lhuitouscore_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_lhuitouscore(::google::protobuf::int32 value) {
  lhuitouscore_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::lhuitouscore() const {
  return lhuitouscore_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_lhuitouscore() {
  return &lhuitouscore_;
}

// optional bool bZhuangWin = 18;
inline bool ProGX8ZGameEnd::has_bzhuangwin() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_bzhuangwin() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ProGX8ZGameEnd::clear_has_bzhuangwin() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ProGX8ZGameEnd::clear_bzhuangwin() {
  bzhuangwin_ = false;
  clear_has_bzhuangwin();
}
inline bool ProGX8ZGameEnd::bzhuangwin() const {
  return bzhuangwin_;
}
inline void ProGX8ZGameEnd::set_bzhuangwin(bool value) {
  set_has_bzhuangwin();
  bzhuangwin_ = value;
}

// repeated int32 cbJiangMaCardData = 19;
inline int ProGX8ZGameEnd::cbjiangmacarddata_size() const {
  return cbjiangmacarddata_.size();
}
inline void ProGX8ZGameEnd::clear_cbjiangmacarddata() {
  cbjiangmacarddata_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::cbjiangmacarddata(int index) const {
  return cbjiangmacarddata_.Get(index);
}
inline void ProGX8ZGameEnd::set_cbjiangmacarddata(int index, ::google::protobuf::int32 value) {
  cbjiangmacarddata_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_cbjiangmacarddata(::google::protobuf::int32 value) {
  cbjiangmacarddata_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::cbjiangmacarddata() const {
  return cbjiangmacarddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_cbjiangmacarddata() {
  return &cbjiangmacarddata_;
}

// repeated .GX8ZScoreList detailedScores = 20;
inline int ProGX8ZGameEnd::detailedscores_size() const {
  return detailedscores_.size();
}
inline void ProGX8ZGameEnd::clear_detailedscores() {
  detailedscores_.Clear();
}
inline const ::GX8ZScoreList& ProGX8ZGameEnd::detailedscores(int index) const {
  return detailedscores_.Get(index);
}
inline ::GX8ZScoreList* ProGX8ZGameEnd::mutable_detailedscores(int index) {
  return detailedscores_.Mutable(index);
}
inline ::GX8ZScoreList* ProGX8ZGameEnd::add_detailedscores() {
  return detailedscores_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZScoreList >&
ProGX8ZGameEnd::detailedscores() const {
  return detailedscores_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZScoreList >*
ProGX8ZGameEnd::mutable_detailedscores() {
  return &detailedscores_;
}

// optional bool bIsDaTu = 21;
inline bool ProGX8ZGameEnd::has_bisdatu() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_bisdatu() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ProGX8ZGameEnd::clear_has_bisdatu() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ProGX8ZGameEnd::clear_bisdatu() {
  bisdatu_ = false;
  clear_has_bisdatu();
}
inline bool ProGX8ZGameEnd::bisdatu() const {
  return bisdatu_;
}
inline void ProGX8ZGameEnd::set_bisdatu(bool value) {
  set_has_bisdatu();
  bisdatu_ = value;
}

// optional bool bIsKuTong = 22;
inline bool ProGX8ZGameEnd::has_biskutong() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_biskutong() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ProGX8ZGameEnd::clear_has_biskutong() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ProGX8ZGameEnd::clear_biskutong() {
  biskutong_ = false;
  clear_has_biskutong();
}
inline bool ProGX8ZGameEnd::biskutong() const {
  return biskutong_;
}
inline void ProGX8ZGameEnd::set_biskutong(bool value) {
  set_has_biskutong();
  biskutong_ = value;
}

// optional int32 nNo1Seat = 23;
inline bool ProGX8ZGameEnd::has_nno1seat() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nno1seat() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ProGX8ZGameEnd::clear_has_nno1seat() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ProGX8ZGameEnd::clear_nno1seat() {
  nno1seat_ = 0;
  clear_has_nno1seat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nno1seat() const {
  return nno1seat_;
}
inline void ProGX8ZGameEnd::set_nno1seat(::google::protobuf::int32 value) {
  set_has_nno1seat();
  nno1seat_ = value;
}

// optional int32 nWinerSeat = 24;
inline bool ProGX8ZGameEnd::has_nwinerseat() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nwinerseat() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ProGX8ZGameEnd::clear_has_nwinerseat() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ProGX8ZGameEnd::clear_nwinerseat() {
  nwinerseat_ = 0;
  clear_has_nwinerseat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nwinerseat() const {
  return nwinerseat_;
}
inline void ProGX8ZGameEnd::set_nwinerseat(::google::protobuf::int32 value) {
  set_has_nwinerseat();
  nwinerseat_ = value;
}

// optional int32 nWinersMate = 25;
inline bool ProGX8ZGameEnd::has_nwinersmate() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nwinersmate() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ProGX8ZGameEnd::clear_has_nwinersmate() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ProGX8ZGameEnd::clear_nwinersmate() {
  nwinersmate_ = 0;
  clear_has_nwinersmate();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nwinersmate() const {
  return nwinersmate_;
}
inline void ProGX8ZGameEnd::set_nwinersmate(::google::protobuf::int32 value) {
  set_has_nwinersmate();
  nwinersmate_ = value;
}

// optional int32 nNo2Seat = 26;
inline bool ProGX8ZGameEnd::has_nno2seat() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nno2seat() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ProGX8ZGameEnd::clear_has_nno2seat() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ProGX8ZGameEnd::clear_nno2seat() {
  nno2seat_ = 0;
  clear_has_nno2seat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nno2seat() const {
  return nno2seat_;
}
inline void ProGX8ZGameEnd::set_nno2seat(::google::protobuf::int32 value) {
  set_has_nno2seat();
  nno2seat_ = value;
}

// optional int32 nNo3Seat = 27;
inline bool ProGX8ZGameEnd::has_nno3seat() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nno3seat() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ProGX8ZGameEnd::clear_has_nno3seat() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ProGX8ZGameEnd::clear_nno3seat() {
  nno3seat_ = 0;
  clear_has_nno3seat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nno3seat() const {
  return nno3seat_;
}
inline void ProGX8ZGameEnd::set_nno3seat(::google::protobuf::int32 value) {
  set_has_nno3seat();
  nno3seat_ = value;
}

// optional int32 nNo4Seat = 28;
inline bool ProGX8ZGameEnd::has_nno4seat() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nno4seat() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ProGX8ZGameEnd::clear_has_nno4seat() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ProGX8ZGameEnd::clear_nno4seat() {
  nno4seat_ = 0;
  clear_has_nno4seat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nno4seat() const {
  return nno4seat_;
}
inline void ProGX8ZGameEnd::set_nno4seat(::google::protobuf::int32 value) {
  set_has_nno4seat();
  nno4seat_ = value;
}

// optional bool bBroken = 29;
inline bool ProGX8ZGameEnd::has_bbroken() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_bbroken() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ProGX8ZGameEnd::clear_has_bbroken() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ProGX8ZGameEnd::clear_bbroken() {
  bbroken_ = false;
  clear_has_bbroken();
}
inline bool ProGX8ZGameEnd::bbroken() const {
  return bbroken_;
}
inline void ProGX8ZGameEnd::set_bbroken(bool value) {
  set_has_bbroken();
  bbroken_ = value;
}

// optional int32 nBrokenPlayerSeat = 30;
inline bool ProGX8ZGameEnd::has_nbrokenplayerseat() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nbrokenplayerseat() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ProGX8ZGameEnd::clear_has_nbrokenplayerseat() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ProGX8ZGameEnd::clear_nbrokenplayerseat() {
  nbrokenplayerseat_ = 0;
  clear_has_nbrokenplayerseat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nbrokenplayerseat() const {
  return nbrokenplayerseat_;
}
inline void ProGX8ZGameEnd::set_nbrokenplayerseat(::google::protobuf::int32 value) {
  set_has_nbrokenplayerseat();
  nbrokenplayerseat_ = value;
}

// optional bool bSurrender = 31;
inline bool ProGX8ZGameEnd::has_bsurrender() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_bsurrender() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ProGX8ZGameEnd::clear_has_bsurrender() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ProGX8ZGameEnd::clear_bsurrender() {
  bsurrender_ = false;
  clear_has_bsurrender();
}
inline bool ProGX8ZGameEnd::bsurrender() const {
  return bsurrender_;
}
inline void ProGX8ZGameEnd::set_bsurrender(bool value) {
  set_has_bsurrender();
  bsurrender_ = value;
}

// optional int32 nSurrenderPlayerSeat = 32;
inline bool ProGX8ZGameEnd::has_nsurrenderplayerseat() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ProGX8ZGameEnd::set_has_nsurrenderplayerseat() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ProGX8ZGameEnd::clear_has_nsurrenderplayerseat() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ProGX8ZGameEnd::clear_nsurrenderplayerseat() {
  nsurrenderplayerseat_ = 0;
  clear_has_nsurrenderplayerseat();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nsurrenderplayerseat() const {
  return nsurrenderplayerseat_;
}
inline void ProGX8ZGameEnd::set_nsurrenderplayerseat(::google::protobuf::int32 value) {
  set_has_nsurrenderplayerseat();
  nsurrenderplayerseat_ = value;
}

// repeated bool bIsSpring = 33;
inline int ProGX8ZGameEnd::bisspring_size() const {
  return bisspring_.size();
}
inline void ProGX8ZGameEnd::clear_bisspring() {
  bisspring_.Clear();
}
inline bool ProGX8ZGameEnd::bisspring(int index) const {
  return bisspring_.Get(index);
}
inline void ProGX8ZGameEnd::set_bisspring(int index, bool value) {
  bisspring_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_bisspring(bool value) {
  bisspring_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProGX8ZGameEnd::bisspring() const {
  return bisspring_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProGX8ZGameEnd::mutable_bisspring() {
  return &bisspring_;
}

// repeated int32 nSurplusCardCount = 34;
inline int ProGX8ZGameEnd::nsurpluscardcount_size() const {
  return nsurpluscardcount_.size();
}
inline void ProGX8ZGameEnd::clear_nsurpluscardcount() {
  nsurpluscardcount_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameEnd::nsurpluscardcount(int index) const {
  return nsurpluscardcount_.Get(index);
}
inline void ProGX8ZGameEnd::set_nsurpluscardcount(int index, ::google::protobuf::int32 value) {
  nsurpluscardcount_.Set(index, value);
}
inline void ProGX8ZGameEnd::add_nsurpluscardcount(::google::protobuf::int32 value) {
  nsurpluscardcount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameEnd::nsurpluscardcount() const {
  return nsurpluscardcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameEnd::mutable_nsurpluscardcount() {
  return &nsurpluscardcount_;
}

// -------------------------------------------------------------------

// ProGX8ZGameQuickSoundRequest

// optional int32 desk_id = 2;
inline bool ProGX8ZGameQuickSoundRequest::has_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameQuickSoundRequest::set_has_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_desk_id() {
  desk_id_ = 0;
  clear_has_desk_id();
}
inline ::google::protobuf::int32 ProGX8ZGameQuickSoundRequest::desk_id() const {
  return desk_id_;
}
inline void ProGX8ZGameQuickSoundRequest::set_desk_id(::google::protobuf::int32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional int32 seat_id = 3;
inline bool ProGX8ZGameQuickSoundRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameQuickSoundRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameQuickSoundRequest::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameQuickSoundRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 sound_id = 4;
inline bool ProGX8ZGameQuickSoundRequest::has_sound_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameQuickSoundRequest::set_has_sound_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_has_sound_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_sound_id() {
  sound_id_ = 0;
  clear_has_sound_id();
}
inline ::google::protobuf::int32 ProGX8ZGameQuickSoundRequest::sound_id() const {
  return sound_id_;
}
inline void ProGX8ZGameQuickSoundRequest::set_sound_id(::google::protobuf::int32 value) {
  set_has_sound_id();
  sound_id_ = value;
}

// optional bytes text = 5;
inline bool ProGX8ZGameQuickSoundRequest::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameQuickSoundRequest::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameQuickSoundRequest::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ProGX8ZGameQuickSoundRequest::text() const {
  return *text_;
}
inline void ProGX8ZGameQuickSoundRequest::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGX8ZGameQuickSoundRequest::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGX8ZGameQuickSoundRequest::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameQuickSoundRequest::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ProGX8ZGameQuickSoundRequest::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameQuickSoundRequest::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGX8ZGameQuickSoundResponse

// optional int32 desk_id = 2;
inline bool ProGX8ZGameQuickSoundResponse::has_desk_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameQuickSoundResponse::set_has_desk_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_has_desk_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_desk_id() {
  desk_id_ = 0;
  clear_has_desk_id();
}
inline ::google::protobuf::int32 ProGX8ZGameQuickSoundResponse::desk_id() const {
  return desk_id_;
}
inline void ProGX8ZGameQuickSoundResponse::set_desk_id(::google::protobuf::int32 value) {
  set_has_desk_id();
  desk_id_ = value;
}

// optional int32 seat_id = 3;
inline bool ProGX8ZGameQuickSoundResponse::has_seat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameQuickSoundResponse::set_has_seat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameQuickSoundResponse::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameQuickSoundResponse::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 sound_id = 4;
inline bool ProGX8ZGameQuickSoundResponse::has_sound_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameQuickSoundResponse::set_has_sound_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_has_sound_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_sound_id() {
  sound_id_ = 0;
  clear_has_sound_id();
}
inline ::google::protobuf::int32 ProGX8ZGameQuickSoundResponse::sound_id() const {
  return sound_id_;
}
inline void ProGX8ZGameQuickSoundResponse::set_sound_id(::google::protobuf::int32 value) {
  set_has_sound_id();
  sound_id_ = value;
}

// optional bytes text = 5;
inline bool ProGX8ZGameQuickSoundResponse::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameQuickSoundResponse::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameQuickSoundResponse::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& ProGX8ZGameQuickSoundResponse::text() const {
  return *text_;
}
inline void ProGX8ZGameQuickSoundResponse::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGX8ZGameQuickSoundResponse::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void ProGX8ZGameQuickSoundResponse::set_text(const void* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameQuickSoundResponse::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* ProGX8ZGameQuickSoundResponse::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameQuickSoundResponse::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGX8ZGameSendDiscardMahs

// optional int32 seat_id = 2;
inline bool ProGX8ZGameSendDiscardMahs::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameSendDiscardMahs::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameSendDiscardMahs::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameSendDiscardMahs::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameSendDiscardMahs::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameSendDiscardMahs::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// repeated .GX8ZMahList cbCardData = 3;
inline int ProGX8ZGameSendDiscardMahs::cbcarddata_size() const {
  return cbcarddata_.size();
}
inline void ProGX8ZGameSendDiscardMahs::clear_cbcarddata() {
  cbcarddata_.Clear();
}
inline const ::GX8ZMahList& ProGX8ZGameSendDiscardMahs::cbcarddata(int index) const {
  return cbcarddata_.Get(index);
}
inline ::GX8ZMahList* ProGX8ZGameSendDiscardMahs::mutable_cbcarddata(int index) {
  return cbcarddata_.Mutable(index);
}
inline ::GX8ZMahList* ProGX8ZGameSendDiscardMahs::add_cbcarddata() {
  return cbcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
ProGX8ZGameSendDiscardMahs::cbcarddata() const {
  return cbcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
ProGX8ZGameSendDiscardMahs::mutable_cbcarddata() {
  return &cbcarddata_;
}

// repeated .GX8ZMahList cbNoChangeCardData = 4;
inline int ProGX8ZGameSendDiscardMahs::cbnochangecarddata_size() const {
  return cbnochangecarddata_.size();
}
inline void ProGX8ZGameSendDiscardMahs::clear_cbnochangecarddata() {
  cbnochangecarddata_.Clear();
}
inline const ::GX8ZMahList& ProGX8ZGameSendDiscardMahs::cbnochangecarddata(int index) const {
  return cbnochangecarddata_.Get(index);
}
inline ::GX8ZMahList* ProGX8ZGameSendDiscardMahs::mutable_cbnochangecarddata(int index) {
  return cbnochangecarddata_.Mutable(index);
}
inline ::GX8ZMahList* ProGX8ZGameSendDiscardMahs::add_cbnochangecarddata() {
  return cbnochangecarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
ProGX8ZGameSendDiscardMahs::cbnochangecarddata() const {
  return cbnochangecarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
ProGX8ZGameSendDiscardMahs::mutable_cbnochangecarddata() {
  return &cbnochangecarddata_;
}

// optional int32 deskCount = 5;
inline bool ProGX8ZGameSendDiscardMahs::has_deskcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameSendDiscardMahs::set_has_deskcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameSendDiscardMahs::clear_has_deskcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameSendDiscardMahs::clear_deskcount() {
  deskcount_ = 0;
  clear_has_deskcount();
}
inline ::google::protobuf::int32 ProGX8ZGameSendDiscardMahs::deskcount() const {
  return deskcount_;
}
inline void ProGX8ZGameSendDiscardMahs::set_deskcount(::google::protobuf::int32 value) {
  set_has_deskcount();
  deskcount_ = value;
}

// repeated int32 outCardCount = 6;
inline int ProGX8ZGameSendDiscardMahs::outcardcount_size() const {
  return outcardcount_.size();
}
inline void ProGX8ZGameSendDiscardMahs::clear_outcardcount() {
  outcardcount_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameSendDiscardMahs::outcardcount(int index) const {
  return outcardcount_.Get(index);
}
inline void ProGX8ZGameSendDiscardMahs::set_outcardcount(int index, ::google::protobuf::int32 value) {
  outcardcount_.Set(index, value);
}
inline void ProGX8ZGameSendDiscardMahs::add_outcardcount(::google::protobuf::int32 value) {
  outcardcount_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameSendDiscardMahs::outcardcount() const {
  return outcardcount_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameSendDiscardMahs::mutable_outcardcount() {
  return &outcardcount_;
}

// -------------------------------------------------------------------

// GX8ZWeaveItem

// optional int32 weaveKind = 1;
inline bool GX8ZWeaveItem::has_weavekind() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GX8ZWeaveItem::set_has_weavekind() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GX8ZWeaveItem::clear_has_weavekind() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GX8ZWeaveItem::clear_weavekind() {
  weavekind_ = 0;
  clear_has_weavekind();
}
inline ::google::protobuf::int32 GX8ZWeaveItem::weavekind() const {
  return weavekind_;
}
inline void GX8ZWeaveItem::set_weavekind(::google::protobuf::int32 value) {
  set_has_weavekind();
  weavekind_ = value;
}

// optional int32 centercard = 2;
inline bool GX8ZWeaveItem::has_centercard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GX8ZWeaveItem::set_has_centercard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GX8ZWeaveItem::clear_has_centercard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GX8ZWeaveItem::clear_centercard() {
  centercard_ = 0;
  clear_has_centercard();
}
inline ::google::protobuf::int32 GX8ZWeaveItem::centercard() const {
  return centercard_;
}
inline void GX8ZWeaveItem::set_centercard(::google::protobuf::int32 value) {
  set_has_centercard();
  centercard_ = value;
}

// optional int32 provideUser = 3;
inline bool GX8ZWeaveItem::has_provideuser() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GX8ZWeaveItem::set_has_provideuser() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GX8ZWeaveItem::clear_has_provideuser() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GX8ZWeaveItem::clear_provideuser() {
  provideuser_ = 0;
  clear_has_provideuser();
}
inline ::google::protobuf::int32 GX8ZWeaveItem::provideuser() const {
  return provideuser_;
}
inline void GX8ZWeaveItem::set_provideuser(::google::protobuf::int32 value) {
  set_has_provideuser();
  provideuser_ = value;
}

// optional int32 cardsize = 4;
inline bool GX8ZWeaveItem::has_cardsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GX8ZWeaveItem::set_has_cardsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GX8ZWeaveItem::clear_has_cardsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GX8ZWeaveItem::clear_cardsize() {
  cardsize_ = 0;
  clear_has_cardsize();
}
inline ::google::protobuf::int32 GX8ZWeaveItem::cardsize() const {
  return cardsize_;
}
inline void GX8ZWeaveItem::set_cardsize(::google::protobuf::int32 value) {
  set_has_cardsize();
  cardsize_ = value;
}

// -------------------------------------------------------------------

// GX8ZWeaveItems

// repeated .GX8ZWeaveItem items = 1;
inline int GX8ZWeaveItems::items_size() const {
  return items_.size();
}
inline void GX8ZWeaveItems::clear_items() {
  items_.Clear();
}
inline const ::GX8ZWeaveItem& GX8ZWeaveItems::items(int index) const {
  return items_.Get(index);
}
inline ::GX8ZWeaveItem* GX8ZWeaveItems::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::GX8ZWeaveItem* GX8ZWeaveItems::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItem >&
GX8ZWeaveItems::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItem >*
GX8ZWeaveItems::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// ProGX8ZGameSendActionMahs

// optional int32 seat_id = 2;
inline bool ProGX8ZGameSendActionMahs::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameSendActionMahs::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameSendActionMahs::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameSendActionMahs::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameSendActionMahs::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameSendActionMahs::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// repeated .GX8ZWeaveItems weaves = 3;
inline int ProGX8ZGameSendActionMahs::weaves_size() const {
  return weaves_.size();
}
inline void ProGX8ZGameSendActionMahs::clear_weaves() {
  weaves_.Clear();
}
inline const ::GX8ZWeaveItems& ProGX8ZGameSendActionMahs::weaves(int index) const {
  return weaves_.Get(index);
}
inline ::GX8ZWeaveItems* ProGX8ZGameSendActionMahs::mutable_weaves(int index) {
  return weaves_.Mutable(index);
}
inline ::GX8ZWeaveItems* ProGX8ZGameSendActionMahs::add_weaves() {
  return weaves_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItems >&
ProGX8ZGameSendActionMahs::weaves() const {
  return weaves_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZWeaveItems >*
ProGX8ZGameSendActionMahs::mutable_weaves() {
  return &weaves_;
}

// -------------------------------------------------------------------

// ProGX8ZGameBrokenRequest

// optional int32 seat_id = 2;
inline bool ProGX8ZGameBrokenRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameBrokenRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameBrokenRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameBrokenRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameBrokenRequest::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameBrokenRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .GX8ZBROKEN_TYPE type = 3;
inline bool ProGX8ZGameBrokenRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameBrokenRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameBrokenRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameBrokenRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::GX8ZBROKEN_TYPE ProGX8ZGameBrokenRequest::type() const {
  return static_cast< ::GX8ZBROKEN_TYPE >(type_);
}
inline void ProGX8ZGameBrokenRequest::set_type(::GX8ZBROKEN_TYPE value) {
  assert(::GX8ZBROKEN_TYPE_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 time = 4;
inline bool ProGX8ZGameBrokenRequest::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameBrokenRequest::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameBrokenRequest::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameBrokenRequest::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 ProGX8ZGameBrokenRequest::time() const {
  return time_;
}
inline void ProGX8ZGameBrokenRequest::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameBrokenOperate

// optional int32 seat_id = 2;
inline bool ProGX8ZGameBrokenOperate::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameBrokenOperate::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameBrokenOperate::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameBrokenOperate::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameBrokenOperate::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameBrokenOperate::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .GX8ZBROKEN_OPERATE result = 3 [default = GX8Z_BO_DISAGREE];
inline bool ProGX8ZGameBrokenOperate::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameBrokenOperate::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameBrokenOperate::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameBrokenOperate::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::GX8ZBROKEN_OPERATE ProGX8ZGameBrokenOperate::result() const {
  return static_cast< ::GX8ZBROKEN_OPERATE >(result_);
}
inline void ProGX8ZGameBrokenOperate::set_result(::GX8ZBROKEN_OPERATE value) {
  assert(::GX8ZBROKEN_OPERATE_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameBrokenNotify

// optional int32 seat_id = 2;
inline bool ProGX8ZGameBrokenNotify::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameBrokenNotify::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameBrokenNotify::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameBrokenNotify::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameBrokenNotify::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameBrokenNotify::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional .GX8ZBROKEN_CODE operate_code = 3 [default = GX8Z_BC_SUCCESS];
inline bool ProGX8ZGameBrokenNotify::has_operate_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameBrokenNotify::set_has_operate_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameBrokenNotify::clear_has_operate_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameBrokenNotify::clear_operate_code() {
  operate_code_ = 0;
  clear_has_operate_code();
}
inline ::GX8ZBROKEN_CODE ProGX8ZGameBrokenNotify::operate_code() const {
  return static_cast< ::GX8ZBROKEN_CODE >(operate_code_);
}
inline void ProGX8ZGameBrokenNotify::set_operate_code(::GX8ZBROKEN_CODE value) {
  assert(::GX8ZBROKEN_CODE_IsValid(value));
  set_has_operate_code();
  operate_code_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameRuleConfig

// optional int32 game_round = 1;
inline bool ProGX8ZGameRuleConfig::has_game_round() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_game_round() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameRuleConfig::clear_has_game_round() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameRuleConfig::clear_game_round() {
  game_round_ = 0;
  clear_has_game_round();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::game_round() const {
  return game_round_;
}
inline void ProGX8ZGameRuleConfig::set_game_round(::google::protobuf::int32 value) {
  set_has_game_round();
  game_round_ = value;
}

// optional int32 need_card = 2;
inline bool ProGX8ZGameRuleConfig::has_need_card() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_need_card() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameRuleConfig::clear_has_need_card() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameRuleConfig::clear_need_card() {
  need_card_ = 0;
  clear_has_need_card();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::need_card() const {
  return need_card_;
}
inline void ProGX8ZGameRuleConfig::set_need_card(::google::protobuf::int32 value) {
  set_has_need_card();
  need_card_ = value;
}

// optional bool have_bottom_king = 3;
inline bool ProGX8ZGameRuleConfig::has_have_bottom_king() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_have_bottom_king() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameRuleConfig::clear_has_have_bottom_king() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameRuleConfig::clear_have_bottom_king() {
  have_bottom_king_ = false;
  clear_has_have_bottom_king();
}
inline bool ProGX8ZGameRuleConfig::have_bottom_king() const {
  return have_bottom_king_;
}
inline void ProGX8ZGameRuleConfig::set_have_bottom_king(bool value) {
  set_has_have_bottom_king();
  have_bottom_king_ = value;
}

// optional bool have_mai_lei = 4;
inline bool ProGX8ZGameRuleConfig::has_have_mai_lei() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_have_mai_lei() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameRuleConfig::clear_has_have_mai_lei() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameRuleConfig::clear_have_mai_lei() {
  have_mai_lei_ = false;
  clear_has_have_mai_lei();
}
inline bool ProGX8ZGameRuleConfig::have_mai_lei() const {
  return have_mai_lei_;
}
inline void ProGX8ZGameRuleConfig::set_have_mai_lei(bool value) {
  set_has_have_mai_lei();
  have_mai_lei_ = value;
}

// optional bool hava_hui_tou = 5;
inline bool ProGX8ZGameRuleConfig::has_hava_hui_tou() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_hava_hui_tou() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGX8ZGameRuleConfig::clear_has_hava_hui_tou() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGX8ZGameRuleConfig::clear_hava_hui_tou() {
  hava_hui_tou_ = false;
  clear_has_hava_hui_tou();
}
inline bool ProGX8ZGameRuleConfig::hava_hui_tou() const {
  return hava_hui_tou_;
}
inline void ProGX8ZGameRuleConfig::set_hava_hui_tou(bool value) {
  set_has_hava_hui_tou();
  hava_hui_tou_ = value;
}

// optional int32 nMasterSeat = 6;
inline bool ProGX8ZGameRuleConfig::has_nmasterseat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_nmasterseat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProGX8ZGameRuleConfig::clear_has_nmasterseat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProGX8ZGameRuleConfig::clear_nmasterseat() {
  nmasterseat_ = 0;
  clear_has_nmasterseat();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::nmasterseat() const {
  return nmasterseat_;
}
inline void ProGX8ZGameRuleConfig::set_nmasterseat(::google::protobuf::int32 value) {
  set_has_nmasterseat();
  nmasterseat_ = value;
}

// optional int32 current_game_count = 7;
inline bool ProGX8ZGameRuleConfig::has_current_game_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_current_game_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProGX8ZGameRuleConfig::clear_has_current_game_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProGX8ZGameRuleConfig::clear_current_game_count() {
  current_game_count_ = 0;
  clear_has_current_game_count();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::current_game_count() const {
  return current_game_count_;
}
inline void ProGX8ZGameRuleConfig::set_current_game_count(::google::protobuf::int32 value) {
  set_has_current_game_count();
  current_game_count_ = value;
}

// optional bool have_jianma = 8;
inline bool ProGX8ZGameRuleConfig::has_have_jianma() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_have_jianma() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ProGX8ZGameRuleConfig::clear_has_have_jianma() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ProGX8ZGameRuleConfig::clear_have_jianma() {
  have_jianma_ = false;
  clear_has_have_jianma();
}
inline bool ProGX8ZGameRuleConfig::have_jianma() const {
  return have_jianma_;
}
inline void ProGX8ZGameRuleConfig::set_have_jianma(bool value) {
  set_has_have_jianma();
  have_jianma_ = value;
}

// optional int32 nChongguanNum = 9;
inline bool ProGX8ZGameRuleConfig::has_nchongguannum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_nchongguannum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ProGX8ZGameRuleConfig::clear_has_nchongguannum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ProGX8ZGameRuleConfig::clear_nchongguannum() {
  nchongguannum_ = 0;
  clear_has_nchongguannum();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::nchongguannum() const {
  return nchongguannum_;
}
inline void ProGX8ZGameRuleConfig::set_nchongguannum(::google::protobuf::int32 value) {
  set_has_nchongguannum();
  nchongguannum_ = value;
}

// optional bool bbawangfanbei = 10;
inline bool ProGX8ZGameRuleConfig::has_bbawangfanbei() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_bbawangfanbei() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ProGX8ZGameRuleConfig::clear_has_bbawangfanbei() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ProGX8ZGameRuleConfig::clear_bbawangfanbei() {
  bbawangfanbei_ = false;
  clear_has_bbawangfanbei();
}
inline bool ProGX8ZGameRuleConfig::bbawangfanbei() const {
  return bbawangfanbei_;
}
inline void ProGX8ZGameRuleConfig::set_bbawangfanbei(bool value) {
  set_has_bbawangfanbei();
  bbawangfanbei_ = value;
}

// optional int32 nPlayerNum = 11;
inline bool ProGX8ZGameRuleConfig::has_nplayernum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_nplayernum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ProGX8ZGameRuleConfig::clear_has_nplayernum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ProGX8ZGameRuleConfig::clear_nplayernum() {
  nplayernum_ = 0;
  clear_has_nplayernum();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::nplayernum() const {
  return nplayernum_;
}
inline void ProGX8ZGameRuleConfig::set_nplayernum(::google::protobuf::int32 value) {
  set_has_nplayernum();
  nplayernum_ = value;
}

// optional bytes sRoomNum = 12;
inline bool ProGX8ZGameRuleConfig::has_sroomnum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_sroomnum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ProGX8ZGameRuleConfig::clear_has_sroomnum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ProGX8ZGameRuleConfig::clear_sroomnum() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    sroomnum_->clear();
  }
  clear_has_sroomnum();
}
inline const ::std::string& ProGX8ZGameRuleConfig::sroomnum() const {
  return *sroomnum_;
}
inline void ProGX8ZGameRuleConfig::set_sroomnum(const ::std::string& value) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(value);
}
inline void ProGX8ZGameRuleConfig::set_sroomnum(const char* value) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(value);
}
inline void ProGX8ZGameRuleConfig::set_sroomnum(const void* value, size_t size) {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  sroomnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameRuleConfig::mutable_sroomnum() {
  set_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    sroomnum_ = new ::std::string;
  }
  return sroomnum_;
}
inline ::std::string* ProGX8ZGameRuleConfig::release_sroomnum() {
  clear_has_sroomnum();
  if (sroomnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sroomnum_;
    sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameRuleConfig::set_allocated_sroomnum(::std::string* sroomnum) {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (sroomnum) {
    set_has_sroomnum();
    sroomnum_ = sroomnum;
  } else {
    clear_has_sroomnum();
    sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes sPlayTime = 13;
inline bool ProGX8ZGameRuleConfig::has_splaytime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_splaytime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ProGX8ZGameRuleConfig::clear_has_splaytime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ProGX8ZGameRuleConfig::clear_splaytime() {
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    splaytime_->clear();
  }
  clear_has_splaytime();
}
inline const ::std::string& ProGX8ZGameRuleConfig::splaytime() const {
  return *splaytime_;
}
inline void ProGX8ZGameRuleConfig::set_splaytime(const ::std::string& value) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(value);
}
inline void ProGX8ZGameRuleConfig::set_splaytime(const char* value) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(value);
}
inline void ProGX8ZGameRuleConfig::set_splaytime(const void* value, size_t size) {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  splaytime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameRuleConfig::mutable_splaytime() {
  set_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    splaytime_ = new ::std::string;
  }
  return splaytime_;
}
inline ::std::string* ProGX8ZGameRuleConfig::release_splaytime() {
  clear_has_splaytime();
  if (splaytime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splaytime_;
    splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameRuleConfig::set_allocated_splaytime(::std::string* splaytime) {
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (splaytime) {
    set_has_splaytime();
    splaytime_ = splaytime;
  } else {
    clear_has_splaytime();
    splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 gametype = 14;
inline bool ProGX8ZGameRuleConfig::has_gametype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_gametype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ProGX8ZGameRuleConfig::clear_has_gametype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ProGX8ZGameRuleConfig::clear_gametype() {
  gametype_ = 0;
  clear_has_gametype();
}
inline ::google::protobuf::int32 ProGX8ZGameRuleConfig::gametype() const {
  return gametype_;
}
inline void ProGX8ZGameRuleConfig::set_gametype(::google::protobuf::int32 value) {
  set_has_gametype();
  gametype_ = value;
}

// optional bool isJingDian = 15;
inline bool ProGX8ZGameRuleConfig::has_isjingdian() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_isjingdian() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ProGX8ZGameRuleConfig::clear_has_isjingdian() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ProGX8ZGameRuleConfig::clear_isjingdian() {
  isjingdian_ = false;
  clear_has_isjingdian();
}
inline bool ProGX8ZGameRuleConfig::isjingdian() const {
  return isjingdian_;
}
inline void ProGX8ZGameRuleConfig::set_isjingdian(bool value) {
  set_has_isjingdian();
  isjingdian_ = value;
}

// optional bool isOpenTeammate = 16;
inline bool ProGX8ZGameRuleConfig::has_isopenteammate() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ProGX8ZGameRuleConfig::set_has_isopenteammate() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ProGX8ZGameRuleConfig::clear_has_isopenteammate() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ProGX8ZGameRuleConfig::clear_isopenteammate() {
  isopenteammate_ = false;
  clear_has_isopenteammate();
}
inline bool ProGX8ZGameRuleConfig::isopenteammate() const {
  return isopenteammate_;
}
inline void ProGX8ZGameRuleConfig::set_isopenteammate(bool value) {
  set_has_isopenteammate();
  isopenteammate_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameBrokenStatus

// optional int32 broken_seat = 1;
inline bool ProGX8ZGameBrokenStatus::has_broken_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameBrokenStatus::set_has_broken_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameBrokenStatus::clear_has_broken_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameBrokenStatus::clear_broken_seat() {
  broken_seat_ = 0;
  clear_has_broken_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameBrokenStatus::broken_seat() const {
  return broken_seat_;
}
inline void ProGX8ZGameBrokenStatus::set_broken_seat(::google::protobuf::int32 value) {
  set_has_broken_seat();
  broken_seat_ = value;
}

// repeated bool broken_status = 2;
inline int ProGX8ZGameBrokenStatus::broken_status_size() const {
  return broken_status_.size();
}
inline void ProGX8ZGameBrokenStatus::clear_broken_status() {
  broken_status_.Clear();
}
inline bool ProGX8ZGameBrokenStatus::broken_status(int index) const {
  return broken_status_.Get(index);
}
inline void ProGX8ZGameBrokenStatus::set_broken_status(int index, bool value) {
  broken_status_.Set(index, value);
}
inline void ProGX8ZGameBrokenStatus::add_broken_status(bool value) {
  broken_status_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
ProGX8ZGameBrokenStatus::broken_status() const {
  return broken_status_;
}
inline ::google::protobuf::RepeatedField< bool >*
ProGX8ZGameBrokenStatus::mutable_broken_status() {
  return &broken_status_;
}

// optional int32 left_time = 3;
inline bool ProGX8ZGameBrokenStatus::has_left_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameBrokenStatus::set_has_left_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameBrokenStatus::clear_has_left_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameBrokenStatus::clear_left_time() {
  left_time_ = 0;
  clear_has_left_time();
}
inline ::google::protobuf::int32 ProGX8ZGameBrokenStatus::left_time() const {
  return left_time_;
}
inline void ProGX8ZGameBrokenStatus::set_left_time(::google::protobuf::int32 value) {
  set_has_left_time();
  left_time_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameDataResp

// repeated int32 total_score = 1;
inline int ProGX8ZGameDataResp::total_score_size() const {
  return total_score_.size();
}
inline void ProGX8ZGameDataResp::clear_total_score() {
  total_score_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameDataResp::total_score(int index) const {
  return total_score_.Get(index);
}
inline void ProGX8ZGameDataResp::set_total_score(int index, ::google::protobuf::int32 value) {
  total_score_.Set(index, value);
}
inline void ProGX8ZGameDataResp::add_total_score(::google::protobuf::int32 value) {
  total_score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameDataResp::total_score() const {
  return total_score_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameDataResp::mutable_total_score() {
  return &total_score_;
}

// optional int32 type = 2;
inline bool ProGX8ZGameDataResp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameDataResp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameDataResp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameDataResp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProGX8ZGameDataResp::type() const {
  return type_;
}
inline void ProGX8ZGameDataResp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameRecordRequest

// optional int32 seat_id = 1;
inline bool ProGX8ZGameRecordRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameRecordRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameRecordRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameRecordRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameRecordRequest::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameRecordRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional bytes url = 2;
inline bool ProGX8ZGameRecordRequest::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameRecordRequest::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameRecordRequest::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameRecordRequest::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ProGX8ZGameRecordRequest::url() const {
  return *url_;
}
inline void ProGX8ZGameRecordRequest::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGX8ZGameRecordRequest::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGX8ZGameRecordRequest::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameRecordRequest::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ProGX8ZGameRecordRequest::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameRecordRequest::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGX8ZGameRecordResponse

// optional int32 seat_id = 1;
inline bool ProGX8ZGameRecordResponse::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameRecordResponse::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameRecordResponse::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameRecordResponse::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameRecordResponse::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameRecordResponse::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional bytes url = 2;
inline bool ProGX8ZGameRecordResponse::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameRecordResponse::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameRecordResponse::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameRecordResponse::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& ProGX8ZGameRecordResponse::url() const {
  return *url_;
}
inline void ProGX8ZGameRecordResponse::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGX8ZGameRecordResponse::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ProGX8ZGameRecordResponse::set_url(const void* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameRecordResponse::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* ProGX8ZGameRecordResponse::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameRecordResponse::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGX8ZGameUserLocationRequest

// optional int32 seat_id = 1;
inline bool ProGX8ZGameUserLocationRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserLocationRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserLocationRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserLocationRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameUserLocationRequest::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameUserLocationRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional double dwlongitude = 2;
inline bool ProGX8ZGameUserLocationRequest::has_dwlongitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameUserLocationRequest::set_has_dwlongitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameUserLocationRequest::clear_has_dwlongitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameUserLocationRequest::clear_dwlongitude() {
  dwlongitude_ = 0;
  clear_has_dwlongitude();
}
inline double ProGX8ZGameUserLocationRequest::dwlongitude() const {
  return dwlongitude_;
}
inline void ProGX8ZGameUserLocationRequest::set_dwlongitude(double value) {
  set_has_dwlongitude();
  dwlongitude_ = value;
}

// optional double dwlatitude = 3;
inline bool ProGX8ZGameUserLocationRequest::has_dwlatitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameUserLocationRequest::set_has_dwlatitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameUserLocationRequest::clear_has_dwlatitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameUserLocationRequest::clear_dwlatitude() {
  dwlatitude_ = 0;
  clear_has_dwlatitude();
}
inline double ProGX8ZGameUserLocationRequest::dwlatitude() const {
  return dwlatitude_;
}
inline void ProGX8ZGameUserLocationRequest::set_dwlatitude(double value) {
  set_has_dwlatitude();
  dwlatitude_ = value;
}

// optional bytes strDistrict = 4;
inline bool ProGX8ZGameUserLocationRequest::has_strdistrict() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProGX8ZGameUserLocationRequest::set_has_strdistrict() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProGX8ZGameUserLocationRequest::clear_has_strdistrict() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProGX8ZGameUserLocationRequest::clear_strdistrict() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    strdistrict_->clear();
  }
  clear_has_strdistrict();
}
inline const ::std::string& ProGX8ZGameUserLocationRequest::strdistrict() const {
  return *strdistrict_;
}
inline void ProGX8ZGameUserLocationRequest::set_strdistrict(const ::std::string& value) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(value);
}
inline void ProGX8ZGameUserLocationRequest::set_strdistrict(const char* value) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(value);
}
inline void ProGX8ZGameUserLocationRequest::set_strdistrict(const void* value, size_t size) {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  strdistrict_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameUserLocationRequest::mutable_strdistrict() {
  set_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    strdistrict_ = new ::std::string;
  }
  return strdistrict_;
}
inline ::std::string* ProGX8ZGameUserLocationRequest::release_strdistrict() {
  clear_has_strdistrict();
  if (strdistrict_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdistrict_;
    strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameUserLocationRequest::set_allocated_strdistrict(::std::string* strdistrict) {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strdistrict) {
    set_has_strdistrict();
    strdistrict_ = strdistrict;
  } else {
    clear_has_strdistrict();
    strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes strStreetName = 5;
inline bool ProGX8ZGameUserLocationRequest::has_strstreetname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProGX8ZGameUserLocationRequest::set_has_strstreetname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProGX8ZGameUserLocationRequest::clear_has_strstreetname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProGX8ZGameUserLocationRequest::clear_strstreetname() {
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    strstreetname_->clear();
  }
  clear_has_strstreetname();
}
inline const ::std::string& ProGX8ZGameUserLocationRequest::strstreetname() const {
  return *strstreetname_;
}
inline void ProGX8ZGameUserLocationRequest::set_strstreetname(const ::std::string& value) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(value);
}
inline void ProGX8ZGameUserLocationRequest::set_strstreetname(const char* value) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(value);
}
inline void ProGX8ZGameUserLocationRequest::set_strstreetname(const void* value, size_t size) {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  strstreetname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProGX8ZGameUserLocationRequest::mutable_strstreetname() {
  set_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    strstreetname_ = new ::std::string;
  }
  return strstreetname_;
}
inline ::std::string* ProGX8ZGameUserLocationRequest::release_strstreetname() {
  clear_has_strstreetname();
  if (strstreetname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strstreetname_;
    strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProGX8ZGameUserLocationRequest::set_allocated_strstreetname(::std::string* strstreetname) {
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (strstreetname) {
    set_has_strstreetname();
    strstreetname_ = strstreetname;
  } else {
    clear_has_strstreetname();
    strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProGX8ZGameSyncCardResponse

// optional int32 seat = 2;
inline bool ProGX8ZGameSyncCardResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameSyncCardResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameSyncCardResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameSyncCardResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameSyncCardResponse::seat() const {
  return seat_;
}
inline void ProGX8ZGameSyncCardResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// repeated int32 handmahs = 3;
inline int ProGX8ZGameSyncCardResponse::handmahs_size() const {
  return handmahs_.size();
}
inline void ProGX8ZGameSyncCardResponse::clear_handmahs() {
  handmahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameSyncCardResponse::handmahs(int index) const {
  return handmahs_.Get(index);
}
inline void ProGX8ZGameSyncCardResponse::set_handmahs(int index, ::google::protobuf::int32 value) {
  handmahs_.Set(index, value);
}
inline void ProGX8ZGameSyncCardResponse::add_handmahs(::google::protobuf::int32 value) {
  handmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameSyncCardResponse::handmahs() const {
  return handmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameSyncCardResponse::mutable_handmahs() {
  return &handmahs_;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserPhoneStatusRequest

// optional int32 seat_id = 1;
inline bool ProGX8ZGameUserPhoneStatusRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserPhoneStatusRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserPhoneStatusRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserPhoneStatusRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameUserPhoneStatusRequest::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameUserPhoneStatusRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// optional int32 userstatus = 2;
inline bool ProGX8ZGameUserPhoneStatusRequest::has_userstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameUserPhoneStatusRequest::set_has_userstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameUserPhoneStatusRequest::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameUserPhoneStatusRequest::clear_userstatus() {
  userstatus_ = 0;
  clear_has_userstatus();
}
inline ::google::protobuf::int32 ProGX8ZGameUserPhoneStatusRequest::userstatus() const {
  return userstatus_;
}
inline void ProGX8ZGameUserPhoneStatusRequest::set_userstatus(::google::protobuf::int32 value) {
  set_has_userstatus();
  userstatus_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserGiveUpRequest

// optional int32 seat_id = 1;
inline bool ProGX8ZGameUserGiveUpRequest::has_seat_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserGiveUpRequest::set_has_seat_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserGiveUpRequest::clear_has_seat_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserGiveUpRequest::clear_seat_id() {
  seat_id_ = 0;
  clear_has_seat_id();
}
inline ::google::protobuf::int32 ProGX8ZGameUserGiveUpRequest::seat_id() const {
  return seat_id_;
}
inline void ProGX8ZGameUserGiveUpRequest::set_seat_id(::google::protobuf::int32 value) {
  set_has_seat_id();
  seat_id_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserHintRequest

// -------------------------------------------------------------------

// ProGX8ZGameUserHintResponse

// optional int32 lenth = 1;
inline bool ProGX8ZGameUserHintResponse::has_lenth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserHintResponse::set_has_lenth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserHintResponse::clear_has_lenth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserHintResponse::clear_lenth() {
  lenth_ = 0;
  clear_has_lenth();
}
inline ::google::protobuf::int32 ProGX8ZGameUserHintResponse::lenth() const {
  return lenth_;
}
inline void ProGX8ZGameUserHintResponse::set_lenth(::google::protobuf::int32 value) {
  set_has_lenth();
  lenth_ = value;
}

// repeated int32 outMahs = 2;
inline int ProGX8ZGameUserHintResponse::outmahs_size() const {
  return outmahs_.size();
}
inline void ProGX8ZGameUserHintResponse::clear_outmahs() {
  outmahs_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameUserHintResponse::outmahs(int index) const {
  return outmahs_.Get(index);
}
inline void ProGX8ZGameUserHintResponse::set_outmahs(int index, ::google::protobuf::int32 value) {
  outmahs_.Set(index, value);
}
inline void ProGX8ZGameUserHintResponse::add_outmahs(::google::protobuf::int32 value) {
  outmahs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameUserHintResponse::outmahs() const {
  return outmahs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameUserHintResponse::mutable_outmahs() {
  return &outmahs_;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserDaTuNotify

// optional int32 seat = 1;
inline bool ProGX8ZGameUserDaTuNotify::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserDaTuNotify::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserDaTuNotify::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserDaTuNotify::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameUserDaTuNotify::seat() const {
  return seat_;
}
inline void ProGX8ZGameUserDaTuNotify::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserTeammateRequest

// optional int32 bankerMateSeat = 1;
inline bool ProGX8ZGameUserTeammateRequest::has_bankermateseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserTeammateRequest::set_has_bankermateseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserTeammateRequest::clear_has_bankermateseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserTeammateRequest::clear_bankermateseat() {
  bankermateseat_ = 0;
  clear_has_bankermateseat();
}
inline ::google::protobuf::int32 ProGX8ZGameUserTeammateRequest::bankermateseat() const {
  return bankermateseat_;
}
inline void ProGX8ZGameUserTeammateRequest::set_bankermateseat(::google::protobuf::int32 value) {
  set_has_bankermateseat();
  bankermateseat_ = value;
}

// optional int32 mateCard = 2;
inline bool ProGX8ZGameUserTeammateRequest::has_matecard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameUserTeammateRequest::set_has_matecard() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameUserTeammateRequest::clear_has_matecard() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameUserTeammateRequest::clear_matecard() {
  matecard_ = 0;
  clear_has_matecard();
}
inline ::google::protobuf::int32 ProGX8ZGameUserTeammateRequest::matecard() const {
  return matecard_;
}
inline void ProGX8ZGameUserTeammateRequest::set_matecard(::google::protobuf::int32 value) {
  set_has_matecard();
  matecard_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserDaTuRequest

// optional int32 seat = 1;
inline bool ProGX8ZGameUserDaTuRequest::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserDaTuRequest::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserDaTuRequest::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserDaTuRequest::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameUserDaTuRequest::seat() const {
  return seat_;
}
inline void ProGX8ZGameUserDaTuRequest::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional bool bIsDaTu = 2;
inline bool ProGX8ZGameUserDaTuRequest::has_bisdatu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameUserDaTuRequest::set_has_bisdatu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameUserDaTuRequest::clear_has_bisdatu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameUserDaTuRequest::clear_bisdatu() {
  bisdatu_ = false;
  clear_has_bisdatu();
}
inline bool ProGX8ZGameUserDaTuRequest::bisdatu() const {
  return bisdatu_;
}
inline void ProGX8ZGameUserDaTuRequest::set_bisdatu(bool value) {
  set_has_bisdatu();
  bisdatu_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserDaTuResponse

// optional int32 seat = 1;
inline bool ProGX8ZGameUserDaTuResponse::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserDaTuResponse::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserDaTuResponse::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserDaTuResponse::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameUserDaTuResponse::seat() const {
  return seat_;
}
inline void ProGX8ZGameUserDaTuResponse::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional bool bIsDaTu = 2;
inline bool ProGX8ZGameUserDaTuResponse::has_bisdatu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameUserDaTuResponse::set_has_bisdatu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameUserDaTuResponse::clear_has_bisdatu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameUserDaTuResponse::clear_bisdatu() {
  bisdatu_ = false;
  clear_has_bisdatu();
}
inline bool ProGX8ZGameUserDaTuResponse::bisdatu() const {
  return bisdatu_;
}
inline void ProGX8ZGameUserDaTuResponse::set_bisdatu(bool value) {
  set_has_bisdatu();
  bisdatu_ = value;
}

// optional int32 nextSeat = 3;
inline bool ProGX8ZGameUserDaTuResponse::has_nextseat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProGX8ZGameUserDaTuResponse::set_has_nextseat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProGX8ZGameUserDaTuResponse::clear_has_nextseat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProGX8ZGameUserDaTuResponse::clear_nextseat() {
  nextseat_ = 0;
  clear_has_nextseat();
}
inline ::google::protobuf::int32 ProGX8ZGameUserDaTuResponse::nextseat() const {
  return nextseat_;
}
inline void ProGX8ZGameUserDaTuResponse::set_nextseat(::google::protobuf::int32 value) {
  set_has_nextseat();
  nextseat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameUserDaTuResult

// optional int32 seat = 1;
inline bool ProGX8ZGameUserDaTuResult::has_seat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameUserDaTuResult::set_has_seat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameUserDaTuResult::clear_has_seat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameUserDaTuResult::clear_seat() {
  seat_ = 0;
  clear_has_seat();
}
inline ::google::protobuf::int32 ProGX8ZGameUserDaTuResult::seat() const {
  return seat_;
}
inline void ProGX8ZGameUserDaTuResult::set_seat(::google::protobuf::int32 value) {
  set_has_seat();
  seat_ = value;
}

// optional bool bIsDaTu = 2;
inline bool ProGX8ZGameUserDaTuResult::has_bisdatu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameUserDaTuResult::set_has_bisdatu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameUserDaTuResult::clear_has_bisdatu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameUserDaTuResult::clear_bisdatu() {
  bisdatu_ = false;
  clear_has_bisdatu();
}
inline bool ProGX8ZGameUserDaTuResult::bisdatu() const {
  return bisdatu_;
}
inline void ProGX8ZGameUserDaTuResult::set_bisdatu(bool value) {
  set_has_bisdatu();
  bisdatu_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameShangYouResult

// repeated int32 shangyouSeat = 1;
inline int ProGX8ZGameShangYouResult::shangyouseat_size() const {
  return shangyouseat_.size();
}
inline void ProGX8ZGameShangYouResult::clear_shangyouseat() {
  shangyouseat_.Clear();
}
inline ::google::protobuf::int32 ProGX8ZGameShangYouResult::shangyouseat(int index) const {
  return shangyouseat_.Get(index);
}
inline void ProGX8ZGameShangYouResult::set_shangyouseat(int index, ::google::protobuf::int32 value) {
  shangyouseat_.Set(index, value);
}
inline void ProGX8ZGameShangYouResult::add_shangyouseat(::google::protobuf::int32 value) {
  shangyouseat_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ProGX8ZGameShangYouResult::shangyouseat() const {
  return shangyouseat_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ProGX8ZGameShangYouResult::mutable_shangyouseat() {
  return &shangyouseat_;
}

// -------------------------------------------------------------------

// ProGX8ZGameShowFriendNotify

// optional bool bShow = 1;
inline bool ProGX8ZGameShowFriendNotify::has_bshow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameShowFriendNotify::set_has_bshow() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameShowFriendNotify::clear_has_bshow() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameShowFriendNotify::clear_bshow() {
  bshow_ = false;
  clear_has_bshow();
}
inline bool ProGX8ZGameShowFriendNotify::bshow() const {
  return bshow_;
}
inline void ProGX8ZGameShowFriendNotify::set_bshow(bool value) {
  set_has_bshow();
  bshow_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameBoomNumNotify

// optional int32 nSeat = 1;
inline bool ProGX8ZGameBoomNumNotify::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameBoomNumNotify::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameBoomNumNotify::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameBoomNumNotify::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameBoomNumNotify::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameBoomNumNotify::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// optional int32 nBoomNum = 2;
inline bool ProGX8ZGameBoomNumNotify::has_nboomnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameBoomNumNotify::set_has_nboomnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameBoomNumNotify::clear_has_nboomnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameBoomNumNotify::clear_nboomnum() {
  nboomnum_ = 0;
  clear_has_nboomnum();
}
inline ::google::protobuf::int32 ProGX8ZGameBoomNumNotify::nboomnum() const {
  return nboomnum_;
}
inline void ProGX8ZGameBoomNumNotify::set_nboomnum(::google::protobuf::int32 value) {
  set_has_nboomnum();
  nboomnum_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameShowBoomDataRequest

// optional int32 nSeat = 1;
inline bool ProGX8ZGameShowBoomDataRequest::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameShowBoomDataRequest::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameShowBoomDataRequest::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameShowBoomDataRequest::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameShowBoomDataRequest::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameShowBoomDataRequest::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameShowBoomDataResponse

// optional int32 nSeat = 1;
inline bool ProGX8ZGameShowBoomDataResponse::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameShowBoomDataResponse::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameShowBoomDataResponse::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameShowBoomDataResponse::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameShowBoomDataResponse::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameShowBoomDataResponse::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// optional bool bIsSendToAll = 2;
inline bool ProGX8ZGameShowBoomDataResponse::has_bissendtoall() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameShowBoomDataResponse::set_has_bissendtoall() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameShowBoomDataResponse::clear_has_bissendtoall() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameShowBoomDataResponse::clear_bissendtoall() {
  bissendtoall_ = false;
  clear_has_bissendtoall();
}
inline bool ProGX8ZGameShowBoomDataResponse::bissendtoall() const {
  return bissendtoall_;
}
inline void ProGX8ZGameShowBoomDataResponse::set_bissendtoall(bool value) {
  set_has_bissendtoall();
  bissendtoall_ = value;
}

// repeated .GX8ZAwardList cbAwardCardData = 3;
inline int ProGX8ZGameShowBoomDataResponse::cbawardcarddata_size() const {
  return cbawardcarddata_.size();
}
inline void ProGX8ZGameShowBoomDataResponse::clear_cbawardcarddata() {
  cbawardcarddata_.Clear();
}
inline const ::GX8ZAwardList& ProGX8ZGameShowBoomDataResponse::cbawardcarddata(int index) const {
  return cbawardcarddata_.Get(index);
}
inline ::GX8ZAwardList* ProGX8ZGameShowBoomDataResponse::mutable_cbawardcarddata(int index) {
  return cbawardcarddata_.Mutable(index);
}
inline ::GX8ZAwardList* ProGX8ZGameShowBoomDataResponse::add_cbawardcarddata() {
  return cbawardcarddata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >&
ProGX8ZGameShowBoomDataResponse::cbawardcarddata() const {
  return cbawardcarddata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZAwardList >*
ProGX8ZGameShowBoomDataResponse::mutable_cbawardcarddata() {
  return &cbawardcarddata_;
}

// -------------------------------------------------------------------

// ProGX8ZGameCardTypeSelect

// optional int32 nSeat = 1;
inline bool ProGX8ZGameCardTypeSelect::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameCardTypeSelect::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameCardTypeSelect::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameCardTypeSelect::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameCardTypeSelect::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameCardTypeSelect::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// repeated .GX8ZMahList CardTypeSelectData = 2;
inline int ProGX8ZGameCardTypeSelect::cardtypeselectdata_size() const {
  return cardtypeselectdata_.size();
}
inline void ProGX8ZGameCardTypeSelect::clear_cardtypeselectdata() {
  cardtypeselectdata_.Clear();
}
inline const ::GX8ZMahList& ProGX8ZGameCardTypeSelect::cardtypeselectdata(int index) const {
  return cardtypeselectdata_.Get(index);
}
inline ::GX8ZMahList* ProGX8ZGameCardTypeSelect::mutable_cardtypeselectdata(int index) {
  return cardtypeselectdata_.Mutable(index);
}
inline ::GX8ZMahList* ProGX8ZGameCardTypeSelect::add_cardtypeselectdata() {
  return cardtypeselectdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >&
ProGX8ZGameCardTypeSelect::cardtypeselectdata() const {
  return cardtypeselectdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::GX8ZMahList >*
ProGX8ZGameCardTypeSelect::mutable_cardtypeselectdata() {
  return &cardtypeselectdata_;
}

// -------------------------------------------------------------------

// ProGX8ZGameIsSurrenderSelect

// optional int32 nSeat = 1;
inline bool ProGX8ZGameIsSurrenderSelect::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameIsSurrenderSelect::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameIsSurrenderSelect::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameIsSurrenderSelect::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameIsSurrenderSelect::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameIsSurrenderSelect::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameIsSurrenderOperate

// optional int32 nSeat = 1;
inline bool ProGX8ZGameIsSurrenderOperate::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameIsSurrenderOperate::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameIsSurrenderOperate::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameIsSurrenderOperate::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameIsSurrenderOperate::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameIsSurrenderOperate::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// optional bool bIsSurrender = 2;
inline bool ProGX8ZGameIsSurrenderOperate::has_bissurrender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameIsSurrenderOperate::set_has_bissurrender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameIsSurrenderOperate::clear_has_bissurrender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameIsSurrenderOperate::clear_bissurrender() {
  bissurrender_ = false;
  clear_has_bissurrender();
}
inline bool ProGX8ZGameIsSurrenderOperate::bissurrender() const {
  return bissurrender_;
}
inline void ProGX8ZGameIsSurrenderOperate::set_bissurrender(bool value) {
  set_has_bissurrender();
  bissurrender_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameIsAgreeSurrenderSelect

// optional int32 nSurrenderSeat = 1;
inline bool ProGX8ZGameIsAgreeSurrenderSelect::has_nsurrenderseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameIsAgreeSurrenderSelect::set_has_nsurrenderseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameIsAgreeSurrenderSelect::clear_has_nsurrenderseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameIsAgreeSurrenderSelect::clear_nsurrenderseat() {
  nsurrenderseat_ = 0;
  clear_has_nsurrenderseat();
}
inline ::google::protobuf::int32 ProGX8ZGameIsAgreeSurrenderSelect::nsurrenderseat() const {
  return nsurrenderseat_;
}
inline void ProGX8ZGameIsAgreeSurrenderSelect::set_nsurrenderseat(::google::protobuf::int32 value) {
  set_has_nsurrenderseat();
  nsurrenderseat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameIsAgreeSurrenderOperate

// optional int32 nSeat = 1;
inline bool ProGX8ZGameIsAgreeSurrenderOperate::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameIsAgreeSurrenderOperate::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// optional bool bIsAgreeSurrender = 2;
inline bool ProGX8ZGameIsAgreeSurrenderOperate::has_bisagreesurrender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::set_has_bisagreesurrender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::clear_has_bisagreesurrender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::clear_bisagreesurrender() {
  bisagreesurrender_ = false;
  clear_has_bisagreesurrender();
}
inline bool ProGX8ZGameIsAgreeSurrenderOperate::bisagreesurrender() const {
  return bisagreesurrender_;
}
inline void ProGX8ZGameIsAgreeSurrenderOperate::set_bisagreesurrender(bool value) {
  set_has_bisagreesurrender();
  bisagreesurrender_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameIsAgreeSurrenderStatus

// optional int32 nSeat = 1;
inline bool ProGX8ZGameIsAgreeSurrenderStatus::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameIsAgreeSurrenderStatus::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// optional bool bIsAgreeSurrender = 2;
inline bool ProGX8ZGameIsAgreeSurrenderStatus::has_bisagreesurrender() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::set_has_bisagreesurrender() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::clear_has_bisagreesurrender() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::clear_bisagreesurrender() {
  bisagreesurrender_ = false;
  clear_has_bisagreesurrender();
}
inline bool ProGX8ZGameIsAgreeSurrenderStatus::bisagreesurrender() const {
  return bisagreesurrender_;
}
inline void ProGX8ZGameIsAgreeSurrenderStatus::set_bisagreesurrender(bool value) {
  set_has_bisagreesurrender();
  bisagreesurrender_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameSurrenderResult

// optional bool bSurrenderResult = 1;
inline bool ProGX8ZGameSurrenderResult::has_bsurrenderresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameSurrenderResult::set_has_bsurrenderresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameSurrenderResult::clear_has_bsurrenderresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameSurrenderResult::clear_bsurrenderresult() {
  bsurrenderresult_ = false;
  clear_has_bsurrenderresult();
}
inline bool ProGX8ZGameSurrenderResult::bsurrenderresult() const {
  return bsurrenderresult_;
}
inline void ProGX8ZGameSurrenderResult::set_bsurrenderresult(bool value) {
  set_has_bsurrenderresult();
  bsurrenderresult_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameShowBoomNotify

// -------------------------------------------------------------------

// ProGX8ZGameShowBoomOperate

// optional int32 nSeat = 1;
inline bool ProGX8ZGameShowBoomOperate::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameShowBoomOperate::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameShowBoomOperate::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameShowBoomOperate::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameShowBoomOperate::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameShowBoomOperate::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// -------------------------------------------------------------------

// ProGX8ZGameShowBoomResponse

// optional int32 nSeat = 1;
inline bool ProGX8ZGameShowBoomResponse::has_nseat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProGX8ZGameShowBoomResponse::set_has_nseat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProGX8ZGameShowBoomResponse::clear_has_nseat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProGX8ZGameShowBoomResponse::clear_nseat() {
  nseat_ = 0;
  clear_has_nseat();
}
inline ::google::protobuf::int32 ProGX8ZGameShowBoomResponse::nseat() const {
  return nseat_;
}
inline void ProGX8ZGameShowBoomResponse::set_nseat(::google::protobuf::int32 value) {
  set_has_nseat();
  nseat_ = value;
}

// optional int32 AwardScore = 2;
inline bool ProGX8ZGameShowBoomResponse::has_awardscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProGX8ZGameShowBoomResponse::set_has_awardscore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProGX8ZGameShowBoomResponse::clear_has_awardscore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProGX8ZGameShowBoomResponse::clear_awardscore() {
  awardscore_ = 0;
  clear_has_awardscore();
}
inline ::google::protobuf::int32 ProGX8ZGameShowBoomResponse::awardscore() const {
  return awardscore_;
}
inline void ProGX8ZGameShowBoomResponse::set_awardscore(::google::protobuf::int32 value) {
  set_has_awardscore();
  awardscore_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameStatusResponse_MSGID>() {
  return ::ProGX8ZGameStatusResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameDeskInfoResponse_MSGID>() {
  return ::ProGX8ZGameDeskInfoResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameReadyNotify_MSGID>() {
  return ::ProGX8ZGameReadyNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameReadyRequest_MSGID>() {
  return ::ProGX8ZGameReadyRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameReadyResponse_MSGID>() {
  return ::ProGX8ZGameReadyResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameStart_MSGID>() {
  return ::ProGX8ZGameStart_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameDiceNotify_MSGID>() {
  return ::ProGX8ZGameDiceNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameDiceRequest_MSGID>() {
  return ::ProGX8ZGameDiceRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameDiceResult_MSGID>() {
  return ::ProGX8ZGameDiceResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameSendMahs_MSGID>() {
  return ::ProGX8ZGameSendMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameKingData_MSGID>() {
  return ::ProGX8ZGameKingData_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameOutMahsResponse_MSGID>() {
  return ::ProGX8ZGameOutMahsResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameTimerPower_MSGID>() {
  return ::ProGX8ZGameTimerPower_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameOperateNotify_MSGID>() {
  return ::ProGX8ZGameOperateNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameOperateResult_MSGID>() {
  return ::ProGX8ZGameOperateResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameOperateRequest_MSGID>() {
  return ::ProGX8ZGameOperateRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameTrust_MSGID>() {
  return ::ProGX8ZGameTrust_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameOutMahRequest_MSGID>() {
  return ::ProGX8ZGameOutMahRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameCatchCard_MSGID>() {
  return ::ProGX8ZGameCatchCard_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameEnd_MSGID>() {
  return ::ProGX8ZGameEnd_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameQuickSoundRequest_MSGID>() {
  return ::ProGX8ZGameQuickSoundRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameQuickSoundResponse_MSGID>() {
  return ::ProGX8ZGameQuickSoundResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameSendDiscardMahs_MSGID>() {
  return ::ProGX8ZGameSendDiscardMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameSendActionMahs_MSGID>() {
  return ::ProGX8ZGameSendActionMahs_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameBrokenRequest_MSGID>() {
  return ::ProGX8ZGameBrokenRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameBrokenOperate_MSGID>() {
  return ::ProGX8ZGameBrokenOperate_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameBrokenNotify_MSGID>() {
  return ::ProGX8ZGameBrokenNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameRuleConfig_MSGID>() {
  return ::ProGX8ZGameRuleConfig_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameBrokenStatus_MSGID>() {
  return ::ProGX8ZGameBrokenStatus_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameDataResp_MSGID>() {
  return ::ProGX8ZGameDataResp_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameRecordRequest_MSGID>() {
  return ::ProGX8ZGameRecordRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameRecordResponse_MSGID>() {
  return ::ProGX8ZGameRecordResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserLocationRequest_MSGID>() {
  return ::ProGX8ZGameUserLocationRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameSyncCardResponse_MSGID>() {
  return ::ProGX8ZGameSyncCardResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserPhoneStatusRequest_MSGID>() {
  return ::ProGX8ZGameUserPhoneStatusRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserGiveUpRequest_MSGID>() {
  return ::ProGX8ZGameUserGiveUpRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserHintRequest_MSGID>() {
  return ::ProGX8ZGameUserHintRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserHintResponse_MSGID>() {
  return ::ProGX8ZGameUserHintResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserDaTuNotify_MSGID>() {
  return ::ProGX8ZGameUserDaTuNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserTeammateRequest_MSGID>() {
  return ::ProGX8ZGameUserTeammateRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserDaTuRequest_MSGID>() {
  return ::ProGX8ZGameUserDaTuRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserDaTuResponse_MSGID>() {
  return ::ProGX8ZGameUserDaTuResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameUserDaTuResult_MSGID>() {
  return ::ProGX8ZGameUserDaTuResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShangYouResult_MSGID>() {
  return ::ProGX8ZGameShangYouResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShowFriendNotify_MSGID>() {
  return ::ProGX8ZGameShowFriendNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameBoomNumNotify_MSGID>() {
  return ::ProGX8ZGameBoomNumNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShowBoomDataRequest_MSGID>() {
  return ::ProGX8ZGameShowBoomDataRequest_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShowBoomDataResponse_MSGID>() {
  return ::ProGX8ZGameShowBoomDataResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameCardTypeSelect_MSGID>() {
  return ::ProGX8ZGameCardTypeSelect_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameIsSurrenderSelect_MSGID>() {
  return ::ProGX8ZGameIsSurrenderSelect_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameIsSurrenderOperate_MSGID>() {
  return ::ProGX8ZGameIsSurrenderOperate_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameIsAgreeSurrenderSelect_MSGID>() {
  return ::ProGX8ZGameIsAgreeSurrenderSelect_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameIsAgreeSurrenderOperate_MSGID>() {
  return ::ProGX8ZGameIsAgreeSurrenderOperate_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameIsAgreeSurrenderStatus_MSGID>() {
  return ::ProGX8ZGameIsAgreeSurrenderStatus_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameSurrenderResult_MSGID>() {
  return ::ProGX8ZGameSurrenderResult_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShowBoomNotify_MSGID>() {
  return ::ProGX8ZGameShowBoomNotify_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShowBoomOperate_MSGID>() {
  return ::ProGX8ZGameShowBoomOperate_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProGX8ZGameShowBoomResponse_MSGID>() {
  return ::ProGX8ZGameShowBoomResponse_MSGID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GX8ZGameState>() {
  return ::GX8ZGameState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GX8ZSEND_TYPE>() {
  return ::GX8ZSEND_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GX8ZKING_TYPE>() {
  return ::GX8ZKING_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GX8ZBROKEN_TYPE>() {
  return ::GX8ZBROKEN_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GX8ZBROKEN_OPERATE>() {
  return ::GX8ZBROKEN_OPERATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GX8ZBROKEN_CODE>() {
  return ::GX8ZBROKEN_CODE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gx8zpk_2eproto__INCLUDED
