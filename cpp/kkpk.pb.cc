// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kkpk.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kkpk.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProWSKGameStatusResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameStatusResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameStatusResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameDeskInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameDeskInfoResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameDeskInfoResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameReadyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameReadyNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameReadyNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameReadyRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameReadyRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameReadyRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameReadyResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameReadyResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameReadyResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameStart_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameStart_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameDiceNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameDiceNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameDiceNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameDiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameDiceRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameDiceRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameDiceResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameSendMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameSendMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameSendMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameKingData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameKingData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameKingData_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameOutMahsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameOutMahsResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameOutMahsResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameTimerPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameTimerPower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameTimerPower_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameOperateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameOperateNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameOperateNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameOperateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameOperateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameOperateResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameOperateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameOperateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameOperateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameTrust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameTrust_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameTrust_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameOutMahRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameOutMahRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameOutMahRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameCatchCard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameCatchCard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameCatchCard_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WSKMahList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSKMahList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSKScoreList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSKScoreList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSKAwardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSKAwardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameEnd_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameQuickSoundRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameQuickSoundRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameQuickSoundRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameQuickSoundResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameQuickSoundResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameQuickSoundResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameSendDiscardMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameSendDiscardMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameSendDiscardMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* WSKWeaveItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSKWeaveItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSKWeaveItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSKWeaveItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameSendActionMahs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameSendActionMahs_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameSendActionMahs_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameBrokenRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameBrokenRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameBrokenOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameBrokenOperate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenOperate_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameBrokenNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameBrokenNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameRuleConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameRuleConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameRuleConfig_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameBrokenStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameBrokenStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenStatus_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameDataResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameDataResp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameDataResp_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameRecordRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameRecordRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameRecordRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameRecordResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameRecordResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserLocationRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserLocationRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserLocationRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameSyncCardResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameSyncCardResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameSyncCardResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserPhoneStatusRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserPhoneStatusRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserPhoneStatusRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserGiveUpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserGiveUpRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserGiveUpRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserHintRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserHintRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserHintRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserHintResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserHintResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserHintResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserDaTuNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserTeammateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserTeammateRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserTeammateRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserDaTuRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuRequest_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserDaTuResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuResponse_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameUserDaTuResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameShangYouResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameShangYouResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameShangYouResult_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameShowFriendNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameShowFriendNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameShowFriendNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProWSKGameBoomNumNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProWSKGameBoomNumNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProWSKGameBoomNumNotify_MSGID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WSKGameState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WSKSEND_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WSKKING_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WSKBROKEN_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WSKBROKEN_OPERATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WSKBROKEN_CODE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_kkpk_2eproto() {
  protobuf_AddDesc_kkpk_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kkpk.proto");
  GOOGLE_CHECK(file != NULL);
  ProWSKGameStatusResponse_descriptor_ = file->message_type(0);
  static const int ProWSKGameStatusResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStatusResponse, status_),
  };
  ProWSKGameStatusResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameStatusResponse_descriptor_,
      ProWSKGameStatusResponse::default_instance_,
      ProWSKGameStatusResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStatusResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStatusResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameStatusResponse));
  ProWSKGameStatusResponse_MSGID_descriptor_ = ProWSKGameStatusResponse_descriptor_->enum_type(0);
  ProWSKGameDeskInfoResponse_descriptor_ = file->message_type(1);
  static const int ProWSKGameDeskInfoResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDeskInfoResponse, cellscore_),
  };
  ProWSKGameDeskInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameDeskInfoResponse_descriptor_,
      ProWSKGameDeskInfoResponse::default_instance_,
      ProWSKGameDeskInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDeskInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDeskInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameDeskInfoResponse));
  ProWSKGameDeskInfoResponse_MSGID_descriptor_ = ProWSKGameDeskInfoResponse_descriptor_->enum_type(0);
  ProWSKGameReadyNotify_descriptor_ = file->message_type(2);
  static const int ProWSKGameReadyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyNotify, time_),
  };
  ProWSKGameReadyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameReadyNotify_descriptor_,
      ProWSKGameReadyNotify::default_instance_,
      ProWSKGameReadyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameReadyNotify));
  ProWSKGameReadyNotify_MSGID_descriptor_ = ProWSKGameReadyNotify_descriptor_->enum_type(0);
  ProWSKGameReadyRequest_descriptor_ = file->message_type(3);
  static const int ProWSKGameReadyRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyRequest, seat_),
  };
  ProWSKGameReadyRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameReadyRequest_descriptor_,
      ProWSKGameReadyRequest::default_instance_,
      ProWSKGameReadyRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameReadyRequest));
  ProWSKGameReadyRequest_MSGID_descriptor_ = ProWSKGameReadyRequest_descriptor_->enum_type(0);
  ProWSKGameReadyResponse_descriptor_ = file->message_type(4);
  static const int ProWSKGameReadyResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyResponse, seat_),
  };
  ProWSKGameReadyResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameReadyResponse_descriptor_,
      ProWSKGameReadyResponse::default_instance_,
      ProWSKGameReadyResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameReadyResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameReadyResponse));
  ProWSKGameReadyResponse_MSGID_descriptor_ = ProWSKGameReadyResponse_descriptor_->enum_type(0);
  ProWSKGameStart_descriptor_ = file->message_type(5);
  static const int ProWSKGameStart_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStart, bankerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStart, gamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStart, outcardtimes_),
  };
  ProWSKGameStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameStart_descriptor_,
      ProWSKGameStart::default_instance_,
      ProWSKGameStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameStart));
  ProWSKGameStart_MSGID_descriptor_ = ProWSKGameStart_descriptor_->enum_type(0);
  ProWSKGameDiceNotify_descriptor_ = file->message_type(6);
  static const int ProWSKGameDiceNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceNotify, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceNotify, dicecount_),
  };
  ProWSKGameDiceNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameDiceNotify_descriptor_,
      ProWSKGameDiceNotify::default_instance_,
      ProWSKGameDiceNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameDiceNotify));
  ProWSKGameDiceNotify_MSGID_descriptor_ = ProWSKGameDiceNotify_descriptor_->enum_type(0);
  ProWSKGameDiceRequest_descriptor_ = file->message_type(7);
  static const int ProWSKGameDiceRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceRequest, dicecount_),
  };
  ProWSKGameDiceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameDiceRequest_descriptor_,
      ProWSKGameDiceRequest::default_instance_,
      ProWSKGameDiceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameDiceRequest));
  ProWSKGameDiceRequest_MSGID_descriptor_ = ProWSKGameDiceRequest_descriptor_->enum_type(0);
  ProWSKGameDiceResult_descriptor_ = file->message_type(8);
  static const int ProWSKGameDiceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceResult, dicecount_),
  };
  ProWSKGameDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameDiceResult_descriptor_,
      ProWSKGameDiceResult::default_instance_,
      ProWSKGameDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameDiceResult));
  ProWSKGameDiceResult_MSGID_descriptor_ = ProWSKGameDiceResult_descriptor_->enum_type(0);
  ProWSKGameSendMahs_descriptor_ = file->message_type(9);
  static const int ProWSKGameSendMahs_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendMahs, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendMahs, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendMahs, mahscount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendMahs, cbleftcount_),
  };
  ProWSKGameSendMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameSendMahs_descriptor_,
      ProWSKGameSendMahs::default_instance_,
      ProWSKGameSendMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameSendMahs));
  ProWSKGameSendMahs_MSGID_descriptor_ = ProWSKGameSendMahs_descriptor_->enum_type(0);
  ProWSKGameKingData_descriptor_ = file->message_type(10);
  static const int ProWSKGameKingData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, mahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, downkingscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, kingcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, viceking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, notify_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, king_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, cbbawangking_),
  };
  ProWSKGameKingData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameKingData_descriptor_,
      ProWSKGameKingData::default_instance_,
      ProWSKGameKingData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameKingData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameKingData));
  ProWSKGameKingData_MSGID_descriptor_ = ProWSKGameKingData_descriptor_->enum_type(0);
  ProWSKGameOutMahsResponse_descriptor_ = file->message_type(11);
  static const int ProWSKGameOutMahsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, outmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, cardcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, cardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, cardtypeflg_),
  };
  ProWSKGameOutMahsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameOutMahsResponse_descriptor_,
      ProWSKGameOutMahsResponse::default_instance_,
      ProWSKGameOutMahsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameOutMahsResponse));
  ProWSKGameOutMahsResponse_MSGID_descriptor_ = ProWSKGameOutMahsResponse_descriptor_->enum_type(0);
  ProWSKGameTimerPower_descriptor_ = file->message_type(12);
  static const int ProWSKGameTimerPower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTimerPower, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTimerPower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTimerPower, outcardtime_),
  };
  ProWSKGameTimerPower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameTimerPower_descriptor_,
      ProWSKGameTimerPower::default_instance_,
      ProWSKGameTimerPower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTimerPower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTimerPower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameTimerPower));
  ProWSKGameTimerPower_MSGID_descriptor_ = ProWSKGameTimerPower_descriptor_->enum_type(0);
  ProWSKGameOperateNotify_descriptor_ = file->message_type(13);
  static const int ProWSKGameOperateNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, resumeseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, actionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, actioncard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, operateseat_),
  };
  ProWSKGameOperateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameOperateNotify_descriptor_,
      ProWSKGameOperateNotify::default_instance_,
      ProWSKGameOperateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameOperateNotify));
  ProWSKGameOperateNotify_MSGID_descriptor_ = ProWSKGameOperateNotify_descriptor_->enum_type(0);
  ProWSKGameOperateResult_descriptor_ = file->message_type(14);
  static const int ProWSKGameOperateResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, woperateuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, cboperatecard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, handmahs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, handcount_),
  };
  ProWSKGameOperateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameOperateResult_descriptor_,
      ProWSKGameOperateResult::default_instance_,
      ProWSKGameOperateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameOperateResult));
  ProWSKGameOperateResult_MSGID_descriptor_ = ProWSKGameOperateResult_descriptor_->enum_type(0);
  ProWSKGameOperateRequest_descriptor_ = file->message_type(15);
  static const int ProWSKGameOperateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateRequest, woperatecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateRequest, cboperatecard_),
  };
  ProWSKGameOperateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameOperateRequest_descriptor_,
      ProWSKGameOperateRequest::default_instance_,
      ProWSKGameOperateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOperateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameOperateRequest));
  ProWSKGameOperateRequest_MSGID_descriptor_ = ProWSKGameOperateRequest_descriptor_->enum_type(0);
  ProWSKGameTrust_descriptor_ = file->message_type(16);
  static const int ProWSKGameTrust_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTrust, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTrust, istrust_),
  };
  ProWSKGameTrust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameTrust_descriptor_,
      ProWSKGameTrust::default_instance_,
      ProWSKGameTrust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTrust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameTrust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameTrust));
  ProWSKGameTrust_MSGID_descriptor_ = ProWSKGameTrust_descriptor_->enum_type(0);
  ProWSKGameOutMahRequest_descriptor_ = file->message_type(17);
  static const int ProWSKGameOutMahRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahRequest, outmahs_),
  };
  ProWSKGameOutMahRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameOutMahRequest_descriptor_,
      ProWSKGameOutMahRequest::default_instance_,
      ProWSKGameOutMahRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameOutMahRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameOutMahRequest));
  ProWSKGameOutMahRequest_MSGID_descriptor_ = ProWSKGameOutMahRequest_descriptor_->enum_type(0);
  ProWSKGameCatchCard_descriptor_ = file->message_type(18);
  static const int ProWSKGameCatchCard_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, wactionmask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, cbisnotgang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, cbleftcount_),
  };
  ProWSKGameCatchCard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameCatchCard_descriptor_,
      ProWSKGameCatchCard::default_instance_,
      ProWSKGameCatchCard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameCatchCard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameCatchCard));
  ProWSKGameCatchCard_MSGID_descriptor_ = ProWSKGameCatchCard_descriptor_->enum_type(0);
  WSKMahList_descriptor_ = file->message_type(19);
  static const int WSKMahList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKMahList, mahs_),
  };
  WSKMahList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSKMahList_descriptor_,
      WSKMahList::default_instance_,
      WSKMahList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKMahList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKMahList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSKMahList));
  WSKScoreList_descriptor_ = file->message_type(20);
  static const int WSKScoreList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKScoreList, roundscore_),
  };
  WSKScoreList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSKScoreList_descriptor_,
      WSKScoreList::default_instance_,
      WSKScoreList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKScoreList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKScoreList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSKScoreList));
  WSKAwardList_descriptor_ = file->message_type(21);
  static const int WSKAwardList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKAwardList, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKAwardList, cardsdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKAwardList, awardscore_),
  };
  WSKAwardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSKAwardList_descriptor_,
      WSKAwardList::default_instance_,
      WSKAwardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKAwardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKAwardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSKAwardList));
  ProWSKGameEnd_descriptor_ = file->message_type(22);
  static const int ProWSKGameEnd_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, lgametax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, cbchongguang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, cbbawangking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, wprovideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, cbchihucard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, dwchihukind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, dwchihuright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, ltotaslgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, lcurrentgamescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, lcurrentpointscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, lattachscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, cbhandcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, cbawardcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, lonlywinscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, broundend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, lhuitouscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, bzhuangwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, cbjiangmacarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, detailedscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, bisdatu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, biskutong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, nno1seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, nwinerseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, nwinersmate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, nno2seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, nno3seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, nno4seat_),
  };
  ProWSKGameEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameEnd_descriptor_,
      ProWSKGameEnd::default_instance_,
      ProWSKGameEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameEnd));
  ProWSKGameEnd_MSGID_descriptor_ = ProWSKGameEnd_descriptor_->enum_type(0);
  ProWSKGameQuickSoundRequest_descriptor_ = file->message_type(23);
  static const int ProWSKGameQuickSoundRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundRequest, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundRequest, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundRequest, text_),
  };
  ProWSKGameQuickSoundRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameQuickSoundRequest_descriptor_,
      ProWSKGameQuickSoundRequest::default_instance_,
      ProWSKGameQuickSoundRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameQuickSoundRequest));
  ProWSKGameQuickSoundRequest_MSGID_descriptor_ = ProWSKGameQuickSoundRequest_descriptor_->enum_type(0);
  ProWSKGameQuickSoundResponse_descriptor_ = file->message_type(24);
  static const int ProWSKGameQuickSoundResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundResponse, desk_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundResponse, sound_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundResponse, text_),
  };
  ProWSKGameQuickSoundResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameQuickSoundResponse_descriptor_,
      ProWSKGameQuickSoundResponse::default_instance_,
      ProWSKGameQuickSoundResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameQuickSoundResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameQuickSoundResponse));
  ProWSKGameQuickSoundResponse_MSGID_descriptor_ = ProWSKGameQuickSoundResponse_descriptor_->enum_type(0);
  ProWSKGameSendDiscardMahs_descriptor_ = file->message_type(25);
  static const int ProWSKGameSendDiscardMahs_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendDiscardMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendDiscardMahs, cbcarddata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendDiscardMahs, deskcount_),
  };
  ProWSKGameSendDiscardMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameSendDiscardMahs_descriptor_,
      ProWSKGameSendDiscardMahs::default_instance_,
      ProWSKGameSendDiscardMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendDiscardMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendDiscardMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameSendDiscardMahs));
  ProWSKGameSendDiscardMahs_MSGID_descriptor_ = ProWSKGameSendDiscardMahs_descriptor_->enum_type(0);
  WSKWeaveItem_descriptor_ = file->message_type(26);
  static const int WSKWeaveItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItem, weavekind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItem, centercard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItem, provideuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItem, cardsize_),
  };
  WSKWeaveItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSKWeaveItem_descriptor_,
      WSKWeaveItem::default_instance_,
      WSKWeaveItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSKWeaveItem));
  WSKWeaveItems_descriptor_ = file->message_type(27);
  static const int WSKWeaveItems_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItems, items_),
  };
  WSKWeaveItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSKWeaveItems_descriptor_,
      WSKWeaveItems::default_instance_,
      WSKWeaveItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSKWeaveItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSKWeaveItems));
  ProWSKGameSendActionMahs_descriptor_ = file->message_type(28);
  static const int ProWSKGameSendActionMahs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendActionMahs, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendActionMahs, weaves_),
  };
  ProWSKGameSendActionMahs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameSendActionMahs_descriptor_,
      ProWSKGameSendActionMahs::default_instance_,
      ProWSKGameSendActionMahs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendActionMahs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSendActionMahs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameSendActionMahs));
  ProWSKGameSendActionMahs_MSGID_descriptor_ = ProWSKGameSendActionMahs_descriptor_->enum_type(0);
  ProWSKGameBrokenRequest_descriptor_ = file->message_type(29);
  static const int ProWSKGameBrokenRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenRequest, time_),
  };
  ProWSKGameBrokenRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameBrokenRequest_descriptor_,
      ProWSKGameBrokenRequest::default_instance_,
      ProWSKGameBrokenRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameBrokenRequest));
  ProWSKGameBrokenRequest_MSGID_descriptor_ = ProWSKGameBrokenRequest_descriptor_->enum_type(0);
  ProWSKGameBrokenOperate_descriptor_ = file->message_type(30);
  static const int ProWSKGameBrokenOperate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenOperate, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenOperate, result_),
  };
  ProWSKGameBrokenOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameBrokenOperate_descriptor_,
      ProWSKGameBrokenOperate::default_instance_,
      ProWSKGameBrokenOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameBrokenOperate));
  ProWSKGameBrokenOperate_MSGID_descriptor_ = ProWSKGameBrokenOperate_descriptor_->enum_type(0);
  ProWSKGameBrokenNotify_descriptor_ = file->message_type(31);
  static const int ProWSKGameBrokenNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenNotify, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenNotify, operate_code_),
  };
  ProWSKGameBrokenNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameBrokenNotify_descriptor_,
      ProWSKGameBrokenNotify::default_instance_,
      ProWSKGameBrokenNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameBrokenNotify));
  ProWSKGameBrokenNotify_MSGID_descriptor_ = ProWSKGameBrokenNotify_descriptor_->enum_type(0);
  ProWSKGameRuleConfig_descriptor_ = file->message_type(32);
  static const int ProWSKGameRuleConfig_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, game_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, need_card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, have_bottom_king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, have_mai_lei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, hava_hui_tou_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, nmasterseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, current_game_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, have_jianma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, nchongguannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, bbawangfanbei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, nplayernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, sroomnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, splaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, gametype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, isopenteammate_),
  };
  ProWSKGameRuleConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameRuleConfig_descriptor_,
      ProWSKGameRuleConfig::default_instance_,
      ProWSKGameRuleConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRuleConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameRuleConfig));
  ProWSKGameRuleConfig_MSGID_descriptor_ = ProWSKGameRuleConfig_descriptor_->enum_type(0);
  ProWSKGameBrokenStatus_descriptor_ = file->message_type(33);
  static const int ProWSKGameBrokenStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenStatus, broken_seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenStatus, broken_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenStatus, left_time_),
  };
  ProWSKGameBrokenStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameBrokenStatus_descriptor_,
      ProWSKGameBrokenStatus::default_instance_,
      ProWSKGameBrokenStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBrokenStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameBrokenStatus));
  ProWSKGameBrokenStatus_MSGID_descriptor_ = ProWSKGameBrokenStatus_descriptor_->enum_type(0);
  ProWSKGameDataResp_descriptor_ = file->message_type(34);
  static const int ProWSKGameDataResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDataResp, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDataResp, type_),
  };
  ProWSKGameDataResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameDataResp_descriptor_,
      ProWSKGameDataResp::default_instance_,
      ProWSKGameDataResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDataResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameDataResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameDataResp));
  ProWSKGameDataResp_MSGID_descriptor_ = ProWSKGameDataResp_descriptor_->enum_type(0);
  ProWSKGameRecordRequest_descriptor_ = file->message_type(35);
  static const int ProWSKGameRecordRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordRequest, url_),
  };
  ProWSKGameRecordRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameRecordRequest_descriptor_,
      ProWSKGameRecordRequest::default_instance_,
      ProWSKGameRecordRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameRecordRequest));
  ProWSKGameRecordRequest_MSGID_descriptor_ = ProWSKGameRecordRequest_descriptor_->enum_type(0);
  ProWSKGameRecordResponse_descriptor_ = file->message_type(36);
  static const int ProWSKGameRecordResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordResponse, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordResponse, url_),
  };
  ProWSKGameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameRecordResponse_descriptor_,
      ProWSKGameRecordResponse::default_instance_,
      ProWSKGameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameRecordResponse));
  ProWSKGameRecordResponse_MSGID_descriptor_ = ProWSKGameRecordResponse_descriptor_->enum_type(0);
  ProWSKGameUserLocationRequest_descriptor_ = file->message_type(37);
  static const int ProWSKGameUserLocationRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, dwlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, dwlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, strdistrict_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, strstreetname_),
  };
  ProWSKGameUserLocationRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserLocationRequest_descriptor_,
      ProWSKGameUserLocationRequest::default_instance_,
      ProWSKGameUserLocationRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserLocationRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserLocationRequest));
  ProWSKGameUserLocationRequest_MSGID_descriptor_ = ProWSKGameUserLocationRequest_descriptor_->enum_type(0);
  ProWSKGameSyncCardResponse_descriptor_ = file->message_type(38);
  static const int ProWSKGameSyncCardResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSyncCardResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSyncCardResponse, handmahs_),
  };
  ProWSKGameSyncCardResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameSyncCardResponse_descriptor_,
      ProWSKGameSyncCardResponse::default_instance_,
      ProWSKGameSyncCardResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSyncCardResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameSyncCardResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameSyncCardResponse));
  ProWSKGameSyncCardResponse_MSGID_descriptor_ = ProWSKGameSyncCardResponse_descriptor_->enum_type(0);
  ProWSKGameUserPhoneStatusRequest_descriptor_ = file->message_type(39);
  static const int ProWSKGameUserPhoneStatusRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserPhoneStatusRequest, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserPhoneStatusRequest, userstatus_),
  };
  ProWSKGameUserPhoneStatusRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserPhoneStatusRequest_descriptor_,
      ProWSKGameUserPhoneStatusRequest::default_instance_,
      ProWSKGameUserPhoneStatusRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserPhoneStatusRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserPhoneStatusRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserPhoneStatusRequest));
  ProWSKGameUserPhoneStatusRequest_MSGID_descriptor_ = ProWSKGameUserPhoneStatusRequest_descriptor_->enum_type(0);
  ProWSKGameUserGiveUpRequest_descriptor_ = file->message_type(40);
  static const int ProWSKGameUserGiveUpRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserGiveUpRequest, seat_id_),
  };
  ProWSKGameUserGiveUpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserGiveUpRequest_descriptor_,
      ProWSKGameUserGiveUpRequest::default_instance_,
      ProWSKGameUserGiveUpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserGiveUpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserGiveUpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserGiveUpRequest));
  ProWSKGameUserGiveUpRequest_MSGID_descriptor_ = ProWSKGameUserGiveUpRequest_descriptor_->enum_type(0);
  ProWSKGameUserHintRequest_descriptor_ = file->message_type(41);
  static const int ProWSKGameUserHintRequest_offsets_[1] = {
  };
  ProWSKGameUserHintRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserHintRequest_descriptor_,
      ProWSKGameUserHintRequest::default_instance_,
      ProWSKGameUserHintRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserHintRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserHintRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserHintRequest));
  ProWSKGameUserHintRequest_MSGID_descriptor_ = ProWSKGameUserHintRequest_descriptor_->enum_type(0);
  ProWSKGameUserHintResponse_descriptor_ = file->message_type(42);
  static const int ProWSKGameUserHintResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserHintResponse, lenth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserHintResponse, outmahs_),
  };
  ProWSKGameUserHintResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserHintResponse_descriptor_,
      ProWSKGameUserHintResponse::default_instance_,
      ProWSKGameUserHintResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserHintResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserHintResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserHintResponse));
  ProWSKGameUserHintResponse_MSGID_descriptor_ = ProWSKGameUserHintResponse_descriptor_->enum_type(0);
  ProWSKGameUserDaTuNotify_descriptor_ = file->message_type(43);
  static const int ProWSKGameUserDaTuNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuNotify, seat_),
  };
  ProWSKGameUserDaTuNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserDaTuNotify_descriptor_,
      ProWSKGameUserDaTuNotify::default_instance_,
      ProWSKGameUserDaTuNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserDaTuNotify));
  ProWSKGameUserDaTuNotify_MSGID_descriptor_ = ProWSKGameUserDaTuNotify_descriptor_->enum_type(0);
  ProWSKGameUserTeammateRequest_descriptor_ = file->message_type(44);
  static const int ProWSKGameUserTeammateRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserTeammateRequest, bankermateseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserTeammateRequest, matecard_),
  };
  ProWSKGameUserTeammateRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserTeammateRequest_descriptor_,
      ProWSKGameUserTeammateRequest::default_instance_,
      ProWSKGameUserTeammateRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserTeammateRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserTeammateRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserTeammateRequest));
  ProWSKGameUserTeammateRequest_MSGID_descriptor_ = ProWSKGameUserTeammateRequest_descriptor_->enum_type(0);
  ProWSKGameUserDaTuRequest_descriptor_ = file->message_type(45);
  static const int ProWSKGameUserDaTuRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuRequest, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuRequest, bisdatu_),
  };
  ProWSKGameUserDaTuRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserDaTuRequest_descriptor_,
      ProWSKGameUserDaTuRequest::default_instance_,
      ProWSKGameUserDaTuRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserDaTuRequest));
  ProWSKGameUserDaTuRequest_MSGID_descriptor_ = ProWSKGameUserDaTuRequest_descriptor_->enum_type(0);
  ProWSKGameUserDaTuResponse_descriptor_ = file->message_type(46);
  static const int ProWSKGameUserDaTuResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResponse, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResponse, bisdatu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResponse, nextseat_),
  };
  ProWSKGameUserDaTuResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserDaTuResponse_descriptor_,
      ProWSKGameUserDaTuResponse::default_instance_,
      ProWSKGameUserDaTuResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserDaTuResponse));
  ProWSKGameUserDaTuResponse_MSGID_descriptor_ = ProWSKGameUserDaTuResponse_descriptor_->enum_type(0);
  ProWSKGameUserDaTuResult_descriptor_ = file->message_type(47);
  static const int ProWSKGameUserDaTuResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResult, seat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResult, bisdatu_),
  };
  ProWSKGameUserDaTuResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameUserDaTuResult_descriptor_,
      ProWSKGameUserDaTuResult::default_instance_,
      ProWSKGameUserDaTuResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameUserDaTuResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameUserDaTuResult));
  ProWSKGameUserDaTuResult_MSGID_descriptor_ = ProWSKGameUserDaTuResult_descriptor_->enum_type(0);
  ProWSKGameShangYouResult_descriptor_ = file->message_type(48);
  static const int ProWSKGameShangYouResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameShangYouResult, shangyouseat_),
  };
  ProWSKGameShangYouResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameShangYouResult_descriptor_,
      ProWSKGameShangYouResult::default_instance_,
      ProWSKGameShangYouResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameShangYouResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameShangYouResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameShangYouResult));
  ProWSKGameShangYouResult_MSGID_descriptor_ = ProWSKGameShangYouResult_descriptor_->enum_type(0);
  ProWSKGameShowFriendNotify_descriptor_ = file->message_type(49);
  static const int ProWSKGameShowFriendNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameShowFriendNotify, bshow_),
  };
  ProWSKGameShowFriendNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameShowFriendNotify_descriptor_,
      ProWSKGameShowFriendNotify::default_instance_,
      ProWSKGameShowFriendNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameShowFriendNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameShowFriendNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameShowFriendNotify));
  ProWSKGameShowFriendNotify_MSGID_descriptor_ = ProWSKGameShowFriendNotify_descriptor_->enum_type(0);
  ProWSKGameBoomNumNotify_descriptor_ = file->message_type(50);
  static const int ProWSKGameBoomNumNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBoomNumNotify, nseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBoomNumNotify, nboomnum_),
  };
  ProWSKGameBoomNumNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProWSKGameBoomNumNotify_descriptor_,
      ProWSKGameBoomNumNotify::default_instance_,
      ProWSKGameBoomNumNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBoomNumNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProWSKGameBoomNumNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProWSKGameBoomNumNotify));
  ProWSKGameBoomNumNotify_MSGID_descriptor_ = ProWSKGameBoomNumNotify_descriptor_->enum_type(0);
  WSKGameState_descriptor_ = file->enum_type(0);
  WSKSEND_TYPE_descriptor_ = file->enum_type(1);
  WSKKING_TYPE_descriptor_ = file->enum_type(2);
  WSKBROKEN_TYPE_descriptor_ = file->enum_type(3);
  WSKBROKEN_OPERATE_descriptor_ = file->enum_type(4);
  WSKBROKEN_CODE_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kkpk_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameStatusResponse_descriptor_, &ProWSKGameStatusResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameDeskInfoResponse_descriptor_, &ProWSKGameDeskInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameReadyNotify_descriptor_, &ProWSKGameReadyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameReadyRequest_descriptor_, &ProWSKGameReadyRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameReadyResponse_descriptor_, &ProWSKGameReadyResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameStart_descriptor_, &ProWSKGameStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameDiceNotify_descriptor_, &ProWSKGameDiceNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameDiceRequest_descriptor_, &ProWSKGameDiceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameDiceResult_descriptor_, &ProWSKGameDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameSendMahs_descriptor_, &ProWSKGameSendMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameKingData_descriptor_, &ProWSKGameKingData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameOutMahsResponse_descriptor_, &ProWSKGameOutMahsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameTimerPower_descriptor_, &ProWSKGameTimerPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameOperateNotify_descriptor_, &ProWSKGameOperateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameOperateResult_descriptor_, &ProWSKGameOperateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameOperateRequest_descriptor_, &ProWSKGameOperateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameTrust_descriptor_, &ProWSKGameTrust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameOutMahRequest_descriptor_, &ProWSKGameOutMahRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameCatchCard_descriptor_, &ProWSKGameCatchCard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSKMahList_descriptor_, &WSKMahList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSKScoreList_descriptor_, &WSKScoreList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSKAwardList_descriptor_, &WSKAwardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameEnd_descriptor_, &ProWSKGameEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameQuickSoundRequest_descriptor_, &ProWSKGameQuickSoundRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameQuickSoundResponse_descriptor_, &ProWSKGameQuickSoundResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameSendDiscardMahs_descriptor_, &ProWSKGameSendDiscardMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSKWeaveItem_descriptor_, &WSKWeaveItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSKWeaveItems_descriptor_, &WSKWeaveItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameSendActionMahs_descriptor_, &ProWSKGameSendActionMahs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameBrokenRequest_descriptor_, &ProWSKGameBrokenRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameBrokenOperate_descriptor_, &ProWSKGameBrokenOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameBrokenNotify_descriptor_, &ProWSKGameBrokenNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameRuleConfig_descriptor_, &ProWSKGameRuleConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameBrokenStatus_descriptor_, &ProWSKGameBrokenStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameDataResp_descriptor_, &ProWSKGameDataResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameRecordRequest_descriptor_, &ProWSKGameRecordRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameRecordResponse_descriptor_, &ProWSKGameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserLocationRequest_descriptor_, &ProWSKGameUserLocationRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameSyncCardResponse_descriptor_, &ProWSKGameSyncCardResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserPhoneStatusRequest_descriptor_, &ProWSKGameUserPhoneStatusRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserGiveUpRequest_descriptor_, &ProWSKGameUserGiveUpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserHintRequest_descriptor_, &ProWSKGameUserHintRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserHintResponse_descriptor_, &ProWSKGameUserHintResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserDaTuNotify_descriptor_, &ProWSKGameUserDaTuNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserTeammateRequest_descriptor_, &ProWSKGameUserTeammateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserDaTuRequest_descriptor_, &ProWSKGameUserDaTuRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserDaTuResponse_descriptor_, &ProWSKGameUserDaTuResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameUserDaTuResult_descriptor_, &ProWSKGameUserDaTuResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameShangYouResult_descriptor_, &ProWSKGameShangYouResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameShowFriendNotify_descriptor_, &ProWSKGameShowFriendNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProWSKGameBoomNumNotify_descriptor_, &ProWSKGameBoomNumNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kkpk_2eproto() {
  delete ProWSKGameStatusResponse::default_instance_;
  delete ProWSKGameStatusResponse_reflection_;
  delete ProWSKGameDeskInfoResponse::default_instance_;
  delete ProWSKGameDeskInfoResponse_reflection_;
  delete ProWSKGameReadyNotify::default_instance_;
  delete ProWSKGameReadyNotify_reflection_;
  delete ProWSKGameReadyRequest::default_instance_;
  delete ProWSKGameReadyRequest_reflection_;
  delete ProWSKGameReadyResponse::default_instance_;
  delete ProWSKGameReadyResponse_reflection_;
  delete ProWSKGameStart::default_instance_;
  delete ProWSKGameStart_reflection_;
  delete ProWSKGameDiceNotify::default_instance_;
  delete ProWSKGameDiceNotify_reflection_;
  delete ProWSKGameDiceRequest::default_instance_;
  delete ProWSKGameDiceRequest_reflection_;
  delete ProWSKGameDiceResult::default_instance_;
  delete ProWSKGameDiceResult_reflection_;
  delete ProWSKGameSendMahs::default_instance_;
  delete ProWSKGameSendMahs_reflection_;
  delete ProWSKGameKingData::default_instance_;
  delete ProWSKGameKingData_reflection_;
  delete ProWSKGameOutMahsResponse::default_instance_;
  delete ProWSKGameOutMahsResponse_reflection_;
  delete ProWSKGameTimerPower::default_instance_;
  delete ProWSKGameTimerPower_reflection_;
  delete ProWSKGameOperateNotify::default_instance_;
  delete ProWSKGameOperateNotify_reflection_;
  delete ProWSKGameOperateResult::default_instance_;
  delete ProWSKGameOperateResult_reflection_;
  delete ProWSKGameOperateRequest::default_instance_;
  delete ProWSKGameOperateRequest_reflection_;
  delete ProWSKGameTrust::default_instance_;
  delete ProWSKGameTrust_reflection_;
  delete ProWSKGameOutMahRequest::default_instance_;
  delete ProWSKGameOutMahRequest_reflection_;
  delete ProWSKGameCatchCard::default_instance_;
  delete ProWSKGameCatchCard_reflection_;
  delete WSKMahList::default_instance_;
  delete WSKMahList_reflection_;
  delete WSKScoreList::default_instance_;
  delete WSKScoreList_reflection_;
  delete WSKAwardList::default_instance_;
  delete WSKAwardList_reflection_;
  delete ProWSKGameEnd::default_instance_;
  delete ProWSKGameEnd_reflection_;
  delete ProWSKGameQuickSoundRequest::default_instance_;
  delete ProWSKGameQuickSoundRequest_reflection_;
  delete ProWSKGameQuickSoundResponse::default_instance_;
  delete ProWSKGameQuickSoundResponse_reflection_;
  delete ProWSKGameSendDiscardMahs::default_instance_;
  delete ProWSKGameSendDiscardMahs_reflection_;
  delete WSKWeaveItem::default_instance_;
  delete WSKWeaveItem_reflection_;
  delete WSKWeaveItems::default_instance_;
  delete WSKWeaveItems_reflection_;
  delete ProWSKGameSendActionMahs::default_instance_;
  delete ProWSKGameSendActionMahs_reflection_;
  delete ProWSKGameBrokenRequest::default_instance_;
  delete ProWSKGameBrokenRequest_reflection_;
  delete ProWSKGameBrokenOperate::default_instance_;
  delete ProWSKGameBrokenOperate_reflection_;
  delete ProWSKGameBrokenNotify::default_instance_;
  delete ProWSKGameBrokenNotify_reflection_;
  delete ProWSKGameRuleConfig::default_instance_;
  delete ProWSKGameRuleConfig_reflection_;
  delete ProWSKGameBrokenStatus::default_instance_;
  delete ProWSKGameBrokenStatus_reflection_;
  delete ProWSKGameDataResp::default_instance_;
  delete ProWSKGameDataResp_reflection_;
  delete ProWSKGameRecordRequest::default_instance_;
  delete ProWSKGameRecordRequest_reflection_;
  delete ProWSKGameRecordResponse::default_instance_;
  delete ProWSKGameRecordResponse_reflection_;
  delete ProWSKGameUserLocationRequest::default_instance_;
  delete ProWSKGameUserLocationRequest_reflection_;
  delete ProWSKGameSyncCardResponse::default_instance_;
  delete ProWSKGameSyncCardResponse_reflection_;
  delete ProWSKGameUserPhoneStatusRequest::default_instance_;
  delete ProWSKGameUserPhoneStatusRequest_reflection_;
  delete ProWSKGameUserGiveUpRequest::default_instance_;
  delete ProWSKGameUserGiveUpRequest_reflection_;
  delete ProWSKGameUserHintRequest::default_instance_;
  delete ProWSKGameUserHintRequest_reflection_;
  delete ProWSKGameUserHintResponse::default_instance_;
  delete ProWSKGameUserHintResponse_reflection_;
  delete ProWSKGameUserDaTuNotify::default_instance_;
  delete ProWSKGameUserDaTuNotify_reflection_;
  delete ProWSKGameUserTeammateRequest::default_instance_;
  delete ProWSKGameUserTeammateRequest_reflection_;
  delete ProWSKGameUserDaTuRequest::default_instance_;
  delete ProWSKGameUserDaTuRequest_reflection_;
  delete ProWSKGameUserDaTuResponse::default_instance_;
  delete ProWSKGameUserDaTuResponse_reflection_;
  delete ProWSKGameUserDaTuResult::default_instance_;
  delete ProWSKGameUserDaTuResult_reflection_;
  delete ProWSKGameShangYouResult::default_instance_;
  delete ProWSKGameShangYouResult_reflection_;
  delete ProWSKGameShowFriendNotify::default_instance_;
  delete ProWSKGameShowFriendNotify_reflection_;
  delete ProWSKGameBoomNumNotify::default_instance_;
  delete ProWSKGameBoomNumNotify_reflection_;
}

void protobuf_AddDesc_kkpk_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::messages::protobuf_AddDesc_base_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nkkpk.proto\032\nbase.proto\"K\n\030ProWSKGameSt"
    "atusResponse\022\035\n\006status\030\002 \001(\0162\r.WSKGameSt"
    "ate\"\020\n\005MSGID\022\007\n\002ID\020\230\021\"A\n\032ProWSKGameDeskI"
    "nfoResponse\022\021\n\tCellScore\030\002 \001(\005\"\020\n\005MSGID\022"
    "\007\n\002ID\020\231\021\"E\n\025ProWSKGameReadyNotify\022\014\n\004sea"
    "t\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\232\021\""
    "8\n\026ProWSKGameReadyRequest\022\014\n\004seat\030\002 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\233\021\"9\n\027ProWSKGameReadyResp"
    "onse\022\014\n\004seat\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\234\021\"`\n\017"
    "ProWSKGameStart\022\022\n\nbankerseat\030\002 \001(\005\022\021\n\tg"
    "amecount\030\003 \001(\005\022\024\n\014outCardtimes\030\004 \001(\005\"\020\n\005"
    "MSGID\022\007\n\002ID\020\235\021\"W\n\024ProWSKGameDiceNotify\022\014"
    "\n\004seat\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\021\n\tdicecount\030"
    "\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\236\021\"J\n\025ProWSKGameDic"
    "eRequest\022\014\n\004seat\030\002 \001(\005\022\021\n\tdicecount\030\003 \001("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\237\021\"Y\n\024ProWSKGameDiceRes"
    "ult\022\014\n\004seat\030\002 \001(\005\022\016\n\006result\030\003 \003(\005\022\021\n\tdic"
    "ecount\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\240\021\"j\n\022ProWSK"
    "GameSendMahs\022\014\n\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005"
    "\022\021\n\tmahscount\030\004 \003(\005\022\023\n\013cbLeftCount\030\005 \001(\005"
    "\"\020\n\005MSGID\022\007\n\002ID\020\241\021\"\216\002\n\022ProWSKGameKingDat"
    "a\022\014\n\004seat\030\002 \001(\005\022\014\n\004mahs\030\003 \003(\005\022\025\n\rdownKin"
    "gScore\030\004 \003(\005\022\021\n\tkingcount\030\005 \003(\005\022\020\n\010vicek"
    "ing\030\006 \003(\005\0223\n\013notify_type\030\007 \001(\0162\r.WSKSEND"
    "_TYPE:\017WSK_NORMAL_SEND\022-\n\tking_type\030\010 \001("
    "\0162\r.WSKKING_TYPE:\013WSK_KING_UP\022\024\n\014cbChong"
    "Guang\030\t \003(\005\022\024\n\014cbBaWangKing\030\n \003(\005\"\020\n\005MSG"
    "ID\022\007\n\002ID\020\242\021\"\230\001\n\031ProWSKGameOutMahsRespons"
    "e\022\014\n\004seat\030\002 \001(\005\022\017\n\007outMahs\030\003 \003(\005\022\020\n\010hand"
    "mahs\030\004 \003(\005\022\021\n\tcardCount\030\005 \001(\005\022\020\n\010cardTyp"
    "e\030\006 \001(\005\022\023\n\013cardtypeflg\030\007 \001(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\243\021\"Y\n\024ProWSKGameTimerPower\022\014\n\004seat\030\002"
    " \001(\005\022\014\n\004time\030\003 \001(\005\022\023\n\013outcardTime\030\004 \001(\005\""
    "\020\n\005MSGID\022\007\n\002ID\020\244\021\"\212\001\n\027ProWSKGameOperateN"
    "otify\022\022\n\nresumeSeat\030\002 \001(\005\022\022\n\nActionMask\030"
    "\003 \001(\005\022\022\n\nActionCard\030\004 \001(\005\022\014\n\004time\030\005 \001(\005\022"
    "\023\n\013operateseat\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\245\021\"\251"
    "\001\n\027ProWSKGameOperateResult\022\024\n\014wOperateUs"
    "er\030\002 \001(\005\022\024\n\014wProvideUser\030\003 \001(\005\022\024\n\014wOpera"
    "teCode\030\004 \001(\005\022\025\n\rcbOperateCard\030\005 \001(\005\022\020\n\010h"
    "andmahs\030\006 \003(\005\022\021\n\thandcount\030\007 \001(\005\"\020\n\005MSGI"
    "D\022\007\n\002ID\020\246\021\"g\n\030ProWSKGameOperateRequest\022\014"
    "\n\004seat\030\002 \001(\005\022\024\n\014wOperateCode\030\003 \001(\005\022\025\n\rcb"
    "OperateCard\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\247\021\"B\n\017P"
    "roWSKGameTrust\022\014\n\004seat\030\002 \001(\005\022\017\n\007isTrust\030"
    "\003 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\250\021\"J\n\027ProWSKGameOut"
    "MahRequest\022\014\n\004seat\030\002 \001(\005\022\017\n\007outMahs\030\003 \003("
    "\005\"\020\n\005MSGID\022\007\n\002ID\020\251\021\"\210\001\n\023ProWSKGameCatchC"
    "ard\022\014\n\004seat\030\002 \001(\005\022\022\n\ncbCardData\030\003 \001(\005\022\023\n"
    "\013wActionMask\030\004 \001(\005\022\023\n\013cbIsNotGang\030\005 \001(\010\022"
    "\023\n\013cbLeftCount\030\006 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\252\021\"\032"
    "\n\nWSKMahList\022\014\n\004Mahs\030\001 \003(\005\"\"\n\014WSKScoreLi"
    "st\022\022\n\nroundScore\030\001 \003(\005\"C\n\014WSKAwardList\022\014"
    "\n\004seat\030\001 \001(\005\022\021\n\tCardsData\030\002 \003(\005\022\022\n\naward"
    "Score\030\003 \001(\005\"\224\005\n\rProWSKGameEnd\022\020\n\010lGameTa"
    "x\030\002 \001(\005\022\024\n\014cbChongGuang\030\003 \003(\005\022\024\n\014cbBaWan"
    "gKing\030\004 \003(\005\022\024\n\014wProvideUser\030\005 \001(\005\022\023\n\013cbC"
    "hiHuCard\030\006 \001(\005\022\023\n\013dwChiHuKind\030\007 \003(\005\022\024\n\014d"
    "wChiHuRight\030\010 \003(\005\022\030\n\020lTotaslGameScore\030\t "
    "\003(\005\022\031\n\021lCurrentGameScore\030\n \003(\005\022\032\n\022lCurre"
    "ntPointScore\030\013 \003(\005\022\024\n\014lAttachScore\030\014 \003(\005"
    "\022#\n\016cbHandCardData\030\r \003(\0132\013.WSKMahList\022&\n"
    "\017cbAwardCardData\030\016 \003(\0132\r.WSKAwardList\022\025\n"
    "\rlOnlyWinScore\030\017 \003(\005\022\021\n\tbRoundEnd\030\020 \001(\010\022"
    "\024\n\014lHuiTouScore\030\021 \003(\005\022\022\n\nbZhuangWin\030\022 \001("
    "\010\022\031\n\021cbJiangMaCardData\030\023 \003(\005\022%\n\016detailed"
    "Scores\030\024 \003(\0132\r.WSKScoreList\022\017\n\007bIsDaTu\030\025"
    " \001(\010\022\021\n\tbIsKuTong\030\026 \001(\010\022\020\n\010nNo1Seat\030\027 \001("
    "\005\022\022\n\nnWinerSeat\030\030 \001(\005\022\023\n\013nWinersMate\030\031 \001"
    "(\005\022\020\n\010nNo2Seat\030\032 \001(\005\022\020\n\010nNo3Seat\030\033 \001(\005\022\020"
    "\n\010nNo4Seat\030\034 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\253\021\"q\n\033Pr"
    "oWSKGameQuickSoundRequest\022\017\n\007desk_id\030\002 \001"
    "(\005\022\017\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n"
    "\004text\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\254\021\"r\n\034ProWSKG"
    "ameQuickSoundResponse\022\017\n\007desk_id\030\002 \001(\005\022\017"
    "\n\007seat_id\030\003 \001(\005\022\020\n\010sound_id\030\004 \001(\005\022\014\n\004tex"
    "t\030\005 \001(\014\"\020\n\005MSGID\022\007\n\002ID\020\255\021\"r\n\031ProWSKGameS"
    "endDiscardMahs\022\017\n\007seat_id\030\002 \001(\005\022\037\n\ncbCar"
    "dData\030\003 \003(\0132\013.WSKMahList\022\021\n\tdeskCount\030\004 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\256\021\"\\\n\014WSKWeaveItem\022\021\n"
    "\tweaveKind\030\001 \001(\005\022\022\n\ncentercard\030\002 \001(\005\022\023\n\013"
    "provideUser\030\003 \001(\005\022\020\n\010cardsize\030\004 \001(\005\"-\n\rW"
    "SKWeaveItems\022\034\n\005items\030\001 \003(\0132\r.WSKWeaveIt"
    "em\"]\n\030ProWSKGameSendActionMahs\022\017\n\007seat_i"
    "d\030\002 \001(\005\022\036\n\006weaves\030\003 \003(\0132\016.WSKWeaveItems\""
    "\020\n\005MSGID\022\007\n\002ID\020\257\021\"i\n\027ProWSKGameBrokenReq"
    "uest\022\017\n\007seat_id\030\002 \001(\005\022\035\n\004type\030\003 \001(\0162\017.WS"
    "KBROKEN_TYPE\022\014\n\004time\030\004 \001(\005\"\020\n\005MSGID\022\007\n\002I"
    "D\020\260\021\"q\n\027ProWSKGameBrokenOperate\022\017\n\007seat_"
    "id\030\002 \001(\005\0223\n\006result\030\003 \001(\0162\022.WSKBROKEN_OPE"
    "RATE:\017WSK_BO_DISAGREE\"\020\n\005MSGID\022\007\n\002ID\020\261\021\""
    "r\n\026ProWSKGameBrokenNotify\022\017\n\007seat_id\030\002 \001"
    "(\005\0225\n\014operate_code\030\003 \001(\0162\017.WSKBROKEN_COD"
    "E:\016WSK_BC_SUCCESS\"\020\n\005MSGID\022\007\n\002ID\020\262\021\"\354\002\n\024"
    "ProWSKGameRuleConfig\022\022\n\ngame_round\030\001 \001(\005"
    "\022\021\n\tneed_card\030\002 \001(\005\022\030\n\020have_bottom_king\030"
    "\003 \001(\010\022\024\n\014have_mai_lei\030\004 \001(\010\022\024\n\014hava_hui_"
    "tou\030\005 \001(\010\022\023\n\013nMasterSeat\030\006 \001(\005\022\032\n\022curren"
    "t_game_count\030\007 \001(\005\022\023\n\013have_jianma\030\010 \001(\010\022"
    "\025\n\rnChongguanNum\030\t \001(\005\022\025\n\rbbawangfanbei\030"
    "\n \001(\010\022\022\n\nnPlayerNum\030\013 \001(\005\022\020\n\010sRoomNum\030\014 "
    "\001(\014\022\021\n\tsPlayTime\030\r \001(\014\022\020\n\010gametype\030\016 \001(\005"
    "\022\026\n\016isOpenTeammate\030\017 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020"
    "\263\021\"i\n\026ProWSKGameBrokenStatus\022\023\n\013broken_s"
    "eat\030\001 \001(\005\022\025\n\rbroken_status\030\002 \003(\010\022\021\n\tleft"
    "_time\030\003 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\264\021\"I\n\022ProWSKG"
    "ameDataResp\022\023\n\013total_score\030\001 \003(\005\022\014\n\004type"
    "\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\265\021\"I\n\027ProWSKGameRe"
    "cordRequest\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001("
    "\014\"\020\n\005MSGID\022\007\n\002ID\020\266\021\"J\n\030ProWSKGameRecordR"
    "esponse\022\017\n\007seat_id\030\001 \001(\005\022\013\n\003url\030\002 \001(\014\"\020\n"
    "\005MSGID\022\007\n\002ID\020\267\021\"\227\001\n\035ProWSKGameUserLocati"
    "onRequest\022\017\n\007seat_id\030\001 \001(\005\022\023\n\013dwlongitud"
    "e\030\002 \001(\001\022\022\n\ndwlatitude\030\003 \001(\001\022\023\n\013strDistri"
    "ct\030\004 \001(\014\022\025\n\rstrStreetName\030\005 \001(\014\"\020\n\005MSGID"
    "\022\007\n\002ID\020\270\021\"N\n\032ProWSKGameSyncCardResponse\022"
    "\014\n\004seat\030\002 \001(\005\022\020\n\010handmahs\030\003 \003(\005\"\020\n\005MSGID"
    "\022\007\n\002ID\020\271\021\"Y\n ProWSKGameUserPhoneStatusRe"
    "quest\022\017\n\007seat_id\030\001 \001(\005\022\022\n\nuserstatus\030\002 \001"
    "(\005\"\020\n\005MSGID\022\007\n\002ID\020\272\021\"@\n\033ProWSKGameUserGi"
    "veUpRequest\022\017\n\007seat_id\030\001 \001(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\273\021\"-\n\031ProWSKGameUserHintRequest\"\020\n\005M"
    "SGID\022\007\n\002ID\020\274\021\"N\n\032ProWSKGameUserHintRespo"
    "nse\022\r\n\005lenth\030\001 \001(\005\022\017\n\007outMahs\030\002 \003(\005\"\020\n\005M"
    "SGID\022\007\n\002ID\020\275\021\":\n\030ProWSKGameUserDaTuNotif"
    "y\022\014\n\004seat\030\001 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\276\021\"[\n\035Pro"
    "WSKGameUserTeammateRequest\022\026\n\016bankerMate"
    "Seat\030\001 \001(\005\022\020\n\010mateCard\030\002 \001(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\277\021\"L\n\031ProWSKGameUserDaTuRequest\022\014\n\004s"
    "eat\030\001 \001(\005\022\017\n\007bIsDaTu\030\002 \001(\010\"\020\n\005MSGID\022\007\n\002I"
    "D\020\300\021\"_\n\032ProWSKGameUserDaTuResponse\022\014\n\004se"
    "at\030\001 \001(\005\022\017\n\007bIsDaTu\030\002 \001(\010\022\020\n\010nextSeat\030\003 "
    "\001(\005\"\020\n\005MSGID\022\007\n\002ID\020\301\021\"K\n\030ProWSKGameUserD"
    "aTuResult\022\014\n\004seat\030\001 \001(\005\022\017\n\007bIsDaTu\030\002 \001(\010"
    "\"\020\n\005MSGID\022\007\n\002ID\020\302\021\"B\n\030ProWSKGameShangYou"
    "Result\022\024\n\014shangyouSeat\030\001 \003(\005\"\020\n\005MSGID\022\007\n"
    "\002ID\020\303\021\"=\n\032ProWSKGameShowFriendNotify\022\r\n\005"
    "bShow\030\001 \001(\010\"\020\n\005MSGID\022\007\n\002ID\020\304\021\"L\n\027ProWSKG"
    "ameBoomNumNotify\022\r\n\005nSeat\030\001 \001(\005\022\020\n\010nBoom"
    "Num\030\002 \001(\005\"\020\n\005MSGID\022\007\n\002ID\020\305\021*\204\001\n\014WSKGameS"
    "tate\022\021\n\rWSK_GAME_IDLE\020\001\022\026\n\022WSK_GAME_DICE"
    "_BANK\020\002\022\021\n\rWSK_GAME_SEND\020\003\022\021\n\rWSK_GAME_D"
    "ATU\020\004\022\021\n\rWSK_GAME_PLAY\020\006\022\020\n\014WSK_GAME_END"
    "\020\007*8\n\014WSKSEND_TYPE\022\023\n\017WSK_NORMAL_SEND\020\001\022"
    "\023\n\017WSK_RECOME_SEND\020\002*I\n\014WSKKING_TYPE\022\017\n\013"
    "WSK_KING_UP\020\001\022\023\n\017WSK_KING_HUITOU\020\002\022\023\n\017WS"
    "K_KING_MAILEI\020\003*Q\n\016WSKBROKEN_TYPE\022\026\n\022WSK"
    "_BT_MASTER_QUIT\020\000\022\024\n\020WSK_BT_USER_QUIT\020\001\022"
    "\021\n\rWSK_BT_BROKEN\020\002*:\n\021WSKBROKEN_OPERATE\022"
    "\023\n\017WSK_BO_DISAGREE\020\000\022\020\n\014WSK_BO_AGREE\020\001*h"
    "\n\016WSKBROKEN_CODE\022\022\n\016WSK_BC_SUCCESS\020\000\022\023\n\017"
    "WSK_BC_DISAGREE\020\001\022\027\n\023WSK_BC_QUIT_SUCCESS"
    "\020\002\022\024\n\020WSK_BC_EXCEPTION\020\003", 6104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kkpk.proto", &protobuf_RegisterTypes);
  ProWSKGameStatusResponse::default_instance_ = new ProWSKGameStatusResponse();
  ProWSKGameDeskInfoResponse::default_instance_ = new ProWSKGameDeskInfoResponse();
  ProWSKGameReadyNotify::default_instance_ = new ProWSKGameReadyNotify();
  ProWSKGameReadyRequest::default_instance_ = new ProWSKGameReadyRequest();
  ProWSKGameReadyResponse::default_instance_ = new ProWSKGameReadyResponse();
  ProWSKGameStart::default_instance_ = new ProWSKGameStart();
  ProWSKGameDiceNotify::default_instance_ = new ProWSKGameDiceNotify();
  ProWSKGameDiceRequest::default_instance_ = new ProWSKGameDiceRequest();
  ProWSKGameDiceResult::default_instance_ = new ProWSKGameDiceResult();
  ProWSKGameSendMahs::default_instance_ = new ProWSKGameSendMahs();
  ProWSKGameKingData::default_instance_ = new ProWSKGameKingData();
  ProWSKGameOutMahsResponse::default_instance_ = new ProWSKGameOutMahsResponse();
  ProWSKGameTimerPower::default_instance_ = new ProWSKGameTimerPower();
  ProWSKGameOperateNotify::default_instance_ = new ProWSKGameOperateNotify();
  ProWSKGameOperateResult::default_instance_ = new ProWSKGameOperateResult();
  ProWSKGameOperateRequest::default_instance_ = new ProWSKGameOperateRequest();
  ProWSKGameTrust::default_instance_ = new ProWSKGameTrust();
  ProWSKGameOutMahRequest::default_instance_ = new ProWSKGameOutMahRequest();
  ProWSKGameCatchCard::default_instance_ = new ProWSKGameCatchCard();
  WSKMahList::default_instance_ = new WSKMahList();
  WSKScoreList::default_instance_ = new WSKScoreList();
  WSKAwardList::default_instance_ = new WSKAwardList();
  ProWSKGameEnd::default_instance_ = new ProWSKGameEnd();
  ProWSKGameQuickSoundRequest::default_instance_ = new ProWSKGameQuickSoundRequest();
  ProWSKGameQuickSoundResponse::default_instance_ = new ProWSKGameQuickSoundResponse();
  ProWSKGameSendDiscardMahs::default_instance_ = new ProWSKGameSendDiscardMahs();
  WSKWeaveItem::default_instance_ = new WSKWeaveItem();
  WSKWeaveItems::default_instance_ = new WSKWeaveItems();
  ProWSKGameSendActionMahs::default_instance_ = new ProWSKGameSendActionMahs();
  ProWSKGameBrokenRequest::default_instance_ = new ProWSKGameBrokenRequest();
  ProWSKGameBrokenOperate::default_instance_ = new ProWSKGameBrokenOperate();
  ProWSKGameBrokenNotify::default_instance_ = new ProWSKGameBrokenNotify();
  ProWSKGameRuleConfig::default_instance_ = new ProWSKGameRuleConfig();
  ProWSKGameBrokenStatus::default_instance_ = new ProWSKGameBrokenStatus();
  ProWSKGameDataResp::default_instance_ = new ProWSKGameDataResp();
  ProWSKGameRecordRequest::default_instance_ = new ProWSKGameRecordRequest();
  ProWSKGameRecordResponse::default_instance_ = new ProWSKGameRecordResponse();
  ProWSKGameUserLocationRequest::default_instance_ = new ProWSKGameUserLocationRequest();
  ProWSKGameSyncCardResponse::default_instance_ = new ProWSKGameSyncCardResponse();
  ProWSKGameUserPhoneStatusRequest::default_instance_ = new ProWSKGameUserPhoneStatusRequest();
  ProWSKGameUserGiveUpRequest::default_instance_ = new ProWSKGameUserGiveUpRequest();
  ProWSKGameUserHintRequest::default_instance_ = new ProWSKGameUserHintRequest();
  ProWSKGameUserHintResponse::default_instance_ = new ProWSKGameUserHintResponse();
  ProWSKGameUserDaTuNotify::default_instance_ = new ProWSKGameUserDaTuNotify();
  ProWSKGameUserTeammateRequest::default_instance_ = new ProWSKGameUserTeammateRequest();
  ProWSKGameUserDaTuRequest::default_instance_ = new ProWSKGameUserDaTuRequest();
  ProWSKGameUserDaTuResponse::default_instance_ = new ProWSKGameUserDaTuResponse();
  ProWSKGameUserDaTuResult::default_instance_ = new ProWSKGameUserDaTuResult();
  ProWSKGameShangYouResult::default_instance_ = new ProWSKGameShangYouResult();
  ProWSKGameShowFriendNotify::default_instance_ = new ProWSKGameShowFriendNotify();
  ProWSKGameBoomNumNotify::default_instance_ = new ProWSKGameBoomNumNotify();
  ProWSKGameStatusResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameDeskInfoResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameReadyNotify::default_instance_->InitAsDefaultInstance();
  ProWSKGameReadyRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameReadyResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameStart::default_instance_->InitAsDefaultInstance();
  ProWSKGameDiceNotify::default_instance_->InitAsDefaultInstance();
  ProWSKGameDiceRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameDiceResult::default_instance_->InitAsDefaultInstance();
  ProWSKGameSendMahs::default_instance_->InitAsDefaultInstance();
  ProWSKGameKingData::default_instance_->InitAsDefaultInstance();
  ProWSKGameOutMahsResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameTimerPower::default_instance_->InitAsDefaultInstance();
  ProWSKGameOperateNotify::default_instance_->InitAsDefaultInstance();
  ProWSKGameOperateResult::default_instance_->InitAsDefaultInstance();
  ProWSKGameOperateRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameTrust::default_instance_->InitAsDefaultInstance();
  ProWSKGameOutMahRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameCatchCard::default_instance_->InitAsDefaultInstance();
  WSKMahList::default_instance_->InitAsDefaultInstance();
  WSKScoreList::default_instance_->InitAsDefaultInstance();
  WSKAwardList::default_instance_->InitAsDefaultInstance();
  ProWSKGameEnd::default_instance_->InitAsDefaultInstance();
  ProWSKGameQuickSoundRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameQuickSoundResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameSendDiscardMahs::default_instance_->InitAsDefaultInstance();
  WSKWeaveItem::default_instance_->InitAsDefaultInstance();
  WSKWeaveItems::default_instance_->InitAsDefaultInstance();
  ProWSKGameSendActionMahs::default_instance_->InitAsDefaultInstance();
  ProWSKGameBrokenRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameBrokenOperate::default_instance_->InitAsDefaultInstance();
  ProWSKGameBrokenNotify::default_instance_->InitAsDefaultInstance();
  ProWSKGameRuleConfig::default_instance_->InitAsDefaultInstance();
  ProWSKGameBrokenStatus::default_instance_->InitAsDefaultInstance();
  ProWSKGameDataResp::default_instance_->InitAsDefaultInstance();
  ProWSKGameRecordRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameRecordResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserLocationRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameSyncCardResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserPhoneStatusRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserGiveUpRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserHintRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserHintResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserDaTuNotify::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserTeammateRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserDaTuRequest::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserDaTuResponse::default_instance_->InitAsDefaultInstance();
  ProWSKGameUserDaTuResult::default_instance_->InitAsDefaultInstance();
  ProWSKGameShangYouResult::default_instance_->InitAsDefaultInstance();
  ProWSKGameShowFriendNotify::default_instance_->InitAsDefaultInstance();
  ProWSKGameBoomNumNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kkpk_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kkpk_2eproto {
  StaticDescriptorInitializer_kkpk_2eproto() {
    protobuf_AddDesc_kkpk_2eproto();
  }
} static_descriptor_initializer_kkpk_2eproto_;
const ::google::protobuf::EnumDescriptor* WSKGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKGameState_descriptor_;
}
bool WSKGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WSKSEND_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKSEND_TYPE_descriptor_;
}
bool WSKSEND_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WSKKING_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKKING_TYPE_descriptor_;
}
bool WSKKING_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WSKBROKEN_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKBROKEN_TYPE_descriptor_;
}
bool WSKBROKEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WSKBROKEN_OPERATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKBROKEN_OPERATE_descriptor_;
}
bool WSKBROKEN_OPERATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WSKBROKEN_CODE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKBROKEN_CODE_descriptor_;
}
bool WSKBROKEN_CODE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameStatusResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameStatusResponse_MSGID_descriptor_;
}
bool ProWSKGameStatusResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameStatusResponse_MSGID ProWSKGameStatusResponse::ID;
const ProWSKGameStatusResponse_MSGID ProWSKGameStatusResponse::MSGID_MIN;
const ProWSKGameStatusResponse_MSGID ProWSKGameStatusResponse::MSGID_MAX;
const int ProWSKGameStatusResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameStatusResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

ProWSKGameStatusResponse::ProWSKGameStatusResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameStatusResponse::InitAsDefaultInstance() {
}

ProWSKGameStatusResponse::ProWSKGameStatusResponse(const ProWSKGameStatusResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameStatusResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameStatusResponse::~ProWSKGameStatusResponse() {
  SharedDtor();
}

void ProWSKGameStatusResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameStatusResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameStatusResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameStatusResponse_descriptor_;
}

const ProWSKGameStatusResponse& ProWSKGameStatusResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameStatusResponse* ProWSKGameStatusResponse::default_instance_ = NULL;

ProWSKGameStatusResponse* ProWSKGameStatusResponse::New() const {
  return new ProWSKGameStatusResponse;
}

void ProWSKGameStatusResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameStatusResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .WSKGameState status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WSKGameState_IsValid(value)) {
            set_status(static_cast< ::WSKGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameStatusResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .WSKGameState status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameStatusResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .WSKGameState status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameStatusResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .WSKGameState status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameStatusResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameStatusResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameStatusResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameStatusResponse::MergeFrom(const ProWSKGameStatusResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameStatusResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameStatusResponse::CopyFrom(const ProWSKGameStatusResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameStatusResponse::IsInitialized() const {

  return true;
}

void ProWSKGameStatusResponse::Swap(ProWSKGameStatusResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameStatusResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameStatusResponse_descriptor_;
  metadata.reflection = ProWSKGameStatusResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameDeskInfoResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDeskInfoResponse_MSGID_descriptor_;
}
bool ProWSKGameDeskInfoResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameDeskInfoResponse_MSGID ProWSKGameDeskInfoResponse::ID;
const ProWSKGameDeskInfoResponse_MSGID ProWSKGameDeskInfoResponse::MSGID_MIN;
const ProWSKGameDeskInfoResponse_MSGID ProWSKGameDeskInfoResponse::MSGID_MAX;
const int ProWSKGameDeskInfoResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameDeskInfoResponse::kCellScoreFieldNumber;
#endif  // !_MSC_VER

ProWSKGameDeskInfoResponse::ProWSKGameDeskInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameDeskInfoResponse::InitAsDefaultInstance() {
}

ProWSKGameDeskInfoResponse::ProWSKGameDeskInfoResponse(const ProWSKGameDeskInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameDeskInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  cellscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameDeskInfoResponse::~ProWSKGameDeskInfoResponse() {
  SharedDtor();
}

void ProWSKGameDeskInfoResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameDeskInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameDeskInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDeskInfoResponse_descriptor_;
}

const ProWSKGameDeskInfoResponse& ProWSKGameDeskInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameDeskInfoResponse* ProWSKGameDeskInfoResponse::default_instance_ = NULL;

ProWSKGameDeskInfoResponse* ProWSKGameDeskInfoResponse::New() const {
  return new ProWSKGameDeskInfoResponse;
}

void ProWSKGameDeskInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cellscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameDeskInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 CellScore = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellscore_)));
          set_has_cellscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameDeskInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameDeskInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 CellScore = 2;
  if (has_cellscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameDeskInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 CellScore = 2;
    if (has_cellscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameDeskInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameDeskInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameDeskInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameDeskInfoResponse::MergeFrom(const ProWSKGameDeskInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cellscore()) {
      set_cellscore(from.cellscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameDeskInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameDeskInfoResponse::CopyFrom(const ProWSKGameDeskInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameDeskInfoResponse::IsInitialized() const {

  return true;
}

void ProWSKGameDeskInfoResponse::Swap(ProWSKGameDeskInfoResponse* other) {
  if (other != this) {
    std::swap(cellscore_, other->cellscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameDeskInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameDeskInfoResponse_descriptor_;
  metadata.reflection = ProWSKGameDeskInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameReadyNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameReadyNotify_MSGID_descriptor_;
}
bool ProWSKGameReadyNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameReadyNotify_MSGID ProWSKGameReadyNotify::ID;
const ProWSKGameReadyNotify_MSGID ProWSKGameReadyNotify::MSGID_MIN;
const ProWSKGameReadyNotify_MSGID ProWSKGameReadyNotify::MSGID_MAX;
const int ProWSKGameReadyNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameReadyNotify::kSeatFieldNumber;
const int ProWSKGameReadyNotify::kTimeFieldNumber;
#endif  // !_MSC_VER

ProWSKGameReadyNotify::ProWSKGameReadyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameReadyNotify::InitAsDefaultInstance() {
}

ProWSKGameReadyNotify::ProWSKGameReadyNotify(const ProWSKGameReadyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameReadyNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameReadyNotify::~ProWSKGameReadyNotify() {
  SharedDtor();
}

void ProWSKGameReadyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameReadyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameReadyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameReadyNotify_descriptor_;
}

const ProWSKGameReadyNotify& ProWSKGameReadyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameReadyNotify* ProWSKGameReadyNotify::default_instance_ = NULL;

ProWSKGameReadyNotify* ProWSKGameReadyNotify::New() const {
  return new ProWSKGameReadyNotify;
}

void ProWSKGameReadyNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameReadyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameReadyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameReadyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameReadyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameReadyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameReadyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameReadyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameReadyNotify::MergeFrom(const ProWSKGameReadyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameReadyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameReadyNotify::CopyFrom(const ProWSKGameReadyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameReadyNotify::IsInitialized() const {

  return true;
}

void ProWSKGameReadyNotify::Swap(ProWSKGameReadyNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameReadyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameReadyNotify_descriptor_;
  metadata.reflection = ProWSKGameReadyNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameReadyRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameReadyRequest_MSGID_descriptor_;
}
bool ProWSKGameReadyRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameReadyRequest_MSGID ProWSKGameReadyRequest::ID;
const ProWSKGameReadyRequest_MSGID ProWSKGameReadyRequest::MSGID_MIN;
const ProWSKGameReadyRequest_MSGID ProWSKGameReadyRequest::MSGID_MAX;
const int ProWSKGameReadyRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameReadyRequest::kSeatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameReadyRequest::ProWSKGameReadyRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameReadyRequest::InitAsDefaultInstance() {
}

ProWSKGameReadyRequest::ProWSKGameReadyRequest(const ProWSKGameReadyRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameReadyRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameReadyRequest::~ProWSKGameReadyRequest() {
  SharedDtor();
}

void ProWSKGameReadyRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameReadyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameReadyRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameReadyRequest_descriptor_;
}

const ProWSKGameReadyRequest& ProWSKGameReadyRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameReadyRequest* ProWSKGameReadyRequest::default_instance_ = NULL;

ProWSKGameReadyRequest* ProWSKGameReadyRequest::New() const {
  return new ProWSKGameReadyRequest;
}

void ProWSKGameReadyRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameReadyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameReadyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameReadyRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameReadyRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameReadyRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameReadyRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameReadyRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameReadyRequest::MergeFrom(const ProWSKGameReadyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameReadyRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameReadyRequest::CopyFrom(const ProWSKGameReadyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameReadyRequest::IsInitialized() const {

  return true;
}

void ProWSKGameReadyRequest::Swap(ProWSKGameReadyRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameReadyRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameReadyRequest_descriptor_;
  metadata.reflection = ProWSKGameReadyRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameReadyResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameReadyResponse_MSGID_descriptor_;
}
bool ProWSKGameReadyResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameReadyResponse_MSGID ProWSKGameReadyResponse::ID;
const ProWSKGameReadyResponse_MSGID ProWSKGameReadyResponse::MSGID_MIN;
const ProWSKGameReadyResponse_MSGID ProWSKGameReadyResponse::MSGID_MAX;
const int ProWSKGameReadyResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameReadyResponse::kSeatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameReadyResponse::ProWSKGameReadyResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameReadyResponse::InitAsDefaultInstance() {
}

ProWSKGameReadyResponse::ProWSKGameReadyResponse(const ProWSKGameReadyResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameReadyResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameReadyResponse::~ProWSKGameReadyResponse() {
  SharedDtor();
}

void ProWSKGameReadyResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameReadyResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameReadyResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameReadyResponse_descriptor_;
}

const ProWSKGameReadyResponse& ProWSKGameReadyResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameReadyResponse* ProWSKGameReadyResponse::default_instance_ = NULL;

ProWSKGameReadyResponse* ProWSKGameReadyResponse::New() const {
  return new ProWSKGameReadyResponse;
}

void ProWSKGameReadyResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameReadyResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameReadyResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameReadyResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameReadyResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameReadyResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameReadyResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameReadyResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameReadyResponse::MergeFrom(const ProWSKGameReadyResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameReadyResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameReadyResponse::CopyFrom(const ProWSKGameReadyResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameReadyResponse::IsInitialized() const {

  return true;
}

void ProWSKGameReadyResponse::Swap(ProWSKGameReadyResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameReadyResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameReadyResponse_descriptor_;
  metadata.reflection = ProWSKGameReadyResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameStart_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameStart_MSGID_descriptor_;
}
bool ProWSKGameStart_MSGID_IsValid(int value) {
  switch(value) {
    case 2205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameStart_MSGID ProWSKGameStart::ID;
const ProWSKGameStart_MSGID ProWSKGameStart::MSGID_MIN;
const ProWSKGameStart_MSGID ProWSKGameStart::MSGID_MAX;
const int ProWSKGameStart::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameStart::kBankerseatFieldNumber;
const int ProWSKGameStart::kGamecountFieldNumber;
const int ProWSKGameStart::kOutCardtimesFieldNumber;
#endif  // !_MSC_VER

ProWSKGameStart::ProWSKGameStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameStart::InitAsDefaultInstance() {
}

ProWSKGameStart::ProWSKGameStart(const ProWSKGameStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameStart::SharedCtor() {
  _cached_size_ = 0;
  bankerseat_ = 0;
  gamecount_ = 0;
  outcardtimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameStart::~ProWSKGameStart() {
  SharedDtor();
}

void ProWSKGameStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameStart_descriptor_;
}

const ProWSKGameStart& ProWSKGameStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameStart* ProWSKGameStart::default_instance_ = NULL;

ProWSKGameStart* ProWSKGameStart::New() const {
  return new ProWSKGameStart;
}

void ProWSKGameStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankerseat_ = 0;
    gamecount_ = 0;
    outcardtimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerseat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankerseat_)));
          set_has_bankerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gamecount;
        break;
      }

      // optional int32 gamecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gamecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gamecount_)));
          set_has_gamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outCardtimes;
        break;
      }

      // optional int32 outCardtimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outCardtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtimes_)));
          set_has_outcardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bankerseat(), output);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gamecount(), output);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerseat = 2;
  if (has_bankerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bankerseat(), target);
  }

  // optional int32 gamecount = 3;
  if (has_gamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gamecount(), target);
  }

  // optional int32 outCardtimes = 4;
  if (has_outcardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerseat = 2;
    if (has_bankerseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankerseat());
    }

    // optional int32 gamecount = 3;
    if (has_gamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gamecount());
    }

    // optional int32 outCardtimes = 4;
    if (has_outcardtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameStart::MergeFrom(const ProWSKGameStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankerseat()) {
      set_bankerseat(from.bankerseat());
    }
    if (from.has_gamecount()) {
      set_gamecount(from.gamecount());
    }
    if (from.has_outcardtimes()) {
      set_outcardtimes(from.outcardtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameStart::CopyFrom(const ProWSKGameStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameStart::IsInitialized() const {

  return true;
}

void ProWSKGameStart::Swap(ProWSKGameStart* other) {
  if (other != this) {
    std::swap(bankerseat_, other->bankerseat_);
    std::swap(gamecount_, other->gamecount_);
    std::swap(outcardtimes_, other->outcardtimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameStart_descriptor_;
  metadata.reflection = ProWSKGameStart_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameDiceNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDiceNotify_MSGID_descriptor_;
}
bool ProWSKGameDiceNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameDiceNotify_MSGID ProWSKGameDiceNotify::ID;
const ProWSKGameDiceNotify_MSGID ProWSKGameDiceNotify::MSGID_MIN;
const ProWSKGameDiceNotify_MSGID ProWSKGameDiceNotify::MSGID_MAX;
const int ProWSKGameDiceNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameDiceNotify::kSeatFieldNumber;
const int ProWSKGameDiceNotify::kTimeFieldNumber;
const int ProWSKGameDiceNotify::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameDiceNotify::ProWSKGameDiceNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameDiceNotify::InitAsDefaultInstance() {
}

ProWSKGameDiceNotify::ProWSKGameDiceNotify(const ProWSKGameDiceNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameDiceNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameDiceNotify::~ProWSKGameDiceNotify() {
  SharedDtor();
}

void ProWSKGameDiceNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameDiceNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameDiceNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDiceNotify_descriptor_;
}

const ProWSKGameDiceNotify& ProWSKGameDiceNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameDiceNotify* ProWSKGameDiceNotify::default_instance_ = NULL;

ProWSKGameDiceNotify* ProWSKGameDiceNotify::New() const {
  return new ProWSKGameDiceNotify;
}

void ProWSKGameDiceNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameDiceNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameDiceNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameDiceNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameDiceNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameDiceNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameDiceNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameDiceNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameDiceNotify::MergeFrom(const ProWSKGameDiceNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameDiceNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameDiceNotify::CopyFrom(const ProWSKGameDiceNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameDiceNotify::IsInitialized() const {

  return true;
}

void ProWSKGameDiceNotify::Swap(ProWSKGameDiceNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameDiceNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameDiceNotify_descriptor_;
  metadata.reflection = ProWSKGameDiceNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameDiceRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDiceRequest_MSGID_descriptor_;
}
bool ProWSKGameDiceRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameDiceRequest_MSGID ProWSKGameDiceRequest::ID;
const ProWSKGameDiceRequest_MSGID ProWSKGameDiceRequest::MSGID_MIN;
const ProWSKGameDiceRequest_MSGID ProWSKGameDiceRequest::MSGID_MAX;
const int ProWSKGameDiceRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameDiceRequest::kSeatFieldNumber;
const int ProWSKGameDiceRequest::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameDiceRequest::ProWSKGameDiceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameDiceRequest::InitAsDefaultInstance() {
}

ProWSKGameDiceRequest::ProWSKGameDiceRequest(const ProWSKGameDiceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameDiceRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameDiceRequest::~ProWSKGameDiceRequest() {
  SharedDtor();
}

void ProWSKGameDiceRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameDiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameDiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDiceRequest_descriptor_;
}

const ProWSKGameDiceRequest& ProWSKGameDiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameDiceRequest* ProWSKGameDiceRequest::default_instance_ = NULL;

ProWSKGameDiceRequest* ProWSKGameDiceRequest::New() const {
  return new ProWSKGameDiceRequest;
}

void ProWSKGameDiceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameDiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameDiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameDiceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 dicecount = 3;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameDiceRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 3;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameDiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameDiceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameDiceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameDiceRequest::MergeFrom(const ProWSKGameDiceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameDiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameDiceRequest::CopyFrom(const ProWSKGameDiceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameDiceRequest::IsInitialized() const {

  return true;
}

void ProWSKGameDiceRequest::Swap(ProWSKGameDiceRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameDiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameDiceRequest_descriptor_;
  metadata.reflection = ProWSKGameDiceRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameDiceResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDiceResult_MSGID_descriptor_;
}
bool ProWSKGameDiceResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameDiceResult_MSGID ProWSKGameDiceResult::ID;
const ProWSKGameDiceResult_MSGID ProWSKGameDiceResult::MSGID_MIN;
const ProWSKGameDiceResult_MSGID ProWSKGameDiceResult::MSGID_MAX;
const int ProWSKGameDiceResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameDiceResult::kSeatFieldNumber;
const int ProWSKGameDiceResult::kResultFieldNumber;
const int ProWSKGameDiceResult::kDicecountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameDiceResult::ProWSKGameDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameDiceResult::InitAsDefaultInstance() {
}

ProWSKGameDiceResult::ProWSKGameDiceResult(const ProWSKGameDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameDiceResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  dicecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameDiceResult::~ProWSKGameDiceResult() {
  SharedDtor();
}

void ProWSKGameDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDiceResult_descriptor_;
}

const ProWSKGameDiceResult& ProWSKGameDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameDiceResult* ProWSKGameDiceResult::default_instance_ = NULL;

ProWSKGameDiceResult* ProWSKGameDiceResult::New() const {
  return new ProWSKGameDiceResult;
}

void ProWSKGameDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    dicecount_ = 0;
  }
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // repeated int32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_result())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_result())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        if (input->ExpectTag(32)) goto parse_dicecount;
        break;
      }

      // optional int32 dicecount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dicecount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dicecount_)));
          set_has_dicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->result(i), output);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dicecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 result = 3;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->result(i), target);
  }

  // optional int32 dicecount = 4;
  if (has_dicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dicecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 dicecount = 4;
    if (has_dicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dicecount());
    }

  }
  // repeated int32 result = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameDiceResult::MergeFrom(const ProWSKGameDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_dicecount()) {
      set_dicecount(from.dicecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameDiceResult::CopyFrom(const ProWSKGameDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameDiceResult::IsInitialized() const {

  return true;
}

void ProWSKGameDiceResult::Swap(ProWSKGameDiceResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    result_.Swap(&other->result_);
    std::swap(dicecount_, other->dicecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameDiceResult_descriptor_;
  metadata.reflection = ProWSKGameDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameSendMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSendMahs_MSGID_descriptor_;
}
bool ProWSKGameSendMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameSendMahs_MSGID ProWSKGameSendMahs::ID;
const ProWSKGameSendMahs_MSGID ProWSKGameSendMahs::MSGID_MIN;
const ProWSKGameSendMahs_MSGID ProWSKGameSendMahs::MSGID_MAX;
const int ProWSKGameSendMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameSendMahs::kSeatFieldNumber;
const int ProWSKGameSendMahs::kMahsFieldNumber;
const int ProWSKGameSendMahs::kMahscountFieldNumber;
const int ProWSKGameSendMahs::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameSendMahs::ProWSKGameSendMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameSendMahs::InitAsDefaultInstance() {
}

ProWSKGameSendMahs::ProWSKGameSendMahs(const ProWSKGameSendMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameSendMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameSendMahs::~ProWSKGameSendMahs() {
  SharedDtor();
}

void ProWSKGameSendMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameSendMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameSendMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSendMahs_descriptor_;
}

const ProWSKGameSendMahs& ProWSKGameSendMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameSendMahs* ProWSKGameSendMahs::default_instance_ = NULL;

ProWSKGameSendMahs* ProWSKGameSendMahs::New() const {
  return new ProWSKGameSendMahs;
}

void ProWSKGameSendMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbleftcount_ = 0;
  }
  mahs_.Clear();
  mahscount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameSendMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_mahscount;
        break;
      }

      // repeated int32 mahscount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_mahscount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahscount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mahscount;
        if (input->ExpectTag(40)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameSendMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->mahscount(i), output);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameSendMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 mahscount = 4;
  for (int i = 0; i < this->mahscount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->mahscount(i), target);
  }

  // optional int32 cbLeftCount = 5;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameSendMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbLeftCount = 5;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 mahscount = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahscount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahscount(i));
    }
    total_size += 1 * this->mahscount_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameSendMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameSendMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameSendMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameSendMahs::MergeFrom(const ProWSKGameSendMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mahscount_.MergeFrom(from.mahscount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameSendMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameSendMahs::CopyFrom(const ProWSKGameSendMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameSendMahs::IsInitialized() const {

  return true;
}

void ProWSKGameSendMahs::Swap(ProWSKGameSendMahs* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    mahscount_.Swap(&other->mahscount_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameSendMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameSendMahs_descriptor_;
  metadata.reflection = ProWSKGameSendMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameKingData_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameKingData_MSGID_descriptor_;
}
bool ProWSKGameKingData_MSGID_IsValid(int value) {
  switch(value) {
    case 2210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameKingData_MSGID ProWSKGameKingData::ID;
const ProWSKGameKingData_MSGID ProWSKGameKingData::MSGID_MIN;
const ProWSKGameKingData_MSGID ProWSKGameKingData::MSGID_MAX;
const int ProWSKGameKingData::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameKingData::kSeatFieldNumber;
const int ProWSKGameKingData::kMahsFieldNumber;
const int ProWSKGameKingData::kDownKingScoreFieldNumber;
const int ProWSKGameKingData::kKingcountFieldNumber;
const int ProWSKGameKingData::kVicekingFieldNumber;
const int ProWSKGameKingData::kNotifyTypeFieldNumber;
const int ProWSKGameKingData::kKingTypeFieldNumber;
const int ProWSKGameKingData::kCbChongGuangFieldNumber;
const int ProWSKGameKingData::kCbBaWangKingFieldNumber;
#endif  // !_MSC_VER

ProWSKGameKingData::ProWSKGameKingData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameKingData::InitAsDefaultInstance() {
}

ProWSKGameKingData::ProWSKGameKingData(const ProWSKGameKingData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameKingData::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  notify_type_ = 1;
  king_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameKingData::~ProWSKGameKingData() {
  SharedDtor();
}

void ProWSKGameKingData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameKingData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameKingData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameKingData_descriptor_;
}

const ProWSKGameKingData& ProWSKGameKingData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameKingData* ProWSKGameKingData::default_instance_ = NULL;

ProWSKGameKingData* ProWSKGameKingData::New() const {
  return new ProWSKGameKingData;
}

void ProWSKGameKingData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    notify_type_ = 1;
    king_type_ = 1;
  }
  mahs_.Clear();
  downkingscore_.Clear();
  kingcount_.Clear();
  viceking_.Clear();
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameKingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        break;
      }

      // repeated int32 mahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mahs;
        if (input->ExpectTag(32)) goto parse_downKingScore;
        break;
      }

      // repeated int32 downKingScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_downKingScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_downkingscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_downkingscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_downKingScore;
        if (input->ExpectTag(40)) goto parse_kingcount;
        break;
      }

      // repeated int32 kingcount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kingcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_kingcount())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_kingcount())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kingcount;
        if (input->ExpectTag(48)) goto parse_viceking;
        break;
      }

      // repeated int32 viceking = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viceking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_viceking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viceking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viceking;
        if (input->ExpectTag(56)) goto parse_notify_type;
        break;
      }

      // optional .WSKSEND_TYPE notify_type = 7 [default = WSK_NORMAL_SEND];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WSKSEND_TYPE_IsValid(value)) {
            set_notify_type(static_cast< ::WSKSEND_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_type;
        break;
      }

      // optional .WSKKING_TYPE king_type = 8 [default = WSK_KING_UP];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WSKKING_TYPE_IsValid(value)) {
            set_king_type(static_cast< ::WSKKING_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cbChongGuang;
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cbBaWangKing;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameKingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->mahs(i), output);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->downkingscore(i), output);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->kingcount(i), output);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->viceking(i), output);
  }

  // optional .WSKSEND_TYPE notify_type = 7 [default = WSK_NORMAL_SEND];
  if (has_notify_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->notify_type(), output);
  }

  // optional .WSKKING_TYPE king_type = 8 [default = WSK_KING_UP];
  if (has_king_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->king_type(), output);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->cbbawangking(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameKingData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 mahs = 3;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->mahs(i), target);
  }

  // repeated int32 downKingScore = 4;
  for (int i = 0; i < this->downkingscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->downkingscore(i), target);
  }

  // repeated int32 kingcount = 5;
  for (int i = 0; i < this->kingcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->kingcount(i), target);
  }

  // repeated int32 viceking = 6;
  for (int i = 0; i < this->viceking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->viceking(i), target);
  }

  // optional .WSKSEND_TYPE notify_type = 7 [default = WSK_NORMAL_SEND];
  if (has_notify_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->notify_type(), target);
  }

  // optional .WSKKING_TYPE king_type = 8 [default = WSK_KING_UP];
  if (has_king_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->king_type(), target);
  }

  // repeated int32 cbChongGuang = 9;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 10;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->cbbawangking(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameKingData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional .WSKSEND_TYPE notify_type = 7 [default = WSK_NORMAL_SEND];
    if (has_notify_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->notify_type());
    }

    // optional .WSKKING_TYPE king_type = 8 [default = WSK_KING_UP];
    if (has_king_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->king_type());
    }

  }
  // repeated int32 mahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  // repeated int32 downKingScore = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->downkingscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->downkingscore(i));
    }
    total_size += 1 * this->downkingscore_size() + data_size;
  }

  // repeated int32 kingcount = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->kingcount_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->kingcount(i));
    }
    total_size += 1 * this->kingcount_size() + data_size;
  }

  // repeated int32 viceking = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->viceking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viceking(i));
    }
    total_size += 1 * this->viceking_size() + data_size;
  }

  // repeated int32 cbChongGuang = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameKingData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameKingData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameKingData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameKingData::MergeFrom(const ProWSKGameKingData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  downkingscore_.MergeFrom(from.downkingscore_);
  kingcount_.MergeFrom(from.kingcount_);
  viceking_.MergeFrom(from.viceking_);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_notify_type()) {
      set_notify_type(from.notify_type());
    }
    if (from.has_king_type()) {
      set_king_type(from.king_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameKingData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameKingData::CopyFrom(const ProWSKGameKingData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameKingData::IsInitialized() const {

  return true;
}

void ProWSKGameKingData::Swap(ProWSKGameKingData* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    mahs_.Swap(&other->mahs_);
    downkingscore_.Swap(&other->downkingscore_);
    kingcount_.Swap(&other->kingcount_);
    viceking_.Swap(&other->viceking_);
    std::swap(notify_type_, other->notify_type_);
    std::swap(king_type_, other->king_type_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameKingData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameKingData_descriptor_;
  metadata.reflection = ProWSKGameKingData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameOutMahsResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOutMahsResponse_MSGID_descriptor_;
}
bool ProWSKGameOutMahsResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameOutMahsResponse_MSGID ProWSKGameOutMahsResponse::ID;
const ProWSKGameOutMahsResponse_MSGID ProWSKGameOutMahsResponse::MSGID_MIN;
const ProWSKGameOutMahsResponse_MSGID ProWSKGameOutMahsResponse::MSGID_MAX;
const int ProWSKGameOutMahsResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameOutMahsResponse::kSeatFieldNumber;
const int ProWSKGameOutMahsResponse::kOutMahsFieldNumber;
const int ProWSKGameOutMahsResponse::kHandmahsFieldNumber;
const int ProWSKGameOutMahsResponse::kCardCountFieldNumber;
const int ProWSKGameOutMahsResponse::kCardTypeFieldNumber;
const int ProWSKGameOutMahsResponse::kCardtypeflgFieldNumber;
#endif  // !_MSC_VER

ProWSKGameOutMahsResponse::ProWSKGameOutMahsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameOutMahsResponse::InitAsDefaultInstance() {
}

ProWSKGameOutMahsResponse::ProWSKGameOutMahsResponse(const ProWSKGameOutMahsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameOutMahsResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cardcount_ = 0;
  cardtype_ = 0;
  cardtypeflg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameOutMahsResponse::~ProWSKGameOutMahsResponse() {
  SharedDtor();
}

void ProWSKGameOutMahsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameOutMahsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameOutMahsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOutMahsResponse_descriptor_;
}

const ProWSKGameOutMahsResponse& ProWSKGameOutMahsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameOutMahsResponse* ProWSKGameOutMahsResponse::default_instance_ = NULL;

ProWSKGameOutMahsResponse* ProWSKGameOutMahsResponse::New() const {
  return new ProWSKGameOutMahsResponse;
}

void ProWSKGameOutMahsResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cardcount_ = 0;
    cardtype_ = 0;
    cardtypeflg_ = 0;
  }
  outmahs_.Clear();
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameOutMahsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectTag(32)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_handmahs;
        if (input->ExpectTag(40)) goto parse_cardCount;
        break;
      }

      // optional int32 cardCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardcount_)));
          set_has_cardcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cardType;
        break;
      }

      // optional int32 cardType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtype_)));
          set_has_cardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cardtypeflg;
        break;
      }

      // optional int32 cardtypeflg = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardtypeflg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardtypeflg_)));
          set_has_cardtypeflg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameOutMahsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->handmahs(i), output);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cardcount(), output);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cardtype(), output);
  }

  // optional int32 cardtypeflg = 7;
  if (has_cardtypeflg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cardtypeflg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameOutMahsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  // repeated int32 handmahs = 4;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->handmahs(i), target);
  }

  // optional int32 cardCount = 5;
  if (has_cardcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cardcount(), target);
  }

  // optional int32 cardType = 6;
  if (has_cardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cardtype(), target);
  }

  // optional int32 cardtypeflg = 7;
  if (has_cardtypeflg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cardtypeflg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameOutMahsResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cardCount = 5;
    if (has_cardcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardcount());
    }

    // optional int32 cardType = 6;
    if (has_cardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtype());
    }

    // optional int32 cardtypeflg = 7;
    if (has_cardtypeflg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardtypeflg());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  // repeated int32 handmahs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameOutMahsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameOutMahsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameOutMahsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameOutMahsResponse::MergeFrom(const ProWSKGameOutMahsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cardcount()) {
      set_cardcount(from.cardcount());
    }
    if (from.has_cardtype()) {
      set_cardtype(from.cardtype());
    }
    if (from.has_cardtypeflg()) {
      set_cardtypeflg(from.cardtypeflg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameOutMahsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameOutMahsResponse::CopyFrom(const ProWSKGameOutMahsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameOutMahsResponse::IsInitialized() const {

  return true;
}

void ProWSKGameOutMahsResponse::Swap(ProWSKGameOutMahsResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(cardcount_, other->cardcount_);
    std::swap(cardtype_, other->cardtype_);
    std::swap(cardtypeflg_, other->cardtypeflg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameOutMahsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameOutMahsResponse_descriptor_;
  metadata.reflection = ProWSKGameOutMahsResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameTimerPower_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameTimerPower_MSGID_descriptor_;
}
bool ProWSKGameTimerPower_MSGID_IsValid(int value) {
  switch(value) {
    case 2212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameTimerPower_MSGID ProWSKGameTimerPower::ID;
const ProWSKGameTimerPower_MSGID ProWSKGameTimerPower::MSGID_MIN;
const ProWSKGameTimerPower_MSGID ProWSKGameTimerPower::MSGID_MAX;
const int ProWSKGameTimerPower::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameTimerPower::kSeatFieldNumber;
const int ProWSKGameTimerPower::kTimeFieldNumber;
const int ProWSKGameTimerPower::kOutcardTimeFieldNumber;
#endif  // !_MSC_VER

ProWSKGameTimerPower::ProWSKGameTimerPower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameTimerPower::InitAsDefaultInstance() {
}

ProWSKGameTimerPower::ProWSKGameTimerPower(const ProWSKGameTimerPower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameTimerPower::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  time_ = 0;
  outcardtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameTimerPower::~ProWSKGameTimerPower() {
  SharedDtor();
}

void ProWSKGameTimerPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameTimerPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameTimerPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameTimerPower_descriptor_;
}

const ProWSKGameTimerPower& ProWSKGameTimerPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameTimerPower* ProWSKGameTimerPower::default_instance_ = NULL;

ProWSKGameTimerPower* ProWSKGameTimerPower::New() const {
  return new ProWSKGameTimerPower;
}

void ProWSKGameTimerPower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    time_ = 0;
    outcardtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameTimerPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_outcardTime;
        break;
      }

      // optional int32 outcardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outcardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &outcardtime_)));
          set_has_outcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameTimerPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->outcardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameTimerPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional int32 outcardTime = 4;
  if (has_outcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->outcardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameTimerPower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 outcardTime = 4;
    if (has_outcardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->outcardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameTimerPower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameTimerPower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameTimerPower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameTimerPower::MergeFrom(const ProWSKGameTimerPower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_outcardtime()) {
      set_outcardtime(from.outcardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameTimerPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameTimerPower::CopyFrom(const ProWSKGameTimerPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameTimerPower::IsInitialized() const {

  return true;
}

void ProWSKGameTimerPower::Swap(ProWSKGameTimerPower* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(time_, other->time_);
    std::swap(outcardtime_, other->outcardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameTimerPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameTimerPower_descriptor_;
  metadata.reflection = ProWSKGameTimerPower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameOperateNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOperateNotify_MSGID_descriptor_;
}
bool ProWSKGameOperateNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameOperateNotify_MSGID ProWSKGameOperateNotify::ID;
const ProWSKGameOperateNotify_MSGID ProWSKGameOperateNotify::MSGID_MIN;
const ProWSKGameOperateNotify_MSGID ProWSKGameOperateNotify::MSGID_MAX;
const int ProWSKGameOperateNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameOperateNotify::kResumeSeatFieldNumber;
const int ProWSKGameOperateNotify::kActionMaskFieldNumber;
const int ProWSKGameOperateNotify::kActionCardFieldNumber;
const int ProWSKGameOperateNotify::kTimeFieldNumber;
const int ProWSKGameOperateNotify::kOperateseatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameOperateNotify::ProWSKGameOperateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameOperateNotify::InitAsDefaultInstance() {
}

ProWSKGameOperateNotify::ProWSKGameOperateNotify(const ProWSKGameOperateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameOperateNotify::SharedCtor() {
  _cached_size_ = 0;
  resumeseat_ = 0;
  actionmask_ = 0;
  actioncard_ = 0;
  time_ = 0;
  operateseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameOperateNotify::~ProWSKGameOperateNotify() {
  SharedDtor();
}

void ProWSKGameOperateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameOperateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameOperateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOperateNotify_descriptor_;
}

const ProWSKGameOperateNotify& ProWSKGameOperateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameOperateNotify* ProWSKGameOperateNotify::default_instance_ = NULL;

ProWSKGameOperateNotify* ProWSKGameOperateNotify::New() const {
  return new ProWSKGameOperateNotify;
}

void ProWSKGameOperateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resumeseat_ = 0;
    actionmask_ = 0;
    actioncard_ = 0;
    time_ = 0;
    operateseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameOperateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resumeSeat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resumeseat_)));
          set_has_resumeseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActionMask;
        break;
      }

      // optional int32 ActionMask = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actionmask_)));
          set_has_actionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ActionCard;
        break;
      }

      // optional int32 ActionCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActionCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actioncard_)));
          set_has_actioncard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_operateseat;
        break;
      }

      // optional int32 operateseat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operateseat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operateseat_)));
          set_has_operateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameOperateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->resumeseat(), output);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actionmask(), output);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actioncard(), output);
  }

  // optional int32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->time(), output);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->operateseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameOperateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resumeSeat = 2;
  if (has_resumeseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->resumeseat(), target);
  }

  // optional int32 ActionMask = 3;
  if (has_actionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actionmask(), target);
  }

  // optional int32 ActionCard = 4;
  if (has_actioncard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->actioncard(), target);
  }

  // optional int32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->time(), target);
  }

  // optional int32 operateseat = 6;
  if (has_operateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->operateseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameOperateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resumeSeat = 2;
    if (has_resumeseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resumeseat());
    }

    // optional int32 ActionMask = 3;
    if (has_actionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actionmask());
    }

    // optional int32 ActionCard = 4;
    if (has_actioncard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actioncard());
    }

    // optional int32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 operateseat = 6;
    if (has_operateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->operateseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameOperateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameOperateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameOperateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameOperateNotify::MergeFrom(const ProWSKGameOperateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resumeseat()) {
      set_resumeseat(from.resumeseat());
    }
    if (from.has_actionmask()) {
      set_actionmask(from.actionmask());
    }
    if (from.has_actioncard()) {
      set_actioncard(from.actioncard());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_operateseat()) {
      set_operateseat(from.operateseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameOperateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameOperateNotify::CopyFrom(const ProWSKGameOperateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameOperateNotify::IsInitialized() const {

  return true;
}

void ProWSKGameOperateNotify::Swap(ProWSKGameOperateNotify* other) {
  if (other != this) {
    std::swap(resumeseat_, other->resumeseat_);
    std::swap(actionmask_, other->actionmask_);
    std::swap(actioncard_, other->actioncard_);
    std::swap(time_, other->time_);
    std::swap(operateseat_, other->operateseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameOperateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameOperateNotify_descriptor_;
  metadata.reflection = ProWSKGameOperateNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameOperateResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOperateResult_MSGID_descriptor_;
}
bool ProWSKGameOperateResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameOperateResult_MSGID ProWSKGameOperateResult::ID;
const ProWSKGameOperateResult_MSGID ProWSKGameOperateResult::MSGID_MIN;
const ProWSKGameOperateResult_MSGID ProWSKGameOperateResult::MSGID_MAX;
const int ProWSKGameOperateResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameOperateResult::kWOperateUserFieldNumber;
const int ProWSKGameOperateResult::kWProvideUserFieldNumber;
const int ProWSKGameOperateResult::kWOperateCodeFieldNumber;
const int ProWSKGameOperateResult::kCbOperateCardFieldNumber;
const int ProWSKGameOperateResult::kHandmahsFieldNumber;
const int ProWSKGameOperateResult::kHandcountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameOperateResult::ProWSKGameOperateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameOperateResult::InitAsDefaultInstance() {
}

ProWSKGameOperateResult::ProWSKGameOperateResult(const ProWSKGameOperateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameOperateResult::SharedCtor() {
  _cached_size_ = 0;
  woperateuser_ = 0;
  wprovideuser_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  handcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameOperateResult::~ProWSKGameOperateResult() {
  SharedDtor();
}

void ProWSKGameOperateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameOperateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameOperateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOperateResult_descriptor_;
}

const ProWSKGameOperateResult& ProWSKGameOperateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameOperateResult* ProWSKGameOperateResult::default_instance_ = NULL;

ProWSKGameOperateResult* ProWSKGameOperateResult::New() const {
  return new ProWSKGameOperateResult;
}

void ProWSKGameOperateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    woperateuser_ = 0;
    wprovideuser_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
    handcount_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameOperateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wOperateUser = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperateuser_)));
          set_has_woperateuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handmahs;
        if (input->ExpectTag(56)) goto parse_handcount;
        break;
      }

      // optional int32 handcount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handcount_)));
          set_has_handcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameOperateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->woperateuser(), output);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wprovideuser(), output);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cboperatecard(), output);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->handmahs(i), output);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->handcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameOperateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wOperateUser = 2;
  if (has_woperateuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->woperateuser(), target);
  }

  // optional int32 wProvideUser = 3;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wprovideuser(), target);
  }

  // optional int32 wOperateCode = 4;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 5;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cboperatecard(), target);
  }

  // repeated int32 handmahs = 6;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->handmahs(i), target);
  }

  // optional int32 handcount = 7;
  if (has_handcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->handcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameOperateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wOperateUser = 2;
    if (has_woperateuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperateuser());
    }

    // optional int32 wProvideUser = 3;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 wOperateCode = 4;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 5;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

    // optional int32 handcount = 7;
    if (has_handcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handcount());
    }

  }
  // repeated int32 handmahs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameOperateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameOperateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameOperateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameOperateResult::MergeFrom(const ProWSKGameOperateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_woperateuser()) {
      set_woperateuser(from.woperateuser());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
    if (from.has_handcount()) {
      set_handcount(from.handcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameOperateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameOperateResult::CopyFrom(const ProWSKGameOperateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameOperateResult::IsInitialized() const {

  return true;
}

void ProWSKGameOperateResult::Swap(ProWSKGameOperateResult* other) {
  if (other != this) {
    std::swap(woperateuser_, other->woperateuser_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(handcount_, other->handcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameOperateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameOperateResult_descriptor_;
  metadata.reflection = ProWSKGameOperateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameOperateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOperateRequest_MSGID_descriptor_;
}
bool ProWSKGameOperateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameOperateRequest_MSGID ProWSKGameOperateRequest::ID;
const ProWSKGameOperateRequest_MSGID ProWSKGameOperateRequest::MSGID_MIN;
const ProWSKGameOperateRequest_MSGID ProWSKGameOperateRequest::MSGID_MAX;
const int ProWSKGameOperateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameOperateRequest::kSeatFieldNumber;
const int ProWSKGameOperateRequest::kWOperateCodeFieldNumber;
const int ProWSKGameOperateRequest::kCbOperateCardFieldNumber;
#endif  // !_MSC_VER

ProWSKGameOperateRequest::ProWSKGameOperateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameOperateRequest::InitAsDefaultInstance() {
}

ProWSKGameOperateRequest::ProWSKGameOperateRequest(const ProWSKGameOperateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameOperateRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  woperatecode_ = 0;
  cboperatecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameOperateRequest::~ProWSKGameOperateRequest() {
  SharedDtor();
}

void ProWSKGameOperateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameOperateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameOperateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOperateRequest_descriptor_;
}

const ProWSKGameOperateRequest& ProWSKGameOperateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameOperateRequest* ProWSKGameOperateRequest::default_instance_ = NULL;

ProWSKGameOperateRequest* ProWSKGameOperateRequest::New() const {
  return new ProWSKGameOperateRequest;
}

void ProWSKGameOperateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    woperatecode_ = 0;
    cboperatecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameOperateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wOperateCode;
        break;
      }

      // optional int32 wOperateCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wOperateCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &woperatecode_)));
          set_has_woperatecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbOperateCard;
        break;
      }

      // optional int32 cbOperateCard = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbOperateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cboperatecard_)));
          set_has_cboperatecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameOperateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->woperatecode(), output);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cboperatecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameOperateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 wOperateCode = 3;
  if (has_woperatecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->woperatecode(), target);
  }

  // optional int32 cbOperateCard = 4;
  if (has_cboperatecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cboperatecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameOperateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 wOperateCode = 3;
    if (has_woperatecode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->woperatecode());
    }

    // optional int32 cbOperateCard = 4;
    if (has_cboperatecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cboperatecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameOperateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameOperateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameOperateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameOperateRequest::MergeFrom(const ProWSKGameOperateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_woperatecode()) {
      set_woperatecode(from.woperatecode());
    }
    if (from.has_cboperatecard()) {
      set_cboperatecard(from.cboperatecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameOperateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameOperateRequest::CopyFrom(const ProWSKGameOperateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameOperateRequest::IsInitialized() const {

  return true;
}

void ProWSKGameOperateRequest::Swap(ProWSKGameOperateRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(woperatecode_, other->woperatecode_);
    std::swap(cboperatecard_, other->cboperatecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameOperateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameOperateRequest_descriptor_;
  metadata.reflection = ProWSKGameOperateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameTrust_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameTrust_MSGID_descriptor_;
}
bool ProWSKGameTrust_MSGID_IsValid(int value) {
  switch(value) {
    case 2216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameTrust_MSGID ProWSKGameTrust::ID;
const ProWSKGameTrust_MSGID ProWSKGameTrust::MSGID_MIN;
const ProWSKGameTrust_MSGID ProWSKGameTrust::MSGID_MAX;
const int ProWSKGameTrust::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameTrust::kSeatFieldNumber;
const int ProWSKGameTrust::kIsTrustFieldNumber;
#endif  // !_MSC_VER

ProWSKGameTrust::ProWSKGameTrust()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameTrust::InitAsDefaultInstance() {
}

ProWSKGameTrust::ProWSKGameTrust(const ProWSKGameTrust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameTrust::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  istrust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameTrust::~ProWSKGameTrust() {
  SharedDtor();
}

void ProWSKGameTrust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameTrust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameTrust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameTrust_descriptor_;
}

const ProWSKGameTrust& ProWSKGameTrust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameTrust* ProWSKGameTrust::default_instance_ = NULL;

ProWSKGameTrust* ProWSKGameTrust::New() const {
  return new ProWSKGameTrust;
}

void ProWSKGameTrust::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    istrust_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameTrust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isTrust;
        break;
      }

      // optional bool isTrust = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTrust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istrust_)));
          set_has_istrust();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameTrust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->istrust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameTrust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional bool isTrust = 3;
  if (has_istrust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->istrust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameTrust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool isTrust = 3;
    if (has_istrust()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameTrust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameTrust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameTrust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameTrust::MergeFrom(const ProWSKGameTrust& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_istrust()) {
      set_istrust(from.istrust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameTrust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameTrust::CopyFrom(const ProWSKGameTrust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameTrust::IsInitialized() const {

  return true;
}

void ProWSKGameTrust::Swap(ProWSKGameTrust* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(istrust_, other->istrust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameTrust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameTrust_descriptor_;
  metadata.reflection = ProWSKGameTrust_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameOutMahRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOutMahRequest_MSGID_descriptor_;
}
bool ProWSKGameOutMahRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameOutMahRequest_MSGID ProWSKGameOutMahRequest::ID;
const ProWSKGameOutMahRequest_MSGID ProWSKGameOutMahRequest::MSGID_MIN;
const ProWSKGameOutMahRequest_MSGID ProWSKGameOutMahRequest::MSGID_MAX;
const int ProWSKGameOutMahRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameOutMahRequest::kSeatFieldNumber;
const int ProWSKGameOutMahRequest::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProWSKGameOutMahRequest::ProWSKGameOutMahRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameOutMahRequest::InitAsDefaultInstance() {
}

ProWSKGameOutMahRequest::ProWSKGameOutMahRequest(const ProWSKGameOutMahRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameOutMahRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameOutMahRequest::~ProWSKGameOutMahRequest() {
  SharedDtor();
}

void ProWSKGameOutMahRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameOutMahRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameOutMahRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameOutMahRequest_descriptor_;
}

const ProWSKGameOutMahRequest& ProWSKGameOutMahRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameOutMahRequest* ProWSKGameOutMahRequest::default_instance_ = NULL;

ProWSKGameOutMahRequest* ProWSKGameOutMahRequest::New() const {
  return new ProWSKGameOutMahRequest;
}

void ProWSKGameOutMahRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameOutMahRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameOutMahRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameOutMahRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 outMahs = 3;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameOutMahRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 outMahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameOutMahRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameOutMahRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameOutMahRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameOutMahRequest::MergeFrom(const ProWSKGameOutMahRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameOutMahRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameOutMahRequest::CopyFrom(const ProWSKGameOutMahRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameOutMahRequest::IsInitialized() const {

  return true;
}

void ProWSKGameOutMahRequest::Swap(ProWSKGameOutMahRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameOutMahRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameOutMahRequest_descriptor_;
  metadata.reflection = ProWSKGameOutMahRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameCatchCard_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameCatchCard_MSGID_descriptor_;
}
bool ProWSKGameCatchCard_MSGID_IsValid(int value) {
  switch(value) {
    case 2218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameCatchCard_MSGID ProWSKGameCatchCard::ID;
const ProWSKGameCatchCard_MSGID ProWSKGameCatchCard::MSGID_MIN;
const ProWSKGameCatchCard_MSGID ProWSKGameCatchCard::MSGID_MAX;
const int ProWSKGameCatchCard::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameCatchCard::kSeatFieldNumber;
const int ProWSKGameCatchCard::kCbCardDataFieldNumber;
const int ProWSKGameCatchCard::kWActionMaskFieldNumber;
const int ProWSKGameCatchCard::kCbIsNotGangFieldNumber;
const int ProWSKGameCatchCard::kCbLeftCountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameCatchCard::ProWSKGameCatchCard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameCatchCard::InitAsDefaultInstance() {
}

ProWSKGameCatchCard::ProWSKGameCatchCard(const ProWSKGameCatchCard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameCatchCard::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  cbcarddata_ = 0;
  wactionmask_ = 0;
  cbisnotgang_ = false;
  cbleftcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameCatchCard::~ProWSKGameCatchCard() {
  SharedDtor();
}

void ProWSKGameCatchCard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameCatchCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameCatchCard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameCatchCard_descriptor_;
}

const ProWSKGameCatchCard& ProWSKGameCatchCard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameCatchCard* ProWSKGameCatchCard::default_instance_ = NULL;

ProWSKGameCatchCard* ProWSKGameCatchCard::New() const {
  return new ProWSKGameCatchCard;
}

void ProWSKGameCatchCard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    cbcarddata_ = 0;
    wactionmask_ = 0;
    cbisnotgang_ = false;
    cbleftcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameCatchCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbCardData;
        break;
      }

      // optional int32 cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbcarddata_)));
          set_has_cbcarddata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wActionMask;
        break;
      }

      // optional int32 wActionMask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wActionMask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wactionmask_)));
          set_has_wactionmask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cbIsNotGang;
        break;
      }

      // optional bool cbIsNotGang = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbIsNotGang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cbisnotgang_)));
          set_has_cbisnotgang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbLeftCount;
        break;
      }

      // optional int32 cbLeftCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbLeftCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbleftcount_)));
          set_has_cbleftcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameCatchCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cbcarddata(), output);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wactionmask(), output);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->cbisnotgang(), output);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbleftcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameCatchCard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // optional int32 cbCardData = 3;
  if (has_cbcarddata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cbcarddata(), target);
  }

  // optional int32 wActionMask = 4;
  if (has_wactionmask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wactionmask(), target);
  }

  // optional bool cbIsNotGang = 5;
  if (has_cbisnotgang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->cbisnotgang(), target);
  }

  // optional int32 cbLeftCount = 6;
  if (has_cbleftcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbleftcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameCatchCard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 cbCardData = 3;
    if (has_cbcarddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbcarddata());
    }

    // optional int32 wActionMask = 4;
    if (has_wactionmask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wactionmask());
    }

    // optional bool cbIsNotGang = 5;
    if (has_cbisnotgang()) {
      total_size += 1 + 1;
    }

    // optional int32 cbLeftCount = 6;
    if (has_cbleftcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbleftcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameCatchCard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameCatchCard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameCatchCard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameCatchCard::MergeFrom(const ProWSKGameCatchCard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_cbcarddata()) {
      set_cbcarddata(from.cbcarddata());
    }
    if (from.has_wactionmask()) {
      set_wactionmask(from.wactionmask());
    }
    if (from.has_cbisnotgang()) {
      set_cbisnotgang(from.cbisnotgang());
    }
    if (from.has_cbleftcount()) {
      set_cbleftcount(from.cbleftcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameCatchCard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameCatchCard::CopyFrom(const ProWSKGameCatchCard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameCatchCard::IsInitialized() const {

  return true;
}

void ProWSKGameCatchCard::Swap(ProWSKGameCatchCard* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(cbcarddata_, other->cbcarddata_);
    std::swap(wactionmask_, other->wactionmask_);
    std::swap(cbisnotgang_, other->cbisnotgang_);
    std::swap(cbleftcount_, other->cbleftcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameCatchCard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameCatchCard_descriptor_;
  metadata.reflection = ProWSKGameCatchCard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSKMahList::kMahsFieldNumber;
#endif  // !_MSC_VER

WSKMahList::WSKMahList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSKMahList::InitAsDefaultInstance() {
}

WSKMahList::WSKMahList(const WSKMahList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSKMahList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSKMahList::~WSKMahList() {
  SharedDtor();
}

void WSKMahList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSKMahList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSKMahList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKMahList_descriptor_;
}

const WSKMahList& WSKMahList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

WSKMahList* WSKMahList::default_instance_ = NULL;

WSKMahList* WSKMahList::New() const {
  return new WSKMahList;
}

void WSKMahList::Clear() {
  mahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSKMahList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 Mahs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_mahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_Mahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSKMahList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->mahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSKMahList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 Mahs = 1;
  for (int i = 0; i < this->mahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->mahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSKMahList::ByteSize() const {
  int total_size = 0;

  // repeated int32 Mahs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mahs(i));
    }
    total_size += 1 * this->mahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSKMahList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSKMahList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSKMahList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSKMahList::MergeFrom(const WSKMahList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mahs_.MergeFrom(from.mahs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSKMahList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSKMahList::CopyFrom(const WSKMahList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSKMahList::IsInitialized() const {

  return true;
}

void WSKMahList::Swap(WSKMahList* other) {
  if (other != this) {
    mahs_.Swap(&other->mahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSKMahList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSKMahList_descriptor_;
  metadata.reflection = WSKMahList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSKScoreList::kRoundScoreFieldNumber;
#endif  // !_MSC_VER

WSKScoreList::WSKScoreList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSKScoreList::InitAsDefaultInstance() {
}

WSKScoreList::WSKScoreList(const WSKScoreList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSKScoreList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSKScoreList::~WSKScoreList() {
  SharedDtor();
}

void WSKScoreList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSKScoreList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSKScoreList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKScoreList_descriptor_;
}

const WSKScoreList& WSKScoreList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

WSKScoreList* WSKScoreList::default_instance_ = NULL;

WSKScoreList* WSKScoreList::New() const {
  return new WSKScoreList;
}

void WSKScoreList::Clear() {
  roundscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSKScoreList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 roundScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roundScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_roundscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_roundscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_roundScore;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSKScoreList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->roundscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSKScoreList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 roundScore = 1;
  for (int i = 0; i < this->roundscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->roundscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSKScoreList::ByteSize() const {
  int total_size = 0;

  // repeated int32 roundScore = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->roundscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->roundscore(i));
    }
    total_size += 1 * this->roundscore_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSKScoreList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSKScoreList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSKScoreList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSKScoreList::MergeFrom(const WSKScoreList& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundscore_.MergeFrom(from.roundscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSKScoreList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSKScoreList::CopyFrom(const WSKScoreList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSKScoreList::IsInitialized() const {

  return true;
}

void WSKScoreList::Swap(WSKScoreList* other) {
  if (other != this) {
    roundscore_.Swap(&other->roundscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSKScoreList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSKScoreList_descriptor_;
  metadata.reflection = WSKScoreList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSKAwardList::kSeatFieldNumber;
const int WSKAwardList::kCardsDataFieldNumber;
const int WSKAwardList::kAwardScoreFieldNumber;
#endif  // !_MSC_VER

WSKAwardList::WSKAwardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSKAwardList::InitAsDefaultInstance() {
}

WSKAwardList::WSKAwardList(const WSKAwardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSKAwardList::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  awardscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSKAwardList::~WSKAwardList() {
  SharedDtor();
}

void WSKAwardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSKAwardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSKAwardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKAwardList_descriptor_;
}

const WSKAwardList& WSKAwardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

WSKAwardList* WSKAwardList::default_instance_ = NULL;

WSKAwardList* WSKAwardList::New() const {
  return new WSKAwardList;
}

void WSKAwardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    awardscore_ = 0;
  }
  cardsdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSKAwardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        break;
      }

      // repeated int32 CardsData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardsData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_cardsdata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cardsdata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CardsData;
        if (input->ExpectTag(24)) goto parse_awardScore;
        break;
      }

      // optional int32 awardScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardscore_)));
          set_has_awardscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSKAwardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->cardsdata(i), output);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSKAwardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // repeated int32 CardsData = 2;
  for (int i = 0; i < this->cardsdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->cardsdata(i), target);
  }

  // optional int32 awardScore = 3;
  if (has_awardscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSKAwardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional int32 awardScore = 3;
    if (has_awardscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardscore());
    }

  }
  // repeated int32 CardsData = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardsdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cardsdata(i));
    }
    total_size += 1 * this->cardsdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSKAwardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSKAwardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSKAwardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSKAwardList::MergeFrom(const WSKAwardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardsdata_.MergeFrom(from.cardsdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_awardscore()) {
      set_awardscore(from.awardscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSKAwardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSKAwardList::CopyFrom(const WSKAwardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSKAwardList::IsInitialized() const {

  return true;
}

void WSKAwardList::Swap(WSKAwardList* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    cardsdata_.Swap(&other->cardsdata_);
    std::swap(awardscore_, other->awardscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSKAwardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSKAwardList_descriptor_;
  metadata.reflection = WSKAwardList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameEnd_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameEnd_MSGID_descriptor_;
}
bool ProWSKGameEnd_MSGID_IsValid(int value) {
  switch(value) {
    case 2219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameEnd_MSGID ProWSKGameEnd::ID;
const ProWSKGameEnd_MSGID ProWSKGameEnd::MSGID_MIN;
const ProWSKGameEnd_MSGID ProWSKGameEnd::MSGID_MAX;
const int ProWSKGameEnd::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameEnd::kLGameTaxFieldNumber;
const int ProWSKGameEnd::kCbChongGuangFieldNumber;
const int ProWSKGameEnd::kCbBaWangKingFieldNumber;
const int ProWSKGameEnd::kWProvideUserFieldNumber;
const int ProWSKGameEnd::kCbChiHuCardFieldNumber;
const int ProWSKGameEnd::kDwChiHuKindFieldNumber;
const int ProWSKGameEnd::kDwChiHuRightFieldNumber;
const int ProWSKGameEnd::kLTotaslGameScoreFieldNumber;
const int ProWSKGameEnd::kLCurrentGameScoreFieldNumber;
const int ProWSKGameEnd::kLCurrentPointScoreFieldNumber;
const int ProWSKGameEnd::kLAttachScoreFieldNumber;
const int ProWSKGameEnd::kCbHandCardDataFieldNumber;
const int ProWSKGameEnd::kCbAwardCardDataFieldNumber;
const int ProWSKGameEnd::kLOnlyWinScoreFieldNumber;
const int ProWSKGameEnd::kBRoundEndFieldNumber;
const int ProWSKGameEnd::kLHuiTouScoreFieldNumber;
const int ProWSKGameEnd::kBZhuangWinFieldNumber;
const int ProWSKGameEnd::kCbJiangMaCardDataFieldNumber;
const int ProWSKGameEnd::kDetailedScoresFieldNumber;
const int ProWSKGameEnd::kBIsDaTuFieldNumber;
const int ProWSKGameEnd::kBIsKuTongFieldNumber;
const int ProWSKGameEnd::kNNo1SeatFieldNumber;
const int ProWSKGameEnd::kNWinerSeatFieldNumber;
const int ProWSKGameEnd::kNWinersMateFieldNumber;
const int ProWSKGameEnd::kNNo2SeatFieldNumber;
const int ProWSKGameEnd::kNNo3SeatFieldNumber;
const int ProWSKGameEnd::kNNo4SeatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameEnd::ProWSKGameEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameEnd::InitAsDefaultInstance() {
}

ProWSKGameEnd::ProWSKGameEnd(const ProWSKGameEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameEnd::SharedCtor() {
  _cached_size_ = 0;
  lgametax_ = 0;
  wprovideuser_ = 0;
  cbchihucard_ = 0;
  broundend_ = false;
  bzhuangwin_ = false;
  bisdatu_ = false;
  biskutong_ = false;
  nno1seat_ = 0;
  nwinerseat_ = 0;
  nwinersmate_ = 0;
  nno2seat_ = 0;
  nno3seat_ = 0;
  nno4seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameEnd::~ProWSKGameEnd() {
  SharedDtor();
}

void ProWSKGameEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameEnd_descriptor_;
}

const ProWSKGameEnd& ProWSKGameEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameEnd* ProWSKGameEnd::default_instance_ = NULL;

ProWSKGameEnd* ProWSKGameEnd::New() const {
  return new ProWSKGameEnd;
}

void ProWSKGameEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lgametax_ = 0;
    wprovideuser_ = 0;
    cbchihucard_ = 0;
  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    broundend_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    bzhuangwin_ = false;
    bisdatu_ = false;
    biskutong_ = false;
    nno1seat_ = 0;
    nwinerseat_ = 0;
    nwinersmate_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    nno2seat_ = 0;
    nno3seat_ = 0;
    nno4seat_ = 0;
  }
  cbchongguang_.Clear();
  cbbawangking_.Clear();
  dwchihukind_.Clear();
  dwchihuright_.Clear();
  ltotaslgamescore_.Clear();
  lcurrentgamescore_.Clear();
  lcurrentpointscore_.Clear();
  lattachscore_.Clear();
  cbhandcarddata_.Clear();
  cbawardcarddata_.Clear();
  lonlywinscore_.Clear();
  lhuitouscore_.Clear();
  cbjiangmacarddata_.Clear();
  detailedscores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lGameTax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lgametax_)));
          set_has_lgametax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        break;
      }

      // repeated int32 cbChongGuang = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChongGuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_cbchongguang())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbchongguang())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cbChongGuang;
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        break;
      }

      // repeated int32 cbBaWangKing = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbBaWangKing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_cbbawangking())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbbawangking())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cbBaWangKing;
        if (input->ExpectTag(40)) goto parse_wProvideUser;
        break;
      }

      // optional int32 wProvideUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wProvideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wprovideuser_)));
          set_has_wprovideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cbChiHuCard;
        break;
      }

      // optional int32 cbChiHuCard = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbChiHuCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cbchihucard_)));
          set_has_cbchihucard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        break;
      }

      // repeated int32 dwChiHuKind = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuKind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dwchihukind())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihukind())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dwChiHuKind;
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        break;
      }

      // repeated int32 dwChiHuRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwChiHuRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_dwchihuright())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwchihuright())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dwChiHuRight;
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        break;
      }

      // repeated int32 lTotaslGameScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTotaslGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_ltotaslgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ltotaslgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lTotaslGameScore;
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        break;
      }

      // repeated int32 lCurrentGameScore = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentGameScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_lcurrentgamescore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentgamescore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_lCurrentGameScore;
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        break;
      }

      // repeated int32 lCurrentPointScore = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCurrentPointScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_lcurrentpointscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lcurrentpointscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lCurrentPointScore;
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        break;
      }

      // repeated int32 lAttachScore = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAttachScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_lattachscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lattachscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lAttachScore;
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        break;
      }

      // repeated .WSKMahList cbHandCardData = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbHandCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbhandcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cbHandCardData;
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        break;
      }

      // repeated .WSKAwardList cbAwardCardData = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbAwardCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbawardcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_cbAwardCardData;
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        break;
      }

      // repeated int32 lOnlyWinScore = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lOnlyWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_lonlywinscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lonlywinscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lOnlyWinScore;
        if (input->ExpectTag(128)) goto parse_bRoundEnd;
        break;
      }

      // optional bool bRoundEnd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bRoundEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &broundend_)));
          set_has_broundend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        break;
      }

      // repeated int32 lHuiTouScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHuiTouScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_lhuitouscore())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lhuitouscore())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_lHuiTouScore;
        if (input->ExpectTag(144)) goto parse_bZhuangWin;
        break;
      }

      // optional bool bZhuangWin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bZhuangWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bzhuangwin_)));
          set_has_bzhuangwin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        break;
      }

      // repeated int32 cbJiangMaCardData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cbJiangMaCardData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 152, input, this->mutable_cbjiangmacarddata())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cbjiangmacarddata())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_cbJiangMaCardData;
        if (input->ExpectTag(162)) goto parse_detailedScores;
        break;
      }

      // repeated .WSKScoreList detailedScores = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detailedScores:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detailedscores()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_detailedScores;
        if (input->ExpectTag(168)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_bIsKuTong;
        break;
      }

      // optional bool bIsKuTong = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsKuTong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biskutong_)));
          set_has_biskutong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nNo1Seat;
        break;
      }

      // optional int32 nNo1Seat = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo1Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno1seat_)));
          set_has_nno1seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nWinerSeat;
        break;
      }

      // optional int32 nWinerSeat = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinerSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinerseat_)));
          set_has_nwinerseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nWinersMate;
        break;
      }

      // optional int32 nWinersMate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nWinersMate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwinersmate_)));
          set_has_nwinersmate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_nNo2Seat;
        break;
      }

      // optional int32 nNo2Seat = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo2Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno2seat_)));
          set_has_nno2seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_nNo3Seat;
        break;
      }

      // optional int32 nNo3Seat = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo3Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno3seat_)));
          set_has_nno3seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_nNo4Seat;
        break;
      }

      // optional int32 nNo4Seat = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nNo4Seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nno4seat_)));
          set_has_nno4seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lgametax(), output);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->cbchongguang(i), output);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->cbbawangking(i), output);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wprovideuser(), output);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cbchihucard(), output);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dwchihukind(i), output);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->dwchihuright(i), output);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->ltotaslgamescore(i), output);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->lcurrentgamescore(i), output);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->lcurrentpointscore(i), output);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->lattachscore(i), output);
  }

  // repeated .WSKMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cbhandcarddata(i), output);
  }

  // repeated .WSKAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->cbawardcarddata(i), output);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->lonlywinscore(i), output);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->broundend(), output);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->lhuitouscore(i), output);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->bzhuangwin(), output);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      19, this->cbjiangmacarddata(i), output);
  }

  // repeated .WSKScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->detailedscores(i), output);
  }

  // optional bool bIsDaTu = 21;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->bisdatu(), output);
  }

  // optional bool bIsKuTong = 22;
  if (has_biskutong()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->biskutong(), output);
  }

  // optional int32 nNo1Seat = 23;
  if (has_nno1seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nno1seat(), output);
  }

  // optional int32 nWinerSeat = 24;
  if (has_nwinerseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nwinerseat(), output);
  }

  // optional int32 nWinersMate = 25;
  if (has_nwinersmate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nwinersmate(), output);
  }

  // optional int32 nNo2Seat = 26;
  if (has_nno2seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->nno2seat(), output);
  }

  // optional int32 nNo3Seat = 27;
  if (has_nno3seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->nno3seat(), output);
  }

  // optional int32 nNo4Seat = 28;
  if (has_nno4seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->nno4seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lGameTax = 2;
  if (has_lgametax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lgametax(), target);
  }

  // repeated int32 cbChongGuang = 3;
  for (int i = 0; i < this->cbchongguang_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->cbchongguang(i), target);
  }

  // repeated int32 cbBaWangKing = 4;
  for (int i = 0; i < this->cbbawangking_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->cbbawangking(i), target);
  }

  // optional int32 wProvideUser = 5;
  if (has_wprovideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wprovideuser(), target);
  }

  // optional int32 cbChiHuCard = 6;
  if (has_cbchihucard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cbchihucard(), target);
  }

  // repeated int32 dwChiHuKind = 7;
  for (int i = 0; i < this->dwchihukind_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dwchihukind(i), target);
  }

  // repeated int32 dwChiHuRight = 8;
  for (int i = 0; i < this->dwchihuright_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->dwchihuright(i), target);
  }

  // repeated int32 lTotaslGameScore = 9;
  for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->ltotaslgamescore(i), target);
  }

  // repeated int32 lCurrentGameScore = 10;
  for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->lcurrentgamescore(i), target);
  }

  // repeated int32 lCurrentPointScore = 11;
  for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->lcurrentpointscore(i), target);
  }

  // repeated int32 lAttachScore = 12;
  for (int i = 0; i < this->lattachscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->lattachscore(i), target);
  }

  // repeated .WSKMahList cbHandCardData = 13;
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cbhandcarddata(i), target);
  }

  // repeated .WSKAwardList cbAwardCardData = 14;
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->cbawardcarddata(i), target);
  }

  // repeated int32 lOnlyWinScore = 15;
  for (int i = 0; i < this->lonlywinscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->lonlywinscore(i), target);
  }

  // optional bool bRoundEnd = 16;
  if (has_broundend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->broundend(), target);
  }

  // repeated int32 lHuiTouScore = 17;
  for (int i = 0; i < this->lhuitouscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->lhuitouscore(i), target);
  }

  // optional bool bZhuangWin = 18;
  if (has_bzhuangwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->bzhuangwin(), target);
  }

  // repeated int32 cbJiangMaCardData = 19;
  for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(19, this->cbjiangmacarddata(i), target);
  }

  // repeated .WSKScoreList detailedScores = 20;
  for (int i = 0; i < this->detailedscores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->detailedscores(i), target);
  }

  // optional bool bIsDaTu = 21;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->bisdatu(), target);
  }

  // optional bool bIsKuTong = 22;
  if (has_biskutong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->biskutong(), target);
  }

  // optional int32 nNo1Seat = 23;
  if (has_nno1seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nno1seat(), target);
  }

  // optional int32 nWinerSeat = 24;
  if (has_nwinerseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nwinerseat(), target);
  }

  // optional int32 nWinersMate = 25;
  if (has_nwinersmate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nwinersmate(), target);
  }

  // optional int32 nNo2Seat = 26;
  if (has_nno2seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->nno2seat(), target);
  }

  // optional int32 nNo3Seat = 27;
  if (has_nno3seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->nno3seat(), target);
  }

  // optional int32 nNo4Seat = 28;
  if (has_nno4seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->nno4seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lGameTax = 2;
    if (has_lgametax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lgametax());
    }

    // optional int32 wProvideUser = 5;
    if (has_wprovideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wprovideuser());
    }

    // optional int32 cbChiHuCard = 6;
    if (has_cbchihucard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cbchihucard());
    }

  }
  if (_has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    // optional bool bRoundEnd = 16;
    if (has_broundend()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool bZhuangWin = 18;
    if (has_bzhuangwin()) {
      total_size += 2 + 1;
    }

    // optional bool bIsDaTu = 21;
    if (has_bisdatu()) {
      total_size += 2 + 1;
    }

    // optional bool bIsKuTong = 22;
    if (has_biskutong()) {
      total_size += 2 + 1;
    }

    // optional int32 nNo1Seat = 23;
    if (has_nno1seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno1seat());
    }

    // optional int32 nWinerSeat = 24;
    if (has_nwinerseat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinerseat());
    }

    // optional int32 nWinersMate = 25;
    if (has_nwinersmate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwinersmate());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 nNo2Seat = 26;
    if (has_nno2seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno2seat());
    }

    // optional int32 nNo3Seat = 27;
    if (has_nno3seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno3seat());
    }

    // optional int32 nNo4Seat = 28;
    if (has_nno4seat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nno4seat());
    }

  }
  // repeated int32 cbChongGuang = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbchongguang_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbchongguang(i));
    }
    total_size += 1 * this->cbchongguang_size() + data_size;
  }

  // repeated int32 cbBaWangKing = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbbawangking_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbbawangking(i));
    }
    total_size += 1 * this->cbbawangking_size() + data_size;
  }

  // repeated int32 dwChiHuKind = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihukind_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihukind(i));
    }
    total_size += 1 * this->dwchihukind_size() + data_size;
  }

  // repeated int32 dwChiHuRight = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwchihuright_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwchihuright(i));
    }
    total_size += 1 * this->dwchihuright_size() + data_size;
  }

  // repeated int32 lTotaslGameScore = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->ltotaslgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ltotaslgamescore(i));
    }
    total_size += 1 * this->ltotaslgamescore_size() + data_size;
  }

  // repeated int32 lCurrentGameScore = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentgamescore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentgamescore(i));
    }
    total_size += 1 * this->lcurrentgamescore_size() + data_size;
  }

  // repeated int32 lCurrentPointScore = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->lcurrentpointscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lcurrentpointscore(i));
    }
    total_size += 1 * this->lcurrentpointscore_size() + data_size;
  }

  // repeated int32 lAttachScore = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->lattachscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lattachscore(i));
    }
    total_size += 1 * this->lattachscore_size() + data_size;
  }

  // repeated .WSKMahList cbHandCardData = 13;
  total_size += 1 * this->cbhandcarddata_size();
  for (int i = 0; i < this->cbhandcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbhandcarddata(i));
  }

  // repeated .WSKAwardList cbAwardCardData = 14;
  total_size += 1 * this->cbawardcarddata_size();
  for (int i = 0; i < this->cbawardcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbawardcarddata(i));
  }

  // repeated int32 lOnlyWinScore = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->lonlywinscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lonlywinscore(i));
    }
    total_size += 1 * this->lonlywinscore_size() + data_size;
  }

  // repeated int32 lHuiTouScore = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->lhuitouscore_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lhuitouscore(i));
    }
    total_size += 2 * this->lhuitouscore_size() + data_size;
  }

  // repeated int32 cbJiangMaCardData = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->cbjiangmacarddata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cbjiangmacarddata(i));
    }
    total_size += 2 * this->cbjiangmacarddata_size() + data_size;
  }

  // repeated .WSKScoreList detailedScores = 20;
  total_size += 2 * this->detailedscores_size();
  for (int i = 0; i < this->detailedscores_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detailedscores(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameEnd::MergeFrom(const ProWSKGameEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbchongguang_.MergeFrom(from.cbchongguang_);
  cbbawangking_.MergeFrom(from.cbbawangking_);
  dwchihukind_.MergeFrom(from.dwchihukind_);
  dwchihuright_.MergeFrom(from.dwchihuright_);
  ltotaslgamescore_.MergeFrom(from.ltotaslgamescore_);
  lcurrentgamescore_.MergeFrom(from.lcurrentgamescore_);
  lcurrentpointscore_.MergeFrom(from.lcurrentpointscore_);
  lattachscore_.MergeFrom(from.lattachscore_);
  cbhandcarddata_.MergeFrom(from.cbhandcarddata_);
  cbawardcarddata_.MergeFrom(from.cbawardcarddata_);
  lonlywinscore_.MergeFrom(from.lonlywinscore_);
  lhuitouscore_.MergeFrom(from.lhuitouscore_);
  cbjiangmacarddata_.MergeFrom(from.cbjiangmacarddata_);
  detailedscores_.MergeFrom(from.detailedscores_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lgametax()) {
      set_lgametax(from.lgametax());
    }
    if (from.has_wprovideuser()) {
      set_wprovideuser(from.wprovideuser());
    }
    if (from.has_cbchihucard()) {
      set_cbchihucard(from.cbchihucard());
    }
  }
  if (from._has_bits_[14 / 32] & (0xffu << (14 % 32))) {
    if (from.has_broundend()) {
      set_broundend(from.broundend());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bzhuangwin()) {
      set_bzhuangwin(from.bzhuangwin());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
    if (from.has_biskutong()) {
      set_biskutong(from.biskutong());
    }
    if (from.has_nno1seat()) {
      set_nno1seat(from.nno1seat());
    }
    if (from.has_nwinerseat()) {
      set_nwinerseat(from.nwinerseat());
    }
    if (from.has_nwinersmate()) {
      set_nwinersmate(from.nwinersmate());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_nno2seat()) {
      set_nno2seat(from.nno2seat());
    }
    if (from.has_nno3seat()) {
      set_nno3seat(from.nno3seat());
    }
    if (from.has_nno4seat()) {
      set_nno4seat(from.nno4seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameEnd::CopyFrom(const ProWSKGameEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameEnd::IsInitialized() const {

  return true;
}

void ProWSKGameEnd::Swap(ProWSKGameEnd* other) {
  if (other != this) {
    std::swap(lgametax_, other->lgametax_);
    cbchongguang_.Swap(&other->cbchongguang_);
    cbbawangking_.Swap(&other->cbbawangking_);
    std::swap(wprovideuser_, other->wprovideuser_);
    std::swap(cbchihucard_, other->cbchihucard_);
    dwchihukind_.Swap(&other->dwchihukind_);
    dwchihuright_.Swap(&other->dwchihuright_);
    ltotaslgamescore_.Swap(&other->ltotaslgamescore_);
    lcurrentgamescore_.Swap(&other->lcurrentgamescore_);
    lcurrentpointscore_.Swap(&other->lcurrentpointscore_);
    lattachscore_.Swap(&other->lattachscore_);
    cbhandcarddata_.Swap(&other->cbhandcarddata_);
    cbawardcarddata_.Swap(&other->cbawardcarddata_);
    lonlywinscore_.Swap(&other->lonlywinscore_);
    std::swap(broundend_, other->broundend_);
    lhuitouscore_.Swap(&other->lhuitouscore_);
    std::swap(bzhuangwin_, other->bzhuangwin_);
    cbjiangmacarddata_.Swap(&other->cbjiangmacarddata_);
    detailedscores_.Swap(&other->detailedscores_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(biskutong_, other->biskutong_);
    std::swap(nno1seat_, other->nno1seat_);
    std::swap(nwinerseat_, other->nwinerseat_);
    std::swap(nwinersmate_, other->nwinersmate_);
    std::swap(nno2seat_, other->nno2seat_);
    std::swap(nno3seat_, other->nno3seat_);
    std::swap(nno4seat_, other->nno4seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameEnd_descriptor_;
  metadata.reflection = ProWSKGameEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameQuickSoundRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameQuickSoundRequest_MSGID_descriptor_;
}
bool ProWSKGameQuickSoundRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameQuickSoundRequest_MSGID ProWSKGameQuickSoundRequest::ID;
const ProWSKGameQuickSoundRequest_MSGID ProWSKGameQuickSoundRequest::MSGID_MIN;
const ProWSKGameQuickSoundRequest_MSGID ProWSKGameQuickSoundRequest::MSGID_MAX;
const int ProWSKGameQuickSoundRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameQuickSoundRequest::kDeskIdFieldNumber;
const int ProWSKGameQuickSoundRequest::kSeatIdFieldNumber;
const int ProWSKGameQuickSoundRequest::kSoundIdFieldNumber;
const int ProWSKGameQuickSoundRequest::kTextFieldNumber;
#endif  // !_MSC_VER

ProWSKGameQuickSoundRequest::ProWSKGameQuickSoundRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameQuickSoundRequest::InitAsDefaultInstance() {
}

ProWSKGameQuickSoundRequest::ProWSKGameQuickSoundRequest(const ProWSKGameQuickSoundRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameQuickSoundRequest::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameQuickSoundRequest::~ProWSKGameQuickSoundRequest() {
  SharedDtor();
}

void ProWSKGameQuickSoundRequest::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProWSKGameQuickSoundRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameQuickSoundRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameQuickSoundRequest_descriptor_;
}

const ProWSKGameQuickSoundRequest& ProWSKGameQuickSoundRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameQuickSoundRequest* ProWSKGameQuickSoundRequest::default_instance_ = NULL;

ProWSKGameQuickSoundRequest* ProWSKGameQuickSoundRequest::New() const {
  return new ProWSKGameQuickSoundRequest;
}

void ProWSKGameQuickSoundRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameQuickSoundRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameQuickSoundRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameQuickSoundRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameQuickSoundRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameQuickSoundRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameQuickSoundRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameQuickSoundRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameQuickSoundRequest::MergeFrom(const ProWSKGameQuickSoundRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameQuickSoundRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameQuickSoundRequest::CopyFrom(const ProWSKGameQuickSoundRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameQuickSoundRequest::IsInitialized() const {

  return true;
}

void ProWSKGameQuickSoundRequest::Swap(ProWSKGameQuickSoundRequest* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameQuickSoundRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameQuickSoundRequest_descriptor_;
  metadata.reflection = ProWSKGameQuickSoundRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameQuickSoundResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameQuickSoundResponse_MSGID_descriptor_;
}
bool ProWSKGameQuickSoundResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameQuickSoundResponse_MSGID ProWSKGameQuickSoundResponse::ID;
const ProWSKGameQuickSoundResponse_MSGID ProWSKGameQuickSoundResponse::MSGID_MIN;
const ProWSKGameQuickSoundResponse_MSGID ProWSKGameQuickSoundResponse::MSGID_MAX;
const int ProWSKGameQuickSoundResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameQuickSoundResponse::kDeskIdFieldNumber;
const int ProWSKGameQuickSoundResponse::kSeatIdFieldNumber;
const int ProWSKGameQuickSoundResponse::kSoundIdFieldNumber;
const int ProWSKGameQuickSoundResponse::kTextFieldNumber;
#endif  // !_MSC_VER

ProWSKGameQuickSoundResponse::ProWSKGameQuickSoundResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameQuickSoundResponse::InitAsDefaultInstance() {
}

ProWSKGameQuickSoundResponse::ProWSKGameQuickSoundResponse(const ProWSKGameQuickSoundResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameQuickSoundResponse::SharedCtor() {
  _cached_size_ = 0;
  desk_id_ = 0;
  seat_id_ = 0;
  sound_id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameQuickSoundResponse::~ProWSKGameQuickSoundResponse() {
  SharedDtor();
}

void ProWSKGameQuickSoundResponse::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void ProWSKGameQuickSoundResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameQuickSoundResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameQuickSoundResponse_descriptor_;
}

const ProWSKGameQuickSoundResponse& ProWSKGameQuickSoundResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameQuickSoundResponse* ProWSKGameQuickSoundResponse::default_instance_ = NULL;

ProWSKGameQuickSoundResponse* ProWSKGameQuickSoundResponse::New() const {
  return new ProWSKGameQuickSoundResponse;
}

void ProWSKGameQuickSoundResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desk_id_ = 0;
    seat_id_ = 0;
    sound_id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameQuickSoundResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 desk_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &desk_id_)));
          set_has_desk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sound_id;
        break;
      }

      // optional int32 sound_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sound_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sound_id_)));
          set_has_sound_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }

      // optional bytes text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameQuickSoundResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->desk_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sound_id(), output);
  }

  // optional bytes text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameQuickSoundResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 desk_id = 2;
  if (has_desk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->desk_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 sound_id = 4;
  if (has_sound_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sound_id(), target);
  }

  // optional bytes text = 5;
  if (has_text()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameQuickSoundResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 desk_id = 2;
    if (has_desk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->desk_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 sound_id = 4;
    if (has_sound_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sound_id());
    }

    // optional bytes text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameQuickSoundResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameQuickSoundResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameQuickSoundResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameQuickSoundResponse::MergeFrom(const ProWSKGameQuickSoundResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desk_id()) {
      set_desk_id(from.desk_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_sound_id()) {
      set_sound_id(from.sound_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameQuickSoundResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameQuickSoundResponse::CopyFrom(const ProWSKGameQuickSoundResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameQuickSoundResponse::IsInitialized() const {

  return true;
}

void ProWSKGameQuickSoundResponse::Swap(ProWSKGameQuickSoundResponse* other) {
  if (other != this) {
    std::swap(desk_id_, other->desk_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(sound_id_, other->sound_id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameQuickSoundResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameQuickSoundResponse_descriptor_;
  metadata.reflection = ProWSKGameQuickSoundResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameSendDiscardMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSendDiscardMahs_MSGID_descriptor_;
}
bool ProWSKGameSendDiscardMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameSendDiscardMahs_MSGID ProWSKGameSendDiscardMahs::ID;
const ProWSKGameSendDiscardMahs_MSGID ProWSKGameSendDiscardMahs::MSGID_MIN;
const ProWSKGameSendDiscardMahs_MSGID ProWSKGameSendDiscardMahs::MSGID_MAX;
const int ProWSKGameSendDiscardMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameSendDiscardMahs::kSeatIdFieldNumber;
const int ProWSKGameSendDiscardMahs::kCbCardDataFieldNumber;
const int ProWSKGameSendDiscardMahs::kDeskCountFieldNumber;
#endif  // !_MSC_VER

ProWSKGameSendDiscardMahs::ProWSKGameSendDiscardMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameSendDiscardMahs::InitAsDefaultInstance() {
}

ProWSKGameSendDiscardMahs::ProWSKGameSendDiscardMahs(const ProWSKGameSendDiscardMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameSendDiscardMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  deskcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameSendDiscardMahs::~ProWSKGameSendDiscardMahs() {
  SharedDtor();
}

void ProWSKGameSendDiscardMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameSendDiscardMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameSendDiscardMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSendDiscardMahs_descriptor_;
}

const ProWSKGameSendDiscardMahs& ProWSKGameSendDiscardMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameSendDiscardMahs* ProWSKGameSendDiscardMahs::default_instance_ = NULL;

ProWSKGameSendDiscardMahs* ProWSKGameSendDiscardMahs::New() const {
  return new ProWSKGameSendDiscardMahs;
}

void ProWSKGameSendDiscardMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    deskcount_ = 0;
  }
  cbcarddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameSendDiscardMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        break;
      }

      // repeated .WSKMahList cbCardData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbCardData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cbcarddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cbCardData;
        if (input->ExpectTag(32)) goto parse_deskCount;
        break;
      }

      // optional int32 deskCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deskCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deskcount_)));
          set_has_deskcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameSendDiscardMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .WSKMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cbcarddata(i), output);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->deskcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameSendDiscardMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .WSKMahList cbCardData = 3;
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cbcarddata(i), target);
  }

  // optional int32 deskCount = 4;
  if (has_deskcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->deskcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameSendDiscardMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 deskCount = 4;
    if (has_deskcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->deskcount());
    }

  }
  // repeated .WSKMahList cbCardData = 3;
  total_size += 1 * this->cbcarddata_size();
  for (int i = 0; i < this->cbcarddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cbcarddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameSendDiscardMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameSendDiscardMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameSendDiscardMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameSendDiscardMahs::MergeFrom(const ProWSKGameSendDiscardMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  cbcarddata_.MergeFrom(from.cbcarddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_deskcount()) {
      set_deskcount(from.deskcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameSendDiscardMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameSendDiscardMahs::CopyFrom(const ProWSKGameSendDiscardMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameSendDiscardMahs::IsInitialized() const {

  return true;
}

void ProWSKGameSendDiscardMahs::Swap(ProWSKGameSendDiscardMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    cbcarddata_.Swap(&other->cbcarddata_);
    std::swap(deskcount_, other->deskcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameSendDiscardMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameSendDiscardMahs_descriptor_;
  metadata.reflection = ProWSKGameSendDiscardMahs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSKWeaveItem::kWeaveKindFieldNumber;
const int WSKWeaveItem::kCentercardFieldNumber;
const int WSKWeaveItem::kProvideUserFieldNumber;
const int WSKWeaveItem::kCardsizeFieldNumber;
#endif  // !_MSC_VER

WSKWeaveItem::WSKWeaveItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSKWeaveItem::InitAsDefaultInstance() {
}

WSKWeaveItem::WSKWeaveItem(const WSKWeaveItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSKWeaveItem::SharedCtor() {
  _cached_size_ = 0;
  weavekind_ = 0;
  centercard_ = 0;
  provideuser_ = 0;
  cardsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSKWeaveItem::~WSKWeaveItem() {
  SharedDtor();
}

void WSKWeaveItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSKWeaveItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSKWeaveItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKWeaveItem_descriptor_;
}

const WSKWeaveItem& WSKWeaveItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

WSKWeaveItem* WSKWeaveItem::default_instance_ = NULL;

WSKWeaveItem* WSKWeaveItem::New() const {
  return new WSKWeaveItem;
}

void WSKWeaveItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weavekind_ = 0;
    centercard_ = 0;
    provideuser_ = 0;
    cardsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSKWeaveItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 weaveKind = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weavekind_)));
          set_has_weavekind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_centercard;
        break;
      }

      // optional int32 centercard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centercard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centercard_)));
          set_has_centercard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_provideUser;
        break;
      }

      // optional int32 provideUser = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_provideUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &provideuser_)));
          set_has_provideuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cardsize;
        break;
      }

      // optional int32 cardsize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardsize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cardsize_)));
          set_has_cardsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSKWeaveItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->weavekind(), output);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centercard(), output);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->provideuser(), output);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cardsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSKWeaveItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 weaveKind = 1;
  if (has_weavekind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->weavekind(), target);
  }

  // optional int32 centercard = 2;
  if (has_centercard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->centercard(), target);
  }

  // optional int32 provideUser = 3;
  if (has_provideuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->provideuser(), target);
  }

  // optional int32 cardsize = 4;
  if (has_cardsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cardsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSKWeaveItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 weaveKind = 1;
    if (has_weavekind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weavekind());
    }

    // optional int32 centercard = 2;
    if (has_centercard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centercard());
    }

    // optional int32 provideUser = 3;
    if (has_provideuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->provideuser());
    }

    // optional int32 cardsize = 4;
    if (has_cardsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cardsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSKWeaveItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSKWeaveItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSKWeaveItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSKWeaveItem::MergeFrom(const WSKWeaveItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weavekind()) {
      set_weavekind(from.weavekind());
    }
    if (from.has_centercard()) {
      set_centercard(from.centercard());
    }
    if (from.has_provideuser()) {
      set_provideuser(from.provideuser());
    }
    if (from.has_cardsize()) {
      set_cardsize(from.cardsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSKWeaveItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSKWeaveItem::CopyFrom(const WSKWeaveItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSKWeaveItem::IsInitialized() const {

  return true;
}

void WSKWeaveItem::Swap(WSKWeaveItem* other) {
  if (other != this) {
    std::swap(weavekind_, other->weavekind_);
    std::swap(centercard_, other->centercard_);
    std::swap(provideuser_, other->provideuser_);
    std::swap(cardsize_, other->cardsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSKWeaveItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSKWeaveItem_descriptor_;
  metadata.reflection = WSKWeaveItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSKWeaveItems::kItemsFieldNumber;
#endif  // !_MSC_VER

WSKWeaveItems::WSKWeaveItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSKWeaveItems::InitAsDefaultInstance() {
}

WSKWeaveItems::WSKWeaveItems(const WSKWeaveItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSKWeaveItems::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSKWeaveItems::~WSKWeaveItems() {
  SharedDtor();
}

void WSKWeaveItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSKWeaveItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSKWeaveItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSKWeaveItems_descriptor_;
}

const WSKWeaveItems& WSKWeaveItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

WSKWeaveItems* WSKWeaveItems::default_instance_ = NULL;

WSKWeaveItems* WSKWeaveItems::New() const {
  return new WSKWeaveItems;
}

void WSKWeaveItems::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSKWeaveItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .WSKWeaveItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSKWeaveItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .WSKWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSKWeaveItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .WSKWeaveItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSKWeaveItems::ByteSize() const {
  int total_size = 0;

  // repeated .WSKWeaveItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSKWeaveItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSKWeaveItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSKWeaveItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSKWeaveItems::MergeFrom(const WSKWeaveItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSKWeaveItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSKWeaveItems::CopyFrom(const WSKWeaveItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSKWeaveItems::IsInitialized() const {

  return true;
}

void WSKWeaveItems::Swap(WSKWeaveItems* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSKWeaveItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSKWeaveItems_descriptor_;
  metadata.reflection = WSKWeaveItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameSendActionMahs_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSendActionMahs_MSGID_descriptor_;
}
bool ProWSKGameSendActionMahs_MSGID_IsValid(int value) {
  switch(value) {
    case 2223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameSendActionMahs_MSGID ProWSKGameSendActionMahs::ID;
const ProWSKGameSendActionMahs_MSGID ProWSKGameSendActionMahs::MSGID_MIN;
const ProWSKGameSendActionMahs_MSGID ProWSKGameSendActionMahs::MSGID_MAX;
const int ProWSKGameSendActionMahs::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameSendActionMahs::kSeatIdFieldNumber;
const int ProWSKGameSendActionMahs::kWeavesFieldNumber;
#endif  // !_MSC_VER

ProWSKGameSendActionMahs::ProWSKGameSendActionMahs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameSendActionMahs::InitAsDefaultInstance() {
}

ProWSKGameSendActionMahs::ProWSKGameSendActionMahs(const ProWSKGameSendActionMahs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameSendActionMahs::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameSendActionMahs::~ProWSKGameSendActionMahs() {
  SharedDtor();
}

void ProWSKGameSendActionMahs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameSendActionMahs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameSendActionMahs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSendActionMahs_descriptor_;
}

const ProWSKGameSendActionMahs& ProWSKGameSendActionMahs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameSendActionMahs* ProWSKGameSendActionMahs::default_instance_ = NULL;

ProWSKGameSendActionMahs* ProWSKGameSendActionMahs::New() const {
  return new ProWSKGameSendActionMahs;
}

void ProWSKGameSendActionMahs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  weaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameSendActionMahs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        break;
      }

      // repeated .WSKWeaveItems weaves = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_weaves;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameSendActionMahs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // repeated .WSKWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weaves(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameSendActionMahs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // repeated .WSKWeaveItems weaves = 3;
  for (int i = 0; i < this->weaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weaves(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameSendActionMahs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  // repeated .WSKWeaveItems weaves = 3;
  total_size += 1 * this->weaves_size();
  for (int i = 0; i < this->weaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaves(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameSendActionMahs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameSendActionMahs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameSendActionMahs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameSendActionMahs::MergeFrom(const ProWSKGameSendActionMahs& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaves_.MergeFrom(from.weaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameSendActionMahs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameSendActionMahs::CopyFrom(const ProWSKGameSendActionMahs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameSendActionMahs::IsInitialized() const {

  return true;
}

void ProWSKGameSendActionMahs::Swap(ProWSKGameSendActionMahs* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    weaves_.Swap(&other->weaves_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameSendActionMahs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameSendActionMahs_descriptor_;
  metadata.reflection = ProWSKGameSendActionMahs_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenRequest_MSGID_descriptor_;
}
bool ProWSKGameBrokenRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameBrokenRequest_MSGID ProWSKGameBrokenRequest::ID;
const ProWSKGameBrokenRequest_MSGID ProWSKGameBrokenRequest::MSGID_MIN;
const ProWSKGameBrokenRequest_MSGID ProWSKGameBrokenRequest::MSGID_MAX;
const int ProWSKGameBrokenRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameBrokenRequest::kSeatIdFieldNumber;
const int ProWSKGameBrokenRequest::kTypeFieldNumber;
const int ProWSKGameBrokenRequest::kTimeFieldNumber;
#endif  // !_MSC_VER

ProWSKGameBrokenRequest::ProWSKGameBrokenRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameBrokenRequest::InitAsDefaultInstance() {
}

ProWSKGameBrokenRequest::ProWSKGameBrokenRequest(const ProWSKGameBrokenRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameBrokenRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameBrokenRequest::~ProWSKGameBrokenRequest() {
  SharedDtor();
}

void ProWSKGameBrokenRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameBrokenRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameBrokenRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenRequest_descriptor_;
}

const ProWSKGameBrokenRequest& ProWSKGameBrokenRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameBrokenRequest* ProWSKGameBrokenRequest::default_instance_ = NULL;

ProWSKGameBrokenRequest* ProWSKGameBrokenRequest::New() const {
  return new ProWSKGameBrokenRequest;
}

void ProWSKGameBrokenRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameBrokenRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .WSKBROKEN_TYPE type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WSKBROKEN_TYPE_IsValid(value)) {
            set_type(static_cast< ::WSKBROKEN_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameBrokenRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .WSKBROKEN_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameBrokenRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .WSKBROKEN_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameBrokenRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .WSKBROKEN_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameBrokenRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameBrokenRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameBrokenRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameBrokenRequest::MergeFrom(const ProWSKGameBrokenRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameBrokenRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameBrokenRequest::CopyFrom(const ProWSKGameBrokenRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameBrokenRequest::IsInitialized() const {

  return true;
}

void ProWSKGameBrokenRequest::Swap(ProWSKGameBrokenRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameBrokenRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameBrokenRequest_descriptor_;
  metadata.reflection = ProWSKGameBrokenRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenOperate_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenOperate_MSGID_descriptor_;
}
bool ProWSKGameBrokenOperate_MSGID_IsValid(int value) {
  switch(value) {
    case 2225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameBrokenOperate_MSGID ProWSKGameBrokenOperate::ID;
const ProWSKGameBrokenOperate_MSGID ProWSKGameBrokenOperate::MSGID_MIN;
const ProWSKGameBrokenOperate_MSGID ProWSKGameBrokenOperate::MSGID_MAX;
const int ProWSKGameBrokenOperate::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameBrokenOperate::kSeatIdFieldNumber;
const int ProWSKGameBrokenOperate::kResultFieldNumber;
#endif  // !_MSC_VER

ProWSKGameBrokenOperate::ProWSKGameBrokenOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameBrokenOperate::InitAsDefaultInstance() {
}

ProWSKGameBrokenOperate::ProWSKGameBrokenOperate(const ProWSKGameBrokenOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameBrokenOperate::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameBrokenOperate::~ProWSKGameBrokenOperate() {
  SharedDtor();
}

void ProWSKGameBrokenOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameBrokenOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameBrokenOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenOperate_descriptor_;
}

const ProWSKGameBrokenOperate& ProWSKGameBrokenOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameBrokenOperate* ProWSKGameBrokenOperate::default_instance_ = NULL;

ProWSKGameBrokenOperate* ProWSKGameBrokenOperate::New() const {
  return new ProWSKGameBrokenOperate;
}

void ProWSKGameBrokenOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameBrokenOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .WSKBROKEN_OPERATE result = 3 [default = WSK_BO_DISAGREE];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WSKBROKEN_OPERATE_IsValid(value)) {
            set_result(static_cast< ::WSKBROKEN_OPERATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameBrokenOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .WSKBROKEN_OPERATE result = 3 [default = WSK_BO_DISAGREE];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameBrokenOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .WSKBROKEN_OPERATE result = 3 [default = WSK_BO_DISAGREE];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameBrokenOperate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .WSKBROKEN_OPERATE result = 3 [default = WSK_BO_DISAGREE];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameBrokenOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameBrokenOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameBrokenOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameBrokenOperate::MergeFrom(const ProWSKGameBrokenOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameBrokenOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameBrokenOperate::CopyFrom(const ProWSKGameBrokenOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameBrokenOperate::IsInitialized() const {

  return true;
}

void ProWSKGameBrokenOperate::Swap(ProWSKGameBrokenOperate* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameBrokenOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameBrokenOperate_descriptor_;
  metadata.reflection = ProWSKGameBrokenOperate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenNotify_MSGID_descriptor_;
}
bool ProWSKGameBrokenNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameBrokenNotify_MSGID ProWSKGameBrokenNotify::ID;
const ProWSKGameBrokenNotify_MSGID ProWSKGameBrokenNotify::MSGID_MIN;
const ProWSKGameBrokenNotify_MSGID ProWSKGameBrokenNotify::MSGID_MAX;
const int ProWSKGameBrokenNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameBrokenNotify::kSeatIdFieldNumber;
const int ProWSKGameBrokenNotify::kOperateCodeFieldNumber;
#endif  // !_MSC_VER

ProWSKGameBrokenNotify::ProWSKGameBrokenNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameBrokenNotify::InitAsDefaultInstance() {
}

ProWSKGameBrokenNotify::ProWSKGameBrokenNotify(const ProWSKGameBrokenNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameBrokenNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  operate_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameBrokenNotify::~ProWSKGameBrokenNotify() {
  SharedDtor();
}

void ProWSKGameBrokenNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameBrokenNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameBrokenNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenNotify_descriptor_;
}

const ProWSKGameBrokenNotify& ProWSKGameBrokenNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameBrokenNotify* ProWSKGameBrokenNotify::default_instance_ = NULL;

ProWSKGameBrokenNotify* ProWSKGameBrokenNotify::New() const {
  return new ProWSKGameBrokenNotify;
}

void ProWSKGameBrokenNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    operate_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameBrokenNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_code;
        break;
      }

      // optional .WSKBROKEN_CODE operate_code = 3 [default = WSK_BC_SUCCESS];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::WSKBROKEN_CODE_IsValid(value)) {
            set_operate_code(static_cast< ::WSKBROKEN_CODE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameBrokenNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // optional .WSKBROKEN_CODE operate_code = 3 [default = WSK_BC_SUCCESS];
  if (has_operate_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operate_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameBrokenNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // optional .WSKBROKEN_CODE operate_code = 3 [default = WSK_BC_SUCCESS];
  if (has_operate_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operate_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameBrokenNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional .WSKBROKEN_CODE operate_code = 3 [default = WSK_BC_SUCCESS];
    if (has_operate_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operate_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameBrokenNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameBrokenNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameBrokenNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameBrokenNotify::MergeFrom(const ProWSKGameBrokenNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_operate_code()) {
      set_operate_code(from.operate_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameBrokenNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameBrokenNotify::CopyFrom(const ProWSKGameBrokenNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameBrokenNotify::IsInitialized() const {

  return true;
}

void ProWSKGameBrokenNotify::Swap(ProWSKGameBrokenNotify* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(operate_code_, other->operate_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameBrokenNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameBrokenNotify_descriptor_;
  metadata.reflection = ProWSKGameBrokenNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameRuleConfig_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameRuleConfig_MSGID_descriptor_;
}
bool ProWSKGameRuleConfig_MSGID_IsValid(int value) {
  switch(value) {
    case 2227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameRuleConfig_MSGID ProWSKGameRuleConfig::ID;
const ProWSKGameRuleConfig_MSGID ProWSKGameRuleConfig::MSGID_MIN;
const ProWSKGameRuleConfig_MSGID ProWSKGameRuleConfig::MSGID_MAX;
const int ProWSKGameRuleConfig::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameRuleConfig::kGameRoundFieldNumber;
const int ProWSKGameRuleConfig::kNeedCardFieldNumber;
const int ProWSKGameRuleConfig::kHaveBottomKingFieldNumber;
const int ProWSKGameRuleConfig::kHaveMaiLeiFieldNumber;
const int ProWSKGameRuleConfig::kHavaHuiTouFieldNumber;
const int ProWSKGameRuleConfig::kNMasterSeatFieldNumber;
const int ProWSKGameRuleConfig::kCurrentGameCountFieldNumber;
const int ProWSKGameRuleConfig::kHaveJianmaFieldNumber;
const int ProWSKGameRuleConfig::kNChongguanNumFieldNumber;
const int ProWSKGameRuleConfig::kBbawangfanbeiFieldNumber;
const int ProWSKGameRuleConfig::kNPlayerNumFieldNumber;
const int ProWSKGameRuleConfig::kSRoomNumFieldNumber;
const int ProWSKGameRuleConfig::kSPlayTimeFieldNumber;
const int ProWSKGameRuleConfig::kGametypeFieldNumber;
const int ProWSKGameRuleConfig::kIsOpenTeammateFieldNumber;
#endif  // !_MSC_VER

ProWSKGameRuleConfig::ProWSKGameRuleConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameRuleConfig::InitAsDefaultInstance() {
}

ProWSKGameRuleConfig::ProWSKGameRuleConfig(const ProWSKGameRuleConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameRuleConfig::SharedCtor() {
  _cached_size_ = 0;
  game_round_ = 0;
  need_card_ = 0;
  have_bottom_king_ = false;
  have_mai_lei_ = false;
  hava_hui_tou_ = false;
  nmasterseat_ = 0;
  current_game_count_ = 0;
  have_jianma_ = false;
  nchongguannum_ = 0;
  bbawangfanbei_ = false;
  nplayernum_ = 0;
  sroomnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  splaytime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gametype_ = 0;
  isopenteammate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameRuleConfig::~ProWSKGameRuleConfig() {
  SharedDtor();
}

void ProWSKGameRuleConfig::SharedDtor() {
  if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
    delete sroomnum_;
  }
  if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
    delete splaytime_;
  }
  if (this != default_instance_) {
  }
}

void ProWSKGameRuleConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameRuleConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameRuleConfig_descriptor_;
}

const ProWSKGameRuleConfig& ProWSKGameRuleConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameRuleConfig* ProWSKGameRuleConfig::default_instance_ = NULL;

ProWSKGameRuleConfig* ProWSKGameRuleConfig::New() const {
  return new ProWSKGameRuleConfig;
}

void ProWSKGameRuleConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    game_round_ = 0;
    need_card_ = 0;
    have_bottom_king_ = false;
    have_mai_lei_ = false;
    hava_hui_tou_ = false;
    nmasterseat_ = 0;
    current_game_count_ = 0;
    have_jianma_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nchongguannum_ = 0;
    bbawangfanbei_ = false;
    nplayernum_ = 0;
    if (has_sroomnum()) {
      if (sroomnum_ != &::google::protobuf::internal::kEmptyString) {
        sroomnum_->clear();
      }
    }
    if (has_splaytime()) {
      if (splaytime_ != &::google::protobuf::internal::kEmptyString) {
        splaytime_->clear();
      }
    }
    gametype_ = 0;
    isopenteammate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameRuleConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_round_)));
          set_has_game_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_need_card;
        break;
      }

      // optional int32 need_card = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_card:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &need_card_)));
          set_has_need_card();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_have_bottom_king;
        break;
      }

      // optional bool have_bottom_king = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_bottom_king:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_bottom_king_)));
          set_has_have_bottom_king();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_have_mai_lei;
        break;
      }

      // optional bool have_mai_lei = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_mai_lei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_mai_lei_)));
          set_has_have_mai_lei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hava_hui_tou;
        break;
      }

      // optional bool hava_hui_tou = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hava_hui_tou:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hava_hui_tou_)));
          set_has_hava_hui_tou();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_nMasterSeat;
        break;
      }

      // optional int32 nMasterSeat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nMasterSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmasterseat_)));
          set_has_nmasterseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_current_game_count;
        break;
      }

      // optional int32 current_game_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_current_game_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_game_count_)));
          set_has_current_game_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_have_jianma;
        break;
      }

      // optional bool have_jianma = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_have_jianma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &have_jianma_)));
          set_has_have_jianma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nChongguanNum;
        break;
      }

      // optional int32 nChongguanNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nChongguanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nchongguannum_)));
          set_has_nchongguannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bbawangfanbei;
        break;
      }

      // optional bool bbawangfanbei = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bbawangfanbei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bbawangfanbei_)));
          set_has_bbawangfanbei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_nPlayerNum;
        break;
      }

      // optional int32 nPlayerNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPlayerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nplayernum_)));
          set_has_nplayernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sRoomNum;
        break;
      }

      // optional bytes sRoomNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sRoomNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sroomnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sPlayTime;
        break;
      }

      // optional bytes sPlayTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_splaytime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_gametype;
        break;
      }

      // optional int32 gametype = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gametype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gametype_)));
          set_has_gametype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isOpenTeammate;
        break;
      }

      // optional bool isOpenTeammate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpenTeammate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopenteammate_)));
          set_has_isopenteammate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameRuleConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_round(), output);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->need_card(), output);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->have_bottom_king(), output);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->have_mai_lei(), output);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->hava_hui_tou(), output);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nmasterseat(), output);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_game_count(), output);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->have_jianma(), output);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nchongguannum(), output);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->bbawangfanbei(), output);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nplayernum(), output);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      12, this->sroomnum(), output);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->splaytime(), output);
  }

  // optional int32 gametype = 14;
  if (has_gametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->gametype(), output);
  }

  // optional bool isOpenTeammate = 15;
  if (has_isopenteammate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isopenteammate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameRuleConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 game_round = 1;
  if (has_game_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_round(), target);
  }

  // optional int32 need_card = 2;
  if (has_need_card()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->need_card(), target);
  }

  // optional bool have_bottom_king = 3;
  if (has_have_bottom_king()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->have_bottom_king(), target);
  }

  // optional bool have_mai_lei = 4;
  if (has_have_mai_lei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->have_mai_lei(), target);
  }

  // optional bool hava_hui_tou = 5;
  if (has_hava_hui_tou()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->hava_hui_tou(), target);
  }

  // optional int32 nMasterSeat = 6;
  if (has_nmasterseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nmasterseat(), target);
  }

  // optional int32 current_game_count = 7;
  if (has_current_game_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_game_count(), target);
  }

  // optional bool have_jianma = 8;
  if (has_have_jianma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->have_jianma(), target);
  }

  // optional int32 nChongguanNum = 9;
  if (has_nchongguannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nchongguannum(), target);
  }

  // optional bool bbawangfanbei = 10;
  if (has_bbawangfanbei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->bbawangfanbei(), target);
  }

  // optional int32 nPlayerNum = 11;
  if (has_nplayernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->nplayernum(), target);
  }

  // optional bytes sRoomNum = 12;
  if (has_sroomnum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->sroomnum(), target);
  }

  // optional bytes sPlayTime = 13;
  if (has_splaytime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->splaytime(), target);
  }

  // optional int32 gametype = 14;
  if (has_gametype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->gametype(), target);
  }

  // optional bool isOpenTeammate = 15;
  if (has_isopenteammate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isopenteammate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameRuleConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 game_round = 1;
    if (has_game_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_round());
    }

    // optional int32 need_card = 2;
    if (has_need_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->need_card());
    }

    // optional bool have_bottom_king = 3;
    if (has_have_bottom_king()) {
      total_size += 1 + 1;
    }

    // optional bool have_mai_lei = 4;
    if (has_have_mai_lei()) {
      total_size += 1 + 1;
    }

    // optional bool hava_hui_tou = 5;
    if (has_hava_hui_tou()) {
      total_size += 1 + 1;
    }

    // optional int32 nMasterSeat = 6;
    if (has_nmasterseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmasterseat());
    }

    // optional int32 current_game_count = 7;
    if (has_current_game_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->current_game_count());
    }

    // optional bool have_jianma = 8;
    if (has_have_jianma()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nChongguanNum = 9;
    if (has_nchongguannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nchongguannum());
    }

    // optional bool bbawangfanbei = 10;
    if (has_bbawangfanbei()) {
      total_size += 1 + 1;
    }

    // optional int32 nPlayerNum = 11;
    if (has_nplayernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nplayernum());
    }

    // optional bytes sRoomNum = 12;
    if (has_sroomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sroomnum());
    }

    // optional bytes sPlayTime = 13;
    if (has_splaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->splaytime());
    }

    // optional int32 gametype = 14;
    if (has_gametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gametype());
    }

    // optional bool isOpenTeammate = 15;
    if (has_isopenteammate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameRuleConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameRuleConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameRuleConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameRuleConfig::MergeFrom(const ProWSKGameRuleConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_round()) {
      set_game_round(from.game_round());
    }
    if (from.has_need_card()) {
      set_need_card(from.need_card());
    }
    if (from.has_have_bottom_king()) {
      set_have_bottom_king(from.have_bottom_king());
    }
    if (from.has_have_mai_lei()) {
      set_have_mai_lei(from.have_mai_lei());
    }
    if (from.has_hava_hui_tou()) {
      set_hava_hui_tou(from.hava_hui_tou());
    }
    if (from.has_nmasterseat()) {
      set_nmasterseat(from.nmasterseat());
    }
    if (from.has_current_game_count()) {
      set_current_game_count(from.current_game_count());
    }
    if (from.has_have_jianma()) {
      set_have_jianma(from.have_jianma());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nchongguannum()) {
      set_nchongguannum(from.nchongguannum());
    }
    if (from.has_bbawangfanbei()) {
      set_bbawangfanbei(from.bbawangfanbei());
    }
    if (from.has_nplayernum()) {
      set_nplayernum(from.nplayernum());
    }
    if (from.has_sroomnum()) {
      set_sroomnum(from.sroomnum());
    }
    if (from.has_splaytime()) {
      set_splaytime(from.splaytime());
    }
    if (from.has_gametype()) {
      set_gametype(from.gametype());
    }
    if (from.has_isopenteammate()) {
      set_isopenteammate(from.isopenteammate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameRuleConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameRuleConfig::CopyFrom(const ProWSKGameRuleConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameRuleConfig::IsInitialized() const {

  return true;
}

void ProWSKGameRuleConfig::Swap(ProWSKGameRuleConfig* other) {
  if (other != this) {
    std::swap(game_round_, other->game_round_);
    std::swap(need_card_, other->need_card_);
    std::swap(have_bottom_king_, other->have_bottom_king_);
    std::swap(have_mai_lei_, other->have_mai_lei_);
    std::swap(hava_hui_tou_, other->hava_hui_tou_);
    std::swap(nmasterseat_, other->nmasterseat_);
    std::swap(current_game_count_, other->current_game_count_);
    std::swap(have_jianma_, other->have_jianma_);
    std::swap(nchongguannum_, other->nchongguannum_);
    std::swap(bbawangfanbei_, other->bbawangfanbei_);
    std::swap(nplayernum_, other->nplayernum_);
    std::swap(sroomnum_, other->sroomnum_);
    std::swap(splaytime_, other->splaytime_);
    std::swap(gametype_, other->gametype_);
    std::swap(isopenteammate_, other->isopenteammate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameRuleConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameRuleConfig_descriptor_;
  metadata.reflection = ProWSKGameRuleConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameBrokenStatus_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenStatus_MSGID_descriptor_;
}
bool ProWSKGameBrokenStatus_MSGID_IsValid(int value) {
  switch(value) {
    case 2228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameBrokenStatus_MSGID ProWSKGameBrokenStatus::ID;
const ProWSKGameBrokenStatus_MSGID ProWSKGameBrokenStatus::MSGID_MIN;
const ProWSKGameBrokenStatus_MSGID ProWSKGameBrokenStatus::MSGID_MAX;
const int ProWSKGameBrokenStatus::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameBrokenStatus::kBrokenSeatFieldNumber;
const int ProWSKGameBrokenStatus::kBrokenStatusFieldNumber;
const int ProWSKGameBrokenStatus::kLeftTimeFieldNumber;
#endif  // !_MSC_VER

ProWSKGameBrokenStatus::ProWSKGameBrokenStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameBrokenStatus::InitAsDefaultInstance() {
}

ProWSKGameBrokenStatus::ProWSKGameBrokenStatus(const ProWSKGameBrokenStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameBrokenStatus::SharedCtor() {
  _cached_size_ = 0;
  broken_seat_ = 0;
  left_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameBrokenStatus::~ProWSKGameBrokenStatus() {
  SharedDtor();
}

void ProWSKGameBrokenStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameBrokenStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameBrokenStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBrokenStatus_descriptor_;
}

const ProWSKGameBrokenStatus& ProWSKGameBrokenStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameBrokenStatus* ProWSKGameBrokenStatus::default_instance_ = NULL;

ProWSKGameBrokenStatus* ProWSKGameBrokenStatus::New() const {
  return new ProWSKGameBrokenStatus;
}

void ProWSKGameBrokenStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    broken_seat_ = 0;
    left_time_ = 0;
  }
  broken_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameBrokenStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 broken_seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broken_seat_)));
          set_has_broken_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        break;
      }

      // repeated bool broken_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broken_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_broken_status())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_broken_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_broken_status;
        if (input->ExpectTag(24)) goto parse_left_time;
        break;
      }

      // optional int32 left_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_time_)));
          set_has_left_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameBrokenStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->broken_seat(), output);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->broken_status(i), output);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameBrokenStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 broken_seat = 1;
  if (has_broken_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->broken_seat(), target);
  }

  // repeated bool broken_status = 2;
  for (int i = 0; i < this->broken_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->broken_status(i), target);
  }

  // optional int32 left_time = 3;
  if (has_left_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameBrokenStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 broken_seat = 1;
    if (has_broken_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broken_seat());
    }

    // optional int32 left_time = 3;
    if (has_left_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_time());
    }

  }
  // repeated bool broken_status = 2;
  {
    int data_size = 0;
    data_size = 1 * this->broken_status_size();
    total_size += 1 * this->broken_status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameBrokenStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameBrokenStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameBrokenStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameBrokenStatus::MergeFrom(const ProWSKGameBrokenStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  broken_status_.MergeFrom(from.broken_status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_broken_seat()) {
      set_broken_seat(from.broken_seat());
    }
    if (from.has_left_time()) {
      set_left_time(from.left_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameBrokenStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameBrokenStatus::CopyFrom(const ProWSKGameBrokenStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameBrokenStatus::IsInitialized() const {

  return true;
}

void ProWSKGameBrokenStatus::Swap(ProWSKGameBrokenStatus* other) {
  if (other != this) {
    std::swap(broken_seat_, other->broken_seat_);
    broken_status_.Swap(&other->broken_status_);
    std::swap(left_time_, other->left_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameBrokenStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameBrokenStatus_descriptor_;
  metadata.reflection = ProWSKGameBrokenStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameDataResp_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDataResp_MSGID_descriptor_;
}
bool ProWSKGameDataResp_MSGID_IsValid(int value) {
  switch(value) {
    case 2229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameDataResp_MSGID ProWSKGameDataResp::ID;
const ProWSKGameDataResp_MSGID ProWSKGameDataResp::MSGID_MIN;
const ProWSKGameDataResp_MSGID ProWSKGameDataResp::MSGID_MAX;
const int ProWSKGameDataResp::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameDataResp::kTotalScoreFieldNumber;
const int ProWSKGameDataResp::kTypeFieldNumber;
#endif  // !_MSC_VER

ProWSKGameDataResp::ProWSKGameDataResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameDataResp::InitAsDefaultInstance() {
}

ProWSKGameDataResp::ProWSKGameDataResp(const ProWSKGameDataResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameDataResp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameDataResp::~ProWSKGameDataResp() {
  SharedDtor();
}

void ProWSKGameDataResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameDataResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameDataResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameDataResp_descriptor_;
}

const ProWSKGameDataResp& ProWSKGameDataResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameDataResp* ProWSKGameDataResp::default_instance_ = NULL;

ProWSKGameDataResp* ProWSKGameDataResp::New() const {
  return new ProWSKGameDataResp;
}

void ProWSKGameDataResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    type_ = 0;
  }
  total_score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameDataResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_total_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_total_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_total_score;
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameDataResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->total_score(i), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameDataResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 total_score = 1;
  for (int i = 0; i < this->total_score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->total_score(i), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameDataResp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 total_score = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->total_score_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->total_score(i));
    }
    total_size += 1 * this->total_score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameDataResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameDataResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameDataResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameDataResp::MergeFrom(const ProWSKGameDataResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  total_score_.MergeFrom(from.total_score_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameDataResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameDataResp::CopyFrom(const ProWSKGameDataResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameDataResp::IsInitialized() const {

  return true;
}

void ProWSKGameDataResp::Swap(ProWSKGameDataResp* other) {
  if (other != this) {
    total_score_.Swap(&other->total_score_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameDataResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameDataResp_descriptor_;
  metadata.reflection = ProWSKGameDataResp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameRecordRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameRecordRequest_MSGID_descriptor_;
}
bool ProWSKGameRecordRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameRecordRequest_MSGID ProWSKGameRecordRequest::ID;
const ProWSKGameRecordRequest_MSGID ProWSKGameRecordRequest::MSGID_MIN;
const ProWSKGameRecordRequest_MSGID ProWSKGameRecordRequest::MSGID_MAX;
const int ProWSKGameRecordRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameRecordRequest::kSeatIdFieldNumber;
const int ProWSKGameRecordRequest::kUrlFieldNumber;
#endif  // !_MSC_VER

ProWSKGameRecordRequest::ProWSKGameRecordRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameRecordRequest::InitAsDefaultInstance() {
}

ProWSKGameRecordRequest::ProWSKGameRecordRequest(const ProWSKGameRecordRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameRecordRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameRecordRequest::~ProWSKGameRecordRequest() {
  SharedDtor();
}

void ProWSKGameRecordRequest::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProWSKGameRecordRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameRecordRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameRecordRequest_descriptor_;
}

const ProWSKGameRecordRequest& ProWSKGameRecordRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameRecordRequest* ProWSKGameRecordRequest::default_instance_ = NULL;

ProWSKGameRecordRequest* ProWSKGameRecordRequest::New() const {
  return new ProWSKGameRecordRequest;
}

void ProWSKGameRecordRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameRecordRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameRecordRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameRecordRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameRecordRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameRecordRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameRecordRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameRecordRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameRecordRequest::MergeFrom(const ProWSKGameRecordRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameRecordRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameRecordRequest::CopyFrom(const ProWSKGameRecordRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameRecordRequest::IsInitialized() const {

  return true;
}

void ProWSKGameRecordRequest::Swap(ProWSKGameRecordRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameRecordRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameRecordRequest_descriptor_;
  metadata.reflection = ProWSKGameRecordRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameRecordResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameRecordResponse_MSGID_descriptor_;
}
bool ProWSKGameRecordResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameRecordResponse_MSGID ProWSKGameRecordResponse::ID;
const ProWSKGameRecordResponse_MSGID ProWSKGameRecordResponse::MSGID_MIN;
const ProWSKGameRecordResponse_MSGID ProWSKGameRecordResponse::MSGID_MAX;
const int ProWSKGameRecordResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameRecordResponse::kSeatIdFieldNumber;
const int ProWSKGameRecordResponse::kUrlFieldNumber;
#endif  // !_MSC_VER

ProWSKGameRecordResponse::ProWSKGameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameRecordResponse::InitAsDefaultInstance() {
}

ProWSKGameRecordResponse::ProWSKGameRecordResponse(const ProWSKGameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameRecordResponse::~ProWSKGameRecordResponse() {
  SharedDtor();
}

void ProWSKGameRecordResponse::SharedDtor() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void ProWSKGameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameRecordResponse_descriptor_;
}

const ProWSKGameRecordResponse& ProWSKGameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameRecordResponse* ProWSKGameRecordResponse::default_instance_ = NULL;

ProWSKGameRecordResponse* ProWSKGameRecordResponse::New() const {
  return new ProWSKGameRecordResponse;
}

void ProWSKGameRecordResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // optional bytes url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional bytes url = 2;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional bytes url = 2;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameRecordResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional bytes url = 2;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameRecordResponse::MergeFrom(const ProWSKGameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameRecordResponse::CopyFrom(const ProWSKGameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameRecordResponse::IsInitialized() const {

  return true;
}

void ProWSKGameRecordResponse::Swap(ProWSKGameRecordResponse* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameRecordResponse_descriptor_;
  metadata.reflection = ProWSKGameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserLocationRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserLocationRequest_MSGID_descriptor_;
}
bool ProWSKGameUserLocationRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserLocationRequest_MSGID ProWSKGameUserLocationRequest::ID;
const ProWSKGameUserLocationRequest_MSGID ProWSKGameUserLocationRequest::MSGID_MIN;
const ProWSKGameUserLocationRequest_MSGID ProWSKGameUserLocationRequest::MSGID_MAX;
const int ProWSKGameUserLocationRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserLocationRequest::kSeatIdFieldNumber;
const int ProWSKGameUserLocationRequest::kDwlongitudeFieldNumber;
const int ProWSKGameUserLocationRequest::kDwlatitudeFieldNumber;
const int ProWSKGameUserLocationRequest::kStrDistrictFieldNumber;
const int ProWSKGameUserLocationRequest::kStrStreetNameFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserLocationRequest::ProWSKGameUserLocationRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserLocationRequest::InitAsDefaultInstance() {
}

ProWSKGameUserLocationRequest::ProWSKGameUserLocationRequest(const ProWSKGameUserLocationRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserLocationRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  dwlongitude_ = 0;
  dwlatitude_ = 0;
  strdistrict_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strstreetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserLocationRequest::~ProWSKGameUserLocationRequest() {
  SharedDtor();
}

void ProWSKGameUserLocationRequest::SharedDtor() {
  if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
    delete strdistrict_;
  }
  if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
    delete strstreetname_;
  }
  if (this != default_instance_) {
  }
}

void ProWSKGameUserLocationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserLocationRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserLocationRequest_descriptor_;
}

const ProWSKGameUserLocationRequest& ProWSKGameUserLocationRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserLocationRequest* ProWSKGameUserLocationRequest::default_instance_ = NULL;

ProWSKGameUserLocationRequest* ProWSKGameUserLocationRequest::New() const {
  return new ProWSKGameUserLocationRequest;
}

void ProWSKGameUserLocationRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    dwlongitude_ = 0;
    dwlatitude_ = 0;
    if (has_strdistrict()) {
      if (strdistrict_ != &::google::protobuf::internal::kEmptyString) {
        strdistrict_->clear();
      }
    }
    if (has_strstreetname()) {
      if (strstreetname_ != &::google::protobuf::internal::kEmptyString) {
        strstreetname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserLocationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_dwlongitude;
        break;
      }

      // optional double dwlongitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlongitude_)));
          set_has_dwlongitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dwlatitude;
        break;
      }

      // optional double dwlatitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dwlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwlatitude_)));
          set_has_dwlatitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strDistrict;
        break;
      }

      // optional bytes strDistrict = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDistrict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdistrict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strStreetName;
        break;
      }

      // optional bytes strStreetName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strStreetName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strstreetname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserLocationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dwlongitude(), output);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dwlatitude(), output);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strdistrict(), output);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strstreetname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserLocationRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional double dwlongitude = 2;
  if (has_dwlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dwlongitude(), target);
  }

  // optional double dwlatitude = 3;
  if (has_dwlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dwlatitude(), target);
  }

  // optional bytes strDistrict = 4;
  if (has_strdistrict()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdistrict(), target);
  }

  // optional bytes strStreetName = 5;
  if (has_strstreetname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strstreetname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserLocationRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional double dwlongitude = 2;
    if (has_dwlongitude()) {
      total_size += 1 + 8;
    }

    // optional double dwlatitude = 3;
    if (has_dwlatitude()) {
      total_size += 1 + 8;
    }

    // optional bytes strDistrict = 4;
    if (has_strdistrict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strdistrict());
    }

    // optional bytes strStreetName = 5;
    if (has_strstreetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strstreetname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserLocationRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserLocationRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserLocationRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserLocationRequest::MergeFrom(const ProWSKGameUserLocationRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_dwlongitude()) {
      set_dwlongitude(from.dwlongitude());
    }
    if (from.has_dwlatitude()) {
      set_dwlatitude(from.dwlatitude());
    }
    if (from.has_strdistrict()) {
      set_strdistrict(from.strdistrict());
    }
    if (from.has_strstreetname()) {
      set_strstreetname(from.strstreetname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserLocationRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserLocationRequest::CopyFrom(const ProWSKGameUserLocationRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserLocationRequest::IsInitialized() const {

  return true;
}

void ProWSKGameUserLocationRequest::Swap(ProWSKGameUserLocationRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(dwlongitude_, other->dwlongitude_);
    std::swap(dwlatitude_, other->dwlatitude_);
    std::swap(strdistrict_, other->strdistrict_);
    std::swap(strstreetname_, other->strstreetname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserLocationRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserLocationRequest_descriptor_;
  metadata.reflection = ProWSKGameUserLocationRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameSyncCardResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSyncCardResponse_MSGID_descriptor_;
}
bool ProWSKGameSyncCardResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameSyncCardResponse_MSGID ProWSKGameSyncCardResponse::ID;
const ProWSKGameSyncCardResponse_MSGID ProWSKGameSyncCardResponse::MSGID_MIN;
const ProWSKGameSyncCardResponse_MSGID ProWSKGameSyncCardResponse::MSGID_MAX;
const int ProWSKGameSyncCardResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameSyncCardResponse::kSeatFieldNumber;
const int ProWSKGameSyncCardResponse::kHandmahsFieldNumber;
#endif  // !_MSC_VER

ProWSKGameSyncCardResponse::ProWSKGameSyncCardResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameSyncCardResponse::InitAsDefaultInstance() {
}

ProWSKGameSyncCardResponse::ProWSKGameSyncCardResponse(const ProWSKGameSyncCardResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameSyncCardResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameSyncCardResponse::~ProWSKGameSyncCardResponse() {
  SharedDtor();
}

void ProWSKGameSyncCardResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameSyncCardResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameSyncCardResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameSyncCardResponse_descriptor_;
}

const ProWSKGameSyncCardResponse& ProWSKGameSyncCardResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameSyncCardResponse* ProWSKGameSyncCardResponse::default_instance_ = NULL;

ProWSKGameSyncCardResponse* ProWSKGameSyncCardResponse::New() const {
  return new ProWSKGameSyncCardResponse;
}

void ProWSKGameSyncCardResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  handmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameSyncCardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        break;
      }

      // repeated int32 handmahs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handmahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_handmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_handmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_handmahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameSyncCardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->handmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameSyncCardResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  // repeated int32 handmahs = 3;
  for (int i = 0; i < this->handmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->handmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameSyncCardResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  // repeated int32 handmahs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->handmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->handmahs(i));
    }
    total_size += 1 * this->handmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameSyncCardResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameSyncCardResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameSyncCardResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameSyncCardResponse::MergeFrom(const ProWSKGameSyncCardResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  handmahs_.MergeFrom(from.handmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameSyncCardResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameSyncCardResponse::CopyFrom(const ProWSKGameSyncCardResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameSyncCardResponse::IsInitialized() const {

  return true;
}

void ProWSKGameSyncCardResponse::Swap(ProWSKGameSyncCardResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    handmahs_.Swap(&other->handmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameSyncCardResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameSyncCardResponse_descriptor_;
  metadata.reflection = ProWSKGameSyncCardResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserPhoneStatusRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserPhoneStatusRequest_MSGID_descriptor_;
}
bool ProWSKGameUserPhoneStatusRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserPhoneStatusRequest_MSGID ProWSKGameUserPhoneStatusRequest::ID;
const ProWSKGameUserPhoneStatusRequest_MSGID ProWSKGameUserPhoneStatusRequest::MSGID_MIN;
const ProWSKGameUserPhoneStatusRequest_MSGID ProWSKGameUserPhoneStatusRequest::MSGID_MAX;
const int ProWSKGameUserPhoneStatusRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserPhoneStatusRequest::kSeatIdFieldNumber;
const int ProWSKGameUserPhoneStatusRequest::kUserstatusFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserPhoneStatusRequest::ProWSKGameUserPhoneStatusRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserPhoneStatusRequest::InitAsDefaultInstance() {
}

ProWSKGameUserPhoneStatusRequest::ProWSKGameUserPhoneStatusRequest(const ProWSKGameUserPhoneStatusRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserPhoneStatusRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserPhoneStatusRequest::~ProWSKGameUserPhoneStatusRequest() {
  SharedDtor();
}

void ProWSKGameUserPhoneStatusRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserPhoneStatusRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserPhoneStatusRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserPhoneStatusRequest_descriptor_;
}

const ProWSKGameUserPhoneStatusRequest& ProWSKGameUserPhoneStatusRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserPhoneStatusRequest* ProWSKGameUserPhoneStatusRequest::default_instance_ = NULL;

ProWSKGameUserPhoneStatusRequest* ProWSKGameUserPhoneStatusRequest::New() const {
  return new ProWSKGameUserPhoneStatusRequest;
}

void ProWSKGameUserPhoneStatusRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
    userstatus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserPhoneStatusRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // optional int32 userstatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserPhoneStatusRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserPhoneStatusRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  // optional int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserPhoneStatusRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserPhoneStatusRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserPhoneStatusRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserPhoneStatusRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserPhoneStatusRequest::MergeFrom(const ProWSKGameUserPhoneStatusRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserPhoneStatusRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserPhoneStatusRequest::CopyFrom(const ProWSKGameUserPhoneStatusRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserPhoneStatusRequest::IsInitialized() const {

  return true;
}

void ProWSKGameUserPhoneStatusRequest::Swap(ProWSKGameUserPhoneStatusRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserPhoneStatusRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserPhoneStatusRequest_descriptor_;
  metadata.reflection = ProWSKGameUserPhoneStatusRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserGiveUpRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserGiveUpRequest_MSGID_descriptor_;
}
bool ProWSKGameUserGiveUpRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserGiveUpRequest_MSGID ProWSKGameUserGiveUpRequest::ID;
const ProWSKGameUserGiveUpRequest_MSGID ProWSKGameUserGiveUpRequest::MSGID_MIN;
const ProWSKGameUserGiveUpRequest_MSGID ProWSKGameUserGiveUpRequest::MSGID_MAX;
const int ProWSKGameUserGiveUpRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserGiveUpRequest::kSeatIdFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserGiveUpRequest::ProWSKGameUserGiveUpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserGiveUpRequest::InitAsDefaultInstance() {
}

ProWSKGameUserGiveUpRequest::ProWSKGameUserGiveUpRequest(const ProWSKGameUserGiveUpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserGiveUpRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserGiveUpRequest::~ProWSKGameUserGiveUpRequest() {
  SharedDtor();
}

void ProWSKGameUserGiveUpRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserGiveUpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserGiveUpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserGiveUpRequest_descriptor_;
}

const ProWSKGameUserGiveUpRequest& ProWSKGameUserGiveUpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserGiveUpRequest* ProWSKGameUserGiveUpRequest::default_instance_ = NULL;

ProWSKGameUserGiveUpRequest* ProWSKGameUserGiveUpRequest::New() const {
  return new ProWSKGameUserGiveUpRequest;
}

void ProWSKGameUserGiveUpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserGiveUpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserGiveUpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserGiveUpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserGiveUpRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserGiveUpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserGiveUpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserGiveUpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserGiveUpRequest::MergeFrom(const ProWSKGameUserGiveUpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserGiveUpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserGiveUpRequest::CopyFrom(const ProWSKGameUserGiveUpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserGiveUpRequest::IsInitialized() const {

  return true;
}

void ProWSKGameUserGiveUpRequest::Swap(ProWSKGameUserGiveUpRequest* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserGiveUpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserGiveUpRequest_descriptor_;
  metadata.reflection = ProWSKGameUserGiveUpRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserHintRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserHintRequest_MSGID_descriptor_;
}
bool ProWSKGameUserHintRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserHintRequest_MSGID ProWSKGameUserHintRequest::ID;
const ProWSKGameUserHintRequest_MSGID ProWSKGameUserHintRequest::MSGID_MIN;
const ProWSKGameUserHintRequest_MSGID ProWSKGameUserHintRequest::MSGID_MAX;
const int ProWSKGameUserHintRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

ProWSKGameUserHintRequest::ProWSKGameUserHintRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserHintRequest::InitAsDefaultInstance() {
}

ProWSKGameUserHintRequest::ProWSKGameUserHintRequest(const ProWSKGameUserHintRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserHintRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserHintRequest::~ProWSKGameUserHintRequest() {
  SharedDtor();
}

void ProWSKGameUserHintRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserHintRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserHintRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserHintRequest_descriptor_;
}

const ProWSKGameUserHintRequest& ProWSKGameUserHintRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserHintRequest* ProWSKGameUserHintRequest::default_instance_ = NULL;

ProWSKGameUserHintRequest* ProWSKGameUserHintRequest::New() const {
  return new ProWSKGameUserHintRequest;
}

void ProWSKGameUserHintRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserHintRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProWSKGameUserHintRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserHintRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserHintRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserHintRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserHintRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserHintRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserHintRequest::MergeFrom(const ProWSKGameUserHintRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserHintRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserHintRequest::CopyFrom(const ProWSKGameUserHintRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserHintRequest::IsInitialized() const {

  return true;
}

void ProWSKGameUserHintRequest::Swap(ProWSKGameUserHintRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserHintRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserHintRequest_descriptor_;
  metadata.reflection = ProWSKGameUserHintRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserHintResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserHintResponse_MSGID_descriptor_;
}
bool ProWSKGameUserHintResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserHintResponse_MSGID ProWSKGameUserHintResponse::ID;
const ProWSKGameUserHintResponse_MSGID ProWSKGameUserHintResponse::MSGID_MIN;
const ProWSKGameUserHintResponse_MSGID ProWSKGameUserHintResponse::MSGID_MAX;
const int ProWSKGameUserHintResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserHintResponse::kLenthFieldNumber;
const int ProWSKGameUserHintResponse::kOutMahsFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserHintResponse::ProWSKGameUserHintResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserHintResponse::InitAsDefaultInstance() {
}

ProWSKGameUserHintResponse::ProWSKGameUserHintResponse(const ProWSKGameUserHintResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserHintResponse::SharedCtor() {
  _cached_size_ = 0;
  lenth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserHintResponse::~ProWSKGameUserHintResponse() {
  SharedDtor();
}

void ProWSKGameUserHintResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserHintResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserHintResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserHintResponse_descriptor_;
}

const ProWSKGameUserHintResponse& ProWSKGameUserHintResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserHintResponse* ProWSKGameUserHintResponse::default_instance_ = NULL;

ProWSKGameUserHintResponse* ProWSKGameUserHintResponse::New() const {
  return new ProWSKGameUserHintResponse;
}

void ProWSKGameUserHintResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lenth_ = 0;
  }
  outmahs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserHintResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lenth = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lenth_)));
          set_has_lenth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        break;
      }

      // repeated int32 outMahs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outMahs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_outmahs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_outmahs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_outMahs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserHintResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lenth(), output);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->outmahs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserHintResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lenth = 1;
  if (has_lenth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lenth(), target);
  }

  // repeated int32 outMahs = 2;
  for (int i = 0; i < this->outmahs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->outmahs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserHintResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lenth = 1;
    if (has_lenth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lenth());
    }

  }
  // repeated int32 outMahs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->outmahs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->outmahs(i));
    }
    total_size += 1 * this->outmahs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserHintResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserHintResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserHintResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserHintResponse::MergeFrom(const ProWSKGameUserHintResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  outmahs_.MergeFrom(from.outmahs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lenth()) {
      set_lenth(from.lenth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserHintResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserHintResponse::CopyFrom(const ProWSKGameUserHintResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserHintResponse::IsInitialized() const {

  return true;
}

void ProWSKGameUserHintResponse::Swap(ProWSKGameUserHintResponse* other) {
  if (other != this) {
    std::swap(lenth_, other->lenth_);
    outmahs_.Swap(&other->outmahs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserHintResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserHintResponse_descriptor_;
  metadata.reflection = ProWSKGameUserHintResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuNotify_MSGID_descriptor_;
}
bool ProWSKGameUserDaTuNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserDaTuNotify_MSGID ProWSKGameUserDaTuNotify::ID;
const ProWSKGameUserDaTuNotify_MSGID ProWSKGameUserDaTuNotify::MSGID_MIN;
const ProWSKGameUserDaTuNotify_MSGID ProWSKGameUserDaTuNotify::MSGID_MAX;
const int ProWSKGameUserDaTuNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserDaTuNotify::kSeatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserDaTuNotify::ProWSKGameUserDaTuNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserDaTuNotify::InitAsDefaultInstance() {
}

ProWSKGameUserDaTuNotify::ProWSKGameUserDaTuNotify(const ProWSKGameUserDaTuNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserDaTuNotify::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserDaTuNotify::~ProWSKGameUserDaTuNotify() {
  SharedDtor();
}

void ProWSKGameUserDaTuNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserDaTuNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuNotify_descriptor_;
}

const ProWSKGameUserDaTuNotify& ProWSKGameUserDaTuNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserDaTuNotify* ProWSKGameUserDaTuNotify::default_instance_ = NULL;

ProWSKGameUserDaTuNotify* ProWSKGameUserDaTuNotify::New() const {
  return new ProWSKGameUserDaTuNotify;
}

void ProWSKGameUserDaTuNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserDaTuNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserDaTuNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserDaTuNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserDaTuNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserDaTuNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserDaTuNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserDaTuNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserDaTuNotify::MergeFrom(const ProWSKGameUserDaTuNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserDaTuNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserDaTuNotify::CopyFrom(const ProWSKGameUserDaTuNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserDaTuNotify::IsInitialized() const {

  return true;
}

void ProWSKGameUserDaTuNotify::Swap(ProWSKGameUserDaTuNotify* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserDaTuNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserDaTuNotify_descriptor_;
  metadata.reflection = ProWSKGameUserDaTuNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserTeammateRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserTeammateRequest_MSGID_descriptor_;
}
bool ProWSKGameUserTeammateRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserTeammateRequest_MSGID ProWSKGameUserTeammateRequest::ID;
const ProWSKGameUserTeammateRequest_MSGID ProWSKGameUserTeammateRequest::MSGID_MIN;
const ProWSKGameUserTeammateRequest_MSGID ProWSKGameUserTeammateRequest::MSGID_MAX;
const int ProWSKGameUserTeammateRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserTeammateRequest::kBankerMateSeatFieldNumber;
const int ProWSKGameUserTeammateRequest::kMateCardFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserTeammateRequest::ProWSKGameUserTeammateRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserTeammateRequest::InitAsDefaultInstance() {
}

ProWSKGameUserTeammateRequest::ProWSKGameUserTeammateRequest(const ProWSKGameUserTeammateRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserTeammateRequest::SharedCtor() {
  _cached_size_ = 0;
  bankermateseat_ = 0;
  matecard_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserTeammateRequest::~ProWSKGameUserTeammateRequest() {
  SharedDtor();
}

void ProWSKGameUserTeammateRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserTeammateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserTeammateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserTeammateRequest_descriptor_;
}

const ProWSKGameUserTeammateRequest& ProWSKGameUserTeammateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserTeammateRequest* ProWSKGameUserTeammateRequest::default_instance_ = NULL;

ProWSKGameUserTeammateRequest* ProWSKGameUserTeammateRequest::New() const {
  return new ProWSKGameUserTeammateRequest;
}

void ProWSKGameUserTeammateRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bankermateseat_ = 0;
    matecard_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserTeammateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bankerMateSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bankermateseat_)));
          set_has_bankermateseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mateCard;
        break;
      }

      // optional int32 mateCard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mateCard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matecard_)));
          set_has_matecard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserTeammateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bankerMateSeat = 1;
  if (has_bankermateseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bankermateseat(), output);
  }

  // optional int32 mateCard = 2;
  if (has_matecard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->matecard(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserTeammateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bankerMateSeat = 1;
  if (has_bankermateseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bankermateseat(), target);
  }

  // optional int32 mateCard = 2;
  if (has_matecard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->matecard(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserTeammateRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bankerMateSeat = 1;
    if (has_bankermateseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bankermateseat());
    }

    // optional int32 mateCard = 2;
    if (has_matecard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matecard());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserTeammateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserTeammateRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserTeammateRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserTeammateRequest::MergeFrom(const ProWSKGameUserTeammateRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bankermateseat()) {
      set_bankermateseat(from.bankermateseat());
    }
    if (from.has_matecard()) {
      set_matecard(from.matecard());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserTeammateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserTeammateRequest::CopyFrom(const ProWSKGameUserTeammateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserTeammateRequest::IsInitialized() const {

  return true;
}

void ProWSKGameUserTeammateRequest::Swap(ProWSKGameUserTeammateRequest* other) {
  if (other != this) {
    std::swap(bankermateseat_, other->bankermateseat_);
    std::swap(matecard_, other->matecard_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserTeammateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserTeammateRequest_descriptor_;
  metadata.reflection = ProWSKGameUserTeammateRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuRequest_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuRequest_MSGID_descriptor_;
}
bool ProWSKGameUserDaTuRequest_MSGID_IsValid(int value) {
  switch(value) {
    case 2240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserDaTuRequest_MSGID ProWSKGameUserDaTuRequest::ID;
const ProWSKGameUserDaTuRequest_MSGID ProWSKGameUserDaTuRequest::MSGID_MIN;
const ProWSKGameUserDaTuRequest_MSGID ProWSKGameUserDaTuRequest::MSGID_MAX;
const int ProWSKGameUserDaTuRequest::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserDaTuRequest::kSeatFieldNumber;
const int ProWSKGameUserDaTuRequest::kBIsDaTuFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserDaTuRequest::ProWSKGameUserDaTuRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserDaTuRequest::InitAsDefaultInstance() {
}

ProWSKGameUserDaTuRequest::ProWSKGameUserDaTuRequest(const ProWSKGameUserDaTuRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserDaTuRequest::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserDaTuRequest::~ProWSKGameUserDaTuRequest() {
  SharedDtor();
}

void ProWSKGameUserDaTuRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserDaTuRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuRequest_descriptor_;
}

const ProWSKGameUserDaTuRequest& ProWSKGameUserDaTuRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserDaTuRequest* ProWSKGameUserDaTuRequest::default_instance_ = NULL;

ProWSKGameUserDaTuRequest* ProWSKGameUserDaTuRequest::New() const {
  return new ProWSKGameUserDaTuRequest;
}

void ProWSKGameUserDaTuRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserDaTuRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserDaTuRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserDaTuRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserDaTuRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserDaTuRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserDaTuRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserDaTuRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserDaTuRequest::MergeFrom(const ProWSKGameUserDaTuRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserDaTuRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserDaTuRequest::CopyFrom(const ProWSKGameUserDaTuRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserDaTuRequest::IsInitialized() const {

  return true;
}

void ProWSKGameUserDaTuRequest::Swap(ProWSKGameUserDaTuRequest* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserDaTuRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserDaTuRequest_descriptor_;
  metadata.reflection = ProWSKGameUserDaTuRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuResponse_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuResponse_MSGID_descriptor_;
}
bool ProWSKGameUserDaTuResponse_MSGID_IsValid(int value) {
  switch(value) {
    case 2241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserDaTuResponse_MSGID ProWSKGameUserDaTuResponse::ID;
const ProWSKGameUserDaTuResponse_MSGID ProWSKGameUserDaTuResponse::MSGID_MIN;
const ProWSKGameUserDaTuResponse_MSGID ProWSKGameUserDaTuResponse::MSGID_MAX;
const int ProWSKGameUserDaTuResponse::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserDaTuResponse::kSeatFieldNumber;
const int ProWSKGameUserDaTuResponse::kBIsDaTuFieldNumber;
const int ProWSKGameUserDaTuResponse::kNextSeatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserDaTuResponse::ProWSKGameUserDaTuResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserDaTuResponse::InitAsDefaultInstance() {
}

ProWSKGameUserDaTuResponse::ProWSKGameUserDaTuResponse(const ProWSKGameUserDaTuResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserDaTuResponse::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  nextseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserDaTuResponse::~ProWSKGameUserDaTuResponse() {
  SharedDtor();
}

void ProWSKGameUserDaTuResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserDaTuResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuResponse_descriptor_;
}

const ProWSKGameUserDaTuResponse& ProWSKGameUserDaTuResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserDaTuResponse* ProWSKGameUserDaTuResponse::default_instance_ = NULL;

ProWSKGameUserDaTuResponse* ProWSKGameUserDaTuResponse::New() const {
  return new ProWSKGameUserDaTuResponse;
}

void ProWSKGameUserDaTuResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
    nextseat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserDaTuResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nextSeat;
        break;
      }

      // optional int32 nextSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextseat_)));
          set_has_nextseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserDaTuResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  // optional int32 nextSeat = 3;
  if (has_nextseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nextseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserDaTuResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  // optional int32 nextSeat = 3;
  if (has_nextseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nextseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserDaTuResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

    // optional int32 nextSeat = 3;
    if (has_nextseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextseat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserDaTuResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserDaTuResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserDaTuResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserDaTuResponse::MergeFrom(const ProWSKGameUserDaTuResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
    if (from.has_nextseat()) {
      set_nextseat(from.nextseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserDaTuResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserDaTuResponse::CopyFrom(const ProWSKGameUserDaTuResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserDaTuResponse::IsInitialized() const {

  return true;
}

void ProWSKGameUserDaTuResponse::Swap(ProWSKGameUserDaTuResponse* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(nextseat_, other->nextseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserDaTuResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserDaTuResponse_descriptor_;
  metadata.reflection = ProWSKGameUserDaTuResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameUserDaTuResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuResult_MSGID_descriptor_;
}
bool ProWSKGameUserDaTuResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameUserDaTuResult_MSGID ProWSKGameUserDaTuResult::ID;
const ProWSKGameUserDaTuResult_MSGID ProWSKGameUserDaTuResult::MSGID_MIN;
const ProWSKGameUserDaTuResult_MSGID ProWSKGameUserDaTuResult::MSGID_MAX;
const int ProWSKGameUserDaTuResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameUserDaTuResult::kSeatFieldNumber;
const int ProWSKGameUserDaTuResult::kBIsDaTuFieldNumber;
#endif  // !_MSC_VER

ProWSKGameUserDaTuResult::ProWSKGameUserDaTuResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameUserDaTuResult::InitAsDefaultInstance() {
}

ProWSKGameUserDaTuResult::ProWSKGameUserDaTuResult(const ProWSKGameUserDaTuResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameUserDaTuResult::SharedCtor() {
  _cached_size_ = 0;
  seat_ = 0;
  bisdatu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameUserDaTuResult::~ProWSKGameUserDaTuResult() {
  SharedDtor();
}

void ProWSKGameUserDaTuResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameUserDaTuResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameUserDaTuResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameUserDaTuResult_descriptor_;
}

const ProWSKGameUserDaTuResult& ProWSKGameUserDaTuResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameUserDaTuResult* ProWSKGameUserDaTuResult::default_instance_ = NULL;

ProWSKGameUserDaTuResult* ProWSKGameUserDaTuResult::New() const {
  return new ProWSKGameUserDaTuResult;
}

void ProWSKGameUserDaTuResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_ = 0;
    bisdatu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameUserDaTuResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsDaTu;
        break;
      }

      // optional bool bIsDaTu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsDaTu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisdatu_)));
          set_has_bisdatu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameUserDaTuResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat(), output);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisdatu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameUserDaTuResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat = 1;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat(), target);
  }

  // optional bool bIsDaTu = 2;
  if (has_bisdatu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisdatu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameUserDaTuResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat = 1;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

    // optional bool bIsDaTu = 2;
    if (has_bisdatu()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameUserDaTuResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameUserDaTuResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameUserDaTuResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameUserDaTuResult::MergeFrom(const ProWSKGameUserDaTuResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat()) {
      set_seat(from.seat());
    }
    if (from.has_bisdatu()) {
      set_bisdatu(from.bisdatu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameUserDaTuResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameUserDaTuResult::CopyFrom(const ProWSKGameUserDaTuResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameUserDaTuResult::IsInitialized() const {

  return true;
}

void ProWSKGameUserDaTuResult::Swap(ProWSKGameUserDaTuResult* other) {
  if (other != this) {
    std::swap(seat_, other->seat_);
    std::swap(bisdatu_, other->bisdatu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameUserDaTuResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameUserDaTuResult_descriptor_;
  metadata.reflection = ProWSKGameUserDaTuResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameShangYouResult_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameShangYouResult_MSGID_descriptor_;
}
bool ProWSKGameShangYouResult_MSGID_IsValid(int value) {
  switch(value) {
    case 2243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameShangYouResult_MSGID ProWSKGameShangYouResult::ID;
const ProWSKGameShangYouResult_MSGID ProWSKGameShangYouResult::MSGID_MIN;
const ProWSKGameShangYouResult_MSGID ProWSKGameShangYouResult::MSGID_MAX;
const int ProWSKGameShangYouResult::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameShangYouResult::kShangyouSeatFieldNumber;
#endif  // !_MSC_VER

ProWSKGameShangYouResult::ProWSKGameShangYouResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameShangYouResult::InitAsDefaultInstance() {
}

ProWSKGameShangYouResult::ProWSKGameShangYouResult(const ProWSKGameShangYouResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameShangYouResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameShangYouResult::~ProWSKGameShangYouResult() {
  SharedDtor();
}

void ProWSKGameShangYouResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameShangYouResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameShangYouResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameShangYouResult_descriptor_;
}

const ProWSKGameShangYouResult& ProWSKGameShangYouResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameShangYouResult* ProWSKGameShangYouResult::default_instance_ = NULL;

ProWSKGameShangYouResult* ProWSKGameShangYouResult::New() const {
  return new ProWSKGameShangYouResult;
}

void ProWSKGameShangYouResult::Clear() {
  shangyouseat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameShangYouResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 shangyouSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shangyouSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_shangyouseat())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shangyouseat())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_shangyouSeat;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameShangYouResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 shangyouSeat = 1;
  for (int i = 0; i < this->shangyouseat_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->shangyouseat(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameShangYouResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 shangyouSeat = 1;
  for (int i = 0; i < this->shangyouseat_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->shangyouseat(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameShangYouResult::ByteSize() const {
  int total_size = 0;

  // repeated int32 shangyouSeat = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->shangyouseat_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->shangyouseat(i));
    }
    total_size += 1 * this->shangyouseat_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameShangYouResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameShangYouResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameShangYouResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameShangYouResult::MergeFrom(const ProWSKGameShangYouResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  shangyouseat_.MergeFrom(from.shangyouseat_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameShangYouResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameShangYouResult::CopyFrom(const ProWSKGameShangYouResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameShangYouResult::IsInitialized() const {

  return true;
}

void ProWSKGameShangYouResult::Swap(ProWSKGameShangYouResult* other) {
  if (other != this) {
    shangyouseat_.Swap(&other->shangyouseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameShangYouResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameShangYouResult_descriptor_;
  metadata.reflection = ProWSKGameShangYouResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameShowFriendNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameShowFriendNotify_MSGID_descriptor_;
}
bool ProWSKGameShowFriendNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameShowFriendNotify_MSGID ProWSKGameShowFriendNotify::ID;
const ProWSKGameShowFriendNotify_MSGID ProWSKGameShowFriendNotify::MSGID_MIN;
const ProWSKGameShowFriendNotify_MSGID ProWSKGameShowFriendNotify::MSGID_MAX;
const int ProWSKGameShowFriendNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameShowFriendNotify::kBShowFieldNumber;
#endif  // !_MSC_VER

ProWSKGameShowFriendNotify::ProWSKGameShowFriendNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameShowFriendNotify::InitAsDefaultInstance() {
}

ProWSKGameShowFriendNotify::ProWSKGameShowFriendNotify(const ProWSKGameShowFriendNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameShowFriendNotify::SharedCtor() {
  _cached_size_ = 0;
  bshow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameShowFriendNotify::~ProWSKGameShowFriendNotify() {
  SharedDtor();
}

void ProWSKGameShowFriendNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameShowFriendNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameShowFriendNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameShowFriendNotify_descriptor_;
}

const ProWSKGameShowFriendNotify& ProWSKGameShowFriendNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameShowFriendNotify* ProWSKGameShowFriendNotify::default_instance_ = NULL;

ProWSKGameShowFriendNotify* ProWSKGameShowFriendNotify::New() const {
  return new ProWSKGameShowFriendNotify;
}

void ProWSKGameShowFriendNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bshow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameShowFriendNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bShow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bshow_)));
          set_has_bshow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameShowFriendNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bShow = 1;
  if (has_bshow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bshow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameShowFriendNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bShow = 1;
  if (has_bshow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bshow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameShowFriendNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bShow = 1;
    if (has_bshow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameShowFriendNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameShowFriendNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameShowFriendNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameShowFriendNotify::MergeFrom(const ProWSKGameShowFriendNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bshow()) {
      set_bshow(from.bshow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameShowFriendNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameShowFriendNotify::CopyFrom(const ProWSKGameShowFriendNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameShowFriendNotify::IsInitialized() const {

  return true;
}

void ProWSKGameShowFriendNotify::Swap(ProWSKGameShowFriendNotify* other) {
  if (other != this) {
    std::swap(bshow_, other->bshow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameShowFriendNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameShowFriendNotify_descriptor_;
  metadata.reflection = ProWSKGameShowFriendNotify_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProWSKGameBoomNumNotify_MSGID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBoomNumNotify_MSGID_descriptor_;
}
bool ProWSKGameBoomNumNotify_MSGID_IsValid(int value) {
  switch(value) {
    case 2245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProWSKGameBoomNumNotify_MSGID ProWSKGameBoomNumNotify::ID;
const ProWSKGameBoomNumNotify_MSGID ProWSKGameBoomNumNotify::MSGID_MIN;
const ProWSKGameBoomNumNotify_MSGID ProWSKGameBoomNumNotify::MSGID_MAX;
const int ProWSKGameBoomNumNotify::MSGID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProWSKGameBoomNumNotify::kNSeatFieldNumber;
const int ProWSKGameBoomNumNotify::kNBoomNumFieldNumber;
#endif  // !_MSC_VER

ProWSKGameBoomNumNotify::ProWSKGameBoomNumNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProWSKGameBoomNumNotify::InitAsDefaultInstance() {
}

ProWSKGameBoomNumNotify::ProWSKGameBoomNumNotify(const ProWSKGameBoomNumNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProWSKGameBoomNumNotify::SharedCtor() {
  _cached_size_ = 0;
  nseat_ = 0;
  nboomnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProWSKGameBoomNumNotify::~ProWSKGameBoomNumNotify() {
  SharedDtor();
}

void ProWSKGameBoomNumNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProWSKGameBoomNumNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProWSKGameBoomNumNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProWSKGameBoomNumNotify_descriptor_;
}

const ProWSKGameBoomNumNotify& ProWSKGameBoomNumNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kkpk_2eproto();
  return *default_instance_;
}

ProWSKGameBoomNumNotify* ProWSKGameBoomNumNotify::default_instance_ = NULL;

ProWSKGameBoomNumNotify* ProWSKGameBoomNumNotify::New() const {
  return new ProWSKGameBoomNumNotify;
}

void ProWSKGameBoomNumNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nseat_ = 0;
    nboomnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProWSKGameBoomNumNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nseat_)));
          set_has_nseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nBoomNum;
        break;
      }

      // optional int32 nBoomNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nBoomNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nboomnum_)));
          set_has_nboomnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProWSKGameBoomNumNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nseat(), output);
  }

  // optional int32 nBoomNum = 2;
  if (has_nboomnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nboomnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProWSKGameBoomNumNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 nSeat = 1;
  if (has_nseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nseat(), target);
  }

  // optional int32 nBoomNum = 2;
  if (has_nboomnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nboomnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProWSKGameBoomNumNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 nSeat = 1;
    if (has_nseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nseat());
    }

    // optional int32 nBoomNum = 2;
    if (has_nboomnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nboomnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProWSKGameBoomNumNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProWSKGameBoomNumNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProWSKGameBoomNumNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProWSKGameBoomNumNotify::MergeFrom(const ProWSKGameBoomNumNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nseat()) {
      set_nseat(from.nseat());
    }
    if (from.has_nboomnum()) {
      set_nboomnum(from.nboomnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProWSKGameBoomNumNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProWSKGameBoomNumNotify::CopyFrom(const ProWSKGameBoomNumNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProWSKGameBoomNumNotify::IsInitialized() const {

  return true;
}

void ProWSKGameBoomNumNotify::Swap(ProWSKGameBoomNumNotify* other) {
  if (other != this) {
    std::swap(nseat_, other->nseat_);
    std::swap(nboomnum_, other->nboomnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProWSKGameBoomNumNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProWSKGameBoomNumNotify_descriptor_;
  metadata.reflection = ProWSKGameBoomNumNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
